// Generated by internal/cmd/syscalls/generate.go

#include "textflag.h"

// func importRead() uint64
TEXT ·importRead(SB),$0-8
	LEAQ	sysRead<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysRead<>(SB),NOSPLIT,$0
	MOVQ	24(SP), DI
	MOVQ	16(SP), SI
	ANDL	SI, SI
	JZ	null2
	ADDQ	R14, SI
null2:	MOVQ	8(SP), DX
	MOVL	$0, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importWrite() uint64
TEXT ·importWrite(SB),$0-8
	LEAQ	sysWrite<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysWrite<>(SB),NOSPLIT,$0
	MOVQ	24(SP), DI
	MOVQ	16(SP), SI
	ANDL	SI, SI
	JZ	null2
	ADDQ	R14, SI
null2:	MOVQ	8(SP), DX
	MOVL	$1, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importClose() uint64
TEXT ·importClose(SB),$0-8
	LEAQ	sysClose<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysClose<>(SB),NOSPLIT,$0
	MOVQ	8(SP), DI
	MOVL	$3, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importLseek() uint64
TEXT ·importLseek(SB),$0-8
	LEAQ	sysLseek<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysLseek<>(SB),NOSPLIT,$0
	MOVQ	24(SP), DI
	MOVQ	16(SP), SI
	MOVQ	8(SP), DX
	MOVL	$8, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importPread() uint64
TEXT ·importPread(SB),$0-8
	LEAQ	sysPread<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysPread<>(SB),NOSPLIT,$0
	MOVQ	32(SP), DI
	MOVQ	24(SP), SI
	ANDL	SI, SI
	JZ	null2
	ADDQ	R14, SI
null2:	MOVQ	16(SP), DX
	MOVQ	8(SP), R10
	MOVL	$17, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importPwrite() uint64
TEXT ·importPwrite(SB),$0-8
	LEAQ	sysPwrite<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysPwrite<>(SB),NOSPLIT,$0
	MOVQ	32(SP), DI
	MOVQ	24(SP), SI
	ANDL	SI, SI
	JZ	null2
	ADDQ	R14, SI
null2:	MOVQ	16(SP), DX
	MOVQ	8(SP), R10
	MOVL	$18, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importDup() uint64
TEXT ·importDup(SB),$0-8
	LEAQ	sysDup<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysDup<>(SB),NOSPLIT,$0
	MOVQ	8(SP), DI
	MOVL	$32, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importGetpid() uint64
TEXT ·importGetpid(SB),$0-8
	LEAQ	sysGetpid<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysGetpid<>(SB),NOSPLIT,$0
	MOVL	$39, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importSendfile() uint64
TEXT ·importSendfile(SB),$0-8
	LEAQ	sysSendfile<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysSendfile<>(SB),NOSPLIT,$0
	MOVQ	32(SP), DI
	MOVQ	24(SP), SI
	MOVQ	16(SP), DX
	ANDL	DX, DX
	JZ	null3
	ADDQ	R14, DX
null3:	MOVQ	8(SP), R10
	MOVL	$40, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importShutdown() uint64
TEXT ·importShutdown(SB),$0-8
	LEAQ	sysShutdown<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysShutdown<>(SB),NOSPLIT,$0
	MOVQ	16(SP), DI
	MOVQ	8(SP), SI
	MOVL	$48, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importSocketpair() uint64
TEXT ·importSocketpair(SB),$0-8
	LEAQ	sysSocketpair<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysSocketpair<>(SB),NOSPLIT,$0
	MOVQ	32(SP), DI
	MOVQ	24(SP), SI
	MOVQ	16(SP), DX
	MOVQ	8(SP), R10
	ANDL	R10, R10
	JZ	null4
	ADDQ	R14, R10
null4:	MOVL	$53, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importFlock() uint64
TEXT ·importFlock(SB),$0-8
	LEAQ	sysFlock<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysFlock<>(SB),NOSPLIT,$0
	MOVQ	16(SP), DI
	MOVQ	8(SP), SI
	MOVL	$73, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importFsync() uint64
TEXT ·importFsync(SB),$0-8
	LEAQ	sysFsync<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysFsync<>(SB),NOSPLIT,$0
	MOVQ	8(SP), DI
	MOVL	$74, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importFdatasync() uint64
TEXT ·importFdatasync(SB),$0-8
	LEAQ	sysFdatasync<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysFdatasync<>(SB),NOSPLIT,$0
	MOVQ	8(SP), DI
	MOVL	$75, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importTruncate() uint64
TEXT ·importTruncate(SB),$0-8
	LEAQ	sysTruncate<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysTruncate<>(SB),NOSPLIT,$0
	MOVQ	16(SP), DI
	ANDL	DI, DI
	JZ	null1
	ADDQ	R14, DI
null1:	MOVQ	8(SP), SI
	MOVL	$76, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importFtruncate() uint64
TEXT ·importFtruncate(SB),$0-8
	LEAQ	sysFtruncate<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysFtruncate<>(SB),NOSPLIT,$0
	MOVQ	16(SP), DI
	MOVQ	8(SP), SI
	MOVL	$77, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importGetcwd() uint64
TEXT ·importGetcwd(SB),$0-8
	LEAQ	sysGetcwd<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysGetcwd<>(SB),NOSPLIT,$0
	MOVQ	16(SP), DI
	ANDL	DI, DI
	JZ	null1
	ADDQ	R14, DI
null1:	MOVQ	8(SP), SI
	MOVL	$79, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importChdir() uint64
TEXT ·importChdir(SB),$0-8
	LEAQ	sysChdir<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysChdir<>(SB),NOSPLIT,$0
	MOVQ	8(SP), DI
	ANDL	DI, DI
	JZ	null1
	ADDQ	R14, DI
null1:	MOVL	$80, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importFchdir() uint64
TEXT ·importFchdir(SB),$0-8
	LEAQ	sysFchdir<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysFchdir<>(SB),NOSPLIT,$0
	MOVQ	8(SP), DI
	MOVL	$81, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importFchmod() uint64
TEXT ·importFchmod(SB),$0-8
	LEAQ	sysFchmod<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysFchmod<>(SB),NOSPLIT,$0
	MOVQ	16(SP), DI
	MOVQ	8(SP), SI
	MOVL	$91, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importFchown() uint64
TEXT ·importFchown(SB),$0-8
	LEAQ	sysFchown<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysFchown<>(SB),NOSPLIT,$0
	MOVQ	24(SP), DI
	MOVQ	16(SP), SI
	MOVQ	8(SP), DX
	MOVL	$93, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importLchown() uint64
TEXT ·importLchown(SB),$0-8
	LEAQ	sysLchown<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysLchown<>(SB),NOSPLIT,$0
	MOVQ	24(SP), DI
	ANDL	DI, DI
	JZ	null1
	ADDQ	R14, DI
null1:	MOVQ	16(SP), SI
	MOVQ	8(SP), DX
	MOVL	$94, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importUmask() uint64
TEXT ·importUmask(SB),$0-8
	LEAQ	sysUmask<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysUmask<>(SB),NOSPLIT,$0
	MOVQ	8(SP), DI
	MOVL	$95, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importGetuid() uint64
TEXT ·importGetuid(SB),$0-8
	LEAQ	sysGetuid<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysGetuid<>(SB),NOSPLIT,$0
	MOVL	$102, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importGetgid() uint64
TEXT ·importGetgid(SB),$0-8
	LEAQ	sysGetgid<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysGetgid<>(SB),NOSPLIT,$0
	MOVL	$104, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importVhangup() uint64
TEXT ·importVhangup(SB),$0-8
	LEAQ	sysVhangup<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysVhangup<>(SB),NOSPLIT,$0
	MOVL	$153, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importSync() uint64
TEXT ·importSync(SB),$0-8
	LEAQ	sysSync<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysSync<>(SB),NOSPLIT,$0
	MOVL	$162, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importGettid() uint64
TEXT ·importGettid(SB),$0-8
	LEAQ	sysGettid<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysGettid<>(SB),NOSPLIT,$0
	MOVL	$186, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importTime() uint64
TEXT ·importTime(SB),$0-8
	LEAQ	sysTime<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysTime<>(SB),NOSPLIT,$0
	MOVQ	8(SP), DI
	ANDL	DI, DI
	JZ	null1
	ADDQ	R14, DI
null1:	MOVL	$201, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importPosixFadvise() uint64
TEXT ·importPosixFadvise(SB),$0-8
	LEAQ	sysPosixFadvise<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysPosixFadvise<>(SB),NOSPLIT,$0
	MOVQ	32(SP), DI
	MOVQ	24(SP), SI
	MOVQ	16(SP), DX
	MOVQ	8(SP), R10
	MOVL	$221, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importExit() uint64
TEXT ·importExit(SB),$0-8
	LEAQ	sysExit<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysExit<>(SB),NOSPLIT,$0
	MOVQ	8(SP), DI
	MOVL	$231, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importInotifyInit1() uint64
TEXT ·importInotifyInit1(SB),$0-8
	LEAQ	sysInotifyInit1<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysInotifyInit1<>(SB),NOSPLIT,$0
	MOVL	$294, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importInotifyAddWatch() uint64
TEXT ·importInotifyAddWatch(SB),$0-8
	LEAQ	sysInotifyAddWatch<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysInotifyAddWatch<>(SB),NOSPLIT,$0
	MOVQ	24(SP), DI
	MOVQ	16(SP), SI
	ANDL	SI, SI
	JZ	null2
	ADDQ	R14, SI
null2:	MOVQ	8(SP), DX
	MOVL	$254, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importInotifyRmWatch() uint64
TEXT ·importInotifyRmWatch(SB),$0-8
	LEAQ	sysInotifyRmWatch<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysInotifyRmWatch<>(SB),NOSPLIT,$0
	MOVQ	16(SP), DI
	MOVQ	8(SP), SI
	MOVL	$255, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importOpenat() uint64
TEXT ·importOpenat(SB),$0-8
	LEAQ	sysOpenat<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysOpenat<>(SB),NOSPLIT,$0
	MOVQ	32(SP), DI
	MOVQ	24(SP), SI
	ANDL	SI, SI
	JZ	null2
	ADDQ	R14, SI
null2:	MOVQ	16(SP), DX
	MOVQ	8(SP), R10
	MOVL	$257, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importMkdirat() uint64
TEXT ·importMkdirat(SB),$0-8
	LEAQ	sysMkdirat<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysMkdirat<>(SB),NOSPLIT,$0
	MOVQ	24(SP), DI
	MOVQ	16(SP), SI
	ANDL	SI, SI
	JZ	null2
	ADDQ	R14, SI
null2:	MOVQ	8(SP), DX
	MOVL	$258, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importFchownat() uint64
TEXT ·importFchownat(SB),$0-8
	LEAQ	sysFchownat<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysFchownat<>(SB),NOSPLIT,$0
	MOVQ	40(SP), DI
	MOVQ	32(SP), SI
	ANDL	SI, SI
	JZ	null2
	ADDQ	R14, SI
null2:	MOVQ	24(SP), DX
	MOVQ	16(SP), R10
	MOVQ	8(SP), R8
	MOVL	$260, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importUnlinkat() uint64
TEXT ·importUnlinkat(SB),$0-8
	LEAQ	sysUnlinkat<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysUnlinkat<>(SB),NOSPLIT,$0
	MOVQ	24(SP), DI
	MOVQ	16(SP), SI
	ANDL	SI, SI
	JZ	null2
	ADDQ	R14, SI
null2:	MOVQ	8(SP), DX
	MOVL	$263, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importRenameat() uint64
TEXT ·importRenameat(SB),$0-8
	LEAQ	sysRenameat<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysRenameat<>(SB),NOSPLIT,$0
	MOVQ	32(SP), DI
	MOVQ	24(SP), SI
	ANDL	SI, SI
	JZ	null2
	ADDQ	R14, SI
null2:	MOVQ	16(SP), DX
	MOVQ	8(SP), R10
	ANDL	R10, R10
	JZ	null4
	ADDQ	R14, R10
null4:	MOVL	$264, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importLinkat() uint64
TEXT ·importLinkat(SB),$0-8
	LEAQ	sysLinkat<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysLinkat<>(SB),NOSPLIT,$0
	MOVQ	40(SP), DI
	MOVQ	32(SP), SI
	ANDL	SI, SI
	JZ	null2
	ADDQ	R14, SI
null2:	MOVQ	24(SP), DX
	MOVQ	16(SP), R10
	ANDL	R10, R10
	JZ	null4
	ADDQ	R14, R10
null4:	MOVQ	8(SP), R8
	MOVL	$265, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importSymlinkat() uint64
TEXT ·importSymlinkat(SB),$0-8
	LEAQ	sysSymlinkat<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysSymlinkat<>(SB),NOSPLIT,$0
	MOVQ	24(SP), DI
	ANDL	DI, DI
	JZ	null1
	ADDQ	R14, DI
null1:	MOVQ	16(SP), SI
	MOVQ	8(SP), DX
	ANDL	DX, DX
	JZ	null3
	ADDQ	R14, DX
null3:	MOVL	$266, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importReadlinkat() uint64
TEXT ·importReadlinkat(SB),$0-8
	LEAQ	sysReadlinkat<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysReadlinkat<>(SB),NOSPLIT,$0
	MOVQ	32(SP), DI
	MOVQ	24(SP), SI
	ANDL	SI, SI
	JZ	null2
	ADDQ	R14, SI
null2:	MOVQ	16(SP), DX
	ANDL	DX, DX
	JZ	null3
	ADDQ	R14, DX
null3:	MOVQ	8(SP), R10
	MOVL	$267, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importFchmodat() uint64
TEXT ·importFchmodat(SB),$0-8
	LEAQ	sysFchmodat<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysFchmodat<>(SB),NOSPLIT,$0
	MOVQ	32(SP), DI
	MOVQ	24(SP), SI
	ANDL	SI, SI
	JZ	null2
	ADDQ	R14, SI
null2:	MOVQ	16(SP), DX
	MOVQ	8(SP), R10
	MOVL	$268, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importFaccessat() uint64
TEXT ·importFaccessat(SB),$0-8
	LEAQ	sysFaccessat<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysFaccessat<>(SB),NOSPLIT,$0
	MOVQ	32(SP), DI
	MOVQ	24(SP), SI
	ANDL	SI, SI
	JZ	null2
	ADDQ	R14, SI
null2:	MOVQ	16(SP), DX
	MOVQ	8(SP), R10
	MOVL	$269, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importSplice() uint64
TEXT ·importSplice(SB),$0-8
	LEAQ	sysSplice<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysSplice<>(SB),NOSPLIT,$0
	MOVQ	48(SP), DI
	MOVQ	40(SP), SI
	ANDL	SI, SI
	JZ	null2
	ADDQ	R14, SI
null2:	MOVQ	32(SP), DX
	MOVQ	24(SP), R10
	ANDL	R10, R10
	JZ	null4
	ADDQ	R14, R10
null4:	MOVQ	16(SP), R8
	MOVQ	8(SP), R9
	MOVL	$275, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importTee() uint64
TEXT ·importTee(SB),$0-8
	LEAQ	sysTee<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysTee<>(SB),NOSPLIT,$0
	MOVQ	32(SP), DI
	MOVQ	24(SP), SI
	MOVQ	16(SP), DX
	MOVQ	8(SP), R10
	MOVL	$276, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importSyncFileRange() uint64
TEXT ·importSyncFileRange(SB),$0-8
	LEAQ	sysSyncFileRange<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysSyncFileRange<>(SB),NOSPLIT,$0
	MOVQ	32(SP), DI
	MOVQ	24(SP), SI
	MOVQ	16(SP), DX
	MOVQ	8(SP), R10
	MOVL	$277, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importFallocate() uint64
TEXT ·importFallocate(SB),$0-8
	LEAQ	sysFallocate<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysFallocate<>(SB),NOSPLIT,$0
	MOVQ	32(SP), DI
	MOVQ	24(SP), SI
	MOVQ	16(SP), DX
	MOVQ	8(SP), R10
	MOVL	$285, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importEventfd() uint64
TEXT ·importEventfd(SB),$0-8
	LEAQ	sysEventfd<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysEventfd<>(SB),NOSPLIT,$0
	MOVQ	16(SP), DI
	MOVQ	8(SP), SI
	MOVL	$290, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importDup3() uint64
TEXT ·importDup3(SB),$0-8
	LEAQ	sysDup3<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysDup3<>(SB),NOSPLIT,$0
	MOVQ	24(SP), DI
	MOVQ	16(SP), SI
	MOVQ	8(SP), DX
	MOVL	$292, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX

// func importPipe2() uint64
TEXT ·importPipe2(SB),$0-8
	LEAQ	sysPipe2<>(SB), AX
	MOVQ	AX, ret+0(FP)
	RET

TEXT sysPipe2<>(SB),NOSPLIT,$0
	MOVQ	16(SP), DI
	ANDL	DI, DI
	JZ	null1
	ADDQ	R14, DI
null1:	MOVQ	8(SP), SI
	MOVL	$293, AX
	SYSCALL
	MOVQ	R15, DX
	ADDQ	$0x20, DX
	JMP	DX
