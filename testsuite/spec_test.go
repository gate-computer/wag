// Generated by spec_test.py, DO NOT EDIT!

package main

import (
	"testing"

	"gate.computer/wag/wa"
)

func Test_address(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "address.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("8u_good1:104", func(t *testing.T) { x0.assertReturnInvoke(t, "8u_good1", []arg{{wa.I32, 0}}, arg{wa.I32, 97}) })
	t.Run("8u_good2:105", func(t *testing.T) { x0.assertReturnInvoke(t, "8u_good2", []arg{{wa.I32, 0}}, arg{wa.I32, 97}) })
	t.Run("8u_good3:106", func(t *testing.T) { x0.assertReturnInvoke(t, "8u_good3", []arg{{wa.I32, 0}}, arg{wa.I32, 98}) })
	t.Run("8u_good4:107", func(t *testing.T) { x0.assertReturnInvoke(t, "8u_good4", []arg{{wa.I32, 0}}, arg{wa.I32, 99}) })
	t.Run("8u_good5:108", func(t *testing.T) { x0.assertReturnInvoke(t, "8u_good5", []arg{{wa.I32, 0}}, arg{wa.I32, 122}) })
	t.Run("8s_good1:110", func(t *testing.T) { x0.assertReturnInvoke(t, "8s_good1", []arg{{wa.I32, 0}}, arg{wa.I32, 97}) })
	t.Run("8s_good2:111", func(t *testing.T) { x0.assertReturnInvoke(t, "8s_good2", []arg{{wa.I32, 0}}, arg{wa.I32, 97}) })
	t.Run("8s_good3:112", func(t *testing.T) { x0.assertReturnInvoke(t, "8s_good3", []arg{{wa.I32, 0}}, arg{wa.I32, 98}) })
	t.Run("8s_good4:113", func(t *testing.T) { x0.assertReturnInvoke(t, "8s_good4", []arg{{wa.I32, 0}}, arg{wa.I32, 99}) })
	t.Run("8s_good5:114", func(t *testing.T) { x0.assertReturnInvoke(t, "8s_good5", []arg{{wa.I32, 0}}, arg{wa.I32, 122}) })
	t.Run("16u_good1:116", func(t *testing.T) { x0.assertReturnInvoke(t, "16u_good1", []arg{{wa.I32, 0}}, arg{wa.I32, 25185}) })
	t.Run("16u_good2:117", func(t *testing.T) { x0.assertReturnInvoke(t, "16u_good2", []arg{{wa.I32, 0}}, arg{wa.I32, 25185}) })
	t.Run("16u_good3:118", func(t *testing.T) { x0.assertReturnInvoke(t, "16u_good3", []arg{{wa.I32, 0}}, arg{wa.I32, 25442}) })
	t.Run("16u_good4:119", func(t *testing.T) { x0.assertReturnInvoke(t, "16u_good4", []arg{{wa.I32, 0}}, arg{wa.I32, 25699}) })
	t.Run("16u_good5:120", func(t *testing.T) { x0.assertReturnInvoke(t, "16u_good5", []arg{{wa.I32, 0}}, arg{wa.I32, 122}) })
	t.Run("16s_good1:122", func(t *testing.T) { x0.assertReturnInvoke(t, "16s_good1", []arg{{wa.I32, 0}}, arg{wa.I32, 25185}) })
	t.Run("16s_good2:123", func(t *testing.T) { x0.assertReturnInvoke(t, "16s_good2", []arg{{wa.I32, 0}}, arg{wa.I32, 25185}) })
	t.Run("16s_good3:124", func(t *testing.T) { x0.assertReturnInvoke(t, "16s_good3", []arg{{wa.I32, 0}}, arg{wa.I32, 25442}) })
	t.Run("16s_good4:125", func(t *testing.T) { x0.assertReturnInvoke(t, "16s_good4", []arg{{wa.I32, 0}}, arg{wa.I32, 25699}) })
	t.Run("16s_good5:126", func(t *testing.T) { x0.assertReturnInvoke(t, "16s_good5", []arg{{wa.I32, 0}}, arg{wa.I32, 122}) })
	t.Run("32_good1:128", func(t *testing.T) { x0.assertReturnInvoke(t, "32_good1", []arg{{wa.I32, 0}}, arg{wa.I32, 1684234849}) })
	t.Run("32_good2:129", func(t *testing.T) { x0.assertReturnInvoke(t, "32_good2", []arg{{wa.I32, 0}}, arg{wa.I32, 1684234849}) })
	t.Run("32_good3:130", func(t *testing.T) { x0.assertReturnInvoke(t, "32_good3", []arg{{wa.I32, 0}}, arg{wa.I32, 1701077858}) })
	t.Run("32_good4:131", func(t *testing.T) { x0.assertReturnInvoke(t, "32_good4", []arg{{wa.I32, 0}}, arg{wa.I32, 1717920867}) })
	t.Run("32_good5:132", func(t *testing.T) { x0.assertReturnInvoke(t, "32_good5", []arg{{wa.I32, 0}}, arg{wa.I32, 122}) })
	t.Run("8u_good1:134", func(t *testing.T) { x0.assertReturnInvoke(t, "8u_good1", []arg{{wa.I32, 65507}}, arg{wa.I32, 0}) })
	t.Run("8u_good2:135", func(t *testing.T) { x0.assertReturnInvoke(t, "8u_good2", []arg{{wa.I32, 65507}}, arg{wa.I32, 0}) })
	t.Run("8u_good3:136", func(t *testing.T) { x0.assertReturnInvoke(t, "8u_good3", []arg{{wa.I32, 65507}}, arg{wa.I32, 0}) })
	t.Run("8u_good4:137", func(t *testing.T) { x0.assertReturnInvoke(t, "8u_good4", []arg{{wa.I32, 65507}}, arg{wa.I32, 0}) })
	t.Run("8u_good5:138", func(t *testing.T) { x0.assertReturnInvoke(t, "8u_good5", []arg{{wa.I32, 65507}}, arg{wa.I32, 0}) })
	t.Run("8s_good1:140", func(t *testing.T) { x0.assertReturnInvoke(t, "8s_good1", []arg{{wa.I32, 65507}}, arg{wa.I32, 0}) })
	t.Run("8s_good2:141", func(t *testing.T) { x0.assertReturnInvoke(t, "8s_good2", []arg{{wa.I32, 65507}}, arg{wa.I32, 0}) })
	t.Run("8s_good3:142", func(t *testing.T) { x0.assertReturnInvoke(t, "8s_good3", []arg{{wa.I32, 65507}}, arg{wa.I32, 0}) })
	t.Run("8s_good4:143", func(t *testing.T) { x0.assertReturnInvoke(t, "8s_good4", []arg{{wa.I32, 65507}}, arg{wa.I32, 0}) })
	t.Run("8s_good5:144", func(t *testing.T) { x0.assertReturnInvoke(t, "8s_good5", []arg{{wa.I32, 65507}}, arg{wa.I32, 0}) })
	t.Run("16u_good1:146", func(t *testing.T) { x0.assertReturnInvoke(t, "16u_good1", []arg{{wa.I32, 65507}}, arg{wa.I32, 0}) })
	t.Run("16u_good2:147", func(t *testing.T) { x0.assertReturnInvoke(t, "16u_good2", []arg{{wa.I32, 65507}}, arg{wa.I32, 0}) })
	t.Run("16u_good3:148", func(t *testing.T) { x0.assertReturnInvoke(t, "16u_good3", []arg{{wa.I32, 65507}}, arg{wa.I32, 0}) })
	t.Run("16u_good4:149", func(t *testing.T) { x0.assertReturnInvoke(t, "16u_good4", []arg{{wa.I32, 65507}}, arg{wa.I32, 0}) })
	t.Run("16u_good5:150", func(t *testing.T) { x0.assertReturnInvoke(t, "16u_good5", []arg{{wa.I32, 65507}}, arg{wa.I32, 0}) })
	t.Run("16s_good1:152", func(t *testing.T) { x0.assertReturnInvoke(t, "16s_good1", []arg{{wa.I32, 65507}}, arg{wa.I32, 0}) })
	t.Run("16s_good2:153", func(t *testing.T) { x0.assertReturnInvoke(t, "16s_good2", []arg{{wa.I32, 65507}}, arg{wa.I32, 0}) })
	t.Run("16s_good3:154", func(t *testing.T) { x0.assertReturnInvoke(t, "16s_good3", []arg{{wa.I32, 65507}}, arg{wa.I32, 0}) })
	t.Run("16s_good4:155", func(t *testing.T) { x0.assertReturnInvoke(t, "16s_good4", []arg{{wa.I32, 65507}}, arg{wa.I32, 0}) })
	t.Run("16s_good5:156", func(t *testing.T) { x0.assertReturnInvoke(t, "16s_good5", []arg{{wa.I32, 65507}}, arg{wa.I32, 0}) })
	t.Run("32_good1:158", func(t *testing.T) { x0.assertReturnInvoke(t, "32_good1", []arg{{wa.I32, 65507}}, arg{wa.I32, 0}) })
	t.Run("32_good2:159", func(t *testing.T) { x0.assertReturnInvoke(t, "32_good2", []arg{{wa.I32, 65507}}, arg{wa.I32, 0}) })
	t.Run("32_good3:160", func(t *testing.T) { x0.assertReturnInvoke(t, "32_good3", []arg{{wa.I32, 65507}}, arg{wa.I32, 0}) })
	t.Run("32_good4:161", func(t *testing.T) { x0.assertReturnInvoke(t, "32_good4", []arg{{wa.I32, 65507}}, arg{wa.I32, 0}) })
	t.Run("32_good5:162", func(t *testing.T) { x0.assertReturnInvoke(t, "32_good5", []arg{{wa.I32, 65507}}, arg{wa.I32, 0}) })
	t.Run("8u_good1:164", func(t *testing.T) { x0.assertReturnInvoke(t, "8u_good1", []arg{{wa.I32, 65508}}, arg{wa.I32, 0}) })
	t.Run("8u_good2:165", func(t *testing.T) { x0.assertReturnInvoke(t, "8u_good2", []arg{{wa.I32, 65508}}, arg{wa.I32, 0}) })
	t.Run("8u_good3:166", func(t *testing.T) { x0.assertReturnInvoke(t, "8u_good3", []arg{{wa.I32, 65508}}, arg{wa.I32, 0}) })
	t.Run("8u_good4:167", func(t *testing.T) { x0.assertReturnInvoke(t, "8u_good4", []arg{{wa.I32, 65508}}, arg{wa.I32, 0}) })
	t.Run("8u_good5:168", func(t *testing.T) { x0.assertReturnInvoke(t, "8u_good5", []arg{{wa.I32, 65508}}, arg{wa.I32, 0}) })
	t.Run("8s_good1:170", func(t *testing.T) { x0.assertReturnInvoke(t, "8s_good1", []arg{{wa.I32, 65508}}, arg{wa.I32, 0}) })
	t.Run("8s_good2:171", func(t *testing.T) { x0.assertReturnInvoke(t, "8s_good2", []arg{{wa.I32, 65508}}, arg{wa.I32, 0}) })
	t.Run("8s_good3:172", func(t *testing.T) { x0.assertReturnInvoke(t, "8s_good3", []arg{{wa.I32, 65508}}, arg{wa.I32, 0}) })
	t.Run("8s_good4:173", func(t *testing.T) { x0.assertReturnInvoke(t, "8s_good4", []arg{{wa.I32, 65508}}, arg{wa.I32, 0}) })
	t.Run("8s_good5:174", func(t *testing.T) { x0.assertReturnInvoke(t, "8s_good5", []arg{{wa.I32, 65508}}, arg{wa.I32, 0}) })
	t.Run("16u_good1:176", func(t *testing.T) { x0.assertReturnInvoke(t, "16u_good1", []arg{{wa.I32, 65508}}, arg{wa.I32, 0}) })
	t.Run("16u_good2:177", func(t *testing.T) { x0.assertReturnInvoke(t, "16u_good2", []arg{{wa.I32, 65508}}, arg{wa.I32, 0}) })
	t.Run("16u_good3:178", func(t *testing.T) { x0.assertReturnInvoke(t, "16u_good3", []arg{{wa.I32, 65508}}, arg{wa.I32, 0}) })
	t.Run("16u_good4:179", func(t *testing.T) { x0.assertReturnInvoke(t, "16u_good4", []arg{{wa.I32, 65508}}, arg{wa.I32, 0}) })
	t.Run("16u_good5:180", func(t *testing.T) { x0.assertReturnInvoke(t, "16u_good5", []arg{{wa.I32, 65508}}, arg{wa.I32, 0}) })
	t.Run("16s_good1:182", func(t *testing.T) { x0.assertReturnInvoke(t, "16s_good1", []arg{{wa.I32, 65508}}, arg{wa.I32, 0}) })
	t.Run("16s_good2:183", func(t *testing.T) { x0.assertReturnInvoke(t, "16s_good2", []arg{{wa.I32, 65508}}, arg{wa.I32, 0}) })
	t.Run("16s_good3:184", func(t *testing.T) { x0.assertReturnInvoke(t, "16s_good3", []arg{{wa.I32, 65508}}, arg{wa.I32, 0}) })
	t.Run("16s_good4:185", func(t *testing.T) { x0.assertReturnInvoke(t, "16s_good4", []arg{{wa.I32, 65508}}, arg{wa.I32, 0}) })
	t.Run("16s_good5:186", func(t *testing.T) { x0.assertReturnInvoke(t, "16s_good5", []arg{{wa.I32, 65508}}, arg{wa.I32, 0}) })
	t.Run("32_good1:188", func(t *testing.T) { x0.assertReturnInvoke(t, "32_good1", []arg{{wa.I32, 65508}}, arg{wa.I32, 0}) })
	t.Run("32_good2:189", func(t *testing.T) { x0.assertReturnInvoke(t, "32_good2", []arg{{wa.I32, 65508}}, arg{wa.I32, 0}) })
	t.Run("32_good3:190", func(t *testing.T) { x0.assertReturnInvoke(t, "32_good3", []arg{{wa.I32, 65508}}, arg{wa.I32, 0}) })
	t.Run("32_good4:191", func(t *testing.T) { x0.assertReturnInvoke(t, "32_good4", []arg{{wa.I32, 65508}}, arg{wa.I32, 0}) })
	t.Run("32_good5:192", func(t *testing.T) {
		x0.assertTrap(t, "32_good5", []arg{{wa.I32, 65508}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("8u_good3:194", func(t *testing.T) {
		x0.assertTrap(t, "8u_good3", []arg{{wa.I32, 4294967295}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("8s_good3:195", func(t *testing.T) {
		x0.assertTrap(t, "8s_good3", []arg{{wa.I32, 4294967295}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("16u_good3:196", func(t *testing.T) {
		x0.assertTrap(t, "16u_good3", []arg{{wa.I32, 4294967295}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("16s_good3:197", func(t *testing.T) {
		x0.assertTrap(t, "16s_good3", []arg{{wa.I32, 4294967295}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("32_good3:198", func(t *testing.T) {
		x0.assertTrap(t, "32_good3", []arg{{wa.I32, 4294967295}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("32_good3:199", func(t *testing.T) {
		x0.assertTrap(t, "32_good3", []arg{{wa.I32, 4294967295}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("8u_bad:201", func(t *testing.T) {
		x0.assertTrap(t, "8u_bad", []arg{{wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("8s_bad:202", func(t *testing.T) {
		x0.assertTrap(t, "8s_bad", []arg{{wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("16u_bad:203", func(t *testing.T) {
		x0.assertTrap(t, "16u_bad", []arg{{wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("16s_bad:204", func(t *testing.T) {
		x0.assertTrap(t, "16s_bad", []arg{{wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("32_bad:205", func(t *testing.T) {
		x0.assertTrap(t, "32_bad", []arg{{wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("8u_bad:207", func(t *testing.T) {
		x0.assertTrap(t, "8u_bad", []arg{{wa.I32, 1}}, arg{}, "out of bounds memory access")
	})
	t.Run("8s_bad:208", func(t *testing.T) {
		x0.assertTrap(t, "8s_bad", []arg{{wa.I32, 1}}, arg{}, "out of bounds memory access")
	})
	t.Run("16u_bad:209", func(t *testing.T) {
		x0.assertTrap(t, "16u_bad", []arg{{wa.I32, 1}}, arg{}, "out of bounds memory access")
	})
	t.Run("16s_bad:210", func(t *testing.T) {
		x0.assertTrap(t, "16s_bad", []arg{{wa.I32, 1}}, arg{}, "out of bounds memory access")
	})
	t.Run("32_bad:211", func(t *testing.T) {
		x0.assertTrap(t, "32_bad", []arg{{wa.I32, 1}}, arg{}, "out of bounds memory access")
	})
	t.Run("assert_malformed:214", func(t *testing.T) { t.Skip("text format not supported") })
	x1 := instantiateSpecTest(t, "1", "address.2.wasm")
	t.Cleanup(func() { x1.close(t) })
	t.Run("8u_good1:362", func(t *testing.T) { x1.assertReturnInvoke(t, "8u_good1", []arg{{wa.I32, 0}}, arg{wa.I64, 97}) })
	t.Run("8u_good2:363", func(t *testing.T) { x1.assertReturnInvoke(t, "8u_good2", []arg{{wa.I32, 0}}, arg{wa.I64, 97}) })
	t.Run("8u_good3:364", func(t *testing.T) { x1.assertReturnInvoke(t, "8u_good3", []arg{{wa.I32, 0}}, arg{wa.I64, 98}) })
	t.Run("8u_good4:365", func(t *testing.T) { x1.assertReturnInvoke(t, "8u_good4", []arg{{wa.I32, 0}}, arg{wa.I64, 99}) })
	t.Run("8u_good5:366", func(t *testing.T) { x1.assertReturnInvoke(t, "8u_good5", []arg{{wa.I32, 0}}, arg{wa.I64, 122}) })
	t.Run("8s_good1:368", func(t *testing.T) { x1.assertReturnInvoke(t, "8s_good1", []arg{{wa.I32, 0}}, arg{wa.I64, 97}) })
	t.Run("8s_good2:369", func(t *testing.T) { x1.assertReturnInvoke(t, "8s_good2", []arg{{wa.I32, 0}}, arg{wa.I64, 97}) })
	t.Run("8s_good3:370", func(t *testing.T) { x1.assertReturnInvoke(t, "8s_good3", []arg{{wa.I32, 0}}, arg{wa.I64, 98}) })
	t.Run("8s_good4:371", func(t *testing.T) { x1.assertReturnInvoke(t, "8s_good4", []arg{{wa.I32, 0}}, arg{wa.I64, 99}) })
	t.Run("8s_good5:372", func(t *testing.T) { x1.assertReturnInvoke(t, "8s_good5", []arg{{wa.I32, 0}}, arg{wa.I64, 122}) })
	t.Run("16u_good1:374", func(t *testing.T) { x1.assertReturnInvoke(t, "16u_good1", []arg{{wa.I32, 0}}, arg{wa.I64, 25185}) })
	t.Run("16u_good2:375", func(t *testing.T) { x1.assertReturnInvoke(t, "16u_good2", []arg{{wa.I32, 0}}, arg{wa.I64, 25185}) })
	t.Run("16u_good3:376", func(t *testing.T) { x1.assertReturnInvoke(t, "16u_good3", []arg{{wa.I32, 0}}, arg{wa.I64, 25442}) })
	t.Run("16u_good4:377", func(t *testing.T) { x1.assertReturnInvoke(t, "16u_good4", []arg{{wa.I32, 0}}, arg{wa.I64, 25699}) })
	t.Run("16u_good5:378", func(t *testing.T) { x1.assertReturnInvoke(t, "16u_good5", []arg{{wa.I32, 0}}, arg{wa.I64, 122}) })
	t.Run("16s_good1:380", func(t *testing.T) { x1.assertReturnInvoke(t, "16s_good1", []arg{{wa.I32, 0}}, arg{wa.I64, 25185}) })
	t.Run("16s_good2:381", func(t *testing.T) { x1.assertReturnInvoke(t, "16s_good2", []arg{{wa.I32, 0}}, arg{wa.I64, 25185}) })
	t.Run("16s_good3:382", func(t *testing.T) { x1.assertReturnInvoke(t, "16s_good3", []arg{{wa.I32, 0}}, arg{wa.I64, 25442}) })
	t.Run("16s_good4:383", func(t *testing.T) { x1.assertReturnInvoke(t, "16s_good4", []arg{{wa.I32, 0}}, arg{wa.I64, 25699}) })
	t.Run("16s_good5:384", func(t *testing.T) { x1.assertReturnInvoke(t, "16s_good5", []arg{{wa.I32, 0}}, arg{wa.I64, 122}) })
	t.Run("32u_good1:386", func(t *testing.T) { x1.assertReturnInvoke(t, "32u_good1", []arg{{wa.I32, 0}}, arg{wa.I64, 1684234849}) })
	t.Run("32u_good2:387", func(t *testing.T) { x1.assertReturnInvoke(t, "32u_good2", []arg{{wa.I32, 0}}, arg{wa.I64, 1684234849}) })
	t.Run("32u_good3:388", func(t *testing.T) { x1.assertReturnInvoke(t, "32u_good3", []arg{{wa.I32, 0}}, arg{wa.I64, 1701077858}) })
	t.Run("32u_good4:389", func(t *testing.T) { x1.assertReturnInvoke(t, "32u_good4", []arg{{wa.I32, 0}}, arg{wa.I64, 1717920867}) })
	t.Run("32u_good5:390", func(t *testing.T) { x1.assertReturnInvoke(t, "32u_good5", []arg{{wa.I32, 0}}, arg{wa.I64, 122}) })
	t.Run("32s_good1:392", func(t *testing.T) { x1.assertReturnInvoke(t, "32s_good1", []arg{{wa.I32, 0}}, arg{wa.I64, 1684234849}) })
	t.Run("32s_good2:393", func(t *testing.T) { x1.assertReturnInvoke(t, "32s_good2", []arg{{wa.I32, 0}}, arg{wa.I64, 1684234849}) })
	t.Run("32s_good3:394", func(t *testing.T) { x1.assertReturnInvoke(t, "32s_good3", []arg{{wa.I32, 0}}, arg{wa.I64, 1701077858}) })
	t.Run("32s_good4:395", func(t *testing.T) { x1.assertReturnInvoke(t, "32s_good4", []arg{{wa.I32, 0}}, arg{wa.I64, 1717920867}) })
	t.Run("32s_good5:396", func(t *testing.T) { x1.assertReturnInvoke(t, "32s_good5", []arg{{wa.I32, 0}}, arg{wa.I64, 122}) })
	t.Run("64_good1:398", func(t *testing.T) {
		x1.assertReturnInvoke(t, "64_good1", []arg{{wa.I32, 0}}, arg{wa.I64, 7523094288207667809})
	})
	t.Run("64_good2:399", func(t *testing.T) {
		x1.assertReturnInvoke(t, "64_good2", []arg{{wa.I32, 0}}, arg{wa.I64, 7523094288207667809})
	})
	t.Run("64_good3:400", func(t *testing.T) {
		x1.assertReturnInvoke(t, "64_good3", []arg{{wa.I32, 0}}, arg{wa.I64, 7595434461045744482})
	})
	t.Run("64_good4:401", func(t *testing.T) {
		x1.assertReturnInvoke(t, "64_good4", []arg{{wa.I32, 0}}, arg{wa.I64, 7667774633883821155})
	})
	t.Run("64_good5:402", func(t *testing.T) { x1.assertReturnInvoke(t, "64_good5", []arg{{wa.I32, 0}}, arg{wa.I64, 122}) })
	t.Run("8u_good1:404", func(t *testing.T) { x1.assertReturnInvoke(t, "8u_good1", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("8u_good2:405", func(t *testing.T) { x1.assertReturnInvoke(t, "8u_good2", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("8u_good3:406", func(t *testing.T) { x1.assertReturnInvoke(t, "8u_good3", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("8u_good4:407", func(t *testing.T) { x1.assertReturnInvoke(t, "8u_good4", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("8u_good5:408", func(t *testing.T) { x1.assertReturnInvoke(t, "8u_good5", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("8s_good1:410", func(t *testing.T) { x1.assertReturnInvoke(t, "8s_good1", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("8s_good2:411", func(t *testing.T) { x1.assertReturnInvoke(t, "8s_good2", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("8s_good3:412", func(t *testing.T) { x1.assertReturnInvoke(t, "8s_good3", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("8s_good4:413", func(t *testing.T) { x1.assertReturnInvoke(t, "8s_good4", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("8s_good5:414", func(t *testing.T) { x1.assertReturnInvoke(t, "8s_good5", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("16u_good1:416", func(t *testing.T) { x1.assertReturnInvoke(t, "16u_good1", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("16u_good2:417", func(t *testing.T) { x1.assertReturnInvoke(t, "16u_good2", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("16u_good3:418", func(t *testing.T) { x1.assertReturnInvoke(t, "16u_good3", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("16u_good4:419", func(t *testing.T) { x1.assertReturnInvoke(t, "16u_good4", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("16u_good5:420", func(t *testing.T) { x1.assertReturnInvoke(t, "16u_good5", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("16s_good1:422", func(t *testing.T) { x1.assertReturnInvoke(t, "16s_good1", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("16s_good2:423", func(t *testing.T) { x1.assertReturnInvoke(t, "16s_good2", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("16s_good3:424", func(t *testing.T) { x1.assertReturnInvoke(t, "16s_good3", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("16s_good4:425", func(t *testing.T) { x1.assertReturnInvoke(t, "16s_good4", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("16s_good5:426", func(t *testing.T) { x1.assertReturnInvoke(t, "16s_good5", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("32u_good1:428", func(t *testing.T) { x1.assertReturnInvoke(t, "32u_good1", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("32u_good2:429", func(t *testing.T) { x1.assertReturnInvoke(t, "32u_good2", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("32u_good3:430", func(t *testing.T) { x1.assertReturnInvoke(t, "32u_good3", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("32u_good4:431", func(t *testing.T) { x1.assertReturnInvoke(t, "32u_good4", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("32u_good5:432", func(t *testing.T) { x1.assertReturnInvoke(t, "32u_good5", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("32s_good1:434", func(t *testing.T) { x1.assertReturnInvoke(t, "32s_good1", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("32s_good2:435", func(t *testing.T) { x1.assertReturnInvoke(t, "32s_good2", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("32s_good3:436", func(t *testing.T) { x1.assertReturnInvoke(t, "32s_good3", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("32s_good4:437", func(t *testing.T) { x1.assertReturnInvoke(t, "32s_good4", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("32s_good5:438", func(t *testing.T) { x1.assertReturnInvoke(t, "32s_good5", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("64_good1:440", func(t *testing.T) { x1.assertReturnInvoke(t, "64_good1", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("64_good2:441", func(t *testing.T) { x1.assertReturnInvoke(t, "64_good2", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("64_good3:442", func(t *testing.T) { x1.assertReturnInvoke(t, "64_good3", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("64_good4:443", func(t *testing.T) { x1.assertReturnInvoke(t, "64_good4", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("64_good5:444", func(t *testing.T) { x1.assertReturnInvoke(t, "64_good5", []arg{{wa.I32, 65503}}, arg{wa.I64, 0}) })
	t.Run("8u_good1:446", func(t *testing.T) { x1.assertReturnInvoke(t, "8u_good1", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("8u_good2:447", func(t *testing.T) { x1.assertReturnInvoke(t, "8u_good2", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("8u_good3:448", func(t *testing.T) { x1.assertReturnInvoke(t, "8u_good3", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("8u_good4:449", func(t *testing.T) { x1.assertReturnInvoke(t, "8u_good4", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("8u_good5:450", func(t *testing.T) { x1.assertReturnInvoke(t, "8u_good5", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("8s_good1:452", func(t *testing.T) { x1.assertReturnInvoke(t, "8s_good1", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("8s_good2:453", func(t *testing.T) { x1.assertReturnInvoke(t, "8s_good2", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("8s_good3:454", func(t *testing.T) { x1.assertReturnInvoke(t, "8s_good3", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("8s_good4:455", func(t *testing.T) { x1.assertReturnInvoke(t, "8s_good4", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("8s_good5:456", func(t *testing.T) { x1.assertReturnInvoke(t, "8s_good5", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("16u_good1:458", func(t *testing.T) { x1.assertReturnInvoke(t, "16u_good1", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("16u_good2:459", func(t *testing.T) { x1.assertReturnInvoke(t, "16u_good2", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("16u_good3:460", func(t *testing.T) { x1.assertReturnInvoke(t, "16u_good3", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("16u_good4:461", func(t *testing.T) { x1.assertReturnInvoke(t, "16u_good4", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("16u_good5:462", func(t *testing.T) { x1.assertReturnInvoke(t, "16u_good5", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("16s_good1:464", func(t *testing.T) { x1.assertReturnInvoke(t, "16s_good1", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("16s_good2:465", func(t *testing.T) { x1.assertReturnInvoke(t, "16s_good2", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("16s_good3:466", func(t *testing.T) { x1.assertReturnInvoke(t, "16s_good3", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("16s_good4:467", func(t *testing.T) { x1.assertReturnInvoke(t, "16s_good4", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("16s_good5:468", func(t *testing.T) { x1.assertReturnInvoke(t, "16s_good5", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("32u_good1:470", func(t *testing.T) { x1.assertReturnInvoke(t, "32u_good1", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("32u_good2:471", func(t *testing.T) { x1.assertReturnInvoke(t, "32u_good2", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("32u_good3:472", func(t *testing.T) { x1.assertReturnInvoke(t, "32u_good3", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("32u_good4:473", func(t *testing.T) { x1.assertReturnInvoke(t, "32u_good4", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("32u_good5:474", func(t *testing.T) { x1.assertReturnInvoke(t, "32u_good5", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("32s_good1:476", func(t *testing.T) { x1.assertReturnInvoke(t, "32s_good1", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("32s_good2:477", func(t *testing.T) { x1.assertReturnInvoke(t, "32s_good2", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("32s_good3:478", func(t *testing.T) { x1.assertReturnInvoke(t, "32s_good3", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("32s_good4:479", func(t *testing.T) { x1.assertReturnInvoke(t, "32s_good4", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("32s_good5:480", func(t *testing.T) { x1.assertReturnInvoke(t, "32s_good5", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("64_good1:482", func(t *testing.T) { x1.assertReturnInvoke(t, "64_good1", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("64_good2:483", func(t *testing.T) { x1.assertReturnInvoke(t, "64_good2", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("64_good3:484", func(t *testing.T) { x1.assertReturnInvoke(t, "64_good3", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("64_good4:485", func(t *testing.T) { x1.assertReturnInvoke(t, "64_good4", []arg{{wa.I32, 65504}}, arg{wa.I64, 0}) })
	t.Run("64_good5:486", func(t *testing.T) {
		x1.assertTrap(t, "64_good5", []arg{{wa.I32, 65504}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("8u_good3:488", func(t *testing.T) {
		x1.assertTrap(t, "8u_good3", []arg{{wa.I32, 4294967295}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("8s_good3:489", func(t *testing.T) {
		x1.assertTrap(t, "8s_good3", []arg{{wa.I32, 4294967295}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("16u_good3:490", func(t *testing.T) {
		x1.assertTrap(t, "16u_good3", []arg{{wa.I32, 4294967295}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("16s_good3:491", func(t *testing.T) {
		x1.assertTrap(t, "16s_good3", []arg{{wa.I32, 4294967295}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("32u_good3:492", func(t *testing.T) {
		x1.assertTrap(t, "32u_good3", []arg{{wa.I32, 4294967295}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("32s_good3:493", func(t *testing.T) {
		x1.assertTrap(t, "32s_good3", []arg{{wa.I32, 4294967295}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("64_good3:494", func(t *testing.T) {
		x1.assertTrap(t, "64_good3", []arg{{wa.I32, 4294967295}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("8u_bad:496", func(t *testing.T) {
		x1.assertTrap(t, "8u_bad", []arg{{wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("8s_bad:497", func(t *testing.T) {
		x1.assertTrap(t, "8s_bad", []arg{{wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("16u_bad:498", func(t *testing.T) {
		x1.assertTrap(t, "16u_bad", []arg{{wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("16s_bad:499", func(t *testing.T) {
		x1.assertTrap(t, "16s_bad", []arg{{wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("32u_bad:500", func(t *testing.T) {
		x1.assertTrap(t, "32u_bad", []arg{{wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("32s_bad:501", func(t *testing.T) {
		x1.assertTrap(t, "32s_bad", []arg{{wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("64_bad:502", func(t *testing.T) {
		x1.assertTrap(t, "64_bad", []arg{{wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("8u_bad:504", func(t *testing.T) {
		x1.assertTrap(t, "8u_bad", []arg{{wa.I32, 1}}, arg{}, "out of bounds memory access")
	})
	t.Run("8s_bad:505", func(t *testing.T) {
		x1.assertTrap(t, "8s_bad", []arg{{wa.I32, 1}}, arg{}, "out of bounds memory access")
	})
	t.Run("16u_bad:506", func(t *testing.T) {
		x1.assertTrap(t, "16u_bad", []arg{{wa.I32, 1}}, arg{}, "out of bounds memory access")
	})
	t.Run("16s_bad:507", func(t *testing.T) {
		x1.assertTrap(t, "16s_bad", []arg{{wa.I32, 1}}, arg{}, "out of bounds memory access")
	})
	t.Run("32u_bad:508", func(t *testing.T) {
		x1.assertTrap(t, "32u_bad", []arg{{wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("32s_bad:509", func(t *testing.T) {
		x1.assertTrap(t, "32s_bad", []arg{{wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("64_bad:510", func(t *testing.T) {
		x1.assertTrap(t, "64_bad", []arg{{wa.I32, 1}}, arg{}, "out of bounds memory access")
	})
	x2 := instantiateSpecTest(t, "2", "address.3.wasm")
	t.Cleanup(func() { x2.close(t) })
	t.Run("32_good1:538", func(t *testing.T) { x2.assertReturnInvoke(t, "32_good1", []arg{{wa.I32, 0}}, arg{wa.F32, 0}) })
	t.Run("32_good2:539", func(t *testing.T) { x2.assertReturnInvoke(t, "32_good2", []arg{{wa.I32, 0}}, arg{wa.F32, 0}) })
	t.Run("32_good3:540", func(t *testing.T) { x2.assertReturnInvoke(t, "32_good3", []arg{{wa.I32, 0}}, arg{wa.F32, 0}) })
	t.Run("32_good4:541", func(t *testing.T) { x2.assertReturnInvoke(t, "32_good4", []arg{{wa.I32, 0}}, arg{wa.F32, 0}) })
	t.Run("32_good5:542", func(t *testing.T) { x2.assertReturnInvoke(t, "32_good5", []arg{{wa.I32, 0}}, arg{wa.F32, 2144337921}) })
	t.Run("32_good1:544", func(t *testing.T) { x2.assertReturnInvoke(t, "32_good1", []arg{{wa.I32, 65524}}, arg{wa.F32, 0}) })
	t.Run("32_good2:545", func(t *testing.T) { x2.assertReturnInvoke(t, "32_good2", []arg{{wa.I32, 65524}}, arg{wa.F32, 0}) })
	t.Run("32_good3:546", func(t *testing.T) { x2.assertReturnInvoke(t, "32_good3", []arg{{wa.I32, 65524}}, arg{wa.F32, 0}) })
	t.Run("32_good4:547", func(t *testing.T) { x2.assertReturnInvoke(t, "32_good4", []arg{{wa.I32, 65524}}, arg{wa.F32, 0}) })
	t.Run("32_good5:548", func(t *testing.T) { x2.assertReturnInvoke(t, "32_good5", []arg{{wa.I32, 65524}}, arg{wa.F32, 0}) })
	t.Run("32_good1:550", func(t *testing.T) { x2.assertReturnInvoke(t, "32_good1", []arg{{wa.I32, 65525}}, arg{wa.F32, 0}) })
	t.Run("32_good2:551", func(t *testing.T) { x2.assertReturnInvoke(t, "32_good2", []arg{{wa.I32, 65525}}, arg{wa.F32, 0}) })
	t.Run("32_good3:552", func(t *testing.T) { x2.assertReturnInvoke(t, "32_good3", []arg{{wa.I32, 65525}}, arg{wa.F32, 0}) })
	t.Run("32_good4:553", func(t *testing.T) { x2.assertReturnInvoke(t, "32_good4", []arg{{wa.I32, 65525}}, arg{wa.F32, 0}) })
	t.Run("32_good5:554", func(t *testing.T) {
		x2.assertTrap(t, "32_good5", []arg{{wa.I32, 65525}}, arg{Type: wa.F32}, "out of bounds memory access")
	})
	t.Run("32_good3:556", func(t *testing.T) {
		x2.assertTrap(t, "32_good3", []arg{{wa.I32, 4294967295}}, arg{Type: wa.F32}, "out of bounds memory access")
	})
	t.Run("32_good3:557", func(t *testing.T) {
		x2.assertTrap(t, "32_good3", []arg{{wa.I32, 4294967295}}, arg{Type: wa.F32}, "out of bounds memory access")
	})
	t.Run("32_bad:559", func(t *testing.T) {
		x2.assertTrap(t, "32_bad", []arg{{wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("32_bad:560", func(t *testing.T) {
		x2.assertTrap(t, "32_bad", []arg{{wa.I32, 1}}, arg{}, "out of bounds memory access")
	})
	x3 := instantiateSpecTest(t, "3", "address.4.wasm")
	t.Cleanup(func() { x3.close(t) })
	t.Run("64_good1:588", func(t *testing.T) { x3.assertReturnInvoke(t, "64_good1", []arg{{wa.I32, 0}}, arg{wa.F64, 0}) })
	t.Run("64_good2:589", func(t *testing.T) { x3.assertReturnInvoke(t, "64_good2", []arg{{wa.I32, 0}}, arg{wa.F64, 0}) })
	t.Run("64_good3:590", func(t *testing.T) { x3.assertReturnInvoke(t, "64_good3", []arg{{wa.I32, 0}}, arg{wa.F64, 0}) })
	t.Run("64_good4:591", func(t *testing.T) { x3.assertReturnInvoke(t, "64_good4", []arg{{wa.I32, 0}}, arg{wa.F64, 0}) })
	t.Run("64_good5:592", func(t *testing.T) {
		x3.assertReturnInvoke(t, "64_good5", []arg{{wa.I32, 0}}, arg{wa.F64, 9222246136947933185})
	})
	t.Run("64_good1:594", func(t *testing.T) { x3.assertReturnInvoke(t, "64_good1", []arg{{wa.I32, 65510}}, arg{wa.F64, 0}) })
	t.Run("64_good2:595", func(t *testing.T) { x3.assertReturnInvoke(t, "64_good2", []arg{{wa.I32, 65510}}, arg{wa.F64, 0}) })
	t.Run("64_good3:596", func(t *testing.T) { x3.assertReturnInvoke(t, "64_good3", []arg{{wa.I32, 65510}}, arg{wa.F64, 0}) })
	t.Run("64_good4:597", func(t *testing.T) { x3.assertReturnInvoke(t, "64_good4", []arg{{wa.I32, 65510}}, arg{wa.F64, 0}) })
	t.Run("64_good5:598", func(t *testing.T) { x3.assertReturnInvoke(t, "64_good5", []arg{{wa.I32, 65510}}, arg{wa.F64, 0}) })
	t.Run("64_good1:600", func(t *testing.T) { x3.assertReturnInvoke(t, "64_good1", []arg{{wa.I32, 65511}}, arg{wa.F64, 0}) })
	t.Run("64_good2:601", func(t *testing.T) { x3.assertReturnInvoke(t, "64_good2", []arg{{wa.I32, 65511}}, arg{wa.F64, 0}) })
	t.Run("64_good3:602", func(t *testing.T) { x3.assertReturnInvoke(t, "64_good3", []arg{{wa.I32, 65511}}, arg{wa.F64, 0}) })
	t.Run("64_good4:603", func(t *testing.T) { x3.assertReturnInvoke(t, "64_good4", []arg{{wa.I32, 65511}}, arg{wa.F64, 0}) })
	t.Run("64_good5:604", func(t *testing.T) {
		x3.assertTrap(t, "64_good5", []arg{{wa.I32, 65511}}, arg{Type: wa.F64}, "out of bounds memory access")
	})
	t.Run("64_good3:606", func(t *testing.T) {
		x3.assertTrap(t, "64_good3", []arg{{wa.I32, 4294967295}}, arg{Type: wa.F64}, "out of bounds memory access")
	})
	t.Run("64_good3:607", func(t *testing.T) {
		x3.assertTrap(t, "64_good3", []arg{{wa.I32, 4294967295}}, arg{Type: wa.F64}, "out of bounds memory access")
	})
	t.Run("64_bad:609", func(t *testing.T) {
		x3.assertTrap(t, "64_bad", []arg{{wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("64_bad:610", func(t *testing.T) {
		x3.assertTrap(t, "64_bad", []arg{{wa.I32, 1}}, arg{}, "out of bounds memory access")
	})
}

func Test_align(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "align.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	x1 := instantiateSpecTest(t, "1", "align.1.wasm")
	t.Cleanup(func() { x1.close(t) })
	x2 := instantiateSpecTest(t, "2", "align.2.wasm")
	t.Cleanup(func() { x2.close(t) })
	x3 := instantiateSpecTest(t, "3", "align.3.wasm")
	t.Cleanup(func() { x3.close(t) })
	x4 := instantiateSpecTest(t, "4", "align.4.wasm")
	t.Cleanup(func() { x4.close(t) })
	x5 := instantiateSpecTest(t, "5", "align.5.wasm")
	t.Cleanup(func() { x5.close(t) })
	x6 := instantiateSpecTest(t, "6", "align.6.wasm")
	t.Cleanup(func() { x6.close(t) })
	x7 := instantiateSpecTest(t, "7", "align.7.wasm")
	t.Cleanup(func() { x7.close(t) })
	x8 := instantiateSpecTest(t, "8", "align.8.wasm")
	t.Cleanup(func() { x8.close(t) })
	x9 := instantiateSpecTest(t, "9", "align.9.wasm")
	t.Cleanup(func() { x9.close(t) })
	x10 := instantiateSpecTest(t, "10", "align.10.wasm")
	t.Cleanup(func() { x10.close(t) })
	x11 := instantiateSpecTest(t, "11", "align.11.wasm")
	t.Cleanup(func() { x11.close(t) })
	x12 := instantiateSpecTest(t, "12", "align.12.wasm")
	t.Cleanup(func() { x12.close(t) })
	x13 := instantiateSpecTest(t, "13", "align.13.wasm")
	t.Cleanup(func() { x13.close(t) })
	x14 := instantiateSpecTest(t, "14", "align.14.wasm")
	t.Cleanup(func() { x14.close(t) })
	x15 := instantiateSpecTest(t, "15", "align.15.wasm")
	t.Cleanup(func() { x15.close(t) })
	x16 := instantiateSpecTest(t, "16", "align.16.wasm")
	t.Cleanup(func() { x16.close(t) })
	x17 := instantiateSpecTest(t, "17", "align.17.wasm")
	t.Cleanup(func() { x17.close(t) })
	x18 := instantiateSpecTest(t, "18", "align.18.wasm")
	t.Cleanup(func() { x18.close(t) })
	x19 := instantiateSpecTest(t, "19", "align.19.wasm")
	t.Cleanup(func() { x19.close(t) })
	x20 := instantiateSpecTest(t, "20", "align.20.wasm")
	t.Cleanup(func() { x20.close(t) })
	x21 := instantiateSpecTest(t, "21", "align.21.wasm")
	t.Cleanup(func() { x21.close(t) })
	x22 := instantiateSpecTest(t, "22", "align.22.wasm")
	t.Cleanup(func() { x22.close(t) })
	t.Run("assert_malformed:28", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:34", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:40", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:46", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:52", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:58", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:64", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:70", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:76", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:82", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:88", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:94", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:100", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:106", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:112", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:118", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:124", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:130", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:136", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:142", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:148", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:154", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:160", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:166", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:172", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:178", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:184", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:190", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:197", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:203", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:209", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:215", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:221", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:227", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:233", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:239", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:245", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:251", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:257", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:263", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:269", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:275", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:281", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:287", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:293", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:299", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_invalid:306", func(t *testing.T) { assertInvalidSpec(t, "align.69.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:310", func(t *testing.T) { assertInvalidSpec(t, "align.70.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:314", func(t *testing.T) { assertInvalidSpec(t, "align.71.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:318", func(t *testing.T) { assertInvalidSpec(t, "align.72.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:322", func(t *testing.T) { assertInvalidSpec(t, "align.73.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:326", func(t *testing.T) { assertInvalidSpec(t, "align.74.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:330", func(t *testing.T) { assertInvalidSpec(t, "align.75.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:334", func(t *testing.T) { assertInvalidSpec(t, "align.76.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:338", func(t *testing.T) { assertInvalidSpec(t, "align.77.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:342", func(t *testing.T) { assertInvalidSpec(t, "align.78.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:346", func(t *testing.T) { assertInvalidSpec(t, "align.79.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:350", func(t *testing.T) { assertInvalidSpec(t, "align.80.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:354", func(t *testing.T) { assertInvalidSpec(t, "align.81.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:358", func(t *testing.T) { assertInvalidSpec(t, "align.82.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:363", func(t *testing.T) { assertInvalidSpec(t, "align.83.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:367", func(t *testing.T) { assertInvalidSpec(t, "align.84.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:371", func(t *testing.T) { assertInvalidSpec(t, "align.85.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:375", func(t *testing.T) { assertInvalidSpec(t, "align.86.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:379", func(t *testing.T) { assertInvalidSpec(t, "align.87.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:383", func(t *testing.T) { assertInvalidSpec(t, "align.88.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:387", func(t *testing.T) { assertInvalidSpec(t, "align.89.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:391", func(t *testing.T) { assertInvalidSpec(t, "align.90.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:395", func(t *testing.T) { assertInvalidSpec(t, "align.91.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:399", func(t *testing.T) { assertInvalidSpec(t, "align.92.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:403", func(t *testing.T) { assertInvalidSpec(t, "align.93.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:407", func(t *testing.T) { assertInvalidSpec(t, "align.94.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:411", func(t *testing.T) { assertInvalidSpec(t, "align.95.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:415", func(t *testing.T) { assertInvalidSpec(t, "align.96.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:420", func(t *testing.T) { assertInvalidSpec(t, "align.97.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:424", func(t *testing.T) { assertInvalidSpec(t, "align.98.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:428", func(t *testing.T) { assertInvalidSpec(t, "align.99.wasm", "alignment must not be larger than natural") })
	t.Run("assert_invalid:432", func(t *testing.T) {
		assertInvalidSpec(t, "align.100.wasm", "alignment must not be larger than natural")
	})
	t.Run("assert_invalid:436", func(t *testing.T) {
		assertInvalidSpec(t, "align.101.wasm", "alignment must not be larger than natural")
	})
	t.Run("assert_invalid:440", func(t *testing.T) {
		assertInvalidSpec(t, "align.102.wasm", "alignment must not be larger than natural")
	})
	t.Run("assert_invalid:444", func(t *testing.T) {
		assertInvalidSpec(t, "align.103.wasm", "alignment must not be larger than natural")
	})
	t.Run("assert_invalid:448", func(t *testing.T) {
		assertInvalidSpec(t, "align.104.wasm", "alignment must not be larger than natural")
	})
	t.Run("assert_invalid:452", func(t *testing.T) {
		assertInvalidSpec(t, "align.105.wasm", "alignment must not be larger than natural")
	})
	x23 := instantiateSpecTest(t, "23", "align.106.wasm")
	t.Cleanup(func() { x23.close(t) })
	t.Run("f32_align_switch:802", func(t *testing.T) {
		x23.assertReturnInvoke(t, "f32_align_switch", []arg{{wa.I32, 0}}, arg{wa.F32, 1092616192})
	})
	t.Run("f32_align_switch:803", func(t *testing.T) {
		x23.assertReturnInvoke(t, "f32_align_switch", []arg{{wa.I32, 1}}, arg{wa.F32, 1092616192})
	})
	t.Run("f32_align_switch:804", func(t *testing.T) {
		x23.assertReturnInvoke(t, "f32_align_switch", []arg{{wa.I32, 2}}, arg{wa.F32, 1092616192})
	})
	t.Run("f32_align_switch:805", func(t *testing.T) {
		x23.assertReturnInvoke(t, "f32_align_switch", []arg{{wa.I32, 3}}, arg{wa.F32, 1092616192})
	})
	t.Run("f64_align_switch:807", func(t *testing.T) {
		x23.assertReturnInvoke(t, "f64_align_switch", []arg{{wa.I32, 0}}, arg{wa.F64, 4621819117588971520})
	})
	t.Run("f64_align_switch:808", func(t *testing.T) {
		x23.assertReturnInvoke(t, "f64_align_switch", []arg{{wa.I32, 1}}, arg{wa.F64, 4621819117588971520})
	})
	t.Run("f64_align_switch:809", func(t *testing.T) {
		x23.assertReturnInvoke(t, "f64_align_switch", []arg{{wa.I32, 2}}, arg{wa.F64, 4621819117588971520})
	})
	t.Run("f64_align_switch:810", func(t *testing.T) {
		x23.assertReturnInvoke(t, "f64_align_switch", []arg{{wa.I32, 3}}, arg{wa.F64, 4621819117588971520})
	})
	t.Run("f64_align_switch:811", func(t *testing.T) {
		x23.assertReturnInvoke(t, "f64_align_switch", []arg{{wa.I32, 4}}, arg{wa.F64, 4621819117588971520})
	})
	t.Run("i32_align_switch:813", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i32_align_switch", []arg{{wa.I32, 0}, {wa.I32, 0}}, arg{wa.I32, 10})
	})
	t.Run("i32_align_switch:814", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i32_align_switch", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{wa.I32, 10})
	})
	t.Run("i32_align_switch:815", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i32_align_switch", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{wa.I32, 10})
	})
	t.Run("i32_align_switch:816", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i32_align_switch", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I32, 10})
	})
	t.Run("i32_align_switch:817", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i32_align_switch", []arg{{wa.I32, 2}, {wa.I32, 0}}, arg{wa.I32, 10})
	})
	t.Run("i32_align_switch:818", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i32_align_switch", []arg{{wa.I32, 2}, {wa.I32, 1}}, arg{wa.I32, 10})
	})
	t.Run("i32_align_switch:819", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i32_align_switch", []arg{{wa.I32, 2}, {wa.I32, 2}}, arg{wa.I32, 10})
	})
	t.Run("i32_align_switch:820", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i32_align_switch", []arg{{wa.I32, 3}, {wa.I32, 0}}, arg{wa.I32, 10})
	})
	t.Run("i32_align_switch:821", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i32_align_switch", []arg{{wa.I32, 3}, {wa.I32, 1}}, arg{wa.I32, 10})
	})
	t.Run("i32_align_switch:822", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i32_align_switch", []arg{{wa.I32, 3}, {wa.I32, 2}}, arg{wa.I32, 10})
	})
	t.Run("i32_align_switch:823", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i32_align_switch", []arg{{wa.I32, 4}, {wa.I32, 0}}, arg{wa.I32, 10})
	})
	t.Run("i32_align_switch:824", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i32_align_switch", []arg{{wa.I32, 4}, {wa.I32, 1}}, arg{wa.I32, 10})
	})
	t.Run("i32_align_switch:825", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i32_align_switch", []arg{{wa.I32, 4}, {wa.I32, 2}}, arg{wa.I32, 10})
	})
	t.Run("i32_align_switch:826", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i32_align_switch", []arg{{wa.I32, 4}, {wa.I32, 4}}, arg{wa.I32, 10})
	})
	t.Run("i64_align_switch:828", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i64_align_switch", []arg{{wa.I32, 0}, {wa.I32, 0}}, arg{wa.I64, 10})
	})
	t.Run("i64_align_switch:829", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i64_align_switch", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{wa.I64, 10})
	})
	t.Run("i64_align_switch:830", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i64_align_switch", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{wa.I64, 10})
	})
	t.Run("i64_align_switch:831", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i64_align_switch", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I64, 10})
	})
	t.Run("i64_align_switch:832", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i64_align_switch", []arg{{wa.I32, 2}, {wa.I32, 0}}, arg{wa.I64, 10})
	})
	t.Run("i64_align_switch:833", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i64_align_switch", []arg{{wa.I32, 2}, {wa.I32, 1}}, arg{wa.I64, 10})
	})
	t.Run("i64_align_switch:834", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i64_align_switch", []arg{{wa.I32, 2}, {wa.I32, 2}}, arg{wa.I64, 10})
	})
	t.Run("i64_align_switch:835", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i64_align_switch", []arg{{wa.I32, 3}, {wa.I32, 0}}, arg{wa.I64, 10})
	})
	t.Run("i64_align_switch:836", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i64_align_switch", []arg{{wa.I32, 3}, {wa.I32, 1}}, arg{wa.I64, 10})
	})
	t.Run("i64_align_switch:837", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i64_align_switch", []arg{{wa.I32, 3}, {wa.I32, 2}}, arg{wa.I64, 10})
	})
	t.Run("i64_align_switch:838", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i64_align_switch", []arg{{wa.I32, 4}, {wa.I32, 0}}, arg{wa.I64, 10})
	})
	t.Run("i64_align_switch:839", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i64_align_switch", []arg{{wa.I32, 4}, {wa.I32, 1}}, arg{wa.I64, 10})
	})
	t.Run("i64_align_switch:840", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i64_align_switch", []arg{{wa.I32, 4}, {wa.I32, 2}}, arg{wa.I64, 10})
	})
	t.Run("i64_align_switch:841", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i64_align_switch", []arg{{wa.I32, 4}, {wa.I32, 4}}, arg{wa.I64, 10})
	})
	t.Run("i64_align_switch:842", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i64_align_switch", []arg{{wa.I32, 5}, {wa.I32, 0}}, arg{wa.I64, 10})
	})
	t.Run("i64_align_switch:843", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i64_align_switch", []arg{{wa.I32, 5}, {wa.I32, 1}}, arg{wa.I64, 10})
	})
	t.Run("i64_align_switch:844", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i64_align_switch", []arg{{wa.I32, 5}, {wa.I32, 2}}, arg{wa.I64, 10})
	})
	t.Run("i64_align_switch:845", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i64_align_switch", []arg{{wa.I32, 5}, {wa.I32, 4}}, arg{wa.I64, 10})
	})
	t.Run("i64_align_switch:846", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i64_align_switch", []arg{{wa.I32, 6}, {wa.I32, 0}}, arg{wa.I64, 10})
	})
	t.Run("i64_align_switch:847", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i64_align_switch", []arg{{wa.I32, 6}, {wa.I32, 1}}, arg{wa.I64, 10})
	})
	t.Run("i64_align_switch:848", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i64_align_switch", []arg{{wa.I32, 6}, {wa.I32, 2}}, arg{wa.I64, 10})
	})
	t.Run("i64_align_switch:849", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i64_align_switch", []arg{{wa.I32, 6}, {wa.I32, 4}}, arg{wa.I64, 10})
	})
	t.Run("i64_align_switch:850", func(t *testing.T) {
		x23.assertReturnInvoke(t, "i64_align_switch", []arg{{wa.I32, 6}, {wa.I32, 8}}, arg{wa.I64, 10})
	})
	x24 := instantiateSpecTest(t, "24", "align.107.wasm")
	t.Cleanup(func() { x24.close(t) })
	t.Run("store:864", func(t *testing.T) {
		x24.assertTrap(t, "store", []arg{{wa.I32, 65532}, {wa.I64, 18446744073709551615}}, arg{}, "out of bounds memory access")
	})
	t.Run("load:866", func(t *testing.T) { x24.assertReturnInvoke(t, "load", []arg{{wa.I32, 65532}}, arg{wa.I32, 0}) })
}

func Test_binary_leb128(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "binary-leb128.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	x1 := instantiateSpecTest(t, "1", "binary-leb128.1.wasm")
	t.Cleanup(func() { x1.close(t) })
	x2 := instantiateSpecTest(t, "2", "binary-leb128.2.wasm")
	t.Cleanup(func() { x2.close(t) })
	x3 := instantiateSpecTest(t, "3", "binary-leb128.3.wasm")
	t.Cleanup(func() { x3.close(t) })
	x4 := instantiateSpecTest(t, "4", "binary-leb128.4.wasm")
	t.Cleanup(func() { x4.close(t) })
	x5 := instantiateSpecTest(t, "5", "binary-leb128.5.wasm")
	t.Cleanup(func() { x5.close(t) })
	x6 := instantiateSpecTest(t, "6", "binary-leb128.6.wasm")
	t.Cleanup(func() { x6.close(t) })
	x7 := instantiateSpecTest(t, "7", "binary-leb128.7.wasm")
	t.Cleanup(func() { x7.close(t) })
	x8 := instantiateSpecTest(t, "8", "binary-leb128.8.wasm")
	t.Cleanup(func() { x8.close(t) })
	x9 := instantiateSpecTest(t, "9", "binary-leb128.9.wasm")
	t.Cleanup(func() { x9.close(t) })
	x10 := instantiateSpecTest(t, "10", "binary-leb128.10.wasm")
	t.Cleanup(func() { x10.close(t) })
	x11 := instantiateSpecTest(t, "11", "binary-leb128.11.wasm")
	t.Cleanup(func() { x11.close(t) })
	x12 := instantiateSpecTest(t, "12", "binary-leb128.12.wasm")
	t.Cleanup(func() { x12.close(t) })
	x13 := instantiateSpecTest(t, "13", "binary-leb128.13.wasm")
	t.Cleanup(func() { x13.close(t) })
	x14 := instantiateSpecTest(t, "14", "binary-leb128.14.wasm")
	t.Cleanup(func() { x14.close(t) })
	x15 := instantiateSpecTest(t, "15", "binary-leb128.15.wasm")
	t.Cleanup(func() { x15.close(t) })
	x16 := instantiateSpecTest(t, "16", "binary-leb128.16.wasm")
	t.Cleanup(func() { x16.close(t) })
	x17 := instantiateSpecTest(t, "17", "binary-leb128.17.wasm")
	t.Cleanup(func() { x17.close(t) })
	x18 := instantiateSpecTest(t, "18", "binary-leb128.18.wasm")
	t.Cleanup(func() { x18.close(t) })
	x19 := instantiateSpecTest(t, "19", "binary-leb128.19.wasm")
	t.Cleanup(func() { x19.close(t) })
	x20 := instantiateSpecTest(t, "20", "binary-leb128.20.wasm")
	t.Cleanup(func() { x20.close(t) })
	x21 := instantiateSpecTest(t, "21", "binary-leb128.21.wasm")
	t.Cleanup(func() { x21.close(t) })
	x22 := instantiateSpecTest(t, "22", "binary-leb128.22.wasm")
	t.Cleanup(func() { x22.close(t) })
	x23 := instantiateSpecTest(t, "23", "binary-leb128.23.wasm")
	t.Cleanup(func() { x23.close(t) })
	x24 := instantiateSpecTest(t, "24", "binary-leb128.24.wasm")
	t.Cleanup(func() { x24.close(t) })
	t.Run("assert_malformed:218", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.25.wasm", "integer representation too long") })
	t.Run("assert_malformed:226", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.26.wasm", "integer representation too long") })
	t.Run("assert_malformed:235", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.27.wasm", "integer representation too long") })
	t.Run("assert_malformed:246", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.28.wasm", "integer representation too long") })
	t.Run("assert_malformed:257", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.29.wasm", "integer representation too long") })
	t.Run("assert_malformed:268", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.30.wasm", "integer representation too long") })
	t.Run("assert_malformed:279", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.31.wasm", "integer representation too long") })
	t.Run("assert_malformed:291", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.32.wasm", "integer representation too long") })
	t.Run("assert_malformed:303", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.33.wasm", "integer representation too long") })
	t.Run("assert_malformed:318", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.34.wasm", "integer representation too long") })
	t.Run("assert_malformed:333", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.35.wasm", "integer representation too long") })
	t.Run("assert_malformed:348", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.36.wasm", "integer representation too long") })
	t.Run("assert_malformed:360", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.37.wasm", "integer representation too long") })
	t.Run("assert_malformed:376", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.38.wasm", "integer representation too long") })
	t.Run("assert_malformed:392", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.39.wasm", "integer representation too long") })
	t.Run("assert_malformed:405", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.40.wasm", "integer representation too long") })
	t.Run("assert_malformed:424", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.41.wasm", "integer representation too long") })
	t.Run("assert_malformed:443", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.42.wasm", "integer representation too long") })
	t.Run("assert_malformed:462", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.43.wasm", "integer representation too long") })
	t.Run("assert_malformed:483", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.44.wasm", "integer representation too long") })
	t.Run("assert_malformed:493", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.45.wasm", "integer representation too long") })
	t.Run("assert_malformed:504", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.46.wasm", "integer representation too long") })
	t.Run("assert_malformed:514", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.47.wasm", "integer representation too long") })
	t.Run("assert_malformed:526", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.48.wasm", "integer too large") })
	t.Run("assert_malformed:534", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.49.wasm", "integer too large") })
	t.Run("assert_malformed:542", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.50.wasm", "integer too large") })
	t.Run("assert_malformed:551", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.51.wasm", "integer too large") })
	t.Run("assert_malformed:560", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.52.wasm", "integer too large") })
	t.Run("assert_malformed:571", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.53.wasm", "integer too large") })
	t.Run("assert_malformed:582", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.54.wasm", "integer too large") })
	t.Run("assert_malformed:593", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.55.wasm", "integer too large") })
	t.Run("assert_malformed:604", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.56.wasm", "integer too large") })
	t.Run("assert_malformed:616", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.57.wasm", "integer too large") })
	t.Run("assert_malformed:628", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.58.wasm", "integer too large") })
	t.Run("assert_malformed:643", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.59.wasm", "integer too large") })
	t.Run("assert_malformed:658", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.60.wasm", "integer too large") })
	t.Run("assert_malformed:673", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.61.wasm", "integer too large") })
	t.Run("assert_malformed:686", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.62.wasm", "integer too large") })
	t.Run("assert_malformed:702", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.63.wasm", "integer too large") })
	t.Run("assert_malformed:718", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.64.wasm", "integer too large") })
	t.Run("assert_malformed:731", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.65.wasm", "integer too large") })
	t.Run("assert_malformed:750", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.66.wasm", "integer too large") })
	t.Run("assert_malformed:769", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.67.wasm", "integer too large") })
	t.Run("assert_malformed:787", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.68.wasm", "integer too large") })
	t.Run("assert_malformed:806", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.69.wasm", "integer too large") })
	t.Run("assert_malformed:825", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.70.wasm", "integer too large") })
	t.Run("assert_malformed:844", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.71.wasm", "integer too large") })
	t.Run("assert_malformed:863", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.72.wasm", "integer too large") })
	t.Run("assert_malformed:885", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.73.wasm", "integer too large") })
	t.Run("assert_malformed:895", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.74.wasm", "integer too large") })
	t.Run("assert_malformed:905", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.75.wasm", "integer too large") })
	t.Run("assert_malformed:915", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.76.wasm", "integer too large") })
	t.Run("assert_malformed:926", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.77.wasm", "integer too large") })
	t.Run("assert_malformed:936", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.78.wasm", "integer too large") })
	t.Run("assert_malformed:946", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.79.wasm", "integer too large") })
	t.Run("assert_malformed:956", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.80.wasm", "integer too large") })
	x25 := instantiateSpecTest(t, "25", "binary-leb128.81.wasm")
	t.Cleanup(func() { x25.close(t) })
	t.Run("assert_malformed:988", func(t *testing.T) { assertMalformedSpec(t, "binary-leb128.82.wasm", "integer representation too long") })
}

func Test_binary(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "binary.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	x1 := instantiateSpecTest(t, "1", "binary.1.wasm")
	t.Cleanup(func() { x1.close(t) })
	xM1 := instantiateSpecTest(t, "$M1", "binary.2.wasm")
	t.Cleanup(func() { xM1.close(t) })
	xM2 := instantiateSpecTest(t, "$M2", "binary.3.wasm")
	t.Cleanup(func() { xM2.close(t) })
	t.Run("assert_malformed:6", func(t *testing.T) { assertMalformedSpec(t, "binary.4.wasm", "unexpected end") })
	t.Run("assert_malformed:7", func(t *testing.T) { assertMalformedSpec(t, "binary.5.wasm", "unexpected end") })
	t.Run("assert_malformed:8", func(t *testing.T) { assertMalformedSpec(t, "binary.6.wasm", "unexpected end") })
	t.Run("assert_malformed:9", func(t *testing.T) { assertMalformedSpec(t, "binary.7.wasm", "magic header not detected") })
	t.Run("assert_malformed:10", func(t *testing.T) { assertMalformedSpec(t, "binary.8.wasm", "magic header not detected") })
	t.Run("assert_malformed:11", func(t *testing.T) { assertMalformedSpec(t, "binary.9.wasm", "magic header not detected") })
	t.Run("assert_malformed:12", func(t *testing.T) { assertMalformedSpec(t, "binary.10.wasm", "magic header not detected") })
	t.Run("assert_malformed:13", func(t *testing.T) { assertMalformedSpec(t, "binary.11.wasm", "magic header not detected") })
	t.Run("assert_malformed:14", func(t *testing.T) { assertMalformedSpec(t, "binary.12.wasm", "magic header not detected") })
	t.Run("assert_malformed:15", func(t *testing.T) { assertMalformedSpec(t, "binary.13.wasm", "magic header not detected") })
	t.Run("assert_malformed:16", func(t *testing.T) { assertMalformedSpec(t, "binary.14.wasm", "magic header not detected") })
	t.Run("assert_malformed:17", func(t *testing.T) { assertMalformedSpec(t, "binary.15.wasm", "magic header not detected") })
	t.Run("assert_malformed:18", func(t *testing.T) { assertMalformedSpec(t, "binary.16.wasm", "magic header not detected") })
	t.Run("assert_malformed:21", func(t *testing.T) { assertMalformedSpec(t, "binary.17.wasm", "magic header not detected") })
	t.Run("assert_malformed:24", func(t *testing.T) { assertMalformedSpec(t, "binary.18.wasm", "magic header not detected") })
	t.Run("assert_malformed:25", func(t *testing.T) { assertMalformedSpec(t, "binary.19.wasm", "magic header not detected") })
	t.Run("assert_malformed:28", func(t *testing.T) { assertMalformedSpec(t, "binary.20.wasm", "magic header not detected") })
	t.Run("assert_malformed:31", func(t *testing.T) { assertMalformedSpec(t, "binary.21.wasm", "magic header not detected") })
	t.Run("assert_malformed:34", func(t *testing.T) { assertMalformedSpec(t, "binary.22.wasm", "magic header not detected") })
	t.Run("assert_malformed:37", func(t *testing.T) { assertMalformedSpec(t, "binary.23.wasm", "unexpected end") })
	t.Run("assert_malformed:38", func(t *testing.T) { assertMalformedSpec(t, "binary.24.wasm", "unexpected end") })
	t.Run("assert_malformed:39", func(t *testing.T) { assertMalformedSpec(t, "binary.25.wasm", "unexpected end") })
	t.Run("assert_malformed:40", func(t *testing.T) { assertMalformedSpec(t, "binary.26.wasm", "unknown binary version") })
	t.Run("assert_malformed:41", func(t *testing.T) { assertMalformedSpec(t, "binary.27.wasm", "unknown binary version") })
	t.Run("assert_malformed:42", func(t *testing.T) { assertMalformedSpec(t, "binary.28.wasm", "unknown binary version") })
	t.Run("assert_malformed:43", func(t *testing.T) { assertMalformedSpec(t, "binary.29.wasm", "unknown binary version") })
	t.Run("assert_malformed:44", func(t *testing.T) { assertMalformedSpec(t, "binary.30.wasm", "unknown binary version") })
	t.Run("assert_malformed:45", func(t *testing.T) { assertMalformedSpec(t, "binary.31.wasm", "unknown binary version") })
	t.Run("assert_malformed:48", func(t *testing.T) { assertMalformedSpec(t, "binary.32.wasm", "malformed section id") })
	t.Run("assert_malformed:49", func(t *testing.T) { assertMalformedSpec(t, "binary.33.wasm", "malformed section id") })
	t.Run("assert_malformed:50", func(t *testing.T) { assertMalformedSpec(t, "binary.34.wasm", "malformed section id") })
	t.Run("assert_malformed:51", func(t *testing.T) { assertMalformedSpec(t, "binary.35.wasm", "malformed section id") })
	t.Run("assert_malformed:52", func(t *testing.T) { assertMalformedSpec(t, "binary.36.wasm", "malformed section id") })
	x2 := instantiateSpecTest(t, "2", "binary.37.wasm")
	t.Cleanup(func() { x2.close(t) })
	x3 := instantiateSpecTest(t, "3", "binary.38.wasm")
	t.Cleanup(func() { x3.close(t) })
	x4 := instantiateSpecTest(t, "4", "binary.39.wasm")
	t.Cleanup(func() { x4.close(t) })
	x5 := instantiateSpecTest(t, "5", "binary.40.wasm")
	t.Cleanup(func() { x5.close(t) })
	x6 := instantiateSpecTest(t, "6", "binary.41.wasm")
	t.Cleanup(func() { x6.close(t) })
	x7 := instantiateSpecTest(t, "7", "binary.42.wasm")
	t.Cleanup(func() { x7.close(t) })
	x8 := instantiateSpecTest(t, "8", "binary.43.wasm")
	t.Cleanup(func() { x8.close(t) })
	x9 := instantiateSpecTest(t, "9", "binary.44.wasm")
	t.Cleanup(func() { x9.close(t) })
	x10 := instantiateSpecTest(t, "10", "binary.45.wasm")
	t.Cleanup(func() { x10.close(t) })
	x11 := instantiateSpecTest(t, "11", "binary.46.wasm")
	t.Cleanup(func() { x11.close(t) })
	x12 := instantiateSpecTest(t, "12", "binary.47.wasm")
	t.Cleanup(func() { x12.close(t) })
	x13 := instantiateSpecTest(t, "13", "binary.48.wasm")
	t.Cleanup(func() { x13.close(t) })
	x14 := instantiateSpecTest(t, "14", "binary.49.wasm")
	t.Cleanup(func() { x14.close(t) })
	x15 := instantiateSpecTest(t, "15", "binary.50.wasm")
	t.Cleanup(func() { x15.close(t) })
	t.Run("assert_malformed:165", func(t *testing.T) { assertMalformedSpec(t, "binary.51.wasm", "integer representation too long") })
	t.Run("assert_malformed:178", func(t *testing.T) { assertMalformedSpec(t, "binary.52.wasm", "integer representation too long") })
	t.Run("assert_malformed:188", func(t *testing.T) { assertMalformedSpec(t, "binary.53.wasm", "integer representation too long") })
	t.Run("assert_malformed:198", func(t *testing.T) { assertMalformedSpec(t, "binary.54.wasm", "integer representation too long") })
	t.Run("assert_malformed:209", func(t *testing.T) { assertMalformedSpec(t, "binary.55.wasm", "integer representation too long") })
	t.Run("assert_malformed:219", func(t *testing.T) { assertMalformedSpec(t, "binary.56.wasm", "integer representation too long") })
	t.Run("assert_malformed:231", func(t *testing.T) { assertMalformedSpec(t, "binary.57.wasm", "integer too large") })
	t.Run("assert_malformed:239", func(t *testing.T) { assertMalformedSpec(t, "binary.58.wasm", "integer too large") })
	t.Run("assert_malformed:249", func(t *testing.T) { assertMalformedSpec(t, "binary.59.wasm", "integer too large") })
	t.Run("assert_malformed:259", func(t *testing.T) { assertMalformedSpec(t, "binary.60.wasm", "integer too large") })
	t.Run("assert_malformed:269", func(t *testing.T) { assertMalformedSpec(t, "binary.61.wasm", "integer too large") })
	t.Run("assert_malformed:279", func(t *testing.T) { assertMalformedSpec(t, "binary.62.wasm", "integer too large") })
	t.Run("assert_malformed:290", func(t *testing.T) { assertMalformedSpec(t, "binary.63.wasm", "integer too large") })
	t.Run("assert_malformed:300", func(t *testing.T) { assertMalformedSpec(t, "binary.64.wasm", "integer too large") })
	t.Run("assert_malformed:310", func(t *testing.T) { assertMalformedSpec(t, "binary.65.wasm", "integer too large") })
	t.Run("assert_malformed:320", func(t *testing.T) { assertMalformedSpec(t, "binary.66.wasm", "integer too large") })
	t.Run("assert_malformed:331", func(t *testing.T) { assertMalformedSpec(t, "binary.67.wasm", "integer too large") })
	t.Run("assert_malformed:341", func(t *testing.T) { assertMalformedSpec(t, "binary.68.wasm", "integer too large") })
	t.Run("assert_malformed:351", func(t *testing.T) { assertMalformedSpec(t, "binary.69.wasm", "integer too large") })
	t.Run("assert_malformed:361", func(t *testing.T) { assertMalformedSpec(t, "binary.70.wasm", "integer too large") })
	t.Run("assert_malformed:374", func(t *testing.T) { assertMalformedSpec(t, "binary.71.wasm", "integer representation too long") })
	t.Run("assert_malformed:382", func(t *testing.T) { assertMalformedSpec(t, "binary.72.wasm", "integer representation too long") })
	t.Run("assert_malformed:401", func(t *testing.T) { assertMalformedSpec(t, "binary.73.wasm", "integer representation too long") })
	t.Run("assert_malformed:420", func(t *testing.T) { assertMalformedSpec(t, "binary.74.wasm", "integer representation too long") })
	t.Run("assert_malformed:439", func(t *testing.T) { assertMalformedSpec(t, "binary.75.wasm", "integer representation too long") })
	t.Run("assert_malformed:460", func(t *testing.T) { assertMalformedSpec(t, "binary.76.wasm", "integer representation too long") })
	t.Run("assert_malformed:470", func(t *testing.T) { assertMalformedSpec(t, "binary.77.wasm", "integer representation too long") })
	t.Run("assert_malformed:481", func(t *testing.T) { assertMalformedSpec(t, "binary.78.wasm", "integer representation too long") })
	t.Run("assert_malformed:491", func(t *testing.T) { assertMalformedSpec(t, "binary.79.wasm", "integer representation too long") })
	t.Run("assert_malformed:503", func(t *testing.T) { assertMalformedSpec(t, "binary.80.wasm", "integer too large") })
	t.Run("assert_malformed:511", func(t *testing.T) { assertMalformedSpec(t, "binary.81.wasm", "integer too large") })
	t.Run("assert_malformed:519", func(t *testing.T) { assertMalformedSpec(t, "binary.82.wasm", "integer too large") })
	t.Run("assert_malformed:538", func(t *testing.T) { assertMalformedSpec(t, "binary.83.wasm", "integer too large") })
	t.Run("assert_malformed:557", func(t *testing.T) { assertMalformedSpec(t, "binary.84.wasm", "integer too large") })
	t.Run("assert_malformed:575", func(t *testing.T) { assertMalformedSpec(t, "binary.85.wasm", "integer too large") })
	t.Run("assert_malformed:594", func(t *testing.T) { assertMalformedSpec(t, "binary.86.wasm", "integer too large") })
	t.Run("assert_malformed:613", func(t *testing.T) { assertMalformedSpec(t, "binary.87.wasm", "integer too large") })
	t.Run("assert_malformed:632", func(t *testing.T) { assertMalformedSpec(t, "binary.88.wasm", "integer too large") })
	t.Run("assert_malformed:651", func(t *testing.T) { assertMalformedSpec(t, "binary.89.wasm", "integer too large") })
	t.Run("assert_malformed:673", func(t *testing.T) { assertMalformedSpec(t, "binary.90.wasm", "integer too large") })
	t.Run("assert_malformed:683", func(t *testing.T) { assertMalformedSpec(t, "binary.91.wasm", "integer too large") })
	t.Run("assert_malformed:693", func(t *testing.T) { assertMalformedSpec(t, "binary.92.wasm", "integer too large") })
	t.Run("assert_malformed:703", func(t *testing.T) { assertMalformedSpec(t, "binary.93.wasm", "integer too large") })
	t.Run("assert_malformed:714", func(t *testing.T) { assertMalformedSpec(t, "binary.94.wasm", "integer too large") })
	t.Run("assert_malformed:724", func(t *testing.T) { assertMalformedSpec(t, "binary.95.wasm", "integer too large") })
	t.Run("assert_malformed:734", func(t *testing.T) { assertMalformedSpec(t, "binary.96.wasm", "integer too large") })
	t.Run("assert_malformed:744", func(t *testing.T) { assertMalformedSpec(t, "binary.97.wasm", "integer too large") })
	t.Run("assert_malformed:756", func(t *testing.T) { assertMalformedSpec(t, "binary.98.wasm", "zero byte expected") })
	t.Run("assert_malformed:776", func(t *testing.T) { assertMalformedSpec(t, "binary.99.wasm", "zero byte expected") })
	t.Run("assert_malformed:796", func(t *testing.T) { assertMalformedSpec(t, "binary.100.wasm", "zero byte expected") })
	t.Run("assert_malformed:815", func(t *testing.T) { assertMalformedSpec(t, "binary.101.wasm", "zero byte expected") })
	t.Run("assert_malformed:834", func(t *testing.T) { assertMalformedSpec(t, "binary.102.wasm", "zero byte expected") })
	t.Run("assert_malformed:854", func(t *testing.T) { assertMalformedSpec(t, "binary.103.wasm", "zero byte expected") })
	t.Run("assert_malformed:873", func(t *testing.T) { assertMalformedSpec(t, "binary.104.wasm", "zero byte expected") })
	t.Run("assert_malformed:892", func(t *testing.T) { assertMalformedSpec(t, "binary.105.wasm", "zero byte expected") })
	t.Run("assert_malformed:910", func(t *testing.T) { assertMalformedSpec(t, "binary.106.wasm", "zero byte expected") })
	t.Run("assert_malformed:928", func(t *testing.T) { assertMalformedSpec(t, "binary.107.wasm", "zero byte expected") })
	t.Run("assert_malformed:947", func(t *testing.T) { assertMalformedSpec(t, "binary.108.wasm", "integer too large") })
	t.Run("assert_malformed:964", func(t *testing.T) { assertMalformedSpec(t, "binary.109.wasm", "integer too large") })
	t.Run("assert_malformed:981", func(t *testing.T) { assertMalformedSpec(t, "binary.110.wasm", "too many locals") })
	t.Run("assert_malformed:997", func(t *testing.T) { assertMalformedSpec(t, "binary.111.wasm", "too many locals") })
	x16 := instantiateSpecTest(t, "16", "binary.112.wasm")
	t.Cleanup(func() { x16.close(t) })
	t.Run("assert_malformed:1031", func(t *testing.T) {
		assertMalformedSpec(t, "binary.113.wasm", "function and code section have inconsistent lengths")
	})
	t.Run("assert_malformed:1041", func(t *testing.T) {
		assertMalformedSpec(t, "binary.114.wasm", "function and code section have inconsistent lengths")
	})
	t.Run("assert_malformed:1050", func(t *testing.T) {
		assertMalformedSpec(t, "binary.115.wasm", "function and code section have inconsistent lengths")
	})
	t.Run("assert_malformed:1061", func(t *testing.T) {
		assertMalformedSpec(t, "binary.116.wasm", "function and code section have inconsistent lengths")
	})
	x17 := instantiateSpecTest(t, "17", "binary.117.wasm")
	t.Cleanup(func() { x17.close(t) })
	x18 := instantiateSpecTest(t, "18", "binary.118.wasm")
	t.Cleanup(func() { x18.close(t) })
	t.Run("assert_malformed:1084", func(t *testing.T) {
		assertMalformedSpec(t, "binary.119.wasm", "data count and data section have inconsistent lengths")
	})
	t.Run("assert_malformed:1094", func(t *testing.T) {
		assertMalformedSpec(t, "binary.120.wasm", "data count and data section have inconsistent lengths")
	})
	t.Run("assert_malformed:1104", func(t *testing.T) { assertMalformedSpec(t, "binary.121.wasm", "data count section required") })
	t.Run("assert_malformed:1126", func(t *testing.T) { assertMalformedSpec(t, "binary.122.wasm", "data count section required") })
	t.Run("assert_malformed:1145", func(t *testing.T) { assertMalformedSpec(t, "binary.123.wasm", "illegal opcode") })
	t.Run("assert_malformed:1171", func(t *testing.T) { t.Skip("reference types not supported") })
	x19 := instantiateSpecTest(t, "19", "binary.125.wasm")
	t.Cleanup(func() { x19.close(t) })
	x20 := instantiateSpecTest(t, "20", "binary.126.wasm")
	t.Cleanup(func() { x20.close(t) })
	x21 := instantiateSpecTest(t, "21", "binary.127.wasm")
	t.Cleanup(func() { x21.close(t) })
	t.Run("assert_malformed:1252", func(t *testing.T) { assertMalformedSpec(t, "binary.128.wasm", "unexpected end of section or function") })
	t.Run("assert_malformed:1263", func(t *testing.T) { assertMalformedSpec(t, "binary.129.wasm", "section size mismatch") })
	x22 := instantiateSpecTest(t, "22", "binary.130.wasm")
	t.Cleanup(func() { x22.close(t) })
	t.Run("assert_malformed:1282", func(t *testing.T) { assertMalformedSpec(t, "binary.131.wasm", "malformed import kind") })
	t.Run("assert_malformed:1292", func(t *testing.T) { assertMalformedSpec(t, "binary.132.wasm", "malformed import kind") })
	t.Run("assert_malformed:1303", func(t *testing.T) { assertMalformedSpec(t, "binary.133.wasm", "malformed import kind") })
	t.Run("assert_malformed:1313", func(t *testing.T) { assertMalformedSpec(t, "binary.134.wasm", "malformed import kind") })
	t.Run("assert_malformed:1324", func(t *testing.T) { assertMalformedSpec(t, "binary.135.wasm", "malformed import kind") })
	t.Run("assert_malformed:1334", func(t *testing.T) { assertMalformedSpec(t, "binary.136.wasm", "malformed import kind") })
	t.Run("assert_malformed:1347", func(t *testing.T) { assertMalformedSpec(t, "binary.137.wasm", "unexpected end of section or function") })
	t.Run("assert_malformed:1366", func(t *testing.T) { assertMalformedSpec(t, "binary.138.wasm", "section size mismatch") })
	x23 := instantiateSpecTest(t, "23", "binary.139.wasm")
	t.Cleanup(func() { x23.close(t) })
	t.Run("assert_malformed:1397", func(t *testing.T) { assertMalformedSpec(t, "binary.140.wasm", "unexpected end of section or function") })
	t.Run("assert_malformed:1407", func(t *testing.T) { assertMalformedSpec(t, "binary.141.wasm", "integer too large") })
	t.Run("assert_malformed:1416", func(t *testing.T) { assertMalformedSpec(t, "binary.142.wasm", "integer too large") })
	t.Run("assert_malformed:1426", func(t *testing.T) { assertMalformedSpec(t, "binary.143.wasm", "integer representation too long") })
	x24 := instantiateSpecTest(t, "24", "binary.144.wasm")
	t.Cleanup(func() { x24.close(t) })
	t.Run("assert_malformed:1444", func(t *testing.T) { assertMalformedSpec(t, "binary.145.wasm", "unexpected end of section or function") })
	t.Run("assert_malformed:1454", func(t *testing.T) { assertMalformedSpec(t, "binary.146.wasm", "integer too large") })
	t.Run("assert_malformed:1462", func(t *testing.T) { assertMalformedSpec(t, "binary.147.wasm", "integer too large") })
	t.Run("assert_malformed:1471", func(t *testing.T) { assertMalformedSpec(t, "binary.148.wasm", "integer representation too long") })
	t.Run("assert_malformed:1480", func(t *testing.T) { assertMalformedSpec(t, "binary.149.wasm", "integer representation too long") })
	x25 := instantiateSpecTest(t, "25", "binary.150.wasm")
	t.Cleanup(func() { x25.close(t) })
	t.Run("assert_malformed:1497", func(t *testing.T) { assertMalformedSpec(t, "binary.151.wasm", "unexpected end of section or function") })
	t.Run("assert_malformed:1508", func(t *testing.T) { assertMalformedSpec(t, "binary.152.wasm", "section size mismatch") })
	x26 := instantiateSpecTest(t, "26", "binary.153.wasm")
	t.Cleanup(func() { x26.close(t) })
	t.Run("assert_malformed:1531", func(t *testing.T) { assertMalformedSpec(t, "binary.154.wasm", "unexpected end of section or function") })
	t.Run("assert_malformed:1552", func(t *testing.T) { assertMalformedSpec(t, "binary.155.wasm", "section size mismatch") })
	x27 := instantiateSpecTest(t, "27", "binary.156.wasm")
	t.Cleanup(func() { x27.close(t) })
	t.Run("assert_malformed:1586", func(t *testing.T) { assertMalformedSpec(t, "binary.157.wasm", "unexpected end") })
	t.Run("assert_malformed:1602", func(t *testing.T) { assertMalformedSpec(t, "binary.158.wasm", "unexpected end") })
	t.Run("assert_malformed:1619", func(t *testing.T) { assertMalformedSpec(t, "binary.159.wasm", "section size mismatch") })
	x28 := instantiateSpecTest(t, "28", "binary.160.wasm")
	t.Cleanup(func() { x28.close(t) })
	t.Run("assert_malformed:1645", func(t *testing.T) { assertMalformedSpec(t, "binary.161.wasm", "unexpected end of section or function") })
	t.Run("assert_malformed:1658", func(t *testing.T) { assertMalformedSpec(t, "binary.162.wasm", "section size mismatch") })
	t.Run("assert_malformed:1671", func(t *testing.T) { assertMalformedSpec(t, "binary.163.wasm", "unexpected end of section or function") })
	t.Run("assert_malformed:1685", func(t *testing.T) { assertMalformedSpec(t, "binary.164.wasm", "section size mismatch") })
	x29 := instantiateSpecTest(t, "29", "binary.165.wasm")
	t.Cleanup(func() { x29.close(t) })
	t.Run("assert_malformed:1716", func(t *testing.T) { assertMalformedSpec(t, "binary.166.wasm", "unexpected end") })
	x30 := instantiateSpecTest(t, "30", "binary.167.wasm")
	t.Cleanup(func() { x30.close(t) })
	t.Run("assert_malformed:1751", func(t *testing.T) { assertMalformedSpec(t, "binary.168.wasm", "unexpected content after last section") })
}

func Test_block(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "block.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("empty:353", func(t *testing.T) { x0.assertReturnInvoke(t, "empty", nil, arg{}) })
	t.Run("singular:354", func(t *testing.T) { x0.assertReturnInvoke(t, "singular", nil, arg{wa.I32, 7}) })
	t.Run("multi:355", func(t *testing.T) { x0.assertReturnInvoke(t, "multi", nil, arg{wa.I32, 8}) })
	t.Run("nested:356", func(t *testing.T) { x0.assertReturnInvoke(t, "nested", nil, arg{wa.I32, 9}) })
	t.Run("deep:357", func(t *testing.T) { x0.assertReturnInvoke(t, "deep", nil, arg{wa.I32, 150}) })
	t.Run("as-select-first:359", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-first", nil, arg{wa.I32, 1}) })
	t.Run("as-select-mid:360", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-mid", nil, arg{wa.I32, 2}) })
	t.Run("as-select-last:361", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-last", nil, arg{wa.I32, 2}) })
	t.Run("as-loop-first:363", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-first", nil, arg{wa.I32, 1}) })
	t.Run("as-loop-mid:364", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-mid", nil, arg{wa.I32, 1}) })
	t.Run("as-loop-last:365", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-last", nil, arg{wa.I32, 1}) })
	t.Run("as-if-condition:367", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-condition", nil, arg{}) })
	t.Run("as-if-then:368", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-then", nil, arg{wa.I32, 1}) })
	t.Run("as-if-else:369", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-else", nil, arg{wa.I32, 2}) })
	t.Run("as-br_if-first:371", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-first", nil, arg{wa.I32, 1}) })
	t.Run("as-br_if-last:372", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-last", nil, arg{wa.I32, 2}) })
	t.Run("as-br_table-first:374", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-first", nil, arg{wa.I32, 1}) })
	t.Run("as-br_table-last:375", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-last", nil, arg{wa.I32, 2}) })
	t.Run("as-call_indirect-first:377", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-first", nil, arg{wa.I32, 1}) })
	t.Run("as-call_indirect-mid:378", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-mid", nil, arg{wa.I32, 2}) })
	t.Run("as-call_indirect-last:379", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-last", nil, arg{wa.I32, 1}) })
	t.Run("as-store-first:381", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-first", nil, arg{}) })
	t.Run("as-store-last:382", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-last", nil, arg{}) })
	t.Run("as-memory.grow-value:384", func(t *testing.T) { x0.assertReturnInvoke(t, "as-memory.grow-value", nil, arg{wa.I32, 1}) })
	t.Run("as-call-value:385", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call-value", nil, arg{wa.I32, 1}) })
	t.Run("as-return-value:386", func(t *testing.T) { x0.assertReturnInvoke(t, "as-return-value", nil, arg{wa.I32, 1}) })
	t.Run("as-drop-operand:387", func(t *testing.T) { x0.assertReturnInvoke(t, "as-drop-operand", nil, arg{}) })
	t.Run("as-br-value:388", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br-value", nil, arg{wa.I32, 1}) })
	t.Run("as-local.set-value:389", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.set-value", nil, arg{wa.I32, 1}) })
	t.Run("as-local.tee-value:390", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.tee-value", nil, arg{wa.I32, 1}) })
	t.Run("as-global.set-value:391", func(t *testing.T) { x0.assertReturnInvoke(t, "as-global.set-value", nil, arg{wa.I32, 1}) })
	t.Run("as-load-operand:392", func(t *testing.T) { x0.assertReturnInvoke(t, "as-load-operand", nil, arg{wa.I32, 1}) })
	t.Run("as-unary-operand:394", func(t *testing.T) { x0.assertReturnInvoke(t, "as-unary-operand", nil, arg{wa.I32, 0}) })
	t.Run("as-binary-operand:395", func(t *testing.T) { x0.assertReturnInvoke(t, "as-binary-operand", nil, arg{wa.I32, 12}) })
	t.Run("as-test-operand:396", func(t *testing.T) { x0.assertReturnInvoke(t, "as-test-operand", nil, arg{wa.I32, 0}) })
	t.Run("as-compare-operand:397", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-operand", nil, arg{wa.I32, 0}) })
	t.Run("as-binary-operands:398", func(t *testing.T) { x0.assertReturnInvoke(t, "as-binary-operands", nil, arg{wa.I32, 12}) })
	t.Run("as-compare-operands:399", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-operands", nil, arg{wa.I32, 0}) })
	t.Run("as-mixed-operands:400", func(t *testing.T) { x0.assertReturnInvoke(t, "as-mixed-operands", nil, arg{wa.I32, 27}) })
	t.Run("break-bare:402", func(t *testing.T) { x0.assertReturnInvoke(t, "break-bare", nil, arg{wa.I32, 19}) })
	t.Run("break-value:403", func(t *testing.T) { x0.assertReturnInvoke(t, "break-value", nil, arg{wa.I32, 18}) })
	t.Run("break-multi-value:404", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("break-repeated:407", func(t *testing.T) { x0.assertReturnInvoke(t, "break-repeated", nil, arg{wa.I32, 18}) })
	t.Run("break-inner:408", func(t *testing.T) { x0.assertReturnInvoke(t, "break-inner", nil, arg{wa.I32, 15}) })
	t.Run("param:410", func(t *testing.T) { x0.assertReturnInvoke(t, "param", nil, arg{wa.I32, 3}) })
	t.Run("params:411", func(t *testing.T) { x0.assertReturnInvoke(t, "params", nil, arg{wa.I32, 3}) })
	t.Run("params-id:412", func(t *testing.T) { x0.assertReturnInvoke(t, "params-id", nil, arg{wa.I32, 3}) })
	t.Run("param-break:413", func(t *testing.T) { x0.assertReturnInvoke(t, "param-break", nil, arg{wa.I32, 3}) })
	t.Run("params-break:414", func(t *testing.T) { x0.assertReturnInvoke(t, "params-break", nil, arg{wa.I32, 3}) })
	t.Run("params-id-break:415", func(t *testing.T) { x0.assertReturnInvoke(t, "params-id-break", nil, arg{wa.I32, 3}) })
	t.Run("effects:417", func(t *testing.T) { x0.assertReturnInvoke(t, "effects", nil, arg{wa.I32, 1}) })
	t.Run("type-use:419", func(t *testing.T) { x0.assertReturnInvoke(t, "type-use", nil, arg{}) })
	t.Run("assert_malformed:422", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:429", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:436", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:443", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:450", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:457", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:464", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:468", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:475", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:482", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:489", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_invalid:497", func(t *testing.T) { assertInvalidSpec(t, "block.12.wasm", "type mismatch") })
	t.Run("assert_invalid:505", func(t *testing.T) { assertInvalidSpec(t, "block.13.wasm", "type mismatch") })
	t.Run("assert_invalid:509", func(t *testing.T) { assertInvalidSpec(t, "block.14.wasm", "type mismatch") })
	t.Run("assert_invalid:513", func(t *testing.T) { assertInvalidSpec(t, "block.15.wasm", "type mismatch") })
	t.Run("assert_invalid:517", func(t *testing.T) { assertInvalidSpec(t, "block.16.wasm", "type mismatch") })
	t.Run("assert_invalid:522", func(t *testing.T) { assertInvalidSpec(t, "block.17.wasm", "type mismatch") })
	t.Run("assert_invalid:528", func(t *testing.T) { assertInvalidSpec(t, "block.18.wasm", "type mismatch") })
	t.Run("assert_invalid:534", func(t *testing.T) { assertInvalidSpec(t, "block.19.wasm", "type mismatch") })
	t.Run("assert_invalid:540", func(t *testing.T) { assertInvalidSpec(t, "block.20.wasm", "type mismatch") })
	t.Run("assert_invalid:546", func(t *testing.T) { assertInvalidSpec(t, "block.21.wasm", "type mismatch") })
	t.Run("assert_invalid:552", func(t *testing.T) { assertInvalidSpec(t, "block.22.wasm", "type mismatch") })
	t.Run("assert_invalid:558", func(t *testing.T) { assertInvalidSpec(t, "block.23.wasm", "type mismatch") })
	t.Run("assert_invalid:564", func(t *testing.T) { assertInvalidSpec(t, "block.24.wasm", "type mismatch") })
	t.Run("assert_invalid:570", func(t *testing.T) { assertInvalidSpec(t, "block.25.wasm", "type mismatch") })
	t.Run("assert_invalid:576", func(t *testing.T) { assertInvalidSpec(t, "block.26.wasm", "type mismatch") })
	t.Run("assert_invalid:583", func(t *testing.T) { assertInvalidSpec(t, "block.27.wasm", "type mismatch") })
	t.Run("assert_invalid:592", func(t *testing.T) { assertInvalidSpec(t, "block.28.wasm", "type mismatch") })
	t.Run("assert_invalid:601", func(t *testing.T) { assertInvalidSpec(t, "block.29.wasm", "type mismatch") })
	t.Run("assert_invalid:611", func(t *testing.T) { assertInvalidSpec(t, "block.30.wasm", "type mismatch") })
	t.Run("assert_invalid:617", func(t *testing.T) { assertInvalidSpec(t, "block.31.wasm", "type mismatch") })
	t.Run("assert_invalid:623", func(t *testing.T) { assertInvalidSpec(t, "block.32.wasm", "type mismatch") })
	t.Run("assert_invalid:629", func(t *testing.T) { assertInvalidSpec(t, "block.33.wasm", "type mismatch") })
	t.Run("assert_invalid:635", func(t *testing.T) { assertInvalidSpec(t, "block.34.wasm", "type mismatch") })
	t.Run("assert_invalid:641", func(t *testing.T) { assertInvalidSpec(t, "block.35.wasm", "type mismatch") })
	t.Run("assert_invalid:647", func(t *testing.T) { assertInvalidSpec(t, "block.36.wasm", "type mismatch") })
	t.Run("assert_invalid:653", func(t *testing.T) { assertInvalidSpec(t, "block.37.wasm", "type mismatch") })
	t.Run("assert_invalid:659", func(t *testing.T) { assertInvalidSpec(t, "block.38.wasm", "type mismatch") })
	t.Run("assert_invalid:665", func(t *testing.T) { assertInvalidSpec(t, "block.39.wasm", "type mismatch") })
	t.Run("assert_invalid:671", func(t *testing.T) { assertInvalidSpec(t, "block.40.wasm", "type mismatch") })
	t.Run("assert_invalid:677", func(t *testing.T) { assertInvalidSpec(t, "block.41.wasm", "type mismatch") })
	t.Run("assert_invalid:683", func(t *testing.T) { assertInvalidSpec(t, "block.42.wasm", "type mismatch") })
	t.Run("assert_invalid:689", func(t *testing.T) { assertInvalidSpec(t, "block.43.wasm", "type mismatch") })
	t.Run("assert_invalid:695", func(t *testing.T) { assertInvalidSpec(t, "block.44.wasm", "type mismatch") })
	t.Run("assert_invalid:701", func(t *testing.T) { assertInvalidSpec(t, "block.45.wasm", "type mismatch") })
	t.Run("assert_invalid:707", func(t *testing.T) { assertInvalidSpec(t, "block.46.wasm", "type mismatch") })
	t.Run("assert_invalid:713", func(t *testing.T) { assertInvalidSpec(t, "block.47.wasm", "type mismatch") })
	t.Run("assert_invalid:719", func(t *testing.T) { assertInvalidSpec(t, "block.48.wasm", "type mismatch") })
	t.Run("assert_invalid:725", func(t *testing.T) { assertInvalidSpec(t, "block.49.wasm", "type mismatch") })
	t.Run("assert_invalid:732", func(t *testing.T) { assertInvalidSpec(t, "block.50.wasm", "type mismatch") })
	t.Run("assert_invalid:738", func(t *testing.T) { assertInvalidSpec(t, "block.51.wasm", "type mismatch") })
	t.Run("assert_invalid:744", func(t *testing.T) { assertInvalidSpec(t, "block.52.wasm", "type mismatch") })
	t.Run("assert_invalid:750", func(t *testing.T) { assertInvalidSpec(t, "block.53.wasm", "type mismatch") })
	t.Run("assert_invalid:756", func(t *testing.T) { assertInvalidSpec(t, "block.54.wasm", "type mismatch") })
	t.Run("assert_invalid:762", func(t *testing.T) { assertInvalidSpec(t, "block.55.wasm", "type mismatch") })
	t.Run("assert_invalid:768", func(t *testing.T) { assertInvalidSpec(t, "block.56.wasm", "type mismatch") })
	t.Run("assert_invalid:774", func(t *testing.T) { assertInvalidSpec(t, "block.57.wasm", "type mismatch") })
	t.Run("assert_invalid:780", func(t *testing.T) { assertInvalidSpec(t, "block.58.wasm", "type mismatch") })
	t.Run("assert_invalid:786", func(t *testing.T) { assertInvalidSpec(t, "block.59.wasm", "type mismatch") })
	t.Run("assert_invalid:792", func(t *testing.T) { assertInvalidSpec(t, "block.60.wasm", "type mismatch") })
	t.Run("assert_invalid:798", func(t *testing.T) { assertInvalidSpec(t, "block.61.wasm", "type mismatch") })
	t.Run("assert_invalid:805", func(t *testing.T) { assertInvalidSpec(t, "block.62.wasm", "type mismatch") })
	t.Run("assert_invalid:811", func(t *testing.T) { assertInvalidSpec(t, "block.63.wasm", "type mismatch") })
	t.Run("assert_invalid:817", func(t *testing.T) { assertInvalidSpec(t, "block.64.wasm", "type mismatch") })
	t.Run("assert_invalid:823", func(t *testing.T) { assertInvalidSpec(t, "block.65.wasm", "type mismatch") })
	t.Run("assert_invalid:829", func(t *testing.T) { assertInvalidSpec(t, "block.66.wasm", "type mismatch") })
	t.Run("assert_invalid:836", func(t *testing.T) { assertInvalidSpec(t, "block.67.wasm", "type mismatch") })
	t.Run("assert_invalid:842", func(t *testing.T) { assertInvalidSpec(t, "block.68.wasm", "type mismatch") })
	t.Run("assert_invalid:848", func(t *testing.T) { assertInvalidSpec(t, "block.69.wasm", "type mismatch") })
	t.Run("assert_invalid:854", func(t *testing.T) { assertInvalidSpec(t, "block.70.wasm", "type mismatch") })
	t.Run("assert_invalid:860", func(t *testing.T) { assertInvalidSpec(t, "block.71.wasm", "type mismatch") })
	t.Run("assert_invalid:867", func(t *testing.T) { assertInvalidSpec(t, "block.72.wasm", "type mismatch") })
	t.Run("assert_invalid:873", func(t *testing.T) { assertInvalidSpec(t, "block.73.wasm", "type mismatch") })
	t.Run("assert_invalid:879", func(t *testing.T) { assertInvalidSpec(t, "block.74.wasm", "type mismatch") })
	t.Run("assert_invalid:885", func(t *testing.T) { assertInvalidSpec(t, "block.75.wasm", "type mismatch") })
	t.Run("assert_invalid:892", func(t *testing.T) { assertInvalidSpec(t, "block.76.wasm", "type mismatch") })
	t.Run("assert_invalid:898", func(t *testing.T) { assertInvalidSpec(t, "block.77.wasm", "type mismatch") })
	t.Run("assert_invalid:904", func(t *testing.T) { assertInvalidSpec(t, "block.78.wasm", "type mismatch") })
	t.Run("assert_invalid:910", func(t *testing.T) { assertInvalidSpec(t, "block.79.wasm", "type mismatch") })
	t.Run("assert_invalid:916", func(t *testing.T) { assertInvalidSpec(t, "block.80.wasm", "type mismatch") })
	t.Run("assert_invalid:922", func(t *testing.T) { assertInvalidSpec(t, "block.81.wasm", "type mismatch") })
	t.Run("assert_invalid:928", func(t *testing.T) { assertInvalidSpec(t, "block.82.wasm", "type mismatch") })
	t.Run("assert_invalid:934", func(t *testing.T) { assertInvalidSpec(t, "block.83.wasm", "type mismatch") })
	t.Run("assert_invalid:940", func(t *testing.T) { assertInvalidSpec(t, "block.84.wasm", "type mismatch") })
	t.Run("assert_invalid:946", func(t *testing.T) { assertInvalidSpec(t, "block.85.wasm", "type mismatch") })
	t.Run("assert_invalid:952", func(t *testing.T) { assertInvalidSpec(t, "block.86.wasm", "type mismatch") })
	t.Run("assert_invalid:958", func(t *testing.T) { assertInvalidSpec(t, "block.87.wasm", "type mismatch") })
	t.Run("assert_invalid:964", func(t *testing.T) { assertInvalidSpec(t, "block.88.wasm", "type mismatch") })
	t.Run("assert_invalid:970", func(t *testing.T) { assertInvalidSpec(t, "block.89.wasm", "type mismatch") })
	t.Run("assert_invalid:977", func(t *testing.T) { assertInvalidSpec(t, "block.90.wasm", "type mismatch") })
	t.Run("assert_invalid:983", func(t *testing.T) { assertInvalidSpec(t, "block.91.wasm", "type mismatch") })
	t.Run("assert_invalid:989", func(t *testing.T) { assertInvalidSpec(t, "block.92.wasm", "type mismatch") })
	t.Run("assert_invalid:995", func(t *testing.T) { assertInvalidSpec(t, "block.93.wasm", "type mismatch") })
	t.Run("assert_invalid:1001", func(t *testing.T) { assertInvalidSpec(t, "block.94.wasm", "type mismatch") })
	t.Run("assert_invalid:1008", func(t *testing.T) { assertInvalidSpec(t, "block.95.wasm", "type mismatch") })
	t.Run("assert_invalid:1014", func(t *testing.T) { assertInvalidSpec(t, "block.96.wasm", "type mismatch") })
	t.Run("assert_invalid:1020", func(t *testing.T) { assertInvalidSpec(t, "block.97.wasm", "type mismatch") })
	t.Run("assert_invalid:1026", func(t *testing.T) { assertInvalidSpec(t, "block.98.wasm", "type mismatch") })
	t.Run("assert_invalid:1032", func(t *testing.T) { assertInvalidSpec(t, "block.99.wasm", "type mismatch") })
	t.Run("assert_invalid:1038", func(t *testing.T) { assertInvalidSpec(t, "block.100.wasm", "type mismatch") })
	t.Run("assert_invalid:1044", func(t *testing.T) { assertInvalidSpec(t, "block.101.wasm", "type mismatch") })
	t.Run("assert_invalid:1050", func(t *testing.T) { assertInvalidSpec(t, "block.102.wasm", "type mismatch") })
	t.Run("assert_invalid:1056", func(t *testing.T) { assertInvalidSpec(t, "block.103.wasm", "type mismatch") })
	t.Run("assert_invalid:1062", func(t *testing.T) { assertInvalidSpec(t, "block.104.wasm", "type mismatch") })
	t.Run("assert_invalid:1068", func(t *testing.T) { assertInvalidSpec(t, "block.105.wasm", "type mismatch") })
	t.Run("assert_invalid:1074", func(t *testing.T) { assertInvalidSpec(t, "block.106.wasm", "type mismatch") })
	t.Run("assert_invalid:1080", func(t *testing.T) { assertInvalidSpec(t, "block.107.wasm", "type mismatch") })
	t.Run("assert_invalid:1087", func(t *testing.T) { assertInvalidSpec(t, "block.108.wasm", "type mismatch") })
	t.Run("assert_invalid:1093", func(t *testing.T) { assertInvalidSpec(t, "block.109.wasm", "type mismatch") })
	t.Run("assert_invalid:1099", func(t *testing.T) { assertInvalidSpec(t, "block.110.wasm", "type mismatch") })
	t.Run("assert_invalid:1105", func(t *testing.T) { assertInvalidSpec(t, "block.111.wasm", "type mismatch") })
	t.Run("assert_invalid:1111", func(t *testing.T) { assertInvalidSpec(t, "block.112.wasm", "type mismatch") })
	t.Run("assert_invalid:1118", func(t *testing.T) { assertInvalidSpec(t, "block.113.wasm", "type mismatch") })
	t.Run("assert_invalid:1124", func(t *testing.T) { assertInvalidSpec(t, "block.114.wasm", "type mismatch") })
	t.Run("assert_invalid:1130", func(t *testing.T) { assertInvalidSpec(t, "block.115.wasm", "type mismatch") })
	t.Run("assert_invalid:1136", func(t *testing.T) { assertInvalidSpec(t, "block.116.wasm", "type mismatch") })
	t.Run("assert_invalid:1142", func(t *testing.T) { assertInvalidSpec(t, "block.117.wasm", "type mismatch") })
	t.Run("assert_invalid:1149", func(t *testing.T) { assertInvalidSpec(t, "block.118.wasm", "type mismatch") })
	t.Run("assert_invalid:1155", func(t *testing.T) { assertInvalidSpec(t, "block.119.wasm", "type mismatch") })
	t.Run("assert_invalid:1161", func(t *testing.T) { assertInvalidSpec(t, "block.120.wasm", "type mismatch") })
	t.Run("assert_invalid:1167", func(t *testing.T) { assertInvalidSpec(t, "block.121.wasm", "type mismatch") })
	t.Run("assert_invalid:1173", func(t *testing.T) { assertInvalidSpec(t, "block.122.wasm", "type mismatch") })
	t.Run("assert_invalid:1180", func(t *testing.T) { assertInvalidSpec(t, "block.123.wasm", "type mismatch") })
	t.Run("assert_invalid:1188", func(t *testing.T) { assertInvalidSpec(t, "block.124.wasm", "type mismatch") })
	t.Run("assert_invalid:1196", func(t *testing.T) { assertInvalidSpec(t, "block.125.wasm", "type mismatch") })
	t.Run("assert_invalid:1204", func(t *testing.T) { assertInvalidSpec(t, "block.126.wasm", "type mismatch") })
	t.Run("assert_invalid:1212", func(t *testing.T) { assertInvalidSpec(t, "block.127.wasm", "type mismatch") })
	t.Run("assert_invalid:1220", func(t *testing.T) { assertInvalidSpec(t, "block.128.wasm", "type mismatch") })
	t.Run("assert_invalid:1228", func(t *testing.T) { assertInvalidSpec(t, "block.129.wasm", "type mismatch") })
	t.Run("assert_invalid:1236", func(t *testing.T) { assertInvalidSpec(t, "block.130.wasm", "type mismatch") })
	t.Run("assert_invalid:1244", func(t *testing.T) { assertInvalidSpec(t, "block.131.wasm", "type mismatch") })
	t.Run("assert_invalid:1252", func(t *testing.T) { assertInvalidSpec(t, "block.132.wasm", "type mismatch") })
	t.Run("assert_invalid:1260", func(t *testing.T) { assertInvalidSpec(t, "block.133.wasm", "type mismatch") })
	t.Run("assert_invalid:1268", func(t *testing.T) { assertInvalidSpec(t, "block.134.wasm", "type mismatch") })
	t.Run("assert_invalid:1276", func(t *testing.T) { assertInvalidSpec(t, "block.135.wasm", "type mismatch") })
	t.Run("assert_invalid:1285", func(t *testing.T) { assertInvalidSpec(t, "block.136.wasm", "type mismatch") })
	t.Run("assert_invalid:1291", func(t *testing.T) { assertInvalidSpec(t, "block.137.wasm", "type mismatch") })
	t.Run("assert_invalid:1297", func(t *testing.T) { assertInvalidSpec(t, "block.138.wasm", "type mismatch") })
	t.Run("assert_invalid:1303", func(t *testing.T) { assertInvalidSpec(t, "block.139.wasm", "type mismatch") })
	t.Run("assert_invalid:1309", func(t *testing.T) { assertInvalidSpec(t, "block.140.wasm", "type mismatch") })
	t.Run("assert_invalid:1316", func(t *testing.T) { assertInvalidSpec(t, "block.141.wasm", "type mismatch") })
	t.Run("assert_invalid:1322", func(t *testing.T) { assertInvalidSpec(t, "block.142.wasm", "type mismatch") })
	t.Run("assert_invalid:1328", func(t *testing.T) { assertInvalidSpec(t, "block.143.wasm", "type mismatch") })
	t.Run("assert_invalid:1334", func(t *testing.T) { assertInvalidSpec(t, "block.144.wasm", "type mismatch") })
	t.Run("assert_invalid:1340", func(t *testing.T) { assertInvalidSpec(t, "block.145.wasm", "type mismatch") })
	t.Run("assert_invalid:1347", func(t *testing.T) { assertInvalidSpec(t, "block.146.wasm", "type mismatch") })
	t.Run("assert_invalid:1353", func(t *testing.T) { assertInvalidSpec(t, "block.147.wasm", "type mismatch") })
	t.Run("assert_invalid:1359", func(t *testing.T) { assertInvalidSpec(t, "block.148.wasm", "type mismatch") })
	t.Run("assert_invalid:1365", func(t *testing.T) { assertInvalidSpec(t, "block.149.wasm", "type mismatch") })
	t.Run("assert_invalid:1371", func(t *testing.T) { assertInvalidSpec(t, "block.150.wasm", "type mismatch") })
	t.Run("assert_invalid:1377", func(t *testing.T) { assertInvalidSpec(t, "block.151.wasm", "type mismatch") })
	t.Run("assert_invalid:1383", func(t *testing.T) { assertInvalidSpec(t, "block.152.wasm", "type mismatch") })
	t.Run("assert_invalid:1389", func(t *testing.T) { assertInvalidSpec(t, "block.153.wasm", "type mismatch") })
	t.Run("assert_invalid:1395", func(t *testing.T) { assertInvalidSpec(t, "block.154.wasm", "type mismatch") })
	t.Run("assert_invalid:1401", func(t *testing.T) { assertInvalidSpec(t, "block.155.wasm", "type mismatch") })
	t.Run("assert_invalid:1407", func(t *testing.T) { assertInvalidSpec(t, "block.156.wasm", "type mismatch") })
	t.Run("assert_invalid:1413", func(t *testing.T) { assertInvalidSpec(t, "block.157.wasm", "type mismatch") })
	t.Run("assert_invalid:1419", func(t *testing.T) { assertInvalidSpec(t, "block.158.wasm", "type mismatch") })
	t.Run("assert_invalid:1426", func(t *testing.T) { assertInvalidSpec(t, "block.159.wasm", "type mismatch") })
	t.Run("assert_invalid:1432", func(t *testing.T) { assertInvalidSpec(t, "block.160.wasm", "type mismatch") })
	t.Run("assert_invalid:1438", func(t *testing.T) { assertInvalidSpec(t, "block.161.wasm", "type mismatch") })
	t.Run("assert_invalid:1444", func(t *testing.T) { assertInvalidSpec(t, "block.162.wasm", "type mismatch") })
	t.Run("assert_invalid:1450", func(t *testing.T) { assertInvalidSpec(t, "block.163.wasm", "type mismatch") })
	t.Run("assert_invalid:1456", func(t *testing.T) { assertInvalidSpec(t, "block.164.wasm", "type mismatch") })
	t.Run("assert_invalid:1462", func(t *testing.T) { assertInvalidSpec(t, "block.165.wasm", "type mismatch") })
	t.Run("assert_invalid:1468", func(t *testing.T) { assertInvalidSpec(t, "block.166.wasm", "type mismatch") })
	t.Run("assert_malformed:1475", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:1479", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:1485", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:1489", func(t *testing.T) { t.Skip("text format not supported") })
}

func Test_br(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "br.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("type-i32:372", func(t *testing.T) { x0.assertReturnInvoke(t, "type-i32", nil, arg{}) })
	t.Run("type-i64:373", func(t *testing.T) { x0.assertReturnInvoke(t, "type-i64", nil, arg{}) })
	t.Run("type-f32:374", func(t *testing.T) { x0.assertReturnInvoke(t, "type-f32", nil, arg{}) })
	t.Run("type-f64:375", func(t *testing.T) { x0.assertReturnInvoke(t, "type-f64", nil, arg{}) })
	t.Run("type-i32-i32:376", func(t *testing.T) { x0.assertReturnInvoke(t, "type-i32-i32", nil, arg{}) })
	t.Run("type-i64-i64:377", func(t *testing.T) { x0.assertReturnInvoke(t, "type-i64-i64", nil, arg{}) })
	t.Run("type-f32-f32:378", func(t *testing.T) { x0.assertReturnInvoke(t, "type-f32-f32", nil, arg{}) })
	t.Run("type-f64-f64:379", func(t *testing.T) { x0.assertReturnInvoke(t, "type-f64-f64", nil, arg{}) })
	t.Run("type-i32-value:381", func(t *testing.T) { x0.assertReturnInvoke(t, "type-i32-value", nil, arg{wa.I32, 1}) })
	t.Run("type-i64-value:382", func(t *testing.T) { x0.assertReturnInvoke(t, "type-i64-value", nil, arg{wa.I64, 2}) })
	t.Run("type-f32-value:383", func(t *testing.T) { x0.assertReturnInvoke(t, "type-f32-value", nil, arg{wa.F32, 1077936128}) })
	t.Run("type-f64-value:384", func(t *testing.T) { x0.assertReturnInvoke(t, "type-f64-value", nil, arg{wa.F64, 4616189618054758400}) })
	t.Run("type-f64-f64-value:385", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("as-block-first:387", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-first", nil, arg{}) })
	t.Run("as-block-mid:388", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-mid", nil, arg{}) })
	t.Run("as-block-last:389", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-last", nil, arg{}) })
	t.Run("as-block-value:390", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-value", nil, arg{wa.I32, 2}) })
	t.Run("as-loop-first:392", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-first", nil, arg{wa.I32, 3}) })
	t.Run("as-loop-mid:393", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-mid", nil, arg{wa.I32, 4}) })
	t.Run("as-loop-last:394", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-last", nil, arg{wa.I32, 5}) })
	t.Run("as-br-value:396", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br-value", nil, arg{wa.I32, 9}) })
	t.Run("as-br_if-cond:398", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-cond", nil, arg{}) })
	t.Run("as-br_if-value:399", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-value", nil, arg{wa.I32, 8}) })
	t.Run("as-br_if-value-cond:400", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-value-cond", nil, arg{wa.I32, 9}) })
	t.Run("as-br_table-index:402", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-index", nil, arg{}) })
	t.Run("as-br_table-value:403", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-value", nil, arg{wa.I32, 10}) })
	t.Run("as-br_table-value-index:404", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-value-index", nil, arg{wa.I32, 11}) })
	t.Run("as-return-value:406", func(t *testing.T) { x0.assertReturnInvoke(t, "as-return-value", nil, arg{wa.I64, 7}) })
	t.Run("as-return-values:407", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("as-if-cond:409", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-cond", nil, arg{wa.I32, 2}) })
	t.Run("as-if-then:410", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-if-then", []arg{{wa.I32, 1}, {wa.I32, 6}}, arg{wa.I32, 3})
	})
	t.Run("as-if-then:411", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-if-then", []arg{{wa.I32, 0}, {wa.I32, 6}}, arg{wa.I32, 6})
	})
	t.Run("as-if-else:412", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-if-else", []arg{{wa.I32, 0}, {wa.I32, 6}}, arg{wa.I32, 4})
	})
	t.Run("as-if-else:413", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-if-else", []arg{{wa.I32, 1}, {wa.I32, 6}}, arg{wa.I32, 6})
	})
	t.Run("as-select-first:415", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-select-first", []arg{{wa.I32, 0}, {wa.I32, 6}}, arg{wa.I32, 5})
	})
	t.Run("as-select-first:416", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-select-first", []arg{{wa.I32, 1}, {wa.I32, 6}}, arg{wa.I32, 5})
	})
	t.Run("as-select-second:417", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-select-second", []arg{{wa.I32, 0}, {wa.I32, 6}}, arg{wa.I32, 6})
	})
	t.Run("as-select-second:418", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-select-second", []arg{{wa.I32, 1}, {wa.I32, 6}}, arg{wa.I32, 6})
	})
	t.Run("as-select-cond:419", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-cond", nil, arg{wa.I32, 7}) })
	t.Run("as-select-all:420", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-all", nil, arg{wa.I32, 8}) })
	t.Run("as-call-first:422", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call-first", nil, arg{wa.I32, 12}) })
	t.Run("as-call-mid:423", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call-mid", nil, arg{wa.I32, 13}) })
	t.Run("as-call-last:424", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call-last", nil, arg{wa.I32, 14}) })
	t.Run("as-call-all:425", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call-all", nil, arg{wa.I32, 15}) })
	t.Run("as-call_indirect-func:427", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-func", nil, arg{wa.I32, 20}) })
	t.Run("as-call_indirect-first:428", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-first", nil, arg{wa.I32, 21}) })
	t.Run("as-call_indirect-mid:429", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-mid", nil, arg{wa.I32, 22}) })
	t.Run("as-call_indirect-last:430", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-last", nil, arg{wa.I32, 23}) })
	t.Run("as-call_indirect-all:431", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-all", nil, arg{wa.I32, 24}) })
	t.Run("as-local.set-value:433", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.set-value", nil, arg{wa.I32, 17}) })
	t.Run("as-local.tee-value:434", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.tee-value", nil, arg{wa.I32, 1}) })
	t.Run("as-global.set-value:435", func(t *testing.T) { x0.assertReturnInvoke(t, "as-global.set-value", nil, arg{wa.I32, 1}) })
	t.Run("as-load-address:437", func(t *testing.T) { x0.assertReturnInvoke(t, "as-load-address", nil, arg{wa.F32, 1071225242}) })
	t.Run("as-loadN-address:438", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loadN-address", nil, arg{wa.I64, 30}) })
	t.Run("as-store-address:440", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-address", nil, arg{wa.I32, 30}) })
	t.Run("as-store-value:441", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-value", nil, arg{wa.I32, 31}) })
	t.Run("as-store-both:442", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-both", nil, arg{wa.I32, 32}) })
	t.Run("as-storeN-address:443", func(t *testing.T) { x0.assertReturnInvoke(t, "as-storeN-address", nil, arg{wa.I32, 32}) })
	t.Run("as-storeN-value:444", func(t *testing.T) { x0.assertReturnInvoke(t, "as-storeN-value", nil, arg{wa.I32, 33}) })
	t.Run("as-storeN-both:445", func(t *testing.T) { x0.assertReturnInvoke(t, "as-storeN-both", nil, arg{wa.I32, 34}) })
	t.Run("as-unary-operand:447", func(t *testing.T) { x0.assertReturnInvoke(t, "as-unary-operand", nil, arg{wa.F32, 1079613850}) })
	t.Run("as-binary-left:449", func(t *testing.T) { x0.assertReturnInvoke(t, "as-binary-left", nil, arg{wa.I32, 3}) })
	t.Run("as-binary-right:450", func(t *testing.T) { x0.assertReturnInvoke(t, "as-binary-right", nil, arg{wa.I64, 45}) })
	t.Run("as-binary-both:451", func(t *testing.T) { x0.assertReturnInvoke(t, "as-binary-both", nil, arg{wa.I32, 46}) })
	t.Run("as-test-operand:453", func(t *testing.T) { x0.assertReturnInvoke(t, "as-test-operand", nil, arg{wa.I32, 44}) })
	t.Run("as-compare-left:455", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-left", nil, arg{wa.I32, 43}) })
	t.Run("as-compare-right:456", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-right", nil, arg{wa.I32, 42}) })
	t.Run("as-compare-both:457", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-both", nil, arg{wa.I32, 44}) })
	t.Run("as-convert-operand:459", func(t *testing.T) { x0.assertReturnInvoke(t, "as-convert-operand", nil, arg{wa.I32, 41}) })
	t.Run("as-memory.grow-size:461", func(t *testing.T) { x0.assertReturnInvoke(t, "as-memory.grow-size", nil, arg{wa.I32, 40}) })
	t.Run("nested-block-value:463", func(t *testing.T) { x0.assertReturnInvoke(t, "nested-block-value", nil, arg{wa.I32, 9}) })
	t.Run("nested-br-value:464", func(t *testing.T) { x0.assertReturnInvoke(t, "nested-br-value", nil, arg{wa.I32, 9}) })
	t.Run("nested-br_if-value:465", func(t *testing.T) { x0.assertReturnInvoke(t, "nested-br_if-value", nil, arg{wa.I32, 9}) })
	t.Run("nested-br_if-value-cond:466", func(t *testing.T) { x0.assertReturnInvoke(t, "nested-br_if-value-cond", nil, arg{wa.I32, 9}) })
	t.Run("nested-br_table-value:467", func(t *testing.T) { x0.assertReturnInvoke(t, "nested-br_table-value", nil, arg{wa.I32, 9}) })
	t.Run("nested-br_table-value-index:468", func(t *testing.T) { x0.assertReturnInvoke(t, "nested-br_table-value-index", nil, arg{wa.I32, 9}) })
	t.Run("assert_invalid:471", func(t *testing.T) { assertInvalidSpec(t, "br.1.wasm", "type mismatch") })
	t.Run("assert_invalid:478", func(t *testing.T) { assertInvalidSpec(t, "br.2.wasm", "type mismatch") })
	t.Run("assert_invalid:484", func(t *testing.T) { assertInvalidSpec(t, "br.3.wasm", "type mismatch") })
	t.Run("assert_invalid:490", func(t *testing.T) { assertInvalidSpec(t, "br.4.wasm", "type mismatch") })
	t.Run("assert_invalid:497", func(t *testing.T) { assertInvalidSpec(t, "br.5.wasm", "type mismatch") })
	t.Run("assert_invalid:506", func(t *testing.T) { assertInvalidSpec(t, "br.6.wasm", "type mismatch") })
	t.Run("assert_invalid:515", func(t *testing.T) { assertInvalidSpec(t, "br.7.wasm", "type mismatch") })
	t.Run("assert_invalid:524", func(t *testing.T) { assertInvalidSpec(t, "br.8.wasm", "type mismatch") })
	t.Run("assert_invalid:535", func(t *testing.T) { assertInvalidSpec(t, "br.9.wasm", "type mismatch") })
	t.Run("assert_invalid:546", func(t *testing.T) { assertInvalidSpec(t, "br.10.wasm", "type mismatch") })
	t.Run("assert_invalid:558", func(t *testing.T) { assertInvalidSpec(t, "br.11.wasm", "type mismatch") })
	t.Run("assert_invalid:574", func(t *testing.T) { assertInvalidSpec(t, "br.12.wasm", "type mismatch") })
	t.Run("assert_invalid:586", func(t *testing.T) { assertInvalidSpec(t, "br.13.wasm", "type mismatch") })
	t.Run("assert_invalid:598", func(t *testing.T) { assertInvalidSpec(t, "br.14.wasm", "type mismatch") })
	t.Run("assert_invalid:610", func(t *testing.T) { assertInvalidSpec(t, "br.15.wasm", "type mismatch") })
	t.Run("assert_invalid:622", func(t *testing.T) { assertInvalidSpec(t, "br.16.wasm", "type mismatch") })
	t.Run("assert_invalid:634", func(t *testing.T) { assertInvalidSpec(t, "br.17.wasm", "type mismatch") })
	t.Run("assert_invalid:647", func(t *testing.T) { assertInvalidSpec(t, "br.18.wasm", "unknown label") })
	t.Run("assert_invalid:651", func(t *testing.T) { assertInvalidSpec(t, "br.19.wasm", "unknown label") })
	t.Run("assert_invalid:655", func(t *testing.T) { assertInvalidSpec(t, "br.20.wasm", "unknown label") })
}

func Test_br_if(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "br_if.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("type-i32:372", func(t *testing.T) { x0.assertReturnInvoke(t, "type-i32", nil, arg{}) })
	t.Run("type-i64:373", func(t *testing.T) { x0.assertReturnInvoke(t, "type-i64", nil, arg{}) })
	t.Run("type-f32:374", func(t *testing.T) { x0.assertReturnInvoke(t, "type-f32", nil, arg{}) })
	t.Run("type-f64:375", func(t *testing.T) { x0.assertReturnInvoke(t, "type-f64", nil, arg{}) })
	t.Run("type-i32-value:377", func(t *testing.T) { x0.assertReturnInvoke(t, "type-i32-value", nil, arg{wa.I32, 1}) })
	t.Run("type-i64-value:378", func(t *testing.T) { x0.assertReturnInvoke(t, "type-i64-value", nil, arg{wa.I64, 2}) })
	t.Run("type-f32-value:379", func(t *testing.T) { x0.assertReturnInvoke(t, "type-f32-value", nil, arg{wa.F32, 1077936128}) })
	t.Run("type-f64-value:380", func(t *testing.T) { x0.assertReturnInvoke(t, "type-f64-value", nil, arg{wa.F64, 4616189618054758400}) })
	t.Run("as-block-first:382", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-first", []arg{{wa.I32, 0}}, arg{wa.I32, 2}) })
	t.Run("as-block-first:383", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-first", []arg{{wa.I32, 1}}, arg{wa.I32, 3}) })
	t.Run("as-block-mid:384", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-mid", []arg{{wa.I32, 0}}, arg{wa.I32, 2}) })
	t.Run("as-block-mid:385", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-mid", []arg{{wa.I32, 1}}, arg{wa.I32, 3}) })
	t.Run("as-block-last:386", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-last", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("as-block-last:387", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-last", []arg{{wa.I32, 1}}, arg{}) })
	t.Run("as-block-first-value:389", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-block-first-value", []arg{{wa.I32, 0}}, arg{wa.I32, 11})
	})
	t.Run("as-block-first-value:390", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-block-first-value", []arg{{wa.I32, 1}}, arg{wa.I32, 10})
	})
	t.Run("as-block-mid-value:391", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-block-mid-value", []arg{{wa.I32, 0}}, arg{wa.I32, 21})
	})
	t.Run("as-block-mid-value:392", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-block-mid-value", []arg{{wa.I32, 1}}, arg{wa.I32, 20})
	})
	t.Run("as-block-last-value:393", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-block-last-value", []arg{{wa.I32, 0}}, arg{wa.I32, 11})
	})
	t.Run("as-block-last-value:394", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-block-last-value", []arg{{wa.I32, 1}}, arg{wa.I32, 11})
	})
	t.Run("as-loop-first:396", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-first", []arg{{wa.I32, 0}}, arg{wa.I32, 2}) })
	t.Run("as-loop-first:397", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-first", []arg{{wa.I32, 1}}, arg{wa.I32, 3}) })
	t.Run("as-loop-mid:398", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-mid", []arg{{wa.I32, 0}}, arg{wa.I32, 2}) })
	t.Run("as-loop-mid:399", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-mid", []arg{{wa.I32, 1}}, arg{wa.I32, 4}) })
	t.Run("as-loop-last:400", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-last", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("as-loop-last:401", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-last", []arg{{wa.I32, 1}}, arg{}) })
	t.Run("as-br-value:403", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br-value", nil, arg{wa.I32, 1}) })
	t.Run("as-br_if-cond:405", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-cond", nil, arg{}) })
	t.Run("as-br_if-value:406", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-value", nil, arg{wa.I32, 1}) })
	t.Run("as-br_if-value-cond:407", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-br_if-value-cond", []arg{{wa.I32, 0}}, arg{wa.I32, 2})
	})
	t.Run("as-br_if-value-cond:408", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-br_if-value-cond", []arg{{wa.I32, 1}}, arg{wa.I32, 1})
	})
	t.Run("as-br_table-index:410", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-index", nil, arg{}) })
	t.Run("as-br_table-value:411", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-value", nil, arg{wa.I32, 1}) })
	t.Run("as-br_table-value-index:412", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-value-index", nil, arg{wa.I32, 1}) })
	t.Run("as-return-value:414", func(t *testing.T) { x0.assertReturnInvoke(t, "as-return-value", nil, arg{wa.I64, 1}) })
	t.Run("as-if-cond:416", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-cond", []arg{{wa.I32, 0}}, arg{wa.I32, 2}) })
	t.Run("as-if-cond:417", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-cond", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("as-if-then:418", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-then", []arg{{wa.I32, 0}, {wa.I32, 0}}, arg{}) })
	t.Run("as-if-then:419", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-then", []arg{{wa.I32, 4}, {wa.I32, 0}}, arg{}) })
	t.Run("as-if-then:420", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-then", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{}) })
	t.Run("as-if-then:421", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-then", []arg{{wa.I32, 4}, {wa.I32, 1}}, arg{}) })
	t.Run("as-if-else:422", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-else", []arg{{wa.I32, 0}, {wa.I32, 0}}, arg{}) })
	t.Run("as-if-else:423", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-else", []arg{{wa.I32, 3}, {wa.I32, 0}}, arg{}) })
	t.Run("as-if-else:424", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-else", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{}) })
	t.Run("as-if-else:425", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-else", []arg{{wa.I32, 3}, {wa.I32, 1}}, arg{}) })
	t.Run("as-select-first:427", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-first", []arg{{wa.I32, 0}}, arg{wa.I32, 3}) })
	t.Run("as-select-first:428", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-first", []arg{{wa.I32, 1}}, arg{wa.I32, 3}) })
	t.Run("as-select-second:429", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-second", []arg{{wa.I32, 0}}, arg{wa.I32, 3}) })
	t.Run("as-select-second:430", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-second", []arg{{wa.I32, 1}}, arg{wa.I32, 3}) })
	t.Run("as-select-cond:431", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-cond", nil, arg{wa.I32, 3}) })
	t.Run("as-call-first:433", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call-first", nil, arg{wa.I32, 12}) })
	t.Run("as-call-mid:434", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call-mid", nil, arg{wa.I32, 13}) })
	t.Run("as-call-last:435", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call-last", nil, arg{wa.I32, 14}) })
	t.Run("as-call_indirect-func:437", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-func", nil, arg{wa.I32, 4}) })
	t.Run("as-call_indirect-first:438", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-first", nil, arg{wa.I32, 4}) })
	t.Run("as-call_indirect-mid:439", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-mid", nil, arg{wa.I32, 4}) })
	t.Run("as-call_indirect-last:440", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-last", nil, arg{wa.I32, 4}) })
	t.Run("as-local.set-value:442", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-local.set-value", []arg{{wa.I32, 0}}, arg{wa.I32, 4294967295})
	})
	t.Run("as-local.set-value:443", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-local.set-value", []arg{{wa.I32, 1}}, arg{wa.I32, 17})
	})
	t.Run("as-local.tee-value:445", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-local.tee-value", []arg{{wa.I32, 0}}, arg{wa.I32, 4294967295})
	})
	t.Run("as-local.tee-value:446", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.tee-value", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("as-global.set-value:448", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-global.set-value", []arg{{wa.I32, 0}}, arg{wa.I32, 4294967295})
	})
	t.Run("as-global.set-value:449", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-global.set-value", []arg{{wa.I32, 1}}, arg{wa.I32, 1})
	})
	t.Run("as-load-address:451", func(t *testing.T) { x0.assertReturnInvoke(t, "as-load-address", nil, arg{wa.I32, 1}) })
	t.Run("as-loadN-address:452", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loadN-address", nil, arg{wa.I32, 30}) })
	t.Run("as-store-address:454", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-address", nil, arg{wa.I32, 30}) })
	t.Run("as-store-value:455", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-value", nil, arg{wa.I32, 31}) })
	t.Run("as-storeN-address:456", func(t *testing.T) { x0.assertReturnInvoke(t, "as-storeN-address", nil, arg{wa.I32, 32}) })
	t.Run("as-storeN-value:457", func(t *testing.T) { x0.assertReturnInvoke(t, "as-storeN-value", nil, arg{wa.I32, 33}) })
	t.Run("as-unary-operand:459", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-unary-operand", nil, arg{wa.F64, 4607182418800017408})
	})
	t.Run("as-binary-left:460", func(t *testing.T) { x0.assertReturnInvoke(t, "as-binary-left", nil, arg{wa.I32, 1}) })
	t.Run("as-binary-right:461", func(t *testing.T) { x0.assertReturnInvoke(t, "as-binary-right", nil, arg{wa.I32, 1}) })
	t.Run("as-test-operand:462", func(t *testing.T) { x0.assertReturnInvoke(t, "as-test-operand", nil, arg{wa.I32, 0}) })
	t.Run("as-compare-left:463", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-left", nil, arg{wa.I32, 1}) })
	t.Run("as-compare-right:464", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-right", nil, arg{wa.I32, 1}) })
	t.Run("as-memory.grow-size:465", func(t *testing.T) { x0.assertReturnInvoke(t, "as-memory.grow-size", nil, arg{wa.I32, 1}) })
	t.Run("nested-block-value:467", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-block-value", []arg{{wa.I32, 0}}, arg{wa.I32, 21})
	})
	t.Run("nested-block-value:468", func(t *testing.T) { x0.assertReturnInvoke(t, "nested-block-value", []arg{{wa.I32, 1}}, arg{wa.I32, 9}) })
	t.Run("nested-br-value:469", func(t *testing.T) { x0.assertReturnInvoke(t, "nested-br-value", []arg{{wa.I32, 0}}, arg{wa.I32, 5}) })
	t.Run("nested-br-value:470", func(t *testing.T) { x0.assertReturnInvoke(t, "nested-br-value", []arg{{wa.I32, 1}}, arg{wa.I32, 9}) })
	t.Run("nested-br_if-value:471", func(t *testing.T) { x0.assertReturnInvoke(t, "nested-br_if-value", []arg{{wa.I32, 0}}, arg{wa.I32, 5}) })
	t.Run("nested-br_if-value:472", func(t *testing.T) { x0.assertReturnInvoke(t, "nested-br_if-value", []arg{{wa.I32, 1}}, arg{wa.I32, 9}) })
	t.Run("nested-br_if-value-cond:473", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br_if-value-cond", []arg{{wa.I32, 0}}, arg{wa.I32, 5})
	})
	t.Run("nested-br_if-value-cond:474", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br_if-value-cond", []arg{{wa.I32, 1}}, arg{wa.I32, 9})
	})
	t.Run("nested-br_table-value:475", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br_table-value", []arg{{wa.I32, 0}}, arg{wa.I32, 5})
	})
	t.Run("nested-br_table-value:476", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br_table-value", []arg{{wa.I32, 1}}, arg{wa.I32, 9})
	})
	t.Run("nested-br_table-value-index:477", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br_table-value-index", []arg{{wa.I32, 0}}, arg{wa.I32, 5})
	})
	t.Run("nested-br_table-value-index:478", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br_table-value-index", []arg{{wa.I32, 1}}, arg{wa.I32, 9})
	})
	t.Run("assert_invalid:481", func(t *testing.T) { assertInvalidSpec(t, "br_if.1.wasm", "type mismatch") })
	t.Run("assert_invalid:485", func(t *testing.T) { assertInvalidSpec(t, "br_if.2.wasm", "type mismatch") })
	t.Run("assert_invalid:489", func(t *testing.T) { assertInvalidSpec(t, "br_if.3.wasm", "type mismatch") })
	t.Run("assert_invalid:493", func(t *testing.T) { assertInvalidSpec(t, "br_if.4.wasm", "type mismatch") })
	t.Run("assert_invalid:498", func(t *testing.T) { assertInvalidSpec(t, "br_if.5.wasm", "type mismatch") })
	t.Run("assert_invalid:502", func(t *testing.T) { assertInvalidSpec(t, "br_if.6.wasm", "type mismatch") })
	t.Run("assert_invalid:506", func(t *testing.T) { assertInvalidSpec(t, "br_if.7.wasm", "type mismatch") })
	t.Run("assert_invalid:510", func(t *testing.T) { assertInvalidSpec(t, "br_if.8.wasm", "type mismatch") })
	t.Run("assert_invalid:515", func(t *testing.T) { assertInvalidSpec(t, "br_if.9.wasm", "type mismatch") })
	t.Run("assert_invalid:521", func(t *testing.T) { assertInvalidSpec(t, "br_if.10.wasm", "type mismatch") })
	t.Run("assert_invalid:527", func(t *testing.T) { assertInvalidSpec(t, "br_if.11.wasm", "type mismatch") })
	t.Run("assert_invalid:533", func(t *testing.T) { assertInvalidSpec(t, "br_if.12.wasm", "type mismatch") })
	t.Run("assert_invalid:540", func(t *testing.T) { assertInvalidSpec(t, "br_if.13.wasm", "type mismatch") })
	t.Run("assert_invalid:546", func(t *testing.T) { assertInvalidSpec(t, "br_if.14.wasm", "type mismatch") })
	t.Run("assert_invalid:552", func(t *testing.T) { assertInvalidSpec(t, "br_if.15.wasm", "type mismatch") })
	t.Run("assert_invalid:560", func(t *testing.T) { assertInvalidSpec(t, "br_if.16.wasm", "type mismatch") })
	t.Run("assert_invalid:569", func(t *testing.T) { assertInvalidSpec(t, "br_if.17.wasm", "type mismatch") })
	t.Run("assert_invalid:575", func(t *testing.T) { assertInvalidSpec(t, "br_if.18.wasm", "type mismatch") })
	t.Run("assert_invalid:581", func(t *testing.T) { assertInvalidSpec(t, "br_if.19.wasm", "type mismatch") })
	t.Run("assert_invalid:587", func(t *testing.T) { assertInvalidSpec(t, "br_if.20.wasm", "type mismatch") })
	t.Run("assert_invalid:593", func(t *testing.T) { assertInvalidSpec(t, "br_if.21.wasm", "type mismatch") })
	t.Run("assert_invalid:599", func(t *testing.T) { assertInvalidSpec(t, "br_if.22.wasm", "type mismatch") })
	t.Run("assert_invalid:606", func(t *testing.T) { assertInvalidSpec(t, "br_if.23.wasm", "type mismatch") })
	t.Run("assert_invalid:618", func(t *testing.T) { assertInvalidSpec(t, "br_if.24.wasm", "type mismatch") })
	t.Run("assert_invalid:630", func(t *testing.T) { assertInvalidSpec(t, "br_if.25.wasm", "type mismatch") })
	t.Run("assert_invalid:641", func(t *testing.T) { assertInvalidSpec(t, "br_if.26.wasm", "type mismatch") })
	t.Run("assert_invalid:654", func(t *testing.T) { assertInvalidSpec(t, "br_if.27.wasm", "unknown label") })
	t.Run("assert_invalid:658", func(t *testing.T) { assertInvalidSpec(t, "br_if.28.wasm", "unknown label") })
	t.Run("assert_invalid:662", func(t *testing.T) { assertInvalidSpec(t, "br_if.29.wasm", "unknown label") })
}

func Test_br_table(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "br_table.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("type-i32:1256", func(t *testing.T) { x0.assertReturnInvoke(t, "type-i32", nil, arg{}) })
	t.Run("type-i64:1257", func(t *testing.T) { x0.assertReturnInvoke(t, "type-i64", nil, arg{}) })
	t.Run("type-f32:1258", func(t *testing.T) { x0.assertReturnInvoke(t, "type-f32", nil, arg{}) })
	t.Run("type-f64:1259", func(t *testing.T) { x0.assertReturnInvoke(t, "type-f64", nil, arg{}) })
	t.Run("type-i32-value:1261", func(t *testing.T) { x0.assertReturnInvoke(t, "type-i32-value", nil, arg{wa.I32, 1}) })
	t.Run("type-i64-value:1262", func(t *testing.T) { x0.assertReturnInvoke(t, "type-i64-value", nil, arg{wa.I64, 2}) })
	t.Run("type-f32-value:1263", func(t *testing.T) { x0.assertReturnInvoke(t, "type-f32-value", nil, arg{wa.F32, 1077936128}) })
	t.Run("type-f64-value:1264", func(t *testing.T) { x0.assertReturnInvoke(t, "type-f64-value", nil, arg{wa.F64, 4616189618054758400}) })
	t.Run("empty:1266", func(t *testing.T) { x0.assertReturnInvoke(t, "empty", []arg{{wa.I32, 0}}, arg{wa.I32, 22}) })
	t.Run("empty:1267", func(t *testing.T) { x0.assertReturnInvoke(t, "empty", []arg{{wa.I32, 1}}, arg{wa.I32, 22}) })
	t.Run("empty:1268", func(t *testing.T) { x0.assertReturnInvoke(t, "empty", []arg{{wa.I32, 11}}, arg{wa.I32, 22}) })
	t.Run("empty:1269", func(t *testing.T) { x0.assertReturnInvoke(t, "empty", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 22}) })
	t.Run("empty:1270", func(t *testing.T) { x0.assertReturnInvoke(t, "empty", []arg{{wa.I32, 4294967196}}, arg{wa.I32, 22}) })
	t.Run("empty:1271", func(t *testing.T) { x0.assertReturnInvoke(t, "empty", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 22}) })
	t.Run("empty-value:1273", func(t *testing.T) { x0.assertReturnInvoke(t, "empty-value", []arg{{wa.I32, 0}}, arg{wa.I32, 33}) })
	t.Run("empty-value:1274", func(t *testing.T) { x0.assertReturnInvoke(t, "empty-value", []arg{{wa.I32, 1}}, arg{wa.I32, 33}) })
	t.Run("empty-value:1275", func(t *testing.T) { x0.assertReturnInvoke(t, "empty-value", []arg{{wa.I32, 11}}, arg{wa.I32, 33}) })
	t.Run("empty-value:1276", func(t *testing.T) {
		x0.assertReturnInvoke(t, "empty-value", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 33})
	})
	t.Run("empty-value:1277", func(t *testing.T) {
		x0.assertReturnInvoke(t, "empty-value", []arg{{wa.I32, 4294967196}}, arg{wa.I32, 33})
	})
	t.Run("empty-value:1278", func(t *testing.T) {
		x0.assertReturnInvoke(t, "empty-value", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 33})
	})
	t.Run("singleton:1280", func(t *testing.T) { x0.assertReturnInvoke(t, "singleton", []arg{{wa.I32, 0}}, arg{wa.I32, 22}) })
	t.Run("singleton:1281", func(t *testing.T) { x0.assertReturnInvoke(t, "singleton", []arg{{wa.I32, 1}}, arg{wa.I32, 20}) })
	t.Run("singleton:1282", func(t *testing.T) { x0.assertReturnInvoke(t, "singleton", []arg{{wa.I32, 11}}, arg{wa.I32, 20}) })
	t.Run("singleton:1283", func(t *testing.T) {
		x0.assertReturnInvoke(t, "singleton", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 20})
	})
	t.Run("singleton:1284", func(t *testing.T) {
		x0.assertReturnInvoke(t, "singleton", []arg{{wa.I32, 4294967196}}, arg{wa.I32, 20})
	})
	t.Run("singleton:1285", func(t *testing.T) {
		x0.assertReturnInvoke(t, "singleton", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 20})
	})
	t.Run("singleton-value:1287", func(t *testing.T) { x0.assertReturnInvoke(t, "singleton-value", []arg{{wa.I32, 0}}, arg{wa.I32, 32}) })
	t.Run("singleton-value:1288", func(t *testing.T) { x0.assertReturnInvoke(t, "singleton-value", []arg{{wa.I32, 1}}, arg{wa.I32, 33}) })
	t.Run("singleton-value:1289", func(t *testing.T) { x0.assertReturnInvoke(t, "singleton-value", []arg{{wa.I32, 11}}, arg{wa.I32, 33}) })
	t.Run("singleton-value:1290", func(t *testing.T) {
		x0.assertReturnInvoke(t, "singleton-value", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 33})
	})
	t.Run("singleton-value:1291", func(t *testing.T) {
		x0.assertReturnInvoke(t, "singleton-value", []arg{{wa.I32, 4294967196}}, arg{wa.I32, 33})
	})
	t.Run("singleton-value:1292", func(t *testing.T) {
		x0.assertReturnInvoke(t, "singleton-value", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 33})
	})
	t.Run("multiple:1294", func(t *testing.T) { x0.assertReturnInvoke(t, "multiple", []arg{{wa.I32, 0}}, arg{wa.I32, 103}) })
	t.Run("multiple:1295", func(t *testing.T) { x0.assertReturnInvoke(t, "multiple", []arg{{wa.I32, 1}}, arg{wa.I32, 102}) })
	t.Run("multiple:1296", func(t *testing.T) { x0.assertReturnInvoke(t, "multiple", []arg{{wa.I32, 2}}, arg{wa.I32, 101}) })
	t.Run("multiple:1297", func(t *testing.T) { x0.assertReturnInvoke(t, "multiple", []arg{{wa.I32, 3}}, arg{wa.I32, 100}) })
	t.Run("multiple:1298", func(t *testing.T) { x0.assertReturnInvoke(t, "multiple", []arg{{wa.I32, 4}}, arg{wa.I32, 104}) })
	t.Run("multiple:1299", func(t *testing.T) { x0.assertReturnInvoke(t, "multiple", []arg{{wa.I32, 5}}, arg{wa.I32, 104}) })
	t.Run("multiple:1300", func(t *testing.T) { x0.assertReturnInvoke(t, "multiple", []arg{{wa.I32, 6}}, arg{wa.I32, 104}) })
	t.Run("multiple:1301", func(t *testing.T) { x0.assertReturnInvoke(t, "multiple", []arg{{wa.I32, 10}}, arg{wa.I32, 104}) })
	t.Run("multiple:1302", func(t *testing.T) {
		x0.assertReturnInvoke(t, "multiple", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 104})
	})
	t.Run("multiple:1303", func(t *testing.T) {
		x0.assertReturnInvoke(t, "multiple", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 104})
	})
	t.Run("multiple-value:1305", func(t *testing.T) { x0.assertReturnInvoke(t, "multiple-value", []arg{{wa.I32, 0}}, arg{wa.I32, 213}) })
	t.Run("multiple-value:1306", func(t *testing.T) { x0.assertReturnInvoke(t, "multiple-value", []arg{{wa.I32, 1}}, arg{wa.I32, 212}) })
	t.Run("multiple-value:1307", func(t *testing.T) { x0.assertReturnInvoke(t, "multiple-value", []arg{{wa.I32, 2}}, arg{wa.I32, 211}) })
	t.Run("multiple-value:1308", func(t *testing.T) { x0.assertReturnInvoke(t, "multiple-value", []arg{{wa.I32, 3}}, arg{wa.I32, 210}) })
	t.Run("multiple-value:1309", func(t *testing.T) { x0.assertReturnInvoke(t, "multiple-value", []arg{{wa.I32, 4}}, arg{wa.I32, 214}) })
	t.Run("multiple-value:1310", func(t *testing.T) { x0.assertReturnInvoke(t, "multiple-value", []arg{{wa.I32, 5}}, arg{wa.I32, 214}) })
	t.Run("multiple-value:1311", func(t *testing.T) { x0.assertReturnInvoke(t, "multiple-value", []arg{{wa.I32, 6}}, arg{wa.I32, 214}) })
	t.Run("multiple-value:1312", func(t *testing.T) { x0.assertReturnInvoke(t, "multiple-value", []arg{{wa.I32, 10}}, arg{wa.I32, 214}) })
	t.Run("multiple-value:1313", func(t *testing.T) {
		x0.assertReturnInvoke(t, "multiple-value", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 214})
	})
	t.Run("multiple-value:1314", func(t *testing.T) {
		x0.assertReturnInvoke(t, "multiple-value", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 214})
	})
	t.Run("large:1316", func(t *testing.T) { x0.assertReturnInvoke(t, "large", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("large:1317", func(t *testing.T) { x0.assertReturnInvoke(t, "large", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("large:1318", func(t *testing.T) { x0.assertReturnInvoke(t, "large", []arg{{wa.I32, 100}}, arg{wa.I32, 0}) })
	t.Run("large:1319", func(t *testing.T) { x0.assertReturnInvoke(t, "large", []arg{{wa.I32, 101}}, arg{wa.I32, 1}) })
	t.Run("large:1320", func(t *testing.T) { x0.assertReturnInvoke(t, "large", []arg{{wa.I32, 10000}}, arg{wa.I32, 0}) })
	t.Run("large:1321", func(t *testing.T) { x0.assertReturnInvoke(t, "large", []arg{{wa.I32, 10001}}, arg{wa.I32, 1}) })
	t.Run("large:1322", func(t *testing.T) { x0.assertReturnInvoke(t, "large", []arg{{wa.I32, 1000000}}, arg{wa.I32, 1}) })
	t.Run("large:1323", func(t *testing.T) { x0.assertReturnInvoke(t, "large", []arg{{wa.I32, 1000001}}, arg{wa.I32, 1}) })
	t.Run("as-block-first:1325", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-first", nil, arg{}) })
	t.Run("as-block-mid:1326", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-mid", nil, arg{}) })
	t.Run("as-block-last:1327", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-last", nil, arg{}) })
	t.Run("as-block-value:1328", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-value", nil, arg{wa.I32, 2}) })
	t.Run("as-loop-first:1330", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-first", nil, arg{wa.I32, 3}) })
	t.Run("as-loop-mid:1331", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-mid", nil, arg{wa.I32, 4}) })
	t.Run("as-loop-last:1332", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-last", nil, arg{wa.I32, 5}) })
	t.Run("as-br-value:1334", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br-value", nil, arg{wa.I32, 9}) })
	t.Run("as-br_if-cond:1336", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-cond", nil, arg{}) })
	t.Run("as-br_if-value:1337", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-value", nil, arg{wa.I32, 8}) })
	t.Run("as-br_if-value-cond:1338", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-value-cond", nil, arg{wa.I32, 9}) })
	t.Run("as-br_table-index:1340", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-index", nil, arg{}) })
	t.Run("as-br_table-value:1341", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-value", nil, arg{wa.I32, 10}) })
	t.Run("as-br_table-value-index:1342", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-value-index", nil, arg{wa.I32, 11}) })
	t.Run("as-return-value:1344", func(t *testing.T) { x0.assertReturnInvoke(t, "as-return-value", nil, arg{wa.I64, 7}) })
	t.Run("as-if-cond:1346", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-cond", nil, arg{wa.I32, 2}) })
	t.Run("as-if-then:1347", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-if-then", []arg{{wa.I32, 1}, {wa.I32, 6}}, arg{wa.I32, 3})
	})
	t.Run("as-if-then:1348", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-if-then", []arg{{wa.I32, 0}, {wa.I32, 6}}, arg{wa.I32, 6})
	})
	t.Run("as-if-else:1349", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-if-else", []arg{{wa.I32, 0}, {wa.I32, 6}}, arg{wa.I32, 4})
	})
	t.Run("as-if-else:1350", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-if-else", []arg{{wa.I32, 1}, {wa.I32, 6}}, arg{wa.I32, 6})
	})
	t.Run("as-select-first:1352", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-select-first", []arg{{wa.I32, 0}, {wa.I32, 6}}, arg{wa.I32, 5})
	})
	t.Run("as-select-first:1353", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-select-first", []arg{{wa.I32, 1}, {wa.I32, 6}}, arg{wa.I32, 5})
	})
	t.Run("as-select-second:1354", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-select-second", []arg{{wa.I32, 0}, {wa.I32, 6}}, arg{wa.I32, 6})
	})
	t.Run("as-select-second:1355", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-select-second", []arg{{wa.I32, 1}, {wa.I32, 6}}, arg{wa.I32, 6})
	})
	t.Run("as-select-cond:1356", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-cond", nil, arg{wa.I32, 7}) })
	t.Run("as-call-first:1358", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call-first", nil, arg{wa.I32, 12}) })
	t.Run("as-call-mid:1359", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call-mid", nil, arg{wa.I32, 13}) })
	t.Run("as-call-last:1360", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call-last", nil, arg{wa.I32, 14}) })
	t.Run("as-call_indirect-first:1362", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-first", nil, arg{wa.I32, 20}) })
	t.Run("as-call_indirect-mid:1363", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-mid", nil, arg{wa.I32, 21}) })
	t.Run("as-call_indirect-last:1364", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-last", nil, arg{wa.I32, 22}) })
	t.Run("as-call_indirect-func:1365", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-func", nil, arg{wa.I32, 23}) })
	t.Run("as-local.set-value:1367", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.set-value", nil, arg{wa.I32, 17}) })
	t.Run("as-local.tee-value:1368", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.tee-value", nil, arg{wa.I32, 1}) })
	t.Run("as-global.set-value:1369", func(t *testing.T) { x0.assertReturnInvoke(t, "as-global.set-value", nil, arg{wa.I32, 1}) })
	t.Run("as-load-address:1371", func(t *testing.T) { x0.assertReturnInvoke(t, "as-load-address", nil, arg{wa.F32, 1071225242}) })
	t.Run("as-loadN-address:1372", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loadN-address", nil, arg{wa.I64, 30}) })
	t.Run("as-store-address:1374", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-address", nil, arg{wa.I32, 30}) })
	t.Run("as-store-value:1375", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-value", nil, arg{wa.I32, 31}) })
	t.Run("as-storeN-address:1376", func(t *testing.T) { x0.assertReturnInvoke(t, "as-storeN-address", nil, arg{wa.I32, 32}) })
	t.Run("as-storeN-value:1377", func(t *testing.T) { x0.assertReturnInvoke(t, "as-storeN-value", nil, arg{wa.I32, 33}) })
	t.Run("as-unary-operand:1379", func(t *testing.T) { x0.assertReturnInvoke(t, "as-unary-operand", nil, arg{wa.F32, 1079613850}) })
	t.Run("as-binary-left:1381", func(t *testing.T) { x0.assertReturnInvoke(t, "as-binary-left", nil, arg{wa.I32, 3}) })
	t.Run("as-binary-right:1382", func(t *testing.T) { x0.assertReturnInvoke(t, "as-binary-right", nil, arg{wa.I64, 45}) })
	t.Run("as-test-operand:1384", func(t *testing.T) { x0.assertReturnInvoke(t, "as-test-operand", nil, arg{wa.I32, 44}) })
	t.Run("as-compare-left:1386", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-left", nil, arg{wa.I32, 43}) })
	t.Run("as-compare-right:1387", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-right", nil, arg{wa.I32, 42}) })
	t.Run("as-convert-operand:1389", func(t *testing.T) { x0.assertReturnInvoke(t, "as-convert-operand", nil, arg{wa.I32, 41}) })
	t.Run("as-memory.grow-size:1391", func(t *testing.T) { x0.assertReturnInvoke(t, "as-memory.grow-size", nil, arg{wa.I32, 40}) })
	t.Run("nested-block-value:1393", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-block-value", []arg{{wa.I32, 0}}, arg{wa.I32, 19})
	})
	t.Run("nested-block-value:1394", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-block-value", []arg{{wa.I32, 1}}, arg{wa.I32, 17})
	})
	t.Run("nested-block-value:1395", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-block-value", []arg{{wa.I32, 2}}, arg{wa.I32, 16})
	})
	t.Run("nested-block-value:1396", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-block-value", []arg{{wa.I32, 10}}, arg{wa.I32, 16})
	})
	t.Run("nested-block-value:1397", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-block-value", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 16})
	})
	t.Run("nested-block-value:1398", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-block-value", []arg{{wa.I32, 100000}}, arg{wa.I32, 16})
	})
	t.Run("nested-br-value:1400", func(t *testing.T) { x0.assertReturnInvoke(t, "nested-br-value", []arg{{wa.I32, 0}}, arg{wa.I32, 8}) })
	t.Run("nested-br-value:1401", func(t *testing.T) { x0.assertReturnInvoke(t, "nested-br-value", []arg{{wa.I32, 1}}, arg{wa.I32, 9}) })
	t.Run("nested-br-value:1402", func(t *testing.T) { x0.assertReturnInvoke(t, "nested-br-value", []arg{{wa.I32, 2}}, arg{wa.I32, 17}) })
	t.Run("nested-br-value:1403", func(t *testing.T) { x0.assertReturnInvoke(t, "nested-br-value", []arg{{wa.I32, 11}}, arg{wa.I32, 17}) })
	t.Run("nested-br-value:1404", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br-value", []arg{{wa.I32, 4294967292}}, arg{wa.I32, 17})
	})
	t.Run("nested-br-value:1405", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br-value", []arg{{wa.I32, 10213210}}, arg{wa.I32, 17})
	})
	t.Run("nested-br_if-value:1407", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br_if-value", []arg{{wa.I32, 0}}, arg{wa.I32, 17})
	})
	t.Run("nested-br_if-value:1408", func(t *testing.T) { x0.assertReturnInvoke(t, "nested-br_if-value", []arg{{wa.I32, 1}}, arg{wa.I32, 9}) })
	t.Run("nested-br_if-value:1409", func(t *testing.T) { x0.assertReturnInvoke(t, "nested-br_if-value", []arg{{wa.I32, 2}}, arg{wa.I32, 8}) })
	t.Run("nested-br_if-value:1410", func(t *testing.T) { x0.assertReturnInvoke(t, "nested-br_if-value", []arg{{wa.I32, 9}}, arg{wa.I32, 8}) })
	t.Run("nested-br_if-value:1411", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br_if-value", []arg{{wa.I32, 4294967287}}, arg{wa.I32, 8})
	})
	t.Run("nested-br_if-value:1412", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br_if-value", []arg{{wa.I32, 999999}}, arg{wa.I32, 8})
	})
	t.Run("nested-br_if-value-cond:1414", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br_if-value-cond", []arg{{wa.I32, 0}}, arg{wa.I32, 9})
	})
	t.Run("nested-br_if-value-cond:1415", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br_if-value-cond", []arg{{wa.I32, 1}}, arg{wa.I32, 8})
	})
	t.Run("nested-br_if-value-cond:1416", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br_if-value-cond", []arg{{wa.I32, 2}}, arg{wa.I32, 9})
	})
	t.Run("nested-br_if-value-cond:1417", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br_if-value-cond", []arg{{wa.I32, 3}}, arg{wa.I32, 9})
	})
	t.Run("nested-br_if-value-cond:1418", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br_if-value-cond", []arg{{wa.I32, 4293967296}}, arg{wa.I32, 9})
	})
	t.Run("nested-br_if-value-cond:1419", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br_if-value-cond", []arg{{wa.I32, 9423975}}, arg{wa.I32, 9})
	})
	t.Run("nested-br_table-value:1421", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br_table-value", []arg{{wa.I32, 0}}, arg{wa.I32, 17})
	})
	t.Run("nested-br_table-value:1422", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br_table-value", []arg{{wa.I32, 1}}, arg{wa.I32, 9})
	})
	t.Run("nested-br_table-value:1423", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br_table-value", []arg{{wa.I32, 2}}, arg{wa.I32, 8})
	})
	t.Run("nested-br_table-value:1424", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br_table-value", []arg{{wa.I32, 9}}, arg{wa.I32, 8})
	})
	t.Run("nested-br_table-value:1425", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br_table-value", []arg{{wa.I32, 4294967287}}, arg{wa.I32, 8})
	})
	t.Run("nested-br_table-value:1426", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br_table-value", []arg{{wa.I32, 999999}}, arg{wa.I32, 8})
	})
	t.Run("nested-br_table-value-index:1428", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br_table-value-index", []arg{{wa.I32, 0}}, arg{wa.I32, 9})
	})
	t.Run("nested-br_table-value-index:1429", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br_table-value-index", []arg{{wa.I32, 1}}, arg{wa.I32, 8})
	})
	t.Run("nested-br_table-value-index:1430", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br_table-value-index", []arg{{wa.I32, 2}}, arg{wa.I32, 9})
	})
	t.Run("nested-br_table-value-index:1431", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br_table-value-index", []arg{{wa.I32, 3}}, arg{wa.I32, 9})
	})
	t.Run("nested-br_table-value-index:1432", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br_table-value-index", []arg{{wa.I32, 4293967296}}, arg{wa.I32, 9})
	})
	t.Run("nested-br_table-value-index:1433", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br_table-value-index", []arg{{wa.I32, 9423975}}, arg{wa.I32, 9})
	})
	t.Run("nested-br_table-loop-block:1435", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested-br_table-loop-block", []arg{{wa.I32, 1}}, arg{wa.I32, 3})
	})
	t.Run("meet-externref:1437", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("meet-externref:1438", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("meet-externref:1439", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("assert_invalid:1442", func(t *testing.T) { assertInvalidSpec(t, "br_table.1.wasm", "type mismatch") })
	t.Run("assert_invalid:1449", func(t *testing.T) { assertInvalidSpec(t, "br_table.2.wasm", "type mismatch") })
	t.Run("assert_invalid:1456", func(t *testing.T) { assertInvalidSpec(t, "br_table.3.wasm", "type mismatch") })
	t.Run("assert_invalid:1462", func(t *testing.T) { assertInvalidSpec(t, "br_table.4.wasm", "type mismatch") })
	t.Run("assert_invalid:1470", func(t *testing.T) { assertInvalidSpec(t, "br_table.5.wasm", "type mismatch") })
	t.Run("assert_invalid:1481", func(t *testing.T) { assertInvalidSpec(t, "br_table.6.wasm", "type mismatch") })
	t.Run("assert_invalid:1492", func(t *testing.T) { assertInvalidSpec(t, "br_table.7.wasm", "type mismatch") })
	t.Run("assert_invalid:1498", func(t *testing.T) { assertInvalidSpec(t, "br_table.8.wasm", "type mismatch") })
	t.Run("assert_invalid:1504", func(t *testing.T) { assertInvalidSpec(t, "br_table.9.wasm", "type mismatch") })
	t.Run("assert_invalid:1510", func(t *testing.T) { assertInvalidSpec(t, "br_table.10.wasm", "type mismatch") })
	t.Run("assert_invalid:1516", func(t *testing.T) { assertInvalidSpec(t, "br_table.11.wasm", "type mismatch") })
	t.Run("assert_invalid:1525", func(t *testing.T) { assertInvalidSpec(t, "br_table.12.wasm", "type mismatch") })
	t.Run("assert_invalid:1532", func(t *testing.T) { assertInvalidSpec(t, "br_table.13.wasm", "type mismatch") })
	t.Run("assert_invalid:1544", func(t *testing.T) { assertInvalidSpec(t, "br_table.14.wasm", "type mismatch") })
	t.Run("assert_invalid:1556", func(t *testing.T) { assertInvalidSpec(t, "br_table.15.wasm", "type mismatch") })
	t.Run("assert_invalid:1567", func(t *testing.T) { assertInvalidSpec(t, "br_table.16.wasm", "type mismatch") })
	t.Run("assert_invalid:1579", func(t *testing.T) { assertInvalidSpec(t, "br_table.17.wasm", "type mismatch") })
	t.Run("assert_invalid:1591", func(t *testing.T) { assertInvalidSpec(t, "br_table.18.wasm", "type mismatch") })
	t.Run("assert_invalid:1605", func(t *testing.T) { assertInvalidSpec(t, "br_table.19.wasm", "unknown label") })
	t.Run("assert_invalid:1611", func(t *testing.T) { assertInvalidSpec(t, "br_table.20.wasm", "unknown label") })
	t.Run("assert_invalid:1617", func(t *testing.T) { assertInvalidSpec(t, "br_table.21.wasm", "unknown label") })
	t.Run("assert_invalid:1624", func(t *testing.T) { assertInvalidSpec(t, "br_table.22.wasm", "unknown label") })
	t.Run("assert_invalid:1630", func(t *testing.T) { assertInvalidSpec(t, "br_table.23.wasm", "unknown label") })
	t.Run("assert_invalid:1636", func(t *testing.T) { assertInvalidSpec(t, "br_table.24.wasm", "unknown label") })
}

func Test_bulk(t *testing.T) { t.Skip("bulk not supported") }

func Test_call(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "call.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("type-i32:285", func(t *testing.T) { x0.assertReturnInvoke(t, "type-i32", nil, arg{wa.I32, 306}) })
	t.Run("type-i64:286", func(t *testing.T) { x0.assertReturnInvoke(t, "type-i64", nil, arg{wa.I64, 356}) })
	t.Run("type-f32:287", func(t *testing.T) { x0.assertReturnInvoke(t, "type-f32", nil, arg{wa.F32, 1165172736}) })
	t.Run("type-f64:288", func(t *testing.T) { x0.assertReturnInvoke(t, "type-f64", nil, arg{wa.F64, 4660882566700597248}) })
	t.Run("type-i32-i64:289", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("type-first-i32:291", func(t *testing.T) { x0.assertReturnInvoke(t, "type-first-i32", nil, arg{wa.I32, 32}) })
	t.Run("type-first-i64:292", func(t *testing.T) { x0.assertReturnInvoke(t, "type-first-i64", nil, arg{wa.I64, 64}) })
	t.Run("type-first-f32:293", func(t *testing.T) { x0.assertReturnInvoke(t, "type-first-f32", nil, arg{wa.F32, 1068037571}) })
	t.Run("type-first-f64:294", func(t *testing.T) { x0.assertReturnInvoke(t, "type-first-f64", nil, arg{wa.F64, 4610064722561534525}) })
	t.Run("type-second-i32:296", func(t *testing.T) { x0.assertReturnInvoke(t, "type-second-i32", nil, arg{wa.I32, 32}) })
	t.Run("type-second-i64:297", func(t *testing.T) { x0.assertReturnInvoke(t, "type-second-i64", nil, arg{wa.I64, 64}) })
	t.Run("type-second-f32:298", func(t *testing.T) { x0.assertReturnInvoke(t, "type-second-f32", nil, arg{wa.F32, 1107296256}) })
	t.Run("type-second-f64:299", func(t *testing.T) { x0.assertReturnInvoke(t, "type-second-f64", nil, arg{wa.F64, 4634211053438658150}) })
	t.Run("type-all-i32-f64:301", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("type-all-i32-i32:302", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("type-all-f32-f64:303", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("type-all-f64-i32:304", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("as-binary-all-operands:306", func(t *testing.T) { x0.assertReturnInvoke(t, "as-binary-all-operands", nil, arg{wa.I32, 7}) })
	t.Run("as-mixed-operands:307", func(t *testing.T) { x0.assertReturnInvoke(t, "as-mixed-operands", nil, arg{wa.I32, 32}) })
	t.Run("as-call-all-operands:308", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("fac:310", func(t *testing.T) { x0.assertReturnInvoke(t, "fac", []arg{{wa.I64, 0}}, arg{wa.I64, 1}) })
	t.Run("fac:311", func(t *testing.T) { x0.assertReturnInvoke(t, "fac", []arg{{wa.I64, 1}}, arg{wa.I64, 1}) })
	t.Run("fac:312", func(t *testing.T) { x0.assertReturnInvoke(t, "fac", []arg{{wa.I64, 5}}, arg{wa.I64, 120}) })
	t.Run("fac:313", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fac", []arg{{wa.I64, 25}}, arg{wa.I64, 7034535277573963776})
	})
	t.Run("fac-acc:314", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fac-acc", []arg{{wa.I64, 0}, {wa.I64, 1}}, arg{wa.I64, 1})
	})
	t.Run("fac-acc:315", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fac-acc", []arg{{wa.I64, 1}, {wa.I64, 1}}, arg{wa.I64, 1})
	})
	t.Run("fac-acc:316", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fac-acc", []arg{{wa.I64, 5}, {wa.I64, 1}}, arg{wa.I64, 120})
	})
	t.Run("fac-acc:318", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fac-acc", []arg{{wa.I64, 25}, {wa.I64, 1}}, arg{wa.I64, 7034535277573963776})
	})
	t.Run("fib:322", func(t *testing.T) { x0.assertReturnInvoke(t, "fib", []arg{{wa.I64, 0}}, arg{wa.I64, 1}) })
	t.Run("fib:323", func(t *testing.T) { x0.assertReturnInvoke(t, "fib", []arg{{wa.I64, 1}}, arg{wa.I64, 1}) })
	t.Run("fib:324", func(t *testing.T) { x0.assertReturnInvoke(t, "fib", []arg{{wa.I64, 2}}, arg{wa.I64, 2}) })
	t.Run("fib:325", func(t *testing.T) { x0.assertReturnInvoke(t, "fib", []arg{{wa.I64, 5}}, arg{wa.I64, 8}) })
	t.Run("fib:326", func(t *testing.T) { x0.assertReturnInvoke(t, "fib", []arg{{wa.I64, 20}}, arg{wa.I64, 10946}) })
	t.Run("even:328", func(t *testing.T) { x0.assertReturnInvoke(t, "even", []arg{{wa.I64, 0}}, arg{wa.I32, 44}) })
	t.Run("even:329", func(t *testing.T) { x0.assertReturnInvoke(t, "even", []arg{{wa.I64, 1}}, arg{wa.I32, 99}) })
	t.Run("even:330", func(t *testing.T) { x0.assertReturnInvoke(t, "even", []arg{{wa.I64, 100}}, arg{wa.I32, 44}) })
	t.Run("even:331", func(t *testing.T) { x0.assertReturnInvoke(t, "even", []arg{{wa.I64, 77}}, arg{wa.I32, 99}) })
	t.Run("odd:332", func(t *testing.T) { x0.assertReturnInvoke(t, "odd", []arg{{wa.I64, 0}}, arg{wa.I32, 99}) })
	t.Run("odd:333", func(t *testing.T) { x0.assertReturnInvoke(t, "odd", []arg{{wa.I64, 1}}, arg{wa.I32, 44}) })
	t.Run("odd:334", func(t *testing.T) { x0.assertReturnInvoke(t, "odd", []arg{{wa.I64, 200}}, arg{wa.I32, 99}) })
	t.Run("odd:335", func(t *testing.T) { x0.assertReturnInvoke(t, "odd", []arg{{wa.I64, 77}}, arg{wa.I32, 44}) })
	t.Run("runaway:337", func(t *testing.T) { x0.assertExhaustion(t, "runaway", nil, arg{}, "call stack exhausted") })
	t.Run("mutual-runaway:338", func(t *testing.T) { x0.assertExhaustion(t, "mutual-runaway", nil, arg{}, "call stack exhausted") })
	t.Run("as-select-first:340", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-first", nil, arg{wa.I32, 306}) })
	t.Run("as-select-mid:341", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-mid", nil, arg{wa.I32, 2}) })
	t.Run("as-select-last:342", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-last", nil, arg{wa.I32, 2}) })
	t.Run("as-if-condition:344", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-condition", nil, arg{wa.I32, 1}) })
	t.Run("as-br_if-first:346", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-first", nil, arg{wa.I32, 306}) })
	t.Run("as-br_if-last:347", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-last", nil, arg{wa.I32, 2}) })
	t.Run("as-br_table-first:349", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-first", nil, arg{wa.I32, 306}) })
	t.Run("as-br_table-last:350", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-last", nil, arg{wa.I32, 2}) })
	t.Run("as-call_indirect-first:352", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-first", nil, arg{wa.I32, 306}) })
	t.Run("as-call_indirect-mid:353", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-mid", nil, arg{wa.I32, 2}) })
	t.Run("as-call_indirect-last:354", func(t *testing.T) {
		x0.assertTrap(t, "as-call_indirect-last", nil, arg{Type: wa.I32}, "undefined element")
	})
	t.Run("as-store-first:356", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-first", nil, arg{}) })
	t.Run("as-store-last:357", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-last", nil, arg{}) })
	t.Run("as-memory.grow-value:359", func(t *testing.T) { x0.assertReturnInvoke(t, "as-memory.grow-value", nil, arg{wa.I32, 1}) })
	t.Run("as-return-value:360", func(t *testing.T) { x0.assertReturnInvoke(t, "as-return-value", nil, arg{wa.I32, 306}) })
	t.Run("as-drop-operand:361", func(t *testing.T) { x0.assertReturnInvoke(t, "as-drop-operand", nil, arg{}) })
	t.Run("as-br-value:362", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br-value", nil, arg{wa.I32, 306}) })
	t.Run("as-local.set-value:363", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.set-value", nil, arg{wa.I32, 306}) })
	t.Run("as-local.tee-value:364", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.tee-value", nil, arg{wa.I32, 306}) })
	t.Run("as-global.set-value:365", func(t *testing.T) { x0.assertReturnInvoke(t, "as-global.set-value", nil, arg{wa.I32, 306}) })
	t.Run("as-load-operand:366", func(t *testing.T) { x0.assertReturnInvoke(t, "as-load-operand", nil, arg{wa.I32, 1}) })
	t.Run("as-unary-operand:368", func(t *testing.T) { x0.assertReturnInvoke(t, "as-unary-operand", nil, arg{wa.F32, 0}) })
	t.Run("as-binary-left:369", func(t *testing.T) { x0.assertReturnInvoke(t, "as-binary-left", nil, arg{wa.I32, 11}) })
	t.Run("as-binary-right:370", func(t *testing.T) { x0.assertReturnInvoke(t, "as-binary-right", nil, arg{wa.I32, 9}) })
	t.Run("as-test-operand:371", func(t *testing.T) { x0.assertReturnInvoke(t, "as-test-operand", nil, arg{wa.I32, 0}) })
	t.Run("as-compare-left:372", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-left", nil, arg{wa.I32, 1}) })
	t.Run("as-compare-right:373", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-right", nil, arg{wa.I32, 1}) })
	t.Run("as-convert-operand:374", func(t *testing.T) { x0.assertReturnInvoke(t, "as-convert-operand", nil, arg{wa.I64, 1}) })
	t.Run("return-from-long-argument-list:376", func(t *testing.T) {
		x0.assertReturnInvoke(t, "return-from-long-argument-list", []arg{{wa.I32, 42}}, arg{wa.I32, 42})
	})
	t.Run("assert_invalid:381", func(t *testing.T) { assertInvalidSpec(t, "call.1.wasm", "type mismatch") })
	t.Run("assert_invalid:388", func(t *testing.T) { assertInvalidSpec(t, "call.2.wasm", "type mismatch") })
	t.Run("assert_invalid:396", func(t *testing.T) { assertInvalidSpec(t, "call.3.wasm", "type mismatch") })
	t.Run("assert_invalid:403", func(t *testing.T) { assertInvalidSpec(t, "call.4.wasm", "type mismatch") })
	t.Run("assert_invalid:410", func(t *testing.T) { assertInvalidSpec(t, "call.5.wasm", "type mismatch") })
	t.Run("assert_invalid:417", func(t *testing.T) { assertInvalidSpec(t, "call.6.wasm", "type mismatch") })
	t.Run("assert_invalid:425", func(t *testing.T) { assertInvalidSpec(t, "call.7.wasm", "type mismatch") })
	t.Run("assert_invalid:432", func(t *testing.T) { assertInvalidSpec(t, "call.8.wasm", "type mismatch") })
	t.Run("assert_invalid:439", func(t *testing.T) { assertInvalidSpec(t, "call.9.wasm", "type mismatch") })
	t.Run("assert_invalid:446", func(t *testing.T) { assertInvalidSpec(t, "call.10.wasm", "type mismatch") })
	t.Run("assert_invalid:454", func(t *testing.T) { assertInvalidSpec(t, "call.11.wasm", "type mismatch") })
	t.Run("assert_invalid:463", func(t *testing.T) { assertInvalidSpec(t, "call.12.wasm", "type mismatch") })
	t.Run("assert_invalid:472", func(t *testing.T) { assertInvalidSpec(t, "call.13.wasm", "type mismatch") })
	t.Run("assert_invalid:481", func(t *testing.T) { assertInvalidSpec(t, "call.14.wasm", "type mismatch") })
	t.Run("assert_invalid:490", func(t *testing.T) { assertInvalidSpec(t, "call.15.wasm", "type mismatch") })
	t.Run("assert_invalid:499", func(t *testing.T) { assertInvalidSpec(t, "call.16.wasm", "type mismatch") })
	t.Run("assert_invalid:512", func(t *testing.T) { assertInvalidSpec(t, "call.17.wasm", "unknown function") })
	t.Run("assert_invalid:516", func(t *testing.T) { assertInvalidSpec(t, "call.18.wasm", "unknown function") })
}

func Test_call_indirect(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "call_indirect.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("type-i32:471", func(t *testing.T) { x0.assertReturnInvoke(t, "type-i32", nil, arg{wa.I32, 306}) })
	t.Run("type-i64:472", func(t *testing.T) { x0.assertReturnInvoke(t, "type-i64", nil, arg{wa.I64, 356}) })
	t.Run("type-f32:473", func(t *testing.T) { x0.assertReturnInvoke(t, "type-f32", nil, arg{wa.F32, 1165172736}) })
	t.Run("type-f64:474", func(t *testing.T) { x0.assertReturnInvoke(t, "type-f64", nil, arg{wa.F64, 4660882566700597248}) })
	t.Run("type-f64-i32:475", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("type-index:477", func(t *testing.T) { x0.assertReturnInvoke(t, "type-index", nil, arg{wa.I64, 100}) })
	t.Run("type-first-i32:479", func(t *testing.T) { x0.assertReturnInvoke(t, "type-first-i32", nil, arg{wa.I32, 32}) })
	t.Run("type-first-i64:480", func(t *testing.T) { x0.assertReturnInvoke(t, "type-first-i64", nil, arg{wa.I64, 64}) })
	t.Run("type-first-f32:481", func(t *testing.T) { x0.assertReturnInvoke(t, "type-first-f32", nil, arg{wa.F32, 1068037571}) })
	t.Run("type-first-f64:482", func(t *testing.T) { x0.assertReturnInvoke(t, "type-first-f64", nil, arg{wa.F64, 4610064722561534525}) })
	t.Run("type-second-i32:484", func(t *testing.T) { x0.assertReturnInvoke(t, "type-second-i32", nil, arg{wa.I32, 32}) })
	t.Run("type-second-i64:485", func(t *testing.T) { x0.assertReturnInvoke(t, "type-second-i64", nil, arg{wa.I64, 64}) })
	t.Run("type-second-f32:486", func(t *testing.T) { x0.assertReturnInvoke(t, "type-second-f32", nil, arg{wa.F32, 1107296256}) })
	t.Run("type-second-f64:487", func(t *testing.T) { x0.assertReturnInvoke(t, "type-second-f64", nil, arg{wa.F64, 4634211053438658150}) })
	t.Run("type-all-f64-i32:489", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("type-all-i32-f64:490", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("type-all-i32-i64:491", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("dispatch:493", func(t *testing.T) {
		x0.assertReturnInvoke(t, "dispatch", []arg{{wa.I32, 5}, {wa.I64, 2}}, arg{wa.I64, 2})
	})
	t.Run("dispatch:494", func(t *testing.T) {
		x0.assertReturnInvoke(t, "dispatch", []arg{{wa.I32, 5}, {wa.I64, 5}}, arg{wa.I64, 5})
	})
	t.Run("dispatch:495", func(t *testing.T) {
		x0.assertReturnInvoke(t, "dispatch", []arg{{wa.I32, 12}, {wa.I64, 5}}, arg{wa.I64, 120})
	})
	t.Run("dispatch:496", func(t *testing.T) {
		x0.assertReturnInvoke(t, "dispatch", []arg{{wa.I32, 13}, {wa.I64, 5}}, arg{wa.I64, 8})
	})
	t.Run("dispatch:497", func(t *testing.T) {
		x0.assertReturnInvoke(t, "dispatch", []arg{{wa.I32, 20}, {wa.I64, 2}}, arg{wa.I64, 2})
	})
	t.Run("dispatch:498", func(t *testing.T) {
		x0.assertTrap(t, "dispatch", []arg{{wa.I32, 0}, {wa.I64, 2}}, arg{Type: wa.I64}, "indirect call type mismatch")
	})
	t.Run("dispatch:499", func(t *testing.T) {
		x0.assertTrap(t, "dispatch", []arg{{wa.I32, 15}, {wa.I64, 2}}, arg{Type: wa.I64}, "indirect call type mismatch")
	})
	t.Run("dispatch:500", func(t *testing.T) {
		x0.assertTrap(t, "dispatch", []arg{{wa.I32, 32}, {wa.I64, 2}}, arg{Type: wa.I64}, "undefined element")
	})
	t.Run("dispatch:501", func(t *testing.T) {
		x0.assertTrap(t, "dispatch", []arg{{wa.I32, 4294967295}, {wa.I64, 2}}, arg{Type: wa.I64}, "undefined element")
	})
	t.Run("dispatch:502", func(t *testing.T) {
		x0.assertTrap(t, "dispatch", []arg{{wa.I32, 1213432423}, {wa.I64, 2}}, arg{Type: wa.I64}, "undefined element")
	})
	t.Run("dispatch-structural-i64:504", func(t *testing.T) {
		x0.assertReturnInvoke(t, "dispatch-structural-i64", []arg{{wa.I32, 5}}, arg{wa.I64, 9})
	})
	t.Run("dispatch-structural-i64:505", func(t *testing.T) {
		x0.assertReturnInvoke(t, "dispatch-structural-i64", []arg{{wa.I32, 12}}, arg{wa.I64, 362880})
	})
	t.Run("dispatch-structural-i64:506", func(t *testing.T) {
		x0.assertReturnInvoke(t, "dispatch-structural-i64", []arg{{wa.I32, 13}}, arg{wa.I64, 55})
	})
	t.Run("dispatch-structural-i64:507", func(t *testing.T) {
		x0.assertReturnInvoke(t, "dispatch-structural-i64", []arg{{wa.I32, 20}}, arg{wa.I64, 9})
	})
	t.Run("dispatch-structural-i64:508", func(t *testing.T) {
		x0.assertTrap(t, "dispatch-structural-i64", []arg{{wa.I32, 11}}, arg{Type: wa.I64}, "indirect call type mismatch")
	})
	t.Run("dispatch-structural-i64:509", func(t *testing.T) {
		x0.assertTrap(t, "dispatch-structural-i64", []arg{{wa.I32, 22}}, arg{Type: wa.I64}, "indirect call type mismatch")
	})
	t.Run("dispatch-structural-i32:511", func(t *testing.T) {
		x0.assertReturnInvoke(t, "dispatch-structural-i32", []arg{{wa.I32, 4}}, arg{wa.I32, 9})
	})
	t.Run("dispatch-structural-i32:512", func(t *testing.T) {
		x0.assertReturnInvoke(t, "dispatch-structural-i32", []arg{{wa.I32, 23}}, arg{wa.I32, 362880})
	})
	t.Run("dispatch-structural-i32:513", func(t *testing.T) {
		x0.assertReturnInvoke(t, "dispatch-structural-i32", []arg{{wa.I32, 26}}, arg{wa.I32, 55})
	})
	t.Run("dispatch-structural-i32:514", func(t *testing.T) {
		x0.assertReturnInvoke(t, "dispatch-structural-i32", []arg{{wa.I32, 19}}, arg{wa.I32, 9})
	})
	t.Run("dispatch-structural-i32:515", func(t *testing.T) {
		x0.assertTrap(t, "dispatch-structural-i32", []arg{{wa.I32, 9}}, arg{Type: wa.I32}, "indirect call type mismatch")
	})
	t.Run("dispatch-structural-i32:516", func(t *testing.T) {
		x0.assertTrap(t, "dispatch-structural-i32", []arg{{wa.I32, 21}}, arg{Type: wa.I32}, "indirect call type mismatch")
	})
	t.Run("dispatch-structural-f32:518", func(t *testing.T) {
		x0.assertReturnInvoke(t, "dispatch-structural-f32", []arg{{wa.I32, 6}}, arg{wa.F32, 1091567616})
	})
	t.Run("dispatch-structural-f32:519", func(t *testing.T) {
		x0.assertReturnInvoke(t, "dispatch-structural-f32", []arg{{wa.I32, 24}}, arg{wa.F32, 1219571712})
	})
	t.Run("dispatch-structural-f32:520", func(t *testing.T) {
		x0.assertReturnInvoke(t, "dispatch-structural-f32", []arg{{wa.I32, 27}}, arg{wa.F32, 1113325568})
	})
	t.Run("dispatch-structural-f32:521", func(t *testing.T) {
		x0.assertReturnInvoke(t, "dispatch-structural-f32", []arg{{wa.I32, 21}}, arg{wa.F32, 1091567616})
	})
	t.Run("dispatch-structural-f32:522", func(t *testing.T) {
		x0.assertTrap(t, "dispatch-structural-f32", []arg{{wa.I32, 8}}, arg{Type: wa.F32}, "indirect call type mismatch")
	})
	t.Run("dispatch-structural-f32:523", func(t *testing.T) {
		x0.assertTrap(t, "dispatch-structural-f32", []arg{{wa.I32, 19}}, arg{Type: wa.F32}, "indirect call type mismatch")
	})
	t.Run("dispatch-structural-f64:525", func(t *testing.T) {
		x0.assertReturnInvoke(t, "dispatch-structural-f64", []arg{{wa.I32, 7}}, arg{wa.F64, 4621256167635550208})
	})
	t.Run("dispatch-structural-f64:526", func(t *testing.T) {
		x0.assertReturnInvoke(t, "dispatch-structural-f64", []arg{{wa.I32, 25}}, arg{wa.F64, 4689977843394805760})
	})
	t.Run("dispatch-structural-f64:527", func(t *testing.T) {
		x0.assertReturnInvoke(t, "dispatch-structural-f64", []arg{{wa.I32, 28}}, arg{wa.F64, 4632937379169042432})
	})
	t.Run("dispatch-structural-f64:528", func(t *testing.T) {
		x0.assertReturnInvoke(t, "dispatch-structural-f64", []arg{{wa.I32, 22}}, arg{wa.F64, 4621256167635550208})
	})
	t.Run("dispatch-structural-f64:529", func(t *testing.T) {
		x0.assertTrap(t, "dispatch-structural-f64", []arg{{wa.I32, 10}}, arg{Type: wa.F64}, "indirect call type mismatch")
	})
	t.Run("dispatch-structural-f64:530", func(t *testing.T) {
		x0.assertTrap(t, "dispatch-structural-f64", []arg{{wa.I32, 18}}, arg{Type: wa.F64}, "indirect call type mismatch")
	})
	t.Run("fac-i64:532", func(t *testing.T) { x0.assertReturnInvoke(t, "fac-i64", []arg{{wa.I64, 0}}, arg{wa.I64, 1}) })
	t.Run("fac-i64:533", func(t *testing.T) { x0.assertReturnInvoke(t, "fac-i64", []arg{{wa.I64, 1}}, arg{wa.I64, 1}) })
	t.Run("fac-i64:534", func(t *testing.T) { x0.assertReturnInvoke(t, "fac-i64", []arg{{wa.I64, 5}}, arg{wa.I64, 120}) })
	t.Run("fac-i64:535", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fac-i64", []arg{{wa.I64, 25}}, arg{wa.I64, 7034535277573963776})
	})
	t.Run("fac-i32:537", func(t *testing.T) { x0.assertReturnInvoke(t, "fac-i32", []arg{{wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("fac-i32:538", func(t *testing.T) { x0.assertReturnInvoke(t, "fac-i32", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("fac-i32:539", func(t *testing.T) { x0.assertReturnInvoke(t, "fac-i32", []arg{{wa.I32, 5}}, arg{wa.I32, 120}) })
	t.Run("fac-i32:540", func(t *testing.T) { x0.assertReturnInvoke(t, "fac-i32", []arg{{wa.I32, 10}}, arg{wa.I32, 3628800}) })
	t.Run("fac-f32:542", func(t *testing.T) { x0.assertReturnInvoke(t, "fac-f32", []arg{{wa.F32, 0}}, arg{wa.F32, 1065353216}) })
	t.Run("fac-f32:543", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fac-f32", []arg{{wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("fac-f32:544", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fac-f32", []arg{{wa.F32, 1084227584}}, arg{wa.F32, 1123024896})
	})
	t.Run("fac-f32:545", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fac-f32", []arg{{wa.F32, 1092616192}}, arg{wa.F32, 1247640576})
	})
	t.Run("fac-f64:547", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fac-f64", []arg{{wa.F64, 0}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("fac-f64:548", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fac-f64", []arg{{wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("fac-f64:549", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fac-f64", []arg{{wa.F64, 4617315517961601024}}, arg{wa.F64, 4638144666238189568})
	})
	t.Run("fac-f64:550", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fac-f64", []arg{{wa.F64, 4621819117588971520}}, arg{wa.F64, 4705047200009289728})
	})
	t.Run("fib-i64:552", func(t *testing.T) { x0.assertReturnInvoke(t, "fib-i64", []arg{{wa.I64, 0}}, arg{wa.I64, 1}) })
	t.Run("fib-i64:553", func(t *testing.T) { x0.assertReturnInvoke(t, "fib-i64", []arg{{wa.I64, 1}}, arg{wa.I64, 1}) })
	t.Run("fib-i64:554", func(t *testing.T) { x0.assertReturnInvoke(t, "fib-i64", []arg{{wa.I64, 2}}, arg{wa.I64, 2}) })
	t.Run("fib-i64:555", func(t *testing.T) { x0.assertReturnInvoke(t, "fib-i64", []arg{{wa.I64, 5}}, arg{wa.I64, 8}) })
	t.Run("fib-i64:556", func(t *testing.T) { x0.assertReturnInvoke(t, "fib-i64", []arg{{wa.I64, 20}}, arg{wa.I64, 10946}) })
	t.Run("fib-i32:558", func(t *testing.T) { x0.assertReturnInvoke(t, "fib-i32", []arg{{wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("fib-i32:559", func(t *testing.T) { x0.assertReturnInvoke(t, "fib-i32", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("fib-i32:560", func(t *testing.T) { x0.assertReturnInvoke(t, "fib-i32", []arg{{wa.I32, 2}}, arg{wa.I32, 2}) })
	t.Run("fib-i32:561", func(t *testing.T) { x0.assertReturnInvoke(t, "fib-i32", []arg{{wa.I32, 5}}, arg{wa.I32, 8}) })
	t.Run("fib-i32:562", func(t *testing.T) { x0.assertReturnInvoke(t, "fib-i32", []arg{{wa.I32, 20}}, arg{wa.I32, 10946}) })
	t.Run("fib-f32:564", func(t *testing.T) { x0.assertReturnInvoke(t, "fib-f32", []arg{{wa.F32, 0}}, arg{wa.F32, 1065353216}) })
	t.Run("fib-f32:565", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fib-f32", []arg{{wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("fib-f32:566", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fib-f32", []arg{{wa.F32, 1073741824}}, arg{wa.F32, 1073741824})
	})
	t.Run("fib-f32:567", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fib-f32", []arg{{wa.F32, 1084227584}}, arg{wa.F32, 1090519040})
	})
	t.Run("fib-f32:568", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fib-f32", []arg{{wa.F32, 1101004800}}, arg{wa.F32, 1177225216})
	})
	t.Run("fib-f64:570", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fib-f64", []arg{{wa.F64, 0}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("fib-f64:571", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fib-f64", []arg{{wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("fib-f64:572", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fib-f64", []arg{{wa.F64, 4611686018427387904}}, arg{wa.F64, 4611686018427387904})
	})
	t.Run("fib-f64:573", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fib-f64", []arg{{wa.F64, 4617315517961601024}}, arg{wa.F64, 4620693217682128896})
	})
	t.Run("fib-f64:574", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fib-f64", []arg{{wa.F64, 4626322717216342016}}, arg{wa.F64, 4667243241467281408})
	})
	t.Run("even:576", func(t *testing.T) { x0.assertReturnInvoke(t, "even", []arg{{wa.I32, 0}}, arg{wa.I32, 44}) })
	t.Run("even:577", func(t *testing.T) { x0.assertReturnInvoke(t, "even", []arg{{wa.I32, 1}}, arg{wa.I32, 99}) })
	t.Run("even:578", func(t *testing.T) { x0.assertReturnInvoke(t, "even", []arg{{wa.I32, 100}}, arg{wa.I32, 44}) })
	t.Run("even:579", func(t *testing.T) { x0.assertReturnInvoke(t, "even", []arg{{wa.I32, 77}}, arg{wa.I32, 99}) })
	t.Run("odd:580", func(t *testing.T) { x0.assertReturnInvoke(t, "odd", []arg{{wa.I32, 0}}, arg{wa.I32, 99}) })
	t.Run("odd:581", func(t *testing.T) { x0.assertReturnInvoke(t, "odd", []arg{{wa.I32, 1}}, arg{wa.I32, 44}) })
	t.Run("odd:582", func(t *testing.T) { x0.assertReturnInvoke(t, "odd", []arg{{wa.I32, 200}}, arg{wa.I32, 99}) })
	t.Run("odd:583", func(t *testing.T) { x0.assertReturnInvoke(t, "odd", []arg{{wa.I32, 77}}, arg{wa.I32, 44}) })
	t.Run("runaway:585", func(t *testing.T) { x0.assertExhaustion(t, "runaway", nil, arg{}, "call stack exhausted") })
	t.Run("mutual-runaway:586", func(t *testing.T) { x0.assertExhaustion(t, "mutual-runaway", nil, arg{}, "call stack exhausted") })
	t.Run("as-select-first:588", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-first", nil, arg{wa.I32, 306}) })
	t.Run("as-select-mid:589", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-mid", nil, arg{wa.I32, 2}) })
	t.Run("as-select-last:590", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-last", nil, arg{wa.I32, 2}) })
	t.Run("as-if-condition:592", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-condition", nil, arg{wa.I32, 1}) })
	t.Run("as-br_if-first:594", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-first", nil, arg{wa.I64, 356}) })
	t.Run("as-br_if-last:595", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-last", nil, arg{wa.I32, 2}) })
	t.Run("as-br_table-first:597", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-first", nil, arg{wa.F32, 1165172736}) })
	t.Run("as-br_table-last:598", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-last", nil, arg{wa.I32, 2}) })
	t.Run("as-store-first:600", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-first", nil, arg{}) })
	t.Run("as-store-last:601", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-last", nil, arg{}) })
	t.Run("as-memory.grow-value:603", func(t *testing.T) { x0.assertReturnInvoke(t, "as-memory.grow-value", nil, arg{wa.I32, 1}) })
	t.Run("as-return-value:604", func(t *testing.T) { x0.assertReturnInvoke(t, "as-return-value", nil, arg{wa.I32, 1}) })
	t.Run("as-drop-operand:605", func(t *testing.T) { x0.assertReturnInvoke(t, "as-drop-operand", nil, arg{}) })
	t.Run("as-br-value:606", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br-value", nil, arg{wa.F32, 1065353216}) })
	t.Run("as-local.set-value:607", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-local.set-value", nil, arg{wa.F64, 4607182418800017408})
	})
	t.Run("as-local.tee-value:608", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-local.tee-value", nil, arg{wa.F64, 4607182418800017408})
	})
	t.Run("as-global.set-value:609", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-global.set-value", nil, arg{wa.F64, 4607182418800017408})
	})
	t.Run("as-load-operand:610", func(t *testing.T) { x0.assertReturnInvoke(t, "as-load-operand", nil, arg{wa.I32, 1}) })
	t.Run("as-unary-operand:612", func(t *testing.T) { x0.assertReturnInvoke(t, "as-unary-operand", nil, arg{wa.F32, 0}) })
	t.Run("as-binary-left:613", func(t *testing.T) { x0.assertReturnInvoke(t, "as-binary-left", nil, arg{wa.I32, 11}) })
	t.Run("as-binary-right:614", func(t *testing.T) { x0.assertReturnInvoke(t, "as-binary-right", nil, arg{wa.I32, 9}) })
	t.Run("as-test-operand:615", func(t *testing.T) { x0.assertReturnInvoke(t, "as-test-operand", nil, arg{wa.I32, 0}) })
	t.Run("as-compare-left:616", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-left", nil, arg{wa.I32, 1}) })
	t.Run("as-compare-right:617", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-right", nil, arg{wa.I32, 1}) })
	t.Run("as-convert-operand:618", func(t *testing.T) { x0.assertReturnInvoke(t, "as-convert-operand", nil, arg{wa.I64, 1}) })
	x1 := instantiateSpecTest(t, "1", "call_indirect.1.wasm")
	t.Cleanup(func() { x1.close(t) })
	t.Run("call-1:650", func(t *testing.T) {
		x1.assertReturnInvoke(t, "call-1", []arg{{wa.I32, 2}, {wa.I32, 3}, {wa.I32, 0}}, arg{wa.I32, 5})
	})
	t.Run("call-1:651", func(t *testing.T) {
		x1.assertReturnInvoke(t, "call-1", []arg{{wa.I32, 2}, {wa.I32, 3}, {wa.I32, 1}}, arg{wa.I32, 4294967295})
	})
	t.Run("call-1:652", func(t *testing.T) {
		x1.assertTrap(t, "call-1", []arg{{wa.I32, 2}, {wa.I32, 3}, {wa.I32, 2}}, arg{Type: wa.I32}, "undefined element")
	})
	t.Run("call-2:654", func(t *testing.T) {
		x1.assertReturnInvoke(t, "call-2", []arg{{wa.I32, 2}, {wa.I32, 3}, {wa.I32, 0}}, arg{wa.I32, 6})
	})
	t.Run("call-2:655", func(t *testing.T) {
		x1.assertReturnInvoke(t, "call-2", []arg{{wa.I32, 2}, {wa.I32, 3}, {wa.I32, 1}}, arg{wa.I32, 0})
	})
	t.Run("call-2:656", func(t *testing.T) {
		x1.assertReturnInvoke(t, "call-2", []arg{{wa.I32, 2}, {wa.I32, 3}, {wa.I32, 2}}, arg{wa.I32, 2})
	})
	t.Run("call-2:657", func(t *testing.T) {
		x1.assertTrap(t, "call-2", []arg{{wa.I32, 2}, {wa.I32, 3}, {wa.I32, 3}}, arg{Type: wa.I32}, "undefined element")
	})
	t.Run("call-3:659", func(t *testing.T) {
		x1.assertReturnInvoke(t, "call-3", []arg{{wa.I32, 2}, {wa.I32, 3}, {wa.I32, 0}}, arg{wa.I32, 4294967295})
	})
	t.Run("call-3:660", func(t *testing.T) {
		x1.assertReturnInvoke(t, "call-3", []arg{{wa.I32, 2}, {wa.I32, 3}, {wa.I32, 1}}, arg{wa.I32, 6})
	})
	t.Run("call-3:661", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("call-3:662", func(t *testing.T) {
		x1.assertTrap(t, "call-3", []arg{{wa.I32, 2}, {wa.I32, 3}, {wa.I32, 3}}, arg{Type: wa.I32}, "indirect call type mismatch")
	})
	t.Run("call-3:663", func(t *testing.T) {
		x1.assertTrap(t, "call-3", []arg{{wa.I32, 2}, {wa.I32, 3}, {wa.I32, 4}}, arg{Type: wa.I32}, "undefined element")
	})
	t.Run("assert_malformed:669", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:681", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:693", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:705", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:717", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:729", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:739", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:746", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:756", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:766", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:776", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_invalid:791", func(t *testing.T) { assertInvalidSpec(t, "call_indirect.13.wasm", "unknown table") })
	t.Run("assert_invalid:799", func(t *testing.T) { assertInvalidSpec(t, "call_indirect.14.wasm", "type mismatch") })
	t.Run("assert_invalid:807", func(t *testing.T) { assertInvalidSpec(t, "call_indirect.15.wasm", "type mismatch") })
	t.Run("assert_invalid:816", func(t *testing.T) { assertInvalidSpec(t, "call_indirect.16.wasm", "type mismatch") })
	t.Run("assert_invalid:824", func(t *testing.T) { assertInvalidSpec(t, "call_indirect.17.wasm", "type mismatch") })
	t.Run("assert_invalid:832", func(t *testing.T) { assertInvalidSpec(t, "call_indirect.18.wasm", "type mismatch") })
	t.Run("assert_invalid:840", func(t *testing.T) { assertInvalidSpec(t, "call_indirect.19.wasm", "type mismatch") })
	t.Run("assert_invalid:851", func(t *testing.T) { assertInvalidSpec(t, "call_indirect.20.wasm", "type mismatch") })
	t.Run("assert_invalid:859", func(t *testing.T) { assertInvalidSpec(t, "call_indirect.21.wasm", "type mismatch") })
	t.Run("assert_invalid:868", func(t *testing.T) { assertInvalidSpec(t, "call_indirect.22.wasm", "type mismatch") })
	t.Run("assert_invalid:878", func(t *testing.T) { assertInvalidSpec(t, "call_indirect.23.wasm", "type mismatch") })
	t.Run("assert_invalid:888", func(t *testing.T) { assertInvalidSpec(t, "call_indirect.24.wasm", "type mismatch") })
	t.Run("assert_invalid:898", func(t *testing.T) { assertInvalidSpec(t, "call_indirect.25.wasm", "type mismatch") })
	t.Run("assert_invalid:909", func(t *testing.T) { assertInvalidSpec(t, "call_indirect.26.wasm", "type mismatch") })
	t.Run("assert_invalid:922", func(t *testing.T) { assertInvalidSpec(t, "call_indirect.27.wasm", "type mismatch") })
	t.Run("assert_invalid:935", func(t *testing.T) { assertInvalidSpec(t, "call_indirect.28.wasm", "type mismatch") })
	t.Run("assert_invalid:948", func(t *testing.T) { assertInvalidSpec(t, "call_indirect.29.wasm", "type mismatch") })
	t.Run("assert_invalid:961", func(t *testing.T) { assertInvalidSpec(t, "call_indirect.30.wasm", "type mismatch") })
	t.Run("assert_invalid:977", func(t *testing.T) { assertInvalidSpec(t, "call_indirect.31.wasm", "type mismatch") })
	t.Run("assert_invalid:997", func(t *testing.T) { assertInvalidSpec(t, "call_indirect.32.wasm", "unknown type") })
	t.Run("assert_invalid:1004", func(t *testing.T) { assertInvalidSpec(t, "call_indirect.33.wasm", "unknown type") })
	t.Run("assert_invalid:1015", func(t *testing.T) { assertInvalidSpec(t, "call_indirect.34.wasm", "unknown function") })
}

func Test_comments(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "comments.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	x1 := instantiateSpecTest(t, "1", "comments.1.wasm")
	t.Cleanup(func() { x1.close(t) })
	x2 := instantiateSpecTest(t, "2", "comments.2.wasm")
	t.Cleanup(func() { x2.close(t) })
	x3 := instantiateSpecTest(t, "3", "comments.3.wasm")
	t.Cleanup(func() { x3.close(t) })
	if x0.unsupported() && x1.unsupported() && x2.unsupported() && x3.unsupported() {
		t.Skip("no supported modules")
	}
}

func Test_const(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "const.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	x1 := instantiateSpecTest(t, "1", "const.1.wasm")
	t.Cleanup(func() { x1.close(t) })
	t.Run("assert_malformed:8", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:12", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:16", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:20", func(t *testing.T) { t.Skip("text format not supported") })
	x2 := instantiateSpecTest(t, "2", "const.6.wasm")
	t.Cleanup(func() { x2.close(t) })
	x3 := instantiateSpecTest(t, "3", "const.7.wasm")
	t.Cleanup(func() { x3.close(t) })
	t.Run("assert_malformed:27", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:31", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:35", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:39", func(t *testing.T) { t.Skip("text format not supported") })
	x4 := instantiateSpecTest(t, "4", "const.12.wasm")
	t.Cleanup(func() { x4.close(t) })
	x5 := instantiateSpecTest(t, "5", "const.13.wasm")
	t.Cleanup(func() { x5.close(t) })
	x6 := instantiateSpecTest(t, "6", "const.14.wasm")
	t.Cleanup(func() { x6.close(t) })
	x7 := instantiateSpecTest(t, "7", "const.15.wasm")
	t.Cleanup(func() { x7.close(t) })
	x8 := instantiateSpecTest(t, "8", "const.16.wasm")
	t.Cleanup(func() { x8.close(t) })
	x9 := instantiateSpecTest(t, "9", "const.17.wasm")
	t.Cleanup(func() { x9.close(t) })
	x10 := instantiateSpecTest(t, "10", "const.18.wasm")
	t.Cleanup(func() { x10.close(t) })
	x11 := instantiateSpecTest(t, "11", "const.19.wasm")
	t.Cleanup(func() { x11.close(t) })
	x12 := instantiateSpecTest(t, "12", "const.20.wasm")
	t.Cleanup(func() { x12.close(t) })
	x13 := instantiateSpecTest(t, "13", "const.21.wasm")
	t.Cleanup(func() { x13.close(t) })
	x14 := instantiateSpecTest(t, "14", "const.22.wasm")
	t.Cleanup(func() { x14.close(t) })
	x15 := instantiateSpecTest(t, "15", "const.23.wasm")
	t.Cleanup(func() { x15.close(t) })
	x16 := instantiateSpecTest(t, "16", "const.24.wasm")
	t.Cleanup(func() { x16.close(t) })
	x17 := instantiateSpecTest(t, "17", "const.25.wasm")
	t.Cleanup(func() { x17.close(t) })
	x18 := instantiateSpecTest(t, "18", "const.26.wasm")
	t.Cleanup(func() { x18.close(t) })
	x19 := instantiateSpecTest(t, "19", "const.27.wasm")
	t.Cleanup(func() { x19.close(t) })
	x20 := instantiateSpecTest(t, "20", "const.28.wasm")
	t.Cleanup(func() { x20.close(t) })
	x21 := instantiateSpecTest(t, "21", "const.29.wasm")
	t.Cleanup(func() { x21.close(t) })
	x22 := instantiateSpecTest(t, "22", "const.30.wasm")
	t.Cleanup(func() { x22.close(t) })
	x23 := instantiateSpecTest(t, "23", "const.31.wasm")
	t.Cleanup(func() { x23.close(t) })
	x24 := instantiateSpecTest(t, "24", "const.32.wasm")
	t.Cleanup(func() { x24.close(t) })
	x25 := instantiateSpecTest(t, "25", "const.33.wasm")
	t.Cleanup(func() { x25.close(t) })
	x26 := instantiateSpecTest(t, "26", "const.34.wasm")
	t.Cleanup(func() { x26.close(t) })
	x27 := instantiateSpecTest(t, "27", "const.35.wasm")
	t.Cleanup(func() { x27.close(t) })
	t.Run("assert_malformed:68", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:72", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:76", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:80", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:84", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:88", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:92", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:96", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:100", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:104", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:108", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:112", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:116", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:120", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:124", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:128", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:132", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:136", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:140", func(t *testing.T) { t.Skip("text format not supported") })
	x28 := instantiateSpecTest(t, "28", "const.55.wasm")
	t.Cleanup(func() { x28.close(t) })
	x29 := instantiateSpecTest(t, "29", "const.56.wasm")
	t.Cleanup(func() { x29.close(t) })
	x30 := instantiateSpecTest(t, "30", "const.57.wasm")
	t.Cleanup(func() { x30.close(t) })
	x31 := instantiateSpecTest(t, "31", "const.58.wasm")
	t.Cleanup(func() { x31.close(t) })
	x32 := instantiateSpecTest(t, "32", "const.59.wasm")
	t.Cleanup(func() { x32.close(t) })
	x33 := instantiateSpecTest(t, "33", "const.60.wasm")
	t.Cleanup(func() { x33.close(t) })
	x34 := instantiateSpecTest(t, "34", "const.61.wasm")
	t.Cleanup(func() { x34.close(t) })
	x35 := instantiateSpecTest(t, "35", "const.62.wasm")
	t.Cleanup(func() { x35.close(t) })
	x36 := instantiateSpecTest(t, "36", "const.63.wasm")
	t.Cleanup(func() { x36.close(t) })
	x37 := instantiateSpecTest(t, "37", "const.64.wasm")
	t.Cleanup(func() { x37.close(t) })
	x38 := instantiateSpecTest(t, "38", "const.65.wasm")
	t.Cleanup(func() { x38.close(t) })
	x39 := instantiateSpecTest(t, "39", "const.66.wasm")
	t.Cleanup(func() { x39.close(t) })
	x40 := instantiateSpecTest(t, "40", "const.67.wasm")
	t.Cleanup(func() { x40.close(t) })
	x41 := instantiateSpecTest(t, "41", "const.68.wasm")
	t.Cleanup(func() { x41.close(t) })
	x42 := instantiateSpecTest(t, "42", "const.69.wasm")
	t.Cleanup(func() { x42.close(t) })
	x43 := instantiateSpecTest(t, "43", "const.70.wasm")
	t.Cleanup(func() { x43.close(t) })
	x44 := instantiateSpecTest(t, "44", "const.71.wasm")
	t.Cleanup(func() { x44.close(t) })
	x45 := instantiateSpecTest(t, "45", "const.72.wasm")
	t.Cleanup(func() { x45.close(t) })
	x46 := instantiateSpecTest(t, "46", "const.73.wasm")
	t.Cleanup(func() { x46.close(t) })
	x47 := instantiateSpecTest(t, "47", "const.74.wasm")
	t.Cleanup(func() { x47.close(t) })
	x48 := instantiateSpecTest(t, "48", "const.75.wasm")
	t.Cleanup(func() { x48.close(t) })
	x49 := instantiateSpecTest(t, "49", "const.76.wasm")
	t.Cleanup(func() { x49.close(t) })
	x50 := instantiateSpecTest(t, "50", "const.77.wasm")
	t.Cleanup(func() { x50.close(t) })
	x51 := instantiateSpecTest(t, "51", "const.78.wasm")
	t.Cleanup(func() { x51.close(t) })
	x52 := instantiateSpecTest(t, "52", "const.79.wasm")
	t.Cleanup(func() { x52.close(t) })
	x53 := instantiateSpecTest(t, "53", "const.80.wasm")
	t.Cleanup(func() { x53.close(t) })
	x54 := instantiateSpecTest(t, "54", "const.81.wasm")
	t.Cleanup(func() { x54.close(t) })
	x55 := instantiateSpecTest(t, "55", "const.82.wasm")
	t.Cleanup(func() { x55.close(t) })
	x56 := instantiateSpecTest(t, "56", "const.83.wasm")
	t.Cleanup(func() { x56.close(t) })
	x57 := instantiateSpecTest(t, "57", "const.84.wasm")
	t.Cleanup(func() { x57.close(t) })
	x58 := instantiateSpecTest(t, "58", "const.85.wasm")
	t.Cleanup(func() { x58.close(t) })
	x59 := instantiateSpecTest(t, "59", "const.86.wasm")
	t.Cleanup(func() { x59.close(t) })
	x60 := instantiateSpecTest(t, "60", "const.87.wasm")
	t.Cleanup(func() { x60.close(t) })
	x61 := instantiateSpecTest(t, "61", "const.88.wasm")
	t.Cleanup(func() { x61.close(t) })
	x62 := instantiateSpecTest(t, "62", "const.89.wasm")
	t.Cleanup(func() { x62.close(t) })
	x63 := instantiateSpecTest(t, "63", "const.90.wasm")
	t.Cleanup(func() { x63.close(t) })
	t.Run("assert_malformed:185", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:189", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:193", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:197", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:201", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:205", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:209", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:213", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:217", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:221", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:225", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:229", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:233", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:237", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:241", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:245", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:249", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:253", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:257", func(t *testing.T) { t.Skip("text format not supported") })
	x64 := instantiateSpecTest(t, "64", "const.110.wasm")
	t.Cleanup(func() { x64.close(t) })
	x65 := instantiateSpecTest(t, "65", "const.111.wasm")
	t.Cleanup(func() { x65.close(t) })
	t.Run("assert_malformed:267", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:271", func(t *testing.T) { t.Skip("text format not supported") })
	x66 := instantiateSpecTest(t, "66", "const.114.wasm")
	t.Cleanup(func() { x66.close(t) })
	x67 := instantiateSpecTest(t, "67", "const.115.wasm")
	t.Cleanup(func() { x67.close(t) })
	t.Run("assert_malformed:278", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:282", func(t *testing.T) { t.Skip("text format not supported") })
	x68 := instantiateSpecTest(t, "68", "const.118.wasm")
	t.Cleanup(func() { x68.close(t) })
	x69 := instantiateSpecTest(t, "69", "const.119.wasm")
	t.Cleanup(func() { x69.close(t) })
	t.Run("assert_malformed:289", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:293", func(t *testing.T) { t.Skip("text format not supported") })
	x70 := instantiateSpecTest(t, "70", "const.122.wasm")
	t.Cleanup(func() { x70.close(t) })
	x71 := instantiateSpecTest(t, "71", "const.123.wasm")
	t.Cleanup(func() { x71.close(t) })
	t.Run("assert_malformed:300", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:304", func(t *testing.T) { t.Skip("text format not supported") })
	x72 := instantiateSpecTest(t, "72", "const.126.wasm")
	t.Cleanup(func() { x72.close(t) })
	x73 := instantiateSpecTest(t, "73", "const.127.wasm")
	t.Cleanup(func() { x73.close(t) })
	x74 := instantiateSpecTest(t, "74", "const.128.wasm")
	t.Cleanup(func() { x74.close(t) })
	x75 := instantiateSpecTest(t, "75", "const.129.wasm")
	t.Cleanup(func() { x75.close(t) })
	x76 := instantiateSpecTest(t, "76", "const.130.wasm")
	t.Cleanup(func() { x76.close(t) })
	x77 := instantiateSpecTest(t, "77", "const.131.wasm")
	t.Cleanup(func() { x77.close(t) })
	x78 := instantiateSpecTest(t, "78", "const.132.wasm")
	t.Cleanup(func() { x78.close(t) })
	x79 := instantiateSpecTest(t, "79", "const.133.wasm")
	t.Cleanup(func() { x79.close(t) })
	x80 := instantiateSpecTest(t, "80", "const.134.wasm")
	t.Cleanup(func() { x80.close(t) })
	x81 := instantiateSpecTest(t, "81", "const.135.wasm")
	t.Cleanup(func() { x81.close(t) })
	t.Run("assert_malformed:319", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:323", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:327", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:331", func(t *testing.T) { t.Skip("text format not supported") })
	x82 := instantiateSpecTest(t, "82", "const.140.wasm")
	t.Cleanup(func() { x82.close(t) })
	x83 := instantiateSpecTest(t, "83", "const.141.wasm")
	t.Cleanup(func() { x83.close(t) })
	t.Run("assert_malformed:338", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:342", func(t *testing.T) { t.Skip("text format not supported") })
	x84 := instantiateSpecTest(t, "84", "const.144.wasm")
	t.Cleanup(func() { x84.close(t) })
	x85 := instantiateSpecTest(t, "85", "const.145.wasm")
	t.Cleanup(func() { x85.close(t) })
	t.Run("assert_malformed:349", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:353", func(t *testing.T) { t.Skip("text format not supported") })
	x86 := instantiateSpecTest(t, "86", "const.148.wasm")
	t.Cleanup(func() { x86.close(t) })
	x87 := instantiateSpecTest(t, "87", "const.149.wasm")
	t.Cleanup(func() { x87.close(t) })
	x88 := instantiateSpecTest(t, "88", "const.150.wasm")
	t.Cleanup(func() { x88.close(t) })
	x89 := instantiateSpecTest(t, "89", "const.151.wasm")
	t.Cleanup(func() { x89.close(t) })
	x90 := instantiateSpecTest(t, "90", "const.152.wasm")
	t.Cleanup(func() { x90.close(t) })
	x91 := instantiateSpecTest(t, "91", "const.153.wasm")
	t.Cleanup(func() { x91.close(t) })
	x92 := instantiateSpecTest(t, "92", "const.154.wasm")
	t.Cleanup(func() { x92.close(t) })
	x93 := instantiateSpecTest(t, "93", "const.155.wasm")
	t.Cleanup(func() { x93.close(t) })
	t.Run("assert_malformed:366", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:370", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:374", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:378", func(t *testing.T) { t.Skip("text format not supported") })
	x94 := instantiateSpecTest(t, "94", "const.160.wasm")
	t.Cleanup(func() { x94.close(t) })
	x95 := instantiateSpecTest(t, "95", "const.161.wasm")
	t.Cleanup(func() { x95.close(t) })
	t.Run("assert_malformed:385", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:389", func(t *testing.T) { t.Skip("text format not supported") })
	x96 := instantiateSpecTest(t, "96", "const.164.wasm")
	t.Cleanup(func() { x96.close(t) })
	x97 := instantiateSpecTest(t, "97", "const.165.wasm")
	t.Cleanup(func() { x97.close(t) })
	t.Run("assert_malformed:396", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:400", func(t *testing.T) { t.Skip("text format not supported") })
	x98 := instantiateSpecTest(t, "98", "const.168.wasm")
	t.Cleanup(func() { x98.close(t) })
	x99 := instantiateSpecTest(t, "99", "const.169.wasm")
	t.Cleanup(func() { x99.close(t) })
	x100 := instantiateSpecTest(t, "100", "const.170.wasm")
	t.Cleanup(func() { x100.close(t) })
	x101 := instantiateSpecTest(t, "101", "const.171.wasm")
	t.Cleanup(func() { x101.close(t) })
	t.Run("assert_malformed:410", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:414", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:419", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:423", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:428", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:432", func(t *testing.T) { t.Skip("text format not supported") })
	x102 := instantiateSpecTest(t, "102", "const.178.wasm")
	t.Cleanup(func() { x102.close(t) })
	t.Run("f:441", func(t *testing.T) { x102.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922816}) })
	x103 := instantiateSpecTest(t, "103", "const.179.wasm")
	t.Cleanup(func() { x103.close(t) })
	t.Run("f:443", func(t *testing.T) { x103.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406464}) })
	x104 := instantiateSpecTest(t, "104", "const.180.wasm")
	t.Cleanup(func() { x104.close(t) })
	t.Run("f:445", func(t *testing.T) { x104.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922817}) })
	x105 := instantiateSpecTest(t, "105", "const.181.wasm")
	t.Cleanup(func() { x105.close(t) })
	t.Run("f:447", func(t *testing.T) { x105.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406465}) })
	x106 := instantiateSpecTest(t, "106", "const.182.wasm")
	t.Cleanup(func() { x106.close(t) })
	t.Run("f:449", func(t *testing.T) { x106.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922817}) })
	x107 := instantiateSpecTest(t, "107", "const.183.wasm")
	t.Cleanup(func() { x107.close(t) })
	t.Run("f:451", func(t *testing.T) { x107.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406465}) })
	x108 := instantiateSpecTest(t, "108", "const.184.wasm")
	t.Cleanup(func() { x108.close(t) })
	t.Run("f:453", func(t *testing.T) { x108.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922817}) })
	x109 := instantiateSpecTest(t, "109", "const.185.wasm")
	t.Cleanup(func() { x109.close(t) })
	t.Run("f:455", func(t *testing.T) { x109.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406465}) })
	x110 := instantiateSpecTest(t, "110", "const.186.wasm")
	t.Cleanup(func() { x110.close(t) })
	t.Run("f:457", func(t *testing.T) { x110.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922817}) })
	x111 := instantiateSpecTest(t, "111", "const.187.wasm")
	t.Cleanup(func() { x111.close(t) })
	t.Run("f:459", func(t *testing.T) { x111.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406465}) })
	x112 := instantiateSpecTest(t, "112", "const.188.wasm")
	t.Cleanup(func() { x112.close(t) })
	t.Run("f:461", func(t *testing.T) { x112.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922817}) })
	x113 := instantiateSpecTest(t, "113", "const.189.wasm")
	t.Cleanup(func() { x113.close(t) })
	t.Run("f:463", func(t *testing.T) { x113.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406465}) })
	x114 := instantiateSpecTest(t, "114", "const.190.wasm")
	t.Cleanup(func() { x114.close(t) })
	t.Run("f:465", func(t *testing.T) { x114.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922818}) })
	x115 := instantiateSpecTest(t, "115", "const.191.wasm")
	t.Cleanup(func() { x115.close(t) })
	t.Run("f:467", func(t *testing.T) { x115.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406466}) })
	x116 := instantiateSpecTest(t, "116", "const.192.wasm")
	t.Cleanup(func() { x116.close(t) })
	t.Run("f:469", func(t *testing.T) { x116.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922818}) })
	x117 := instantiateSpecTest(t, "117", "const.193.wasm")
	t.Cleanup(func() { x117.close(t) })
	t.Run("f:471", func(t *testing.T) { x117.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406466}) })
	x118 := instantiateSpecTest(t, "118", "const.194.wasm")
	t.Cleanup(func() { x118.close(t) })
	t.Run("f:473", func(t *testing.T) { x118.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922818}) })
	x119 := instantiateSpecTest(t, "119", "const.195.wasm")
	t.Cleanup(func() { x119.close(t) })
	t.Run("f:475", func(t *testing.T) { x119.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406466}) })
	x120 := instantiateSpecTest(t, "120", "const.196.wasm")
	t.Cleanup(func() { x120.close(t) })
	t.Run("f:477", func(t *testing.T) { x120.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922818}) })
	x121 := instantiateSpecTest(t, "121", "const.197.wasm")
	t.Cleanup(func() { x121.close(t) })
	t.Run("f:479", func(t *testing.T) { x121.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406466}) })
	x122 := instantiateSpecTest(t, "122", "const.198.wasm")
	t.Cleanup(func() { x122.close(t) })
	t.Run("f:481", func(t *testing.T) { x122.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922818}) })
	x123 := instantiateSpecTest(t, "123", "const.199.wasm")
	t.Cleanup(func() { x123.close(t) })
	t.Run("f:483", func(t *testing.T) { x123.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406466}) })
	x124 := instantiateSpecTest(t, "124", "const.200.wasm")
	t.Cleanup(func() { x124.close(t) })
	t.Run("f:485", func(t *testing.T) { x124.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922818}) })
	x125 := instantiateSpecTest(t, "125", "const.201.wasm")
	t.Cleanup(func() { x125.close(t) })
	t.Run("f:487", func(t *testing.T) { x125.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406466}) })
	x126 := instantiateSpecTest(t, "126", "const.202.wasm")
	t.Cleanup(func() { x126.close(t) })
	t.Run("f:489", func(t *testing.T) { x126.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922818}) })
	x127 := instantiateSpecTest(t, "127", "const.203.wasm")
	t.Cleanup(func() { x127.close(t) })
	t.Run("f:491", func(t *testing.T) { x127.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406466}) })
	x128 := instantiateSpecTest(t, "128", "const.204.wasm")
	t.Cleanup(func() { x128.close(t) })
	t.Run("f:493", func(t *testing.T) { x128.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922819}) })
	x129 := instantiateSpecTest(t, "129", "const.205.wasm")
	t.Cleanup(func() { x129.close(t) })
	t.Run("f:495", func(t *testing.T) { x129.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406467}) })
	x130 := instantiateSpecTest(t, "130", "const.206.wasm")
	t.Cleanup(func() { x130.close(t) })
	t.Run("f:498", func(t *testing.T) { x130.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922816}) })
	x131 := instantiateSpecTest(t, "131", "const.207.wasm")
	t.Cleanup(func() { x131.close(t) })
	t.Run("f:500", func(t *testing.T) { x131.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406464}) })
	x132 := instantiateSpecTest(t, "132", "const.208.wasm")
	t.Cleanup(func() { x132.close(t) })
	t.Run("f:502", func(t *testing.T) { x132.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922817}) })
	x133 := instantiateSpecTest(t, "133", "const.209.wasm")
	t.Cleanup(func() { x133.close(t) })
	t.Run("f:504", func(t *testing.T) { x133.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406465}) })
	x134 := instantiateSpecTest(t, "134", "const.210.wasm")
	t.Cleanup(func() { x134.close(t) })
	t.Run("f:506", func(t *testing.T) { x134.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922817}) })
	x135 := instantiateSpecTest(t, "135", "const.211.wasm")
	t.Cleanup(func() { x135.close(t) })
	t.Run("f:508", func(t *testing.T) { x135.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406465}) })
	x136 := instantiateSpecTest(t, "136", "const.212.wasm")
	t.Cleanup(func() { x136.close(t) })
	t.Run("f:510", func(t *testing.T) { x136.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922817}) })
	x137 := instantiateSpecTest(t, "137", "const.213.wasm")
	t.Cleanup(func() { x137.close(t) })
	t.Run("f:512", func(t *testing.T) { x137.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406465}) })
	x138 := instantiateSpecTest(t, "138", "const.214.wasm")
	t.Cleanup(func() { x138.close(t) })
	t.Run("f:514", func(t *testing.T) { x138.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922817}) })
	x139 := instantiateSpecTest(t, "139", "const.215.wasm")
	t.Cleanup(func() { x139.close(t) })
	t.Run("f:516", func(t *testing.T) { x139.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406465}) })
	x140 := instantiateSpecTest(t, "140", "const.216.wasm")
	t.Cleanup(func() { x140.close(t) })
	t.Run("f:518", func(t *testing.T) { x140.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922817}) })
	x141 := instantiateSpecTest(t, "141", "const.217.wasm")
	t.Cleanup(func() { x141.close(t) })
	t.Run("f:520", func(t *testing.T) { x141.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406465}) })
	x142 := instantiateSpecTest(t, "142", "const.218.wasm")
	t.Cleanup(func() { x142.close(t) })
	t.Run("f:522", func(t *testing.T) { x142.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922818}) })
	x143 := instantiateSpecTest(t, "143", "const.219.wasm")
	t.Cleanup(func() { x143.close(t) })
	t.Run("f:524", func(t *testing.T) { x143.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406466}) })
	x144 := instantiateSpecTest(t, "144", "const.220.wasm")
	t.Cleanup(func() { x144.close(t) })
	t.Run("f:526", func(t *testing.T) { x144.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922818}) })
	x145 := instantiateSpecTest(t, "145", "const.221.wasm")
	t.Cleanup(func() { x145.close(t) })
	t.Run("f:528", func(t *testing.T) { x145.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406466}) })
	x146 := instantiateSpecTest(t, "146", "const.222.wasm")
	t.Cleanup(func() { x146.close(t) })
	t.Run("f:530", func(t *testing.T) { x146.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922818}) })
	x147 := instantiateSpecTest(t, "147", "const.223.wasm")
	t.Cleanup(func() { x147.close(t) })
	t.Run("f:532", func(t *testing.T) { x147.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406466}) })
	x148 := instantiateSpecTest(t, "148", "const.224.wasm")
	t.Cleanup(func() { x148.close(t) })
	t.Run("f:534", func(t *testing.T) { x148.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922818}) })
	x149 := instantiateSpecTest(t, "149", "const.225.wasm")
	t.Cleanup(func() { x149.close(t) })
	t.Run("f:536", func(t *testing.T) { x149.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406466}) })
	x150 := instantiateSpecTest(t, "150", "const.226.wasm")
	t.Cleanup(func() { x150.close(t) })
	t.Run("f:538", func(t *testing.T) { x150.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922818}) })
	x151 := instantiateSpecTest(t, "151", "const.227.wasm")
	t.Cleanup(func() { x151.close(t) })
	t.Run("f:540", func(t *testing.T) { x151.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406466}) })
	x152 := instantiateSpecTest(t, "152", "const.228.wasm")
	t.Cleanup(func() { x152.close(t) })
	t.Run("f:542", func(t *testing.T) { x152.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922819}) })
	x153 := instantiateSpecTest(t, "153", "const.229.wasm")
	t.Cleanup(func() { x153.close(t) })
	t.Run("f:544", func(t *testing.T) { x153.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406467}) })
	x154 := instantiateSpecTest(t, "154", "const.230.wasm")
	t.Cleanup(func() { x154.close(t) })
	t.Run("f:547", func(t *testing.T) { x154.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922816}) })
	x155 := instantiateSpecTest(t, "155", "const.231.wasm")
	t.Cleanup(func() { x155.close(t) })
	t.Run("f:549", func(t *testing.T) { x155.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406464}) })
	x156 := instantiateSpecTest(t, "156", "const.232.wasm")
	t.Cleanup(func() { x156.close(t) })
	t.Run("f:551", func(t *testing.T) { x156.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922817}) })
	x157 := instantiateSpecTest(t, "157", "const.233.wasm")
	t.Cleanup(func() { x157.close(t) })
	t.Run("f:553", func(t *testing.T) { x157.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406465}) })
	x158 := instantiateSpecTest(t, "158", "const.234.wasm")
	t.Cleanup(func() { x158.close(t) })
	t.Run("f:555", func(t *testing.T) { x158.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922817}) })
	x159 := instantiateSpecTest(t, "159", "const.235.wasm")
	t.Cleanup(func() { x159.close(t) })
	t.Run("f:557", func(t *testing.T) { x159.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406465}) })
	x160 := instantiateSpecTest(t, "160", "const.236.wasm")
	t.Cleanup(func() { x160.close(t) })
	t.Run("f:559", func(t *testing.T) { x160.assertReturnInvoke(t, "f", nil, arg{wa.F32, 645922818}) })
	x161 := instantiateSpecTest(t, "161", "const.237.wasm")
	t.Cleanup(func() { x161.close(t) })
	t.Run("f:561", func(t *testing.T) { x161.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2793406466}) })
	x162 := instantiateSpecTest(t, "162", "const.238.wasm")
	t.Cleanup(func() { x162.close(t) })
	t.Run("f:565", func(t *testing.T) { x162.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1484783616}) })
	x163 := instantiateSpecTest(t, "163", "const.239.wasm")
	t.Cleanup(func() { x163.close(t) })
	t.Run("f:567", func(t *testing.T) { x163.assertReturnInvoke(t, "f", nil, arg{wa.F32, 3632267264}) })
	x164 := instantiateSpecTest(t, "164", "const.240.wasm")
	t.Cleanup(func() { x164.close(t) })
	t.Run("f:569", func(t *testing.T) { x164.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1484783617}) })
	x165 := instantiateSpecTest(t, "165", "const.241.wasm")
	t.Cleanup(func() { x165.close(t) })
	t.Run("f:571", func(t *testing.T) { x165.assertReturnInvoke(t, "f", nil, arg{wa.F32, 3632267265}) })
	x166 := instantiateSpecTest(t, "166", "const.242.wasm")
	t.Cleanup(func() { x166.close(t) })
	t.Run("f:573", func(t *testing.T) { x166.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1484783617}) })
	x167 := instantiateSpecTest(t, "167", "const.243.wasm")
	t.Cleanup(func() { x167.close(t) })
	t.Run("f:575", func(t *testing.T) { x167.assertReturnInvoke(t, "f", nil, arg{wa.F32, 3632267265}) })
	x168 := instantiateSpecTest(t, "168", "const.244.wasm")
	t.Cleanup(func() { x168.close(t) })
	t.Run("f:577", func(t *testing.T) { x168.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1484783617}) })
	x169 := instantiateSpecTest(t, "169", "const.245.wasm")
	t.Cleanup(func() { x169.close(t) })
	t.Run("f:579", func(t *testing.T) { x169.assertReturnInvoke(t, "f", nil, arg{wa.F32, 3632267265}) })
	x170 := instantiateSpecTest(t, "170", "const.246.wasm")
	t.Cleanup(func() { x170.close(t) })
	t.Run("f:581", func(t *testing.T) { x170.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1484783617}) })
	x171 := instantiateSpecTest(t, "171", "const.247.wasm")
	t.Cleanup(func() { x171.close(t) })
	t.Run("f:583", func(t *testing.T) { x171.assertReturnInvoke(t, "f", nil, arg{wa.F32, 3632267265}) })
	x172 := instantiateSpecTest(t, "172", "const.248.wasm")
	t.Cleanup(func() { x172.close(t) })
	t.Run("f:585", func(t *testing.T) { x172.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1484783617}) })
	x173 := instantiateSpecTest(t, "173", "const.249.wasm")
	t.Cleanup(func() { x173.close(t) })
	t.Run("f:587", func(t *testing.T) { x173.assertReturnInvoke(t, "f", nil, arg{wa.F32, 3632267265}) })
	x174 := instantiateSpecTest(t, "174", "const.250.wasm")
	t.Cleanup(func() { x174.close(t) })
	t.Run("f:589", func(t *testing.T) { x174.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1484783618}) })
	x175 := instantiateSpecTest(t, "175", "const.251.wasm")
	t.Cleanup(func() { x175.close(t) })
	t.Run("f:591", func(t *testing.T) { x175.assertReturnInvoke(t, "f", nil, arg{wa.F32, 3632267266}) })
	x176 := instantiateSpecTest(t, "176", "const.252.wasm")
	t.Cleanup(func() { x176.close(t) })
	t.Run("f:593", func(t *testing.T) { x176.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1484783618}) })
	x177 := instantiateSpecTest(t, "177", "const.253.wasm")
	t.Cleanup(func() { x177.close(t) })
	t.Run("f:595", func(t *testing.T) { x177.assertReturnInvoke(t, "f", nil, arg{wa.F32, 3632267266}) })
	x178 := instantiateSpecTest(t, "178", "const.254.wasm")
	t.Cleanup(func() { x178.close(t) })
	t.Run("f:597", func(t *testing.T) { x178.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1484783618}) })
	x179 := instantiateSpecTest(t, "179", "const.255.wasm")
	t.Cleanup(func() { x179.close(t) })
	t.Run("f:599", func(t *testing.T) { x179.assertReturnInvoke(t, "f", nil, arg{wa.F32, 3632267266}) })
	x180 := instantiateSpecTest(t, "180", "const.256.wasm")
	t.Cleanup(func() { x180.close(t) })
	t.Run("f:601", func(t *testing.T) { x180.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1484783618}) })
	x181 := instantiateSpecTest(t, "181", "const.257.wasm")
	t.Cleanup(func() { x181.close(t) })
	t.Run("f:603", func(t *testing.T) { x181.assertReturnInvoke(t, "f", nil, arg{wa.F32, 3632267266}) })
	x182 := instantiateSpecTest(t, "182", "const.258.wasm")
	t.Cleanup(func() { x182.close(t) })
	t.Run("f:605", func(t *testing.T) { x182.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1484783618}) })
	x183 := instantiateSpecTest(t, "183", "const.259.wasm")
	t.Cleanup(func() { x183.close(t) })
	t.Run("f:607", func(t *testing.T) { x183.assertReturnInvoke(t, "f", nil, arg{wa.F32, 3632267266}) })
	x184 := instantiateSpecTest(t, "184", "const.260.wasm")
	t.Cleanup(func() { x184.close(t) })
	t.Run("f:609", func(t *testing.T) { x184.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1484783618}) })
	x185 := instantiateSpecTest(t, "185", "const.261.wasm")
	t.Cleanup(func() { x185.close(t) })
	t.Run("f:611", func(t *testing.T) { x185.assertReturnInvoke(t, "f", nil, arg{wa.F32, 3632267266}) })
	x186 := instantiateSpecTest(t, "186", "const.262.wasm")
	t.Cleanup(func() { x186.close(t) })
	t.Run("f:613", func(t *testing.T) { x186.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1484783618}) })
	x187 := instantiateSpecTest(t, "187", "const.263.wasm")
	t.Cleanup(func() { x187.close(t) })
	t.Run("f:615", func(t *testing.T) { x187.assertReturnInvoke(t, "f", nil, arg{wa.F32, 3632267266}) })
	x188 := instantiateSpecTest(t, "188", "const.264.wasm")
	t.Cleanup(func() { x188.close(t) })
	t.Run("f:617", func(t *testing.T) { x188.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1484783619}) })
	x189 := instantiateSpecTest(t, "189", "const.265.wasm")
	t.Cleanup(func() { x189.close(t) })
	t.Run("f:619", func(t *testing.T) { x189.assertReturnInvoke(t, "f", nil, arg{wa.F32, 3632267267}) })
	x190 := instantiateSpecTest(t, "190", "const.266.wasm")
	t.Cleanup(func() { x190.close(t) })
	t.Run("f:622", func(t *testing.T) { x190.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1484783616}) })
	x191 := instantiateSpecTest(t, "191", "const.267.wasm")
	t.Cleanup(func() { x191.close(t) })
	t.Run("f:624", func(t *testing.T) { x191.assertReturnInvoke(t, "f", nil, arg{wa.F32, 3632267264}) })
	x192 := instantiateSpecTest(t, "192", "const.268.wasm")
	t.Cleanup(func() { x192.close(t) })
	t.Run("f:626", func(t *testing.T) { x192.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1484783617}) })
	x193 := instantiateSpecTest(t, "193", "const.269.wasm")
	t.Cleanup(func() { x193.close(t) })
	t.Run("f:628", func(t *testing.T) { x193.assertReturnInvoke(t, "f", nil, arg{wa.F32, 3632267265}) })
	x194 := instantiateSpecTest(t, "194", "const.270.wasm")
	t.Cleanup(func() { x194.close(t) })
	t.Run("f:630", func(t *testing.T) { x194.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1484783617}) })
	x195 := instantiateSpecTest(t, "195", "const.271.wasm")
	t.Cleanup(func() { x195.close(t) })
	t.Run("f:632", func(t *testing.T) { x195.assertReturnInvoke(t, "f", nil, arg{wa.F32, 3632267265}) })
	x196 := instantiateSpecTest(t, "196", "const.272.wasm")
	t.Cleanup(func() { x196.close(t) })
	t.Run("f:634", func(t *testing.T) { x196.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1484783617}) })
	x197 := instantiateSpecTest(t, "197", "const.273.wasm")
	t.Cleanup(func() { x197.close(t) })
	t.Run("f:636", func(t *testing.T) { x197.assertReturnInvoke(t, "f", nil, arg{wa.F32, 3632267265}) })
	x198 := instantiateSpecTest(t, "198", "const.274.wasm")
	t.Cleanup(func() { x198.close(t) })
	t.Run("f:638", func(t *testing.T) { x198.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1484783617}) })
	x199 := instantiateSpecTest(t, "199", "const.275.wasm")
	t.Cleanup(func() { x199.close(t) })
	t.Run("f:640", func(t *testing.T) { x199.assertReturnInvoke(t, "f", nil, arg{wa.F32, 3632267265}) })
	x200 := instantiateSpecTest(t, "200", "const.276.wasm")
	t.Cleanup(func() { x200.close(t) })
	t.Run("f:642", func(t *testing.T) { x200.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1484783617}) })
	x201 := instantiateSpecTest(t, "201", "const.277.wasm")
	t.Cleanup(func() { x201.close(t) })
	t.Run("f:644", func(t *testing.T) { x201.assertReturnInvoke(t, "f", nil, arg{wa.F32, 3632267265}) })
	x202 := instantiateSpecTest(t, "202", "const.278.wasm")
	t.Cleanup(func() { x202.close(t) })
	t.Run("f:646", func(t *testing.T) { x202.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1484783618}) })
	x203 := instantiateSpecTest(t, "203", "const.279.wasm")
	t.Cleanup(func() { x203.close(t) })
	t.Run("f:648", func(t *testing.T) { x203.assertReturnInvoke(t, "f", nil, arg{wa.F32, 3632267266}) })
	x204 := instantiateSpecTest(t, "204", "const.280.wasm")
	t.Cleanup(func() { x204.close(t) })
	t.Run("f:651", func(t *testing.T) { x204.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1484783616}) })
	x205 := instantiateSpecTest(t, "205", "const.281.wasm")
	t.Cleanup(func() { x205.close(t) })
	t.Run("f:653", func(t *testing.T) { x205.assertReturnInvoke(t, "f", nil, arg{wa.F32, 3632267264}) })
	x206 := instantiateSpecTest(t, "206", "const.282.wasm")
	t.Cleanup(func() { x206.close(t) })
	t.Run("f:655", func(t *testing.T) { x206.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1484783617}) })
	x207 := instantiateSpecTest(t, "207", "const.283.wasm")
	t.Cleanup(func() { x207.close(t) })
	t.Run("f:657", func(t *testing.T) { x207.assertReturnInvoke(t, "f", nil, arg{wa.F32, 3632267265}) })
	x208 := instantiateSpecTest(t, "208", "const.284.wasm")
	t.Cleanup(func() { x208.close(t) })
	t.Run("f:659", func(t *testing.T) { x208.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1484783617}) })
	x209 := instantiateSpecTest(t, "209", "const.285.wasm")
	t.Cleanup(func() { x209.close(t) })
	t.Run("f:661", func(t *testing.T) { x209.assertReturnInvoke(t, "f", nil, arg{wa.F32, 3632267265}) })
	x210 := instantiateSpecTest(t, "210", "const.286.wasm")
	t.Cleanup(func() { x210.close(t) })
	t.Run("f:663", func(t *testing.T) { x210.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1484783618}) })
	x211 := instantiateSpecTest(t, "211", "const.287.wasm")
	t.Cleanup(func() { x211.close(t) })
	t.Run("f:665", func(t *testing.T) { x211.assertReturnInvoke(t, "f", nil, arg{wa.F32, 3632267266}) })
	x212 := instantiateSpecTest(t, "212", "const.288.wasm")
	t.Cleanup(func() { x212.close(t) })
	t.Run("f:669", func(t *testing.T) { x212.assertReturnInvoke(t, "f", nil, arg{wa.F32, 0}) })
	x213 := instantiateSpecTest(t, "213", "const.289.wasm")
	t.Cleanup(func() { x213.close(t) })
	t.Run("f:671", func(t *testing.T) { x213.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2147483648}) })
	x214 := instantiateSpecTest(t, "214", "const.290.wasm")
	t.Cleanup(func() { x214.close(t) })
	t.Run("f:673", func(t *testing.T) { x214.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1}) })
	x215 := instantiateSpecTest(t, "215", "const.291.wasm")
	t.Cleanup(func() { x215.close(t) })
	t.Run("f:675", func(t *testing.T) { x215.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2147483649}) })
	x216 := instantiateSpecTest(t, "216", "const.292.wasm")
	t.Cleanup(func() { x216.close(t) })
	t.Run("f:677", func(t *testing.T) { x216.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1}) })
	x217 := instantiateSpecTest(t, "217", "const.293.wasm")
	t.Cleanup(func() { x217.close(t) })
	t.Run("f:679", func(t *testing.T) { x217.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2147483649}) })
	x218 := instantiateSpecTest(t, "218", "const.294.wasm")
	t.Cleanup(func() { x218.close(t) })
	t.Run("f:681", func(t *testing.T) { x218.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1}) })
	x219 := instantiateSpecTest(t, "219", "const.295.wasm")
	t.Cleanup(func() { x219.close(t) })
	t.Run("f:683", func(t *testing.T) { x219.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2147483649}) })
	x220 := instantiateSpecTest(t, "220", "const.296.wasm")
	t.Cleanup(func() { x220.close(t) })
	t.Run("f:685", func(t *testing.T) { x220.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1}) })
	x221 := instantiateSpecTest(t, "221", "const.297.wasm")
	t.Cleanup(func() { x221.close(t) })
	t.Run("f:687", func(t *testing.T) { x221.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2147483649}) })
	x222 := instantiateSpecTest(t, "222", "const.298.wasm")
	t.Cleanup(func() { x222.close(t) })
	t.Run("f:689", func(t *testing.T) { x222.assertReturnInvoke(t, "f", nil, arg{wa.F32, 1}) })
	x223 := instantiateSpecTest(t, "223", "const.299.wasm")
	t.Cleanup(func() { x223.close(t) })
	t.Run("f:691", func(t *testing.T) { x223.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2147483649}) })
	x224 := instantiateSpecTest(t, "224", "const.300.wasm")
	t.Cleanup(func() { x224.close(t) })
	t.Run("f:693", func(t *testing.T) { x224.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2}) })
	x225 := instantiateSpecTest(t, "225", "const.301.wasm")
	t.Cleanup(func() { x225.close(t) })
	t.Run("f:695", func(t *testing.T) { x225.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2147483650}) })
	x226 := instantiateSpecTest(t, "226", "const.302.wasm")
	t.Cleanup(func() { x226.close(t) })
	t.Run("f:697", func(t *testing.T) { x226.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2}) })
	x227 := instantiateSpecTest(t, "227", "const.303.wasm")
	t.Cleanup(func() { x227.close(t) })
	t.Run("f:699", func(t *testing.T) { x227.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2147483650}) })
	x228 := instantiateSpecTest(t, "228", "const.304.wasm")
	t.Cleanup(func() { x228.close(t) })
	t.Run("f:701", func(t *testing.T) { x228.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2}) })
	x229 := instantiateSpecTest(t, "229", "const.305.wasm")
	t.Cleanup(func() { x229.close(t) })
	t.Run("f:703", func(t *testing.T) { x229.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2147483650}) })
	x230 := instantiateSpecTest(t, "230", "const.306.wasm")
	t.Cleanup(func() { x230.close(t) })
	t.Run("f:705", func(t *testing.T) { x230.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2}) })
	x231 := instantiateSpecTest(t, "231", "const.307.wasm")
	t.Cleanup(func() { x231.close(t) })
	t.Run("f:707", func(t *testing.T) { x231.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2147483650}) })
	x232 := instantiateSpecTest(t, "232", "const.308.wasm")
	t.Cleanup(func() { x232.close(t) })
	t.Run("f:709", func(t *testing.T) { x232.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2}) })
	x233 := instantiateSpecTest(t, "233", "const.309.wasm")
	t.Cleanup(func() { x233.close(t) })
	t.Run("f:711", func(t *testing.T) { x233.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2147483650}) })
	x234 := instantiateSpecTest(t, "234", "const.310.wasm")
	t.Cleanup(func() { x234.close(t) })
	t.Run("f:713", func(t *testing.T) { x234.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2}) })
	x235 := instantiateSpecTest(t, "235", "const.311.wasm")
	t.Cleanup(func() { x235.close(t) })
	t.Run("f:715", func(t *testing.T) { x235.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2147483650}) })
	x236 := instantiateSpecTest(t, "236", "const.312.wasm")
	t.Cleanup(func() { x236.close(t) })
	t.Run("f:717", func(t *testing.T) { x236.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2}) })
	x237 := instantiateSpecTest(t, "237", "const.313.wasm")
	t.Cleanup(func() { x237.close(t) })
	t.Run("f:719", func(t *testing.T) { x237.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2147483650}) })
	x238 := instantiateSpecTest(t, "238", "const.314.wasm")
	t.Cleanup(func() { x238.close(t) })
	t.Run("f:721", func(t *testing.T) { x238.assertReturnInvoke(t, "f", nil, arg{wa.F32, 3}) })
	x239 := instantiateSpecTest(t, "239", "const.315.wasm")
	t.Cleanup(func() { x239.close(t) })
	t.Run("f:723", func(t *testing.T) { x239.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2147483651}) })
	x240 := instantiateSpecTest(t, "240", "const.316.wasm")
	t.Cleanup(func() { x240.close(t) })
	t.Run("f:727", func(t *testing.T) { x240.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2139095039}) })
	x241 := instantiateSpecTest(t, "241", "const.317.wasm")
	t.Cleanup(func() { x241.close(t) })
	t.Run("f:729", func(t *testing.T) { x241.assertReturnInvoke(t, "f", nil, arg{wa.F32, 4286578687}) })
	x242 := instantiateSpecTest(t, "242", "const.318.wasm")
	t.Cleanup(func() { x242.close(t) })
	t.Run("f:731", func(t *testing.T) { x242.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2139095039}) })
	x243 := instantiateSpecTest(t, "243", "const.319.wasm")
	t.Cleanup(func() { x243.close(t) })
	t.Run("f:733", func(t *testing.T) { x243.assertReturnInvoke(t, "f", nil, arg{wa.F32, 4286578687}) })
	x244 := instantiateSpecTest(t, "244", "const.320.wasm")
	t.Cleanup(func() { x244.close(t) })
	t.Run("f:735", func(t *testing.T) { x244.assertReturnInvoke(t, "f", nil, arg{wa.F32, 2139095039}) })
	x245 := instantiateSpecTest(t, "245", "const.321.wasm")
	t.Cleanup(func() { x245.close(t) })
	t.Run("f:737", func(t *testing.T) { x245.assertReturnInvoke(t, "f", nil, arg{wa.F32, 4286578687}) })
	x246 := instantiateSpecTest(t, "246", "const.322.wasm")
	t.Cleanup(func() { x246.close(t) })
	t.Run("f:741", func(t *testing.T) { x246.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1905022642377719808}) })
	x247 := instantiateSpecTest(t, "247", "const.323.wasm")
	t.Cleanup(func() { x247.close(t) })
	t.Run("f:743", func(t *testing.T) { x247.assertReturnInvoke(t, "f", nil, arg{wa.F64, 11128394679232495616}) })
	x248 := instantiateSpecTest(t, "248", "const.324.wasm")
	t.Cleanup(func() { x248.close(t) })
	t.Run("f:745", func(t *testing.T) { x248.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1905022642377719809}) })
	x249 := instantiateSpecTest(t, "249", "const.325.wasm")
	t.Cleanup(func() { x249.close(t) })
	t.Run("f:747", func(t *testing.T) { x249.assertReturnInvoke(t, "f", nil, arg{wa.F64, 11128394679232495617}) })
	x250 := instantiateSpecTest(t, "250", "const.326.wasm")
	t.Cleanup(func() { x250.close(t) })
	t.Run("f:749", func(t *testing.T) { x250.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1905022642377719809}) })
	x251 := instantiateSpecTest(t, "251", "const.327.wasm")
	t.Cleanup(func() { x251.close(t) })
	t.Run("f:751", func(t *testing.T) { x251.assertReturnInvoke(t, "f", nil, arg{wa.F64, 11128394679232495617}) })
	x252 := instantiateSpecTest(t, "252", "const.328.wasm")
	t.Cleanup(func() { x252.close(t) })
	t.Run("f:753", func(t *testing.T) { x252.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1905022642377719809}) })
	x253 := instantiateSpecTest(t, "253", "const.329.wasm")
	t.Cleanup(func() { x253.close(t) })
	t.Run("f:755", func(t *testing.T) { x253.assertReturnInvoke(t, "f", nil, arg{wa.F64, 11128394679232495617}) })
	x254 := instantiateSpecTest(t, "254", "const.330.wasm")
	t.Cleanup(func() { x254.close(t) })
	t.Run("f:757", func(t *testing.T) { x254.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1905022642377719809}) })
	x255 := instantiateSpecTest(t, "255", "const.331.wasm")
	t.Cleanup(func() { x255.close(t) })
	t.Run("f:759", func(t *testing.T) { x255.assertReturnInvoke(t, "f", nil, arg{wa.F64, 11128394679232495617}) })
	x256 := instantiateSpecTest(t, "256", "const.332.wasm")
	t.Cleanup(func() { x256.close(t) })
	t.Run("f:761", func(t *testing.T) { x256.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1905022642377719809}) })
	x257 := instantiateSpecTest(t, "257", "const.333.wasm")
	t.Cleanup(func() { x257.close(t) })
	t.Run("f:763", func(t *testing.T) { x257.assertReturnInvoke(t, "f", nil, arg{wa.F64, 11128394679232495617}) })
	x258 := instantiateSpecTest(t, "258", "const.334.wasm")
	t.Cleanup(func() { x258.close(t) })
	t.Run("f:765", func(t *testing.T) { x258.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1905022642377719810}) })
	x259 := instantiateSpecTest(t, "259", "const.335.wasm")
	t.Cleanup(func() { x259.close(t) })
	t.Run("f:767", func(t *testing.T) { x259.assertReturnInvoke(t, "f", nil, arg{wa.F64, 11128394679232495618}) })
	x260 := instantiateSpecTest(t, "260", "const.336.wasm")
	t.Cleanup(func() { x260.close(t) })
	t.Run("f:769", func(t *testing.T) { x260.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1905022642377719810}) })
	x261 := instantiateSpecTest(t, "261", "const.337.wasm")
	t.Cleanup(func() { x261.close(t) })
	t.Run("f:771", func(t *testing.T) { x261.assertReturnInvoke(t, "f", nil, arg{wa.F64, 11128394679232495618}) })
	x262 := instantiateSpecTest(t, "262", "const.338.wasm")
	t.Cleanup(func() { x262.close(t) })
	t.Run("f:773", func(t *testing.T) { x262.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1905022642377719810}) })
	x263 := instantiateSpecTest(t, "263", "const.339.wasm")
	t.Cleanup(func() { x263.close(t) })
	t.Run("f:775", func(t *testing.T) { x263.assertReturnInvoke(t, "f", nil, arg{wa.F64, 11128394679232495618}) })
	x264 := instantiateSpecTest(t, "264", "const.340.wasm")
	t.Cleanup(func() { x264.close(t) })
	t.Run("f:777", func(t *testing.T) { x264.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1905022642377719810}) })
	x265 := instantiateSpecTest(t, "265", "const.341.wasm")
	t.Cleanup(func() { x265.close(t) })
	t.Run("f:779", func(t *testing.T) { x265.assertReturnInvoke(t, "f", nil, arg{wa.F64, 11128394679232495618}) })
	x266 := instantiateSpecTest(t, "266", "const.342.wasm")
	t.Cleanup(func() { x266.close(t) })
	t.Run("f:781", func(t *testing.T) { x266.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1905022642377719810}) })
	x267 := instantiateSpecTest(t, "267", "const.343.wasm")
	t.Cleanup(func() { x267.close(t) })
	t.Run("f:783", func(t *testing.T) { x267.assertReturnInvoke(t, "f", nil, arg{wa.F64, 11128394679232495618}) })
	x268 := instantiateSpecTest(t, "268", "const.344.wasm")
	t.Cleanup(func() { x268.close(t) })
	t.Run("f:785", func(t *testing.T) { x268.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1905022642377719810}) })
	x269 := instantiateSpecTest(t, "269", "const.345.wasm")
	t.Cleanup(func() { x269.close(t) })
	t.Run("f:787", func(t *testing.T) { x269.assertReturnInvoke(t, "f", nil, arg{wa.F64, 11128394679232495618}) })
	x270 := instantiateSpecTest(t, "270", "const.346.wasm")
	t.Cleanup(func() { x270.close(t) })
	t.Run("f:789", func(t *testing.T) { x270.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1905022642377719811}) })
	x271 := instantiateSpecTest(t, "271", "const.347.wasm")
	t.Cleanup(func() { x271.close(t) })
	t.Run("f:791", func(t *testing.T) { x271.assertReturnInvoke(t, "f", nil, arg{wa.F64, 11128394679232495619}) })
	x272 := instantiateSpecTest(t, "272", "const.348.wasm")
	t.Cleanup(func() { x272.close(t) })
	t.Run("f:794", func(t *testing.T) { x272.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1905022642377719808}) })
	x273 := instantiateSpecTest(t, "273", "const.349.wasm")
	t.Cleanup(func() { x273.close(t) })
	t.Run("f:796", func(t *testing.T) { x273.assertReturnInvoke(t, "f", nil, arg{wa.F64, 11128394679232495616}) })
	x274 := instantiateSpecTest(t, "274", "const.350.wasm")
	t.Cleanup(func() { x274.close(t) })
	t.Run("f:798", func(t *testing.T) { x274.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1905022642377719809}) })
	x275 := instantiateSpecTest(t, "275", "const.351.wasm")
	t.Cleanup(func() { x275.close(t) })
	t.Run("f:800", func(t *testing.T) { x275.assertReturnInvoke(t, "f", nil, arg{wa.F64, 11128394679232495617}) })
	x276 := instantiateSpecTest(t, "276", "const.352.wasm")
	t.Cleanup(func() { x276.close(t) })
	t.Run("f:802", func(t *testing.T) { x276.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1905022642377719809}) })
	x277 := instantiateSpecTest(t, "277", "const.353.wasm")
	t.Cleanup(func() { x277.close(t) })
	t.Run("f:804", func(t *testing.T) { x277.assertReturnInvoke(t, "f", nil, arg{wa.F64, 11128394679232495617}) })
	x278 := instantiateSpecTest(t, "278", "const.354.wasm")
	t.Cleanup(func() { x278.close(t) })
	t.Run("f:806", func(t *testing.T) { x278.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1905022642377719809}) })
	x279 := instantiateSpecTest(t, "279", "const.355.wasm")
	t.Cleanup(func() { x279.close(t) })
	t.Run("f:808", func(t *testing.T) { x279.assertReturnInvoke(t, "f", nil, arg{wa.F64, 11128394679232495617}) })
	x280 := instantiateSpecTest(t, "280", "const.356.wasm")
	t.Cleanup(func() { x280.close(t) })
	t.Run("f:810", func(t *testing.T) { x280.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1905022642377719809}) })
	x281 := instantiateSpecTest(t, "281", "const.357.wasm")
	t.Cleanup(func() { x281.close(t) })
	t.Run("f:812", func(t *testing.T) { x281.assertReturnInvoke(t, "f", nil, arg{wa.F64, 11128394679232495617}) })
	x282 := instantiateSpecTest(t, "282", "const.358.wasm")
	t.Cleanup(func() { x282.close(t) })
	t.Run("f:814", func(t *testing.T) { x282.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1905022642377719809}) })
	x283 := instantiateSpecTest(t, "283", "const.359.wasm")
	t.Cleanup(func() { x283.close(t) })
	t.Run("f:816", func(t *testing.T) { x283.assertReturnInvoke(t, "f", nil, arg{wa.F64, 11128394679232495617}) })
	x284 := instantiateSpecTest(t, "284", "const.360.wasm")
	t.Cleanup(func() { x284.close(t) })
	t.Run("f:818", func(t *testing.T) { x284.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1905022642377719810}) })
	x285 := instantiateSpecTest(t, "285", "const.361.wasm")
	t.Cleanup(func() { x285.close(t) })
	t.Run("f:820", func(t *testing.T) { x285.assertReturnInvoke(t, "f", nil, arg{wa.F64, 11128394679232495618}) })
	x286 := instantiateSpecTest(t, "286", "const.362.wasm")
	t.Cleanup(func() { x286.close(t) })
	t.Run("f:822", func(t *testing.T) { x286.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1905022642377719810}) })
	x287 := instantiateSpecTest(t, "287", "const.363.wasm")
	t.Cleanup(func() { x287.close(t) })
	t.Run("f:824", func(t *testing.T) { x287.assertReturnInvoke(t, "f", nil, arg{wa.F64, 11128394679232495618}) })
	x288 := instantiateSpecTest(t, "288", "const.364.wasm")
	t.Cleanup(func() { x288.close(t) })
	t.Run("f:826", func(t *testing.T) { x288.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1905022642377719810}) })
	x289 := instantiateSpecTest(t, "289", "const.365.wasm")
	t.Cleanup(func() { x289.close(t) })
	t.Run("f:828", func(t *testing.T) { x289.assertReturnInvoke(t, "f", nil, arg{wa.F64, 11128394679232495618}) })
	x290 := instantiateSpecTest(t, "290", "const.366.wasm")
	t.Cleanup(func() { x290.close(t) })
	t.Run("f:830", func(t *testing.T) { x290.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1905022642377719810}) })
	x291 := instantiateSpecTest(t, "291", "const.367.wasm")
	t.Cleanup(func() { x291.close(t) })
	t.Run("f:832", func(t *testing.T) { x291.assertReturnInvoke(t, "f", nil, arg{wa.F64, 11128394679232495618}) })
	x292 := instantiateSpecTest(t, "292", "const.368.wasm")
	t.Cleanup(func() { x292.close(t) })
	t.Run("f:834", func(t *testing.T) { x292.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1905022642377719810}) })
	x293 := instantiateSpecTest(t, "293", "const.369.wasm")
	t.Cleanup(func() { x293.close(t) })
	t.Run("f:836", func(t *testing.T) { x293.assertReturnInvoke(t, "f", nil, arg{wa.F64, 11128394679232495618}) })
	x294 := instantiateSpecTest(t, "294", "const.370.wasm")
	t.Cleanup(func() { x294.close(t) })
	t.Run("f:838", func(t *testing.T) { x294.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1905022642377719810}) })
	x295 := instantiateSpecTest(t, "295", "const.371.wasm")
	t.Cleanup(func() { x295.close(t) })
	t.Run("f:840", func(t *testing.T) { x295.assertReturnInvoke(t, "f", nil, arg{wa.F64, 11128394679232495618}) })
	x296 := instantiateSpecTest(t, "296", "const.372.wasm")
	t.Cleanup(func() { x296.close(t) })
	t.Run("f:842", func(t *testing.T) { x296.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1905022642377719811}) })
	x297 := instantiateSpecTest(t, "297", "const.373.wasm")
	t.Cleanup(func() { x297.close(t) })
	t.Run("f:844", func(t *testing.T) { x297.assertReturnInvoke(t, "f", nil, arg{wa.F64, 11128394679232495619}) })
	x298 := instantiateSpecTest(t, "298", "const.374.wasm")
	t.Cleanup(func() { x298.close(t) })
	t.Run("f:847", func(t *testing.T) { x298.assertReturnInvoke(t, "f", nil, arg{wa.F64, 9106278446543142912}) })
	x299 := instantiateSpecTest(t, "299", "const.375.wasm")
	t.Cleanup(func() { x299.close(t) })
	t.Run("f:849", func(t *testing.T) { x299.assertReturnInvoke(t, "f", nil, arg{wa.F64, 18329650483397918720}) })
	x300 := instantiateSpecTest(t, "300", "const.376.wasm")
	t.Cleanup(func() { x300.close(t) })
	t.Run("f:851", func(t *testing.T) { x300.assertReturnInvoke(t, "f", nil, arg{wa.F64, 9106278446543142913}) })
	x301 := instantiateSpecTest(t, "301", "const.377.wasm")
	t.Cleanup(func() { x301.close(t) })
	t.Run("f:853", func(t *testing.T) { x301.assertReturnInvoke(t, "f", nil, arg{wa.F64, 18329650483397918721}) })
	x302 := instantiateSpecTest(t, "302", "const.378.wasm")
	t.Cleanup(func() { x302.close(t) })
	t.Run("f:855", func(t *testing.T) { x302.assertReturnInvoke(t, "f", nil, arg{wa.F64, 9106278446543142913}) })
	x303 := instantiateSpecTest(t, "303", "const.379.wasm")
	t.Cleanup(func() { x303.close(t) })
	t.Run("f:857", func(t *testing.T) { x303.assertReturnInvoke(t, "f", nil, arg{wa.F64, 18329650483397918721}) })
	x304 := instantiateSpecTest(t, "304", "const.380.wasm")
	t.Cleanup(func() { x304.close(t) })
	t.Run("f:859", func(t *testing.T) { x304.assertReturnInvoke(t, "f", nil, arg{wa.F64, 9106278446543142914}) })
	x305 := instantiateSpecTest(t, "305", "const.381.wasm")
	t.Cleanup(func() { x305.close(t) })
	t.Run("f:861", func(t *testing.T) { x305.assertReturnInvoke(t, "f", nil, arg{wa.F64, 18329650483397918722}) })
	x306 := instantiateSpecTest(t, "306", "const.382.wasm")
	t.Cleanup(func() { x306.close(t) })
	t.Run("f:865", func(t *testing.T) { x306.assertReturnInvoke(t, "f", nil, arg{wa.F64, 7309342195222315008}) })
	x307 := instantiateSpecTest(t, "307", "const.383.wasm")
	t.Cleanup(func() { x307.close(t) })
	t.Run("f:867", func(t *testing.T) { x307.assertReturnInvoke(t, "f", nil, arg{wa.F64, 16532714232077090816}) })
	x308 := instantiateSpecTest(t, "308", "const.384.wasm")
	t.Cleanup(func() { x308.close(t) })
	t.Run("f:869", func(t *testing.T) { x308.assertReturnInvoke(t, "f", nil, arg{wa.F64, 7309342195222315009}) })
	x309 := instantiateSpecTest(t, "309", "const.385.wasm")
	t.Cleanup(func() { x309.close(t) })
	t.Run("f:871", func(t *testing.T) { x309.assertReturnInvoke(t, "f", nil, arg{wa.F64, 16532714232077090817}) })
	x310 := instantiateSpecTest(t, "310", "const.386.wasm")
	t.Cleanup(func() { x310.close(t) })
	t.Run("f:873", func(t *testing.T) { x310.assertReturnInvoke(t, "f", nil, arg{wa.F64, 7309342195222315009}) })
	x311 := instantiateSpecTest(t, "311", "const.387.wasm")
	t.Cleanup(func() { x311.close(t) })
	t.Run("f:875", func(t *testing.T) { x311.assertReturnInvoke(t, "f", nil, arg{wa.F64, 16532714232077090817}) })
	x312 := instantiateSpecTest(t, "312", "const.388.wasm")
	t.Cleanup(func() { x312.close(t) })
	t.Run("f:877", func(t *testing.T) { x312.assertReturnInvoke(t, "f", nil, arg{wa.F64, 7309342195222315009}) })
	x313 := instantiateSpecTest(t, "313", "const.389.wasm")
	t.Cleanup(func() { x313.close(t) })
	t.Run("f:879", func(t *testing.T) { x313.assertReturnInvoke(t, "f", nil, arg{wa.F64, 16532714232077090817}) })
	x314 := instantiateSpecTest(t, "314", "const.390.wasm")
	t.Cleanup(func() { x314.close(t) })
	t.Run("f:881", func(t *testing.T) { x314.assertReturnInvoke(t, "f", nil, arg{wa.F64, 7309342195222315009}) })
	x315 := instantiateSpecTest(t, "315", "const.391.wasm")
	t.Cleanup(func() { x315.close(t) })
	t.Run("f:883", func(t *testing.T) { x315.assertReturnInvoke(t, "f", nil, arg{wa.F64, 16532714232077090817}) })
	x316 := instantiateSpecTest(t, "316", "const.392.wasm")
	t.Cleanup(func() { x316.close(t) })
	t.Run("f:885", func(t *testing.T) { x316.assertReturnInvoke(t, "f", nil, arg{wa.F64, 7309342195222315009}) })
	x317 := instantiateSpecTest(t, "317", "const.393.wasm")
	t.Cleanup(func() { x317.close(t) })
	t.Run("f:887", func(t *testing.T) { x317.assertReturnInvoke(t, "f", nil, arg{wa.F64, 16532714232077090817}) })
	x318 := instantiateSpecTest(t, "318", "const.394.wasm")
	t.Cleanup(func() { x318.close(t) })
	t.Run("f:889", func(t *testing.T) { x318.assertReturnInvoke(t, "f", nil, arg{wa.F64, 7309342195222315010}) })
	x319 := instantiateSpecTest(t, "319", "const.395.wasm")
	t.Cleanup(func() { x319.close(t) })
	t.Run("f:891", func(t *testing.T) { x319.assertReturnInvoke(t, "f", nil, arg{wa.F64, 16532714232077090818}) })
	x320 := instantiateSpecTest(t, "320", "const.396.wasm")
	t.Cleanup(func() { x320.close(t) })
	t.Run("f:893", func(t *testing.T) { x320.assertReturnInvoke(t, "f", nil, arg{wa.F64, 7309342195222315010}) })
	x321 := instantiateSpecTest(t, "321", "const.397.wasm")
	t.Cleanup(func() { x321.close(t) })
	t.Run("f:895", func(t *testing.T) { x321.assertReturnInvoke(t, "f", nil, arg{wa.F64, 16532714232077090818}) })
	x322 := instantiateSpecTest(t, "322", "const.398.wasm")
	t.Cleanup(func() { x322.close(t) })
	t.Run("f:897", func(t *testing.T) { x322.assertReturnInvoke(t, "f", nil, arg{wa.F64, 7309342195222315010}) })
	x323 := instantiateSpecTest(t, "323", "const.399.wasm")
	t.Cleanup(func() { x323.close(t) })
	t.Run("f:899", func(t *testing.T) { x323.assertReturnInvoke(t, "f", nil, arg{wa.F64, 16532714232077090818}) })
	x324 := instantiateSpecTest(t, "324", "const.400.wasm")
	t.Cleanup(func() { x324.close(t) })
	t.Run("f:901", func(t *testing.T) { x324.assertReturnInvoke(t, "f", nil, arg{wa.F64, 7309342195222315010}) })
	x325 := instantiateSpecTest(t, "325", "const.401.wasm")
	t.Cleanup(func() { x325.close(t) })
	t.Run("f:903", func(t *testing.T) { x325.assertReturnInvoke(t, "f", nil, arg{wa.F64, 16532714232077090818}) })
	x326 := instantiateSpecTest(t, "326", "const.402.wasm")
	t.Cleanup(func() { x326.close(t) })
	t.Run("f:905", func(t *testing.T) { x326.assertReturnInvoke(t, "f", nil, arg{wa.F64, 7309342195222315010}) })
	x327 := instantiateSpecTest(t, "327", "const.403.wasm")
	t.Cleanup(func() { x327.close(t) })
	t.Run("f:907", func(t *testing.T) { x327.assertReturnInvoke(t, "f", nil, arg{wa.F64, 16532714232077090818}) })
	x328 := instantiateSpecTest(t, "328", "const.404.wasm")
	t.Cleanup(func() { x328.close(t) })
	t.Run("f:909", func(t *testing.T) { x328.assertReturnInvoke(t, "f", nil, arg{wa.F64, 7309342195222315010}) })
	x329 := instantiateSpecTest(t, "329", "const.405.wasm")
	t.Cleanup(func() { x329.close(t) })
	t.Run("f:911", func(t *testing.T) { x329.assertReturnInvoke(t, "f", nil, arg{wa.F64, 16532714232077090818}) })
	x330 := instantiateSpecTest(t, "330", "const.406.wasm")
	t.Cleanup(func() { x330.close(t) })
	t.Run("f:913", func(t *testing.T) { x330.assertReturnInvoke(t, "f", nil, arg{wa.F64, 7309342195222315010}) })
	x331 := instantiateSpecTest(t, "331", "const.407.wasm")
	t.Cleanup(func() { x331.close(t) })
	t.Run("f:915", func(t *testing.T) { x331.assertReturnInvoke(t, "f", nil, arg{wa.F64, 16532714232077090818}) })
	x332 := instantiateSpecTest(t, "332", "const.408.wasm")
	t.Cleanup(func() { x332.close(t) })
	t.Run("f:917", func(t *testing.T) { x332.assertReturnInvoke(t, "f", nil, arg{wa.F64, 7309342195222315011}) })
	x333 := instantiateSpecTest(t, "333", "const.409.wasm")
	t.Cleanup(func() { x333.close(t) })
	t.Run("f:919", func(t *testing.T) { x333.assertReturnInvoke(t, "f", nil, arg{wa.F64, 16532714232077090819}) })
	x334 := instantiateSpecTest(t, "334", "const.410.wasm")
	t.Cleanup(func() { x334.close(t) })
	t.Run("f:922", func(t *testing.T) { x334.assertReturnInvoke(t, "f", nil, arg{wa.F64, 5044031582654955520}) })
	x335 := instantiateSpecTest(t, "335", "const.411.wasm")
	t.Cleanup(func() { x335.close(t) })
	t.Run("f:924", func(t *testing.T) { x335.assertReturnInvoke(t, "f", nil, arg{wa.F64, 14267403619509731328}) })
	x336 := instantiateSpecTest(t, "336", "const.412.wasm")
	t.Cleanup(func() { x336.close(t) })
	t.Run("f:926", func(t *testing.T) { x336.assertReturnInvoke(t, "f", nil, arg{wa.F64, 5044031582654955521}) })
	x337 := instantiateSpecTest(t, "337", "const.413.wasm")
	t.Cleanup(func() { x337.close(t) })
	t.Run("f:928", func(t *testing.T) { x337.assertReturnInvoke(t, "f", nil, arg{wa.F64, 14267403619509731329}) })
	x338 := instantiateSpecTest(t, "338", "const.414.wasm")
	t.Cleanup(func() { x338.close(t) })
	t.Run("f:930", func(t *testing.T) { x338.assertReturnInvoke(t, "f", nil, arg{wa.F64, 5044031582654955521}) })
	x339 := instantiateSpecTest(t, "339", "const.415.wasm")
	t.Cleanup(func() { x339.close(t) })
	t.Run("f:932", func(t *testing.T) { x339.assertReturnInvoke(t, "f", nil, arg{wa.F64, 14267403619509731329}) })
	x340 := instantiateSpecTest(t, "340", "const.416.wasm")
	t.Cleanup(func() { x340.close(t) })
	t.Run("f:934", func(t *testing.T) { x340.assertReturnInvoke(t, "f", nil, arg{wa.F64, 5044031582654955521}) })
	x341 := instantiateSpecTest(t, "341", "const.417.wasm")
	t.Cleanup(func() { x341.close(t) })
	t.Run("f:936", func(t *testing.T) { x341.assertReturnInvoke(t, "f", nil, arg{wa.F64, 14267403619509731329}) })
	x342 := instantiateSpecTest(t, "342", "const.418.wasm")
	t.Cleanup(func() { x342.close(t) })
	t.Run("f:938", func(t *testing.T) { x342.assertReturnInvoke(t, "f", nil, arg{wa.F64, 5044031582654955521}) })
	x343 := instantiateSpecTest(t, "343", "const.419.wasm")
	t.Cleanup(func() { x343.close(t) })
	t.Run("f:940", func(t *testing.T) { x343.assertReturnInvoke(t, "f", nil, arg{wa.F64, 14267403619509731329}) })
	x344 := instantiateSpecTest(t, "344", "const.420.wasm")
	t.Cleanup(func() { x344.close(t) })
	t.Run("f:942", func(t *testing.T) { x344.assertReturnInvoke(t, "f", nil, arg{wa.F64, 5044031582654955521}) })
	x345 := instantiateSpecTest(t, "345", "const.421.wasm")
	t.Cleanup(func() { x345.close(t) })
	t.Run("f:944", func(t *testing.T) { x345.assertReturnInvoke(t, "f", nil, arg{wa.F64, 14267403619509731329}) })
	x346 := instantiateSpecTest(t, "346", "const.422.wasm")
	t.Cleanup(func() { x346.close(t) })
	t.Run("f:946", func(t *testing.T) { x346.assertReturnInvoke(t, "f", nil, arg{wa.F64, 5044031582654955522}) })
	x347 := instantiateSpecTest(t, "347", "const.423.wasm")
	t.Cleanup(func() { x347.close(t) })
	t.Run("f:948", func(t *testing.T) { x347.assertReturnInvoke(t, "f", nil, arg{wa.F64, 14267403619509731330}) })
	x348 := instantiateSpecTest(t, "348", "const.424.wasm")
	t.Cleanup(func() { x348.close(t) })
	t.Run("f:950", func(t *testing.T) { x348.assertReturnInvoke(t, "f", nil, arg{wa.F64, 5044031582654955522}) })
	x349 := instantiateSpecTest(t, "349", "const.425.wasm")
	t.Cleanup(func() { x349.close(t) })
	t.Run("f:952", func(t *testing.T) { x349.assertReturnInvoke(t, "f", nil, arg{wa.F64, 14267403619509731330}) })
	x350 := instantiateSpecTest(t, "350", "const.426.wasm")
	t.Cleanup(func() { x350.close(t) })
	t.Run("f:954", func(t *testing.T) { x350.assertReturnInvoke(t, "f", nil, arg{wa.F64, 5044031582654955522}) })
	x351 := instantiateSpecTest(t, "351", "const.427.wasm")
	t.Cleanup(func() { x351.close(t) })
	t.Run("f:956", func(t *testing.T) { x351.assertReturnInvoke(t, "f", nil, arg{wa.F64, 14267403619509731330}) })
	x352 := instantiateSpecTest(t, "352", "const.428.wasm")
	t.Cleanup(func() { x352.close(t) })
	t.Run("f:958", func(t *testing.T) { x352.assertReturnInvoke(t, "f", nil, arg{wa.F64, 5044031582654955522}) })
	x353 := instantiateSpecTest(t, "353", "const.429.wasm")
	t.Cleanup(func() { x353.close(t) })
	t.Run("f:960", func(t *testing.T) { x353.assertReturnInvoke(t, "f", nil, arg{wa.F64, 14267403619509731330}) })
	x354 := instantiateSpecTest(t, "354", "const.430.wasm")
	t.Cleanup(func() { x354.close(t) })
	t.Run("f:962", func(t *testing.T) { x354.assertReturnInvoke(t, "f", nil, arg{wa.F64, 5044031582654955522}) })
	x355 := instantiateSpecTest(t, "355", "const.431.wasm")
	t.Cleanup(func() { x355.close(t) })
	t.Run("f:964", func(t *testing.T) { x355.assertReturnInvoke(t, "f", nil, arg{wa.F64, 14267403619509731330}) })
	x356 := instantiateSpecTest(t, "356", "const.432.wasm")
	t.Cleanup(func() { x356.close(t) })
	t.Run("f:966", func(t *testing.T) { x356.assertReturnInvoke(t, "f", nil, arg{wa.F64, 5044031582654955522}) })
	x357 := instantiateSpecTest(t, "357", "const.433.wasm")
	t.Cleanup(func() { x357.close(t) })
	t.Run("f:968", func(t *testing.T) { x357.assertReturnInvoke(t, "f", nil, arg{wa.F64, 14267403619509731330}) })
	x358 := instantiateSpecTest(t, "358", "const.434.wasm")
	t.Cleanup(func() { x358.close(t) })
	t.Run("f:970", func(t *testing.T) { x358.assertReturnInvoke(t, "f", nil, arg{wa.F64, 5044031582654955522}) })
	x359 := instantiateSpecTest(t, "359", "const.435.wasm")
	t.Cleanup(func() { x359.close(t) })
	t.Run("f:972", func(t *testing.T) { x359.assertReturnInvoke(t, "f", nil, arg{wa.F64, 14267403619509731330}) })
	x360 := instantiateSpecTest(t, "360", "const.436.wasm")
	t.Cleanup(func() { x360.close(t) })
	t.Run("f:974", func(t *testing.T) { x360.assertReturnInvoke(t, "f", nil, arg{wa.F64, 5044031582654955523}) })
	x361 := instantiateSpecTest(t, "361", "const.437.wasm")
	t.Cleanup(func() { x361.close(t) })
	t.Run("f:976", func(t *testing.T) { x361.assertReturnInvoke(t, "f", nil, arg{wa.F64, 14267403619509731331}) })
	x362 := instantiateSpecTest(t, "362", "const.438.wasm")
	t.Cleanup(func() { x362.close(t) })
	t.Run("f:979", func(t *testing.T) { x362.assertReturnInvoke(t, "f", nil, arg{wa.F64, 4877398396442247168}) })
	x363 := instantiateSpecTest(t, "363", "const.439.wasm")
	t.Cleanup(func() { x363.close(t) })
	t.Run("f:981", func(t *testing.T) { x363.assertReturnInvoke(t, "f", nil, arg{wa.F64, 14100770433297022976}) })
	x364 := instantiateSpecTest(t, "364", "const.440.wasm")
	t.Cleanup(func() { x364.close(t) })
	t.Run("f:983", func(t *testing.T) { x364.assertReturnInvoke(t, "f", nil, arg{wa.F64, 4877398396442247169}) })
	x365 := instantiateSpecTest(t, "365", "const.441.wasm")
	t.Cleanup(func() { x365.close(t) })
	t.Run("f:985", func(t *testing.T) { x365.assertReturnInvoke(t, "f", nil, arg{wa.F64, 14100770433297022977}) })
	x366 := instantiateSpecTest(t, "366", "const.442.wasm")
	t.Cleanup(func() { x366.close(t) })
	t.Run("f:987", func(t *testing.T) { x366.assertReturnInvoke(t, "f", nil, arg{wa.F64, 4877398396442247169}) })
	x367 := instantiateSpecTest(t, "367", "const.443.wasm")
	t.Cleanup(func() { x367.close(t) })
	t.Run("f:989", func(t *testing.T) { x367.assertReturnInvoke(t, "f", nil, arg{wa.F64, 14100770433297022977}) })
	x368 := instantiateSpecTest(t, "368", "const.444.wasm")
	t.Cleanup(func() { x368.close(t) })
	t.Run("f:991", func(t *testing.T) { x368.assertReturnInvoke(t, "f", nil, arg{wa.F64, 4877398396442247170}) })
	x369 := instantiateSpecTest(t, "369", "const.445.wasm")
	t.Cleanup(func() { x369.close(t) })
	t.Run("f:993", func(t *testing.T) { x369.assertReturnInvoke(t, "f", nil, arg{wa.F64, 14100770433297022978}) })
	x370 := instantiateSpecTest(t, "370", "const.446.wasm")
	t.Cleanup(func() { x370.close(t) })
	t.Run("f:997", func(t *testing.T) { x370.assertReturnInvoke(t, "f", nil, arg{wa.F64, 0}) })
	x371 := instantiateSpecTest(t, "371", "const.447.wasm")
	t.Cleanup(func() { x371.close(t) })
	t.Run("f:999", func(t *testing.T) { x371.assertReturnInvoke(t, "f", nil, arg{wa.F64, 9223372036854775808}) })
	x372 := instantiateSpecTest(t, "372", "const.448.wasm")
	t.Cleanup(func() { x372.close(t) })
	t.Run("f:1001", func(t *testing.T) { x372.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1}) })
	x373 := instantiateSpecTest(t, "373", "const.449.wasm")
	t.Cleanup(func() { x373.close(t) })
	t.Run("f:1003", func(t *testing.T) { x373.assertReturnInvoke(t, "f", nil, arg{wa.F64, 9223372036854775809}) })
	x374 := instantiateSpecTest(t, "374", "const.450.wasm")
	t.Cleanup(func() { x374.close(t) })
	t.Run("f:1005", func(t *testing.T) { x374.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1}) })
	x375 := instantiateSpecTest(t, "375", "const.451.wasm")
	t.Cleanup(func() { x375.close(t) })
	t.Run("f:1007", func(t *testing.T) { x375.assertReturnInvoke(t, "f", nil, arg{wa.F64, 9223372036854775809}) })
	x376 := instantiateSpecTest(t, "376", "const.452.wasm")
	t.Cleanup(func() { x376.close(t) })
	t.Run("f:1009", func(t *testing.T) { x376.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1}) })
	x377 := instantiateSpecTest(t, "377", "const.453.wasm")
	t.Cleanup(func() { x377.close(t) })
	t.Run("f:1011", func(t *testing.T) { x377.assertReturnInvoke(t, "f", nil, arg{wa.F64, 9223372036854775809}) })
	x378 := instantiateSpecTest(t, "378", "const.454.wasm")
	t.Cleanup(func() { x378.close(t) })
	t.Run("f:1013", func(t *testing.T) { x378.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1}) })
	x379 := instantiateSpecTest(t, "379", "const.455.wasm")
	t.Cleanup(func() { x379.close(t) })
	t.Run("f:1015", func(t *testing.T) { x379.assertReturnInvoke(t, "f", nil, arg{wa.F64, 9223372036854775809}) })
	x380 := instantiateSpecTest(t, "380", "const.456.wasm")
	t.Cleanup(func() { x380.close(t) })
	t.Run("f:1017", func(t *testing.T) { x380.assertReturnInvoke(t, "f", nil, arg{wa.F64, 1}) })
	x381 := instantiateSpecTest(t, "381", "const.457.wasm")
	t.Cleanup(func() { x381.close(t) })
	t.Run("f:1019", func(t *testing.T) { x381.assertReturnInvoke(t, "f", nil, arg{wa.F64, 9223372036854775809}) })
	x382 := instantiateSpecTest(t, "382", "const.458.wasm")
	t.Cleanup(func() { x382.close(t) })
	t.Run("f:1021", func(t *testing.T) { x382.assertReturnInvoke(t, "f", nil, arg{wa.F64, 2}) })
	x383 := instantiateSpecTest(t, "383", "const.459.wasm")
	t.Cleanup(func() { x383.close(t) })
	t.Run("f:1023", func(t *testing.T) { x383.assertReturnInvoke(t, "f", nil, arg{wa.F64, 9223372036854775810}) })
	x384 := instantiateSpecTest(t, "384", "const.460.wasm")
	t.Cleanup(func() { x384.close(t) })
	t.Run("f:1025", func(t *testing.T) { x384.assertReturnInvoke(t, "f", nil, arg{wa.F64, 2}) })
	x385 := instantiateSpecTest(t, "385", "const.461.wasm")
	t.Cleanup(func() { x385.close(t) })
	t.Run("f:1027", func(t *testing.T) { x385.assertReturnInvoke(t, "f", nil, arg{wa.F64, 9223372036854775810}) })
	x386 := instantiateSpecTest(t, "386", "const.462.wasm")
	t.Cleanup(func() { x386.close(t) })
	t.Run("f:1029", func(t *testing.T) { x386.assertReturnInvoke(t, "f", nil, arg{wa.F64, 2}) })
	x387 := instantiateSpecTest(t, "387", "const.463.wasm")
	t.Cleanup(func() { x387.close(t) })
	t.Run("f:1031", func(t *testing.T) { x387.assertReturnInvoke(t, "f", nil, arg{wa.F64, 9223372036854775810}) })
	x388 := instantiateSpecTest(t, "388", "const.464.wasm")
	t.Cleanup(func() { x388.close(t) })
	t.Run("f:1033", func(t *testing.T) { x388.assertReturnInvoke(t, "f", nil, arg{wa.F64, 2}) })
	x389 := instantiateSpecTest(t, "389", "const.465.wasm")
	t.Cleanup(func() { x389.close(t) })
	t.Run("f:1035", func(t *testing.T) { x389.assertReturnInvoke(t, "f", nil, arg{wa.F64, 9223372036854775810}) })
	x390 := instantiateSpecTest(t, "390", "const.466.wasm")
	t.Cleanup(func() { x390.close(t) })
	t.Run("f:1037", func(t *testing.T) { x390.assertReturnInvoke(t, "f", nil, arg{wa.F64, 2}) })
	x391 := instantiateSpecTest(t, "391", "const.467.wasm")
	t.Cleanup(func() { x391.close(t) })
	t.Run("f:1039", func(t *testing.T) { x391.assertReturnInvoke(t, "f", nil, arg{wa.F64, 9223372036854775810}) })
	x392 := instantiateSpecTest(t, "392", "const.468.wasm")
	t.Cleanup(func() { x392.close(t) })
	t.Run("f:1041", func(t *testing.T) { x392.assertReturnInvoke(t, "f", nil, arg{wa.F64, 2}) })
	x393 := instantiateSpecTest(t, "393", "const.469.wasm")
	t.Cleanup(func() { x393.close(t) })
	t.Run("f:1043", func(t *testing.T) { x393.assertReturnInvoke(t, "f", nil, arg{wa.F64, 9223372036854775810}) })
	x394 := instantiateSpecTest(t, "394", "const.470.wasm")
	t.Cleanup(func() { x394.close(t) })
	t.Run("f:1045", func(t *testing.T) { x394.assertReturnInvoke(t, "f", nil, arg{wa.F64, 2}) })
	x395 := instantiateSpecTest(t, "395", "const.471.wasm")
	t.Cleanup(func() { x395.close(t) })
	t.Run("f:1047", func(t *testing.T) { x395.assertReturnInvoke(t, "f", nil, arg{wa.F64, 9223372036854775810}) })
	x396 := instantiateSpecTest(t, "396", "const.472.wasm")
	t.Cleanup(func() { x396.close(t) })
	t.Run("f:1049", func(t *testing.T) { x396.assertReturnInvoke(t, "f", nil, arg{wa.F64, 4503599627370499}) })
	x397 := instantiateSpecTest(t, "397", "const.473.wasm")
	t.Cleanup(func() { x397.close(t) })
	t.Run("f:1051", func(t *testing.T) { x397.assertReturnInvoke(t, "f", nil, arg{wa.F64, 9227875636482146307}) })
	x398 := instantiateSpecTest(t, "398", "const.474.wasm")
	t.Cleanup(func() { x398.close(t) })
	t.Run("f:1055", func(t *testing.T) { x398.assertReturnInvoke(t, "f", nil, arg{wa.F64, 9218868437227405311}) })
	x399 := instantiateSpecTest(t, "399", "const.475.wasm")
	t.Cleanup(func() { x399.close(t) })
	t.Run("f:1057", func(t *testing.T) { x399.assertReturnInvoke(t, "f", nil, arg{wa.F64, 18442240474082181119}) })
	x400 := instantiateSpecTest(t, "400", "const.476.wasm")
	t.Cleanup(func() { x400.close(t) })
	t.Run("f:1059", func(t *testing.T) { x400.assertReturnInvoke(t, "f", nil, arg{wa.F64, 9218868437227405311}) })
	x401 := instantiateSpecTest(t, "401", "const.477.wasm")
	t.Cleanup(func() { x401.close(t) })
	t.Run("f:1061", func(t *testing.T) { x401.assertReturnInvoke(t, "f", nil, arg{wa.F64, 18442240474082181119}) })
}

func Test_conversions(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "conversions.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("i64.extend_i32_s:37", func(t *testing.T) { x0.assertReturnInvoke(t, "i64.extend_i32_s", []arg{{wa.I32, 0}}, arg{wa.I64, 0}) })
	t.Run("i64.extend_i32_s:38", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.extend_i32_s", []arg{{wa.I32, 10000}}, arg{wa.I64, 10000})
	})
	t.Run("i64.extend_i32_s:39", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.extend_i32_s", []arg{{wa.I32, 4294957296}}, arg{wa.I64, 18446744073709541616})
	})
	t.Run("i64.extend_i32_s:40", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.extend_i32_s", []arg{{wa.I32, 4294967295}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64.extend_i32_s:41", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.extend_i32_s", []arg{{wa.I32, 2147483647}}, arg{wa.I64, 2147483647})
	})
	t.Run("i64.extend_i32_s:42", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.extend_i32_s", []arg{{wa.I32, 2147483648}}, arg{wa.I64, 18446744071562067968})
	})
	t.Run("i64.extend_i32_u:44", func(t *testing.T) { x0.assertReturnInvoke(t, "i64.extend_i32_u", []arg{{wa.I32, 0}}, arg{wa.I64, 0}) })
	t.Run("i64.extend_i32_u:45", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.extend_i32_u", []arg{{wa.I32, 10000}}, arg{wa.I64, 10000})
	})
	t.Run("i64.extend_i32_u:46", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.extend_i32_u", []arg{{wa.I32, 4294957296}}, arg{wa.I64, 4294957296})
	})
	t.Run("i64.extend_i32_u:47", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.extend_i32_u", []arg{{wa.I32, 4294967295}}, arg{wa.I64, 4294967295})
	})
	t.Run("i64.extend_i32_u:48", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.extend_i32_u", []arg{{wa.I32, 2147483647}}, arg{wa.I64, 2147483647})
	})
	t.Run("i64.extend_i32_u:49", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.extend_i32_u", []arg{{wa.I32, 2147483648}}, arg{wa.I64, 2147483648})
	})
	t.Run("i32.wrap_i64:51", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.wrap_i64", []arg{{wa.I64, 18446744073709551615}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.wrap_i64:52", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.wrap_i64", []arg{{wa.I64, 18446744073709451616}}, arg{wa.I32, 4294867296})
	})
	t.Run("i32.wrap_i64:53", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.wrap_i64", []arg{{wa.I64, 2147483648}}, arg{wa.I32, 2147483648})
	})
	t.Run("i32.wrap_i64:54", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.wrap_i64", []arg{{wa.I64, 18446744071562067967}}, arg{wa.I32, 2147483647})
	})
	t.Run("i32.wrap_i64:55", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.wrap_i64", []arg{{wa.I64, 18446744069414584320}}, arg{wa.I32, 0})
	})
	t.Run("i32.wrap_i64:56", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.wrap_i64", []arg{{wa.I64, 18446744069414584319}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.wrap_i64:57", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.wrap_i64", []arg{{wa.I64, 18446744069414584321}}, arg{wa.I32, 1})
	})
	t.Run("i32.wrap_i64:58", func(t *testing.T) { x0.assertReturnInvoke(t, "i32.wrap_i64", []arg{{wa.I64, 0}}, arg{wa.I32, 0}) })
	t.Run("i32.wrap_i64:59", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.wrap_i64", []arg{{wa.I64, 1311768467463790320}}, arg{wa.I32, 2596069104})
	})
	t.Run("i32.wrap_i64:60", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.wrap_i64", []arg{{wa.I64, 4294967295}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.wrap_i64:61", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.wrap_i64", []arg{{wa.I64, 4294967296}}, arg{wa.I32, 0})
	})
	t.Run("i32.wrap_i64:62", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.wrap_i64", []arg{{wa.I64, 4294967297}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_f32_s:64", func(t *testing.T) { x0.assertReturnInvoke(t, "i32.trunc_f32_s", []arg{{wa.F32, 0}}, arg{wa.I32, 0}) })
	t.Run("i32.trunc_f32_s:65", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f32_s", []arg{{wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_f32_s:66", func(t *testing.T) { x0.assertReturnInvoke(t, "i32.trunc_f32_s", []arg{{wa.F32, 1}}, arg{wa.I32, 0}) })
	t.Run("i32.trunc_f32_s:67", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f32_s", []arg{{wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_f32_s:68", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f32_s", []arg{{wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_f32_s:69", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f32_s", []arg{{wa.F32, 1066192077}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_f32_s:70", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f32_s", []arg{{wa.F32, 1069547520}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_f32_s:71", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f32_s", []arg{{wa.F32, 3212836864}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.trunc_f32_s:72", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f32_s", []arg{{wa.F32, 3213675725}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.trunc_f32_s:73", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f32_s", []arg{{wa.F32, 3217031168}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.trunc_f32_s:74", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f32_s", []arg{{wa.F32, 3220386611}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.trunc_f32_s:75", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f32_s", []arg{{wa.F32, 3221225472}}, arg{wa.I32, 4294967294})
	})
	t.Run("i32.trunc_f32_s:76", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f32_s", []arg{{wa.F32, 1325400063}}, arg{wa.I32, 2147483520})
	})
	t.Run("i32.trunc_f32_s:77", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f32_s", []arg{{wa.F32, 3472883712}}, arg{wa.I32, 2147483648})
	})
	t.Run("i32.trunc_f32_s:78", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f32_s", []arg{{wa.F32, 1325400064}}, arg{Type: wa.I32}, "integer overflow")
	})
	t.Run("i32.trunc_f32_s:79", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f32_s", []arg{{wa.F32, 3472883713}}, arg{Type: wa.I32}, "integer overflow")
	})
	t.Run("i32.trunc_f32_s:80", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f32_s", []arg{{wa.F32, 2139095040}}, arg{Type: wa.I32}, "integer overflow")
	})
	t.Run("i32.trunc_f32_s:81", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f32_s", []arg{{wa.F32, 4286578688}}, arg{Type: wa.I32}, "integer overflow")
	})
	t.Run("i32.trunc_f32_s:82", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f32_s", []arg{{wa.F32, 2143289344}}, arg{Type: wa.I32}, "invalid conversion to integer")
	})
	t.Run("i32.trunc_f32_s:83", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f32_s", []arg{{wa.F32, 2141192192}}, arg{Type: wa.I32}, "invalid conversion to integer")
	})
	t.Run("i32.trunc_f32_s:84", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f32_s", []arg{{wa.F32, 4290772992}}, arg{Type: wa.I32}, "invalid conversion to integer")
	})
	t.Run("i32.trunc_f32_s:85", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f32_s", []arg{{wa.F32, 4288675840}}, arg{Type: wa.I32}, "invalid conversion to integer")
	})
	t.Run("i32.trunc_f32_u:87", func(t *testing.T) { x0.assertReturnInvoke(t, "i32.trunc_f32_u", []arg{{wa.F32, 0}}, arg{wa.I32, 0}) })
	t.Run("i32.trunc_f32_u:88", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f32_u", []arg{{wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_f32_u:89", func(t *testing.T) { x0.assertReturnInvoke(t, "i32.trunc_f32_u", []arg{{wa.F32, 1}}, arg{wa.I32, 0}) })
	t.Run("i32.trunc_f32_u:90", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f32_u", []arg{{wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_f32_u:91", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f32_u", []arg{{wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_f32_u:92", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f32_u", []arg{{wa.F32, 1066192077}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_f32_u:93", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f32_u", []arg{{wa.F32, 1069547520}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_f32_u:94", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f32_u", []arg{{wa.F32, 1072902963}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_f32_u:95", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f32_u", []arg{{wa.F32, 1073741824}}, arg{wa.I32, 2})
	})
	t.Run("i32.trunc_f32_u:96", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f32_u", []arg{{wa.F32, 1325400064}}, arg{wa.I32, 2147483648})
	})
	t.Run("i32.trunc_f32_u:97", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f32_u", []arg{{wa.F32, 1333788671}}, arg{wa.I32, 4294967040})
	})
	t.Run("i32.trunc_f32_u:98", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f32_u", []arg{{wa.F32, 3211159142}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_f32_u:99", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f32_u", []arg{{wa.F32, 3212836863}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_f32_u:100", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f32_u", []arg{{wa.F32, 1333788672}}, arg{Type: wa.I32}, "integer overflow")
	})
	t.Run("i32.trunc_f32_u:101", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f32_u", []arg{{wa.F32, 3212836864}}, arg{Type: wa.I32}, "integer overflow")
	})
	t.Run("i32.trunc_f32_u:102", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f32_u", []arg{{wa.F32, 2139095040}}, arg{Type: wa.I32}, "integer overflow")
	})
	t.Run("i32.trunc_f32_u:103", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f32_u", []arg{{wa.F32, 4286578688}}, arg{Type: wa.I32}, "integer overflow")
	})
	t.Run("i32.trunc_f32_u:104", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f32_u", []arg{{wa.F32, 2143289344}}, arg{Type: wa.I32}, "invalid conversion to integer")
	})
	t.Run("i32.trunc_f32_u:105", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f32_u", []arg{{wa.F32, 2141192192}}, arg{Type: wa.I32}, "invalid conversion to integer")
	})
	t.Run("i32.trunc_f32_u:106", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f32_u", []arg{{wa.F32, 4290772992}}, arg{Type: wa.I32}, "invalid conversion to integer")
	})
	t.Run("i32.trunc_f32_u:107", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f32_u", []arg{{wa.F32, 4288675840}}, arg{Type: wa.I32}, "invalid conversion to integer")
	})
	t.Run("i32.trunc_f64_s:109", func(t *testing.T) { x0.assertReturnInvoke(t, "i32.trunc_f64_s", []arg{{wa.F64, 0}}, arg{wa.I32, 0}) })
	t.Run("i32.trunc_f64_s:110", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f64_s", []arg{{wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_f64_s:111", func(t *testing.T) { x0.assertReturnInvoke(t, "i32.trunc_f64_s", []arg{{wa.F64, 1}}, arg{wa.I32, 0}) })
	t.Run("i32.trunc_f64_s:112", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f64_s", []arg{{wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_f64_s:113", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f64_s", []arg{{wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_f64_s:114", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f64_s", []arg{{wa.F64, 4607632778762754458}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_f64_s:115", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f64_s", []arg{{wa.F64, 4609434218613702656}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_f64_s:116", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f64_s", []arg{{wa.F64, 13830554455654793216}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.trunc_f64_s:117", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f64_s", []arg{{wa.F64, 13831004815617530266}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.trunc_f64_s:118", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f64_s", []arg{{wa.F64, 13832806255468478464}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.trunc_f64_s:119", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f64_s", []arg{{wa.F64, 13834607695319426662}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.trunc_f64_s:120", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f64_s", []arg{{wa.F64, 13835058055282163712}}, arg{wa.I32, 4294967294})
	})
	t.Run("i32.trunc_f64_s:121", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f64_s", []arg{{wa.F64, 4746794007244308480}}, arg{wa.I32, 2147483647})
	})
	t.Run("i32.trunc_f64_s:122", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f64_s", []arg{{wa.F64, 13970166044103278592}}, arg{wa.I32, 2147483648})
	})
	t.Run("i32.trunc_f64_s:123", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f64_s", []arg{{wa.F64, 13970166044105166029}}, arg{wa.I32, 2147483648})
	})
	t.Run("i32.trunc_f64_s:124", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f64_s", []arg{{wa.F64, 4746794007248083354}}, arg{wa.I32, 2147483647})
	})
	t.Run("i32.trunc_f64_s:125", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f64_s", []arg{{wa.F64, 4746794007248502784}}, arg{Type: wa.I32}, "integer overflow")
	})
	t.Run("i32.trunc_f64_s:126", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f64_s", []arg{{wa.F64, 13970166044105375744}}, arg{Type: wa.I32}, "integer overflow")
	})
	t.Run("i32.trunc_f64_s:127", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f64_s", []arg{{wa.F64, 9218868437227405312}}, arg{Type: wa.I32}, "integer overflow")
	})
	t.Run("i32.trunc_f64_s:128", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f64_s", []arg{{wa.F64, 18442240474082181120}}, arg{Type: wa.I32}, "integer overflow")
	})
	t.Run("i32.trunc_f64_s:129", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f64_s", []arg{{wa.F64, 9221120237041090560}}, arg{Type: wa.I32}, "invalid conversion to integer")
	})
	t.Run("i32.trunc_f64_s:130", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f64_s", []arg{{wa.F64, 9219994337134247936}}, arg{Type: wa.I32}, "invalid conversion to integer")
	})
	t.Run("i32.trunc_f64_s:131", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f64_s", []arg{{wa.F64, 18444492273895866368}}, arg{Type: wa.I32}, "invalid conversion to integer")
	})
	t.Run("i32.trunc_f64_s:132", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f64_s", []arg{{wa.F64, 18443366373989023744}}, arg{Type: wa.I32}, "invalid conversion to integer")
	})
	t.Run("i32.trunc_f64_u:134", func(t *testing.T) { x0.assertReturnInvoke(t, "i32.trunc_f64_u", []arg{{wa.F64, 0}}, arg{wa.I32, 0}) })
	t.Run("i32.trunc_f64_u:135", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f64_u", []arg{{wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_f64_u:136", func(t *testing.T) { x0.assertReturnInvoke(t, "i32.trunc_f64_u", []arg{{wa.F64, 1}}, arg{wa.I32, 0}) })
	t.Run("i32.trunc_f64_u:137", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f64_u", []arg{{wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_f64_u:138", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f64_u", []arg{{wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_f64_u:139", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f64_u", []arg{{wa.F64, 4607632778762754458}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_f64_u:140", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f64_u", []arg{{wa.F64, 4609434218613702656}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_f64_u:141", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f64_u", []arg{{wa.F64, 4611235658464650854}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_f64_u:142", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f64_u", []arg{{wa.F64, 4611686018427387904}}, arg{wa.I32, 2})
	})
	t.Run("i32.trunc_f64_u:143", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f64_u", []arg{{wa.F64, 4746794007248502784}}, arg{wa.I32, 2147483648})
	})
	t.Run("i32.trunc_f64_u:144", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f64_u", []arg{{wa.F64, 4751297606873776128}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.trunc_f64_u:145", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f64_u", []arg{{wa.F64, 13829653735729319117}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_f64_u:146", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f64_u", []arg{{wa.F64, 13830554455654793215}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_f64_u:147", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f64_u", []arg{{wa.F64, 4726483295884279808}}, arg{wa.I32, 100000000})
	})
	t.Run("i32.trunc_f64_u:148", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f64_u", []arg{{wa.F64, 13829653735729319117}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_f64_u:149", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_f64_u", []arg{{wa.F64, 4751297606875663565}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.trunc_f64_u:150", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f64_u", []arg{{wa.F64, 4751297606875873280}}, arg{Type: wa.I32}, "integer overflow")
	})
	t.Run("i32.trunc_f64_u:151", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f64_u", []arg{{wa.F64, 13830554455654793216}}, arg{Type: wa.I32}, "integer overflow")
	})
	t.Run("i32.trunc_f64_u:152", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f64_u", []arg{{wa.F64, 4846369599423283200}}, arg{Type: wa.I32}, "integer overflow")
	})
	t.Run("i32.trunc_f64_u:153", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f64_u", []arg{{wa.F64, 5055640609639927018}}, arg{Type: wa.I32}, "integer overflow")
	})
	t.Run("i32.trunc_f64_u:154", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f64_u", []arg{{wa.F64, 4890909195324358656}}, arg{Type: wa.I32}, "integer overflow")
	})
	t.Run("i32.trunc_f64_u:155", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f64_u", []arg{{wa.F64, 9218868437227405312}}, arg{Type: wa.I32}, "integer overflow")
	})
	t.Run("i32.trunc_f64_u:156", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f64_u", []arg{{wa.F64, 18442240474082181120}}, arg{Type: wa.I32}, "integer overflow")
	})
	t.Run("i32.trunc_f64_u:157", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f64_u", []arg{{wa.F64, 9221120237041090560}}, arg{Type: wa.I32}, "invalid conversion to integer")
	})
	t.Run("i32.trunc_f64_u:158", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f64_u", []arg{{wa.F64, 9219994337134247936}}, arg{Type: wa.I32}, "invalid conversion to integer")
	})
	t.Run("i32.trunc_f64_u:159", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f64_u", []arg{{wa.F64, 18444492273895866368}}, arg{Type: wa.I32}, "invalid conversion to integer")
	})
	t.Run("i32.trunc_f64_u:160", func(t *testing.T) {
		x0.assertTrap(t, "i32.trunc_f64_u", []arg{{wa.F64, 18443366373989023744}}, arg{Type: wa.I32}, "invalid conversion to integer")
	})
	t.Run("i64.trunc_f32_s:162", func(t *testing.T) { x0.assertReturnInvoke(t, "i64.trunc_f32_s", []arg{{wa.F32, 0}}, arg{wa.I64, 0}) })
	t.Run("i64.trunc_f32_s:163", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f32_s", []arg{{wa.F32, 2147483648}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_f32_s:164", func(t *testing.T) { x0.assertReturnInvoke(t, "i64.trunc_f32_s", []arg{{wa.F32, 1}}, arg{wa.I64, 0}) })
	t.Run("i64.trunc_f32_s:165", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f32_s", []arg{{wa.F32, 2147483649}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_f32_s:166", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f32_s", []arg{{wa.F32, 1065353216}}, arg{wa.I64, 1})
	})
	t.Run("i64.trunc_f32_s:167", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f32_s", []arg{{wa.F32, 1066192077}}, arg{wa.I64, 1})
	})
	t.Run("i64.trunc_f32_s:168", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f32_s", []arg{{wa.F32, 1069547520}}, arg{wa.I64, 1})
	})
	t.Run("i64.trunc_f32_s:169", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f32_s", []arg{{wa.F32, 3212836864}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64.trunc_f32_s:170", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f32_s", []arg{{wa.F32, 3213675725}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64.trunc_f32_s:171", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f32_s", []arg{{wa.F32, 3217031168}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64.trunc_f32_s:172", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f32_s", []arg{{wa.F32, 3220386611}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64.trunc_f32_s:173", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f32_s", []arg{{wa.F32, 3221225472}}, arg{wa.I64, 18446744073709551614})
	})
	t.Run("i64.trunc_f32_s:174", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f32_s", []arg{{wa.F32, 1333788672}}, arg{wa.I64, 4294967296})
	})
	t.Run("i64.trunc_f32_s:175", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f32_s", []arg{{wa.F32, 3481272320}}, arg{wa.I64, 18446744069414584320})
	})
	t.Run("i64.trunc_f32_s:176", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f32_s", []arg{{wa.F32, 1593835519}}, arg{wa.I64, 9223371487098961920})
	})
	t.Run("i64.trunc_f32_s:177", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f32_s", []arg{{wa.F32, 3741319168}}, arg{wa.I64, 9223372036854775808})
	})
	t.Run("i64.trunc_f32_s:178", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f32_s", []arg{{wa.F32, 1593835520}}, arg{Type: wa.I64}, "integer overflow")
	})
	t.Run("i64.trunc_f32_s:179", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f32_s", []arg{{wa.F32, 3741319169}}, arg{Type: wa.I64}, "integer overflow")
	})
	t.Run("i64.trunc_f32_s:180", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f32_s", []arg{{wa.F32, 2139095040}}, arg{Type: wa.I64}, "integer overflow")
	})
	t.Run("i64.trunc_f32_s:181", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f32_s", []arg{{wa.F32, 4286578688}}, arg{Type: wa.I64}, "integer overflow")
	})
	t.Run("i64.trunc_f32_s:182", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f32_s", []arg{{wa.F32, 2143289344}}, arg{Type: wa.I64}, "invalid conversion to integer")
	})
	t.Run("i64.trunc_f32_s:183", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f32_s", []arg{{wa.F32, 2141192192}}, arg{Type: wa.I64}, "invalid conversion to integer")
	})
	t.Run("i64.trunc_f32_s:184", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f32_s", []arg{{wa.F32, 4290772992}}, arg{Type: wa.I64}, "invalid conversion to integer")
	})
	t.Run("i64.trunc_f32_s:185", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f32_s", []arg{{wa.F32, 4288675840}}, arg{Type: wa.I64}, "invalid conversion to integer")
	})
	t.Run("i64.trunc_f32_u:187", func(t *testing.T) { x0.assertReturnInvoke(t, "i64.trunc_f32_u", []arg{{wa.F32, 0}}, arg{wa.I64, 0}) })
	t.Run("i64.trunc_f32_u:188", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f32_u", []arg{{wa.F32, 2147483648}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_f32_u:189", func(t *testing.T) { x0.assertReturnInvoke(t, "i64.trunc_f32_u", []arg{{wa.F32, 1}}, arg{wa.I64, 0}) })
	t.Run("i64.trunc_f32_u:190", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f32_u", []arg{{wa.F32, 2147483649}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_f32_u:191", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f32_u", []arg{{wa.F32, 1065353216}}, arg{wa.I64, 1})
	})
	t.Run("i64.trunc_f32_u:192", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f32_u", []arg{{wa.F32, 1066192077}}, arg{wa.I64, 1})
	})
	t.Run("i64.trunc_f32_u:193", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f32_u", []arg{{wa.F32, 1069547520}}, arg{wa.I64, 1})
	})
	t.Run("i64.trunc_f32_u:194", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f32_u", []arg{{wa.F32, 1333788672}}, arg{wa.I64, 4294967296})
	})
	t.Run("i64.trunc_f32_u:195", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f32_u", []arg{{wa.F32, 1602224127}}, arg{wa.I64, 18446742974197923840})
	})
	t.Run("i64.trunc_f32_u:196", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f32_u", []arg{{wa.F32, 3211159142}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_f32_u:197", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f32_u", []arg{{wa.F32, 3212836863}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_f32_u:198", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f32_u", []arg{{wa.F32, 1602224128}}, arg{Type: wa.I64}, "integer overflow")
	})
	t.Run("i64.trunc_f32_u:199", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f32_u", []arg{{wa.F32, 3212836864}}, arg{Type: wa.I64}, "integer overflow")
	})
	t.Run("i64.trunc_f32_u:200", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f32_u", []arg{{wa.F32, 2139095040}}, arg{Type: wa.I64}, "integer overflow")
	})
	t.Run("i64.trunc_f32_u:201", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f32_u", []arg{{wa.F32, 4286578688}}, arg{Type: wa.I64}, "integer overflow")
	})
	t.Run("i64.trunc_f32_u:202", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f32_u", []arg{{wa.F32, 2143289344}}, arg{Type: wa.I64}, "invalid conversion to integer")
	})
	t.Run("i64.trunc_f32_u:203", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f32_u", []arg{{wa.F32, 2141192192}}, arg{Type: wa.I64}, "invalid conversion to integer")
	})
	t.Run("i64.trunc_f32_u:204", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f32_u", []arg{{wa.F32, 4290772992}}, arg{Type: wa.I64}, "invalid conversion to integer")
	})
	t.Run("i64.trunc_f32_u:205", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f32_u", []arg{{wa.F32, 4288675840}}, arg{Type: wa.I64}, "invalid conversion to integer")
	})
	t.Run("i64.trunc_f64_s:207", func(t *testing.T) { x0.assertReturnInvoke(t, "i64.trunc_f64_s", []arg{{wa.F64, 0}}, arg{wa.I64, 0}) })
	t.Run("i64.trunc_f64_s:208", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f64_s", []arg{{wa.F64, 9223372036854775808}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_f64_s:209", func(t *testing.T) { x0.assertReturnInvoke(t, "i64.trunc_f64_s", []arg{{wa.F64, 1}}, arg{wa.I64, 0}) })
	t.Run("i64.trunc_f64_s:210", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f64_s", []arg{{wa.F64, 9223372036854775809}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_f64_s:211", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f64_s", []arg{{wa.F64, 4607182418800017408}}, arg{wa.I64, 1})
	})
	t.Run("i64.trunc_f64_s:212", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f64_s", []arg{{wa.F64, 4607632778762754458}}, arg{wa.I64, 1})
	})
	t.Run("i64.trunc_f64_s:213", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f64_s", []arg{{wa.F64, 4609434218613702656}}, arg{wa.I64, 1})
	})
	t.Run("i64.trunc_f64_s:214", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f64_s", []arg{{wa.F64, 13830554455654793216}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64.trunc_f64_s:215", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f64_s", []arg{{wa.F64, 13831004815617530266}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64.trunc_f64_s:216", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f64_s", []arg{{wa.F64, 13832806255468478464}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64.trunc_f64_s:217", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f64_s", []arg{{wa.F64, 13834607695319426662}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64.trunc_f64_s:218", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f64_s", []arg{{wa.F64, 13835058055282163712}}, arg{wa.I64, 18446744073709551614})
	})
	t.Run("i64.trunc_f64_s:219", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f64_s", []arg{{wa.F64, 4751297606875873280}}, arg{wa.I64, 4294967296})
	})
	t.Run("i64.trunc_f64_s:220", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f64_s", []arg{{wa.F64, 13974669643730649088}}, arg{wa.I64, 18446744069414584320})
	})
	t.Run("i64.trunc_f64_s:221", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f64_s", []arg{{wa.F64, 4890909195324358655}}, arg{wa.I64, 9223372036854774784})
	})
	t.Run("i64.trunc_f64_s:222", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f64_s", []arg{{wa.F64, 14114281232179134464}}, arg{wa.I64, 9223372036854775808})
	})
	t.Run("i64.trunc_f64_s:223", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f64_s", []arg{{wa.F64, 4890909195324358656}}, arg{Type: wa.I64}, "integer overflow")
	})
	t.Run("i64.trunc_f64_s:224", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f64_s", []arg{{wa.F64, 14114281232179134465}}, arg{Type: wa.I64}, "integer overflow")
	})
	t.Run("i64.trunc_f64_s:225", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f64_s", []arg{{wa.F64, 9218868437227405312}}, arg{Type: wa.I64}, "integer overflow")
	})
	t.Run("i64.trunc_f64_s:226", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f64_s", []arg{{wa.F64, 18442240474082181120}}, arg{Type: wa.I64}, "integer overflow")
	})
	t.Run("i64.trunc_f64_s:227", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f64_s", []arg{{wa.F64, 9221120237041090560}}, arg{Type: wa.I64}, "invalid conversion to integer")
	})
	t.Run("i64.trunc_f64_s:228", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f64_s", []arg{{wa.F64, 9219994337134247936}}, arg{Type: wa.I64}, "invalid conversion to integer")
	})
	t.Run("i64.trunc_f64_s:229", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f64_s", []arg{{wa.F64, 18444492273895866368}}, arg{Type: wa.I64}, "invalid conversion to integer")
	})
	t.Run("i64.trunc_f64_s:230", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f64_s", []arg{{wa.F64, 18443366373989023744}}, arg{Type: wa.I64}, "invalid conversion to integer")
	})
	t.Run("i64.trunc_f64_u:232", func(t *testing.T) { x0.assertReturnInvoke(t, "i64.trunc_f64_u", []arg{{wa.F64, 0}}, arg{wa.I64, 0}) })
	t.Run("i64.trunc_f64_u:233", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f64_u", []arg{{wa.F64, 9223372036854775808}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_f64_u:234", func(t *testing.T) { x0.assertReturnInvoke(t, "i64.trunc_f64_u", []arg{{wa.F64, 1}}, arg{wa.I64, 0}) })
	t.Run("i64.trunc_f64_u:235", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f64_u", []arg{{wa.F64, 9223372036854775809}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_f64_u:236", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f64_u", []arg{{wa.F64, 4607182418800017408}}, arg{wa.I64, 1})
	})
	t.Run("i64.trunc_f64_u:237", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f64_u", []arg{{wa.F64, 4607632778762754458}}, arg{wa.I64, 1})
	})
	t.Run("i64.trunc_f64_u:238", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f64_u", []arg{{wa.F64, 4609434218613702656}}, arg{wa.I64, 1})
	})
	t.Run("i64.trunc_f64_u:239", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f64_u", []arg{{wa.F64, 4751297606873776128}}, arg{wa.I64, 4294967295})
	})
	t.Run("i64.trunc_f64_u:240", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f64_u", []arg{{wa.F64, 4751297606875873280}}, arg{wa.I64, 4294967296})
	})
	t.Run("i64.trunc_f64_u:241", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f64_u", []arg{{wa.F64, 4895412794951729151}}, arg{wa.I64, 18446744073709549568})
	})
	t.Run("i64.trunc_f64_u:242", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f64_u", []arg{{wa.F64, 13829653735729319117}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_f64_u:243", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f64_u", []arg{{wa.F64, 13830554455654793215}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_f64_u:244", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f64_u", []arg{{wa.F64, 4726483295884279808}}, arg{wa.I64, 100000000})
	})
	t.Run("i64.trunc_f64_u:245", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f64_u", []arg{{wa.F64, 4846369599423283200}}, arg{wa.I64, 10000000000000000})
	})
	t.Run("i64.trunc_f64_u:246", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_f64_u", []arg{{wa.F64, 4890909195324358656}}, arg{wa.I64, 9223372036854775808})
	})
	t.Run("i64.trunc_f64_u:247", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f64_u", []arg{{wa.F64, 4895412794951729152}}, arg{Type: wa.I64}, "integer overflow")
	})
	t.Run("i64.trunc_f64_u:248", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f64_u", []arg{{wa.F64, 13830554455654793216}}, arg{Type: wa.I64}, "integer overflow")
	})
	t.Run("i64.trunc_f64_u:249", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f64_u", []arg{{wa.F64, 9218868437227405312}}, arg{Type: wa.I64}, "integer overflow")
	})
	t.Run("i64.trunc_f64_u:250", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f64_u", []arg{{wa.F64, 18442240474082181120}}, arg{Type: wa.I64}, "integer overflow")
	})
	t.Run("i64.trunc_f64_u:251", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f64_u", []arg{{wa.F64, 9221120237041090560}}, arg{Type: wa.I64}, "invalid conversion to integer")
	})
	t.Run("i64.trunc_f64_u:252", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f64_u", []arg{{wa.F64, 9219994337134247936}}, arg{Type: wa.I64}, "invalid conversion to integer")
	})
	t.Run("i64.trunc_f64_u:253", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f64_u", []arg{{wa.F64, 18444492273895866368}}, arg{Type: wa.I64}, "invalid conversion to integer")
	})
	t.Run("i64.trunc_f64_u:254", func(t *testing.T) {
		x0.assertTrap(t, "i64.trunc_f64_u", []arg{{wa.F64, 18443366373989023744}}, arg{Type: wa.I64}, "invalid conversion to integer")
	})
	t.Run("f32.convert_i32_s:256", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i32_s", []arg{{wa.I32, 1}}, arg{wa.F32, 1065353216})
	})
	t.Run("f32.convert_i32_s:257", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i32_s", []arg{{wa.I32, 4294967295}}, arg{wa.F32, 3212836864})
	})
	t.Run("f32.convert_i32_s:258", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.convert_i32_s", []arg{{wa.I32, 0}}, arg{wa.F32, 0}) })
	t.Run("f32.convert_i32_s:259", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i32_s", []arg{{wa.I32, 2147483647}}, arg{wa.F32, 1325400064})
	})
	t.Run("f32.convert_i32_s:260", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i32_s", []arg{{wa.I32, 2147483648}}, arg{wa.F32, 3472883712})
	})
	t.Run("f32.convert_i32_s:261", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i32_s", []arg{{wa.I32, 1234567890}}, arg{wa.F32, 1318267910})
	})
	t.Run("i32.trunc_sat_f32_s:265", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_s", []arg{{wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f32_s:266", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_s", []arg{{wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f32_s:267", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_s", []arg{{wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f32_s:268", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_s", []arg{{wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f32_s:269", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_s", []arg{{wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_sat_f32_s:270", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_s", []arg{{wa.F32, 1066192077}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_sat_f32_s:271", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_s", []arg{{wa.F32, 1069547520}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_sat_f32_s:272", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_s", []arg{{wa.F32, 3212836864}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.trunc_sat_f32_s:273", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_s", []arg{{wa.F32, 3213675725}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.trunc_sat_f32_s:274", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_s", []arg{{wa.F32, 3217031168}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.trunc_sat_f32_s:275", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_s", []arg{{wa.F32, 3220386611}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.trunc_sat_f32_s:276", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_s", []arg{{wa.F32, 3221225472}}, arg{wa.I32, 4294967294})
	})
	t.Run("i32.trunc_sat_f32_s:277", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_s", []arg{{wa.F32, 1325400063}}, arg{wa.I32, 2147483520})
	})
	t.Run("i32.trunc_sat_f32_s:278", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_s", []arg{{wa.F32, 3472883712}}, arg{wa.I32, 2147483648})
	})
	t.Run("i32.trunc_sat_f32_s:279", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_s", []arg{{wa.F32, 1325400064}}, arg{wa.I32, 2147483647})
	})
	t.Run("i32.trunc_sat_f32_s:280", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_s", []arg{{wa.F32, 3472883713}}, arg{wa.I32, 2147483648})
	})
	t.Run("i32.trunc_sat_f32_s:281", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_s", []arg{{wa.F32, 2139095040}}, arg{wa.I32, 2147483647})
	})
	t.Run("i32.trunc_sat_f32_s:282", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_s", []arg{{wa.F32, 4286578688}}, arg{wa.I32, 2147483648})
	})
	t.Run("i32.trunc_sat_f32_s:283", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_s", []arg{{wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f32_s:284", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_s", []arg{{wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f32_s:285", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_s", []arg{{wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f32_s:286", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_s", []arg{{wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f32_u:288", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_u", []arg{{wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f32_u:289", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_u", []arg{{wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f32_u:290", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_u", []arg{{wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f32_u:291", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_u", []arg{{wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f32_u:292", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_u", []arg{{wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_sat_f32_u:293", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_u", []arg{{wa.F32, 1066192077}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_sat_f32_u:294", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_u", []arg{{wa.F32, 1069547520}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_sat_f32_u:295", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_u", []arg{{wa.F32, 1072902963}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_sat_f32_u:296", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_u", []arg{{wa.F32, 1073741824}}, arg{wa.I32, 2})
	})
	t.Run("i32.trunc_sat_f32_u:297", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_u", []arg{{wa.F32, 1325400064}}, arg{wa.I32, 2147483648})
	})
	t.Run("i32.trunc_sat_f32_u:298", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_u", []arg{{wa.F32, 1333788671}}, arg{wa.I32, 4294967040})
	})
	t.Run("i32.trunc_sat_f32_u:299", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_u", []arg{{wa.F32, 3211159142}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f32_u:300", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_u", []arg{{wa.F32, 3212836863}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f32_u:301", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_u", []arg{{wa.F32, 1333788672}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.trunc_sat_f32_u:302", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_u", []arg{{wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f32_u:303", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_u", []arg{{wa.F32, 2139095040}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.trunc_sat_f32_u:304", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_u", []arg{{wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f32_u:305", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_u", []arg{{wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f32_u:306", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_u", []arg{{wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f32_u:307", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_u", []arg{{wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f32_u:308", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f32_u", []arg{{wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f64_s:310", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_s", []arg{{wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f64_s:311", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_s", []arg{{wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f64_s:312", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_s", []arg{{wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f64_s:313", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_s", []arg{{wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f64_s:314", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_s", []arg{{wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_sat_f64_s:315", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_s", []arg{{wa.F64, 4607632778762754458}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_sat_f64_s:316", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_s", []arg{{wa.F64, 4609434218613702656}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_sat_f64_s:317", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_s", []arg{{wa.F64, 13830554455654793216}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.trunc_sat_f64_s:318", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_s", []arg{{wa.F64, 13831004815617530266}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.trunc_sat_f64_s:319", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_s", []arg{{wa.F64, 13832806255468478464}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.trunc_sat_f64_s:320", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_s", []arg{{wa.F64, 13834607695319426662}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.trunc_sat_f64_s:321", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_s", []arg{{wa.F64, 13835058055282163712}}, arg{wa.I32, 4294967294})
	})
	t.Run("i32.trunc_sat_f64_s:322", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_s", []arg{{wa.F64, 4746794007244308480}}, arg{wa.I32, 2147483647})
	})
	t.Run("i32.trunc_sat_f64_s:323", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_s", []arg{{wa.F64, 13970166044103278592}}, arg{wa.I32, 2147483648})
	})
	t.Run("i32.trunc_sat_f64_s:324", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_s", []arg{{wa.F64, 4746794007248502784}}, arg{wa.I32, 2147483647})
	})
	t.Run("i32.trunc_sat_f64_s:325", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_s", []arg{{wa.F64, 13970166044105375744}}, arg{wa.I32, 2147483648})
	})
	t.Run("i32.trunc_sat_f64_s:326", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_s", []arg{{wa.F64, 9218868437227405312}}, arg{wa.I32, 2147483647})
	})
	t.Run("i32.trunc_sat_f64_s:327", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_s", []arg{{wa.F64, 18442240474082181120}}, arg{wa.I32, 2147483648})
	})
	t.Run("i32.trunc_sat_f64_s:328", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_s", []arg{{wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f64_s:329", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_s", []arg{{wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f64_s:330", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_s", []arg{{wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f64_s:331", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_s", []arg{{wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f64_u:333", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_u", []arg{{wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f64_u:334", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_u", []arg{{wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f64_u:335", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_u", []arg{{wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f64_u:336", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_u", []arg{{wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f64_u:337", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_u", []arg{{wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_sat_f64_u:338", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_u", []arg{{wa.F64, 4607632778762754458}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_sat_f64_u:339", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_u", []arg{{wa.F64, 4609434218613702656}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_sat_f64_u:340", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_u", []arg{{wa.F64, 4611235658464650854}}, arg{wa.I32, 1})
	})
	t.Run("i32.trunc_sat_f64_u:341", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_u", []arg{{wa.F64, 4611686018427387904}}, arg{wa.I32, 2})
	})
	t.Run("i32.trunc_sat_f64_u:342", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_u", []arg{{wa.F64, 4746794007248502784}}, arg{wa.I32, 2147483648})
	})
	t.Run("i32.trunc_sat_f64_u:343", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_u", []arg{{wa.F64, 4751297606873776128}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.trunc_sat_f64_u:344", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_u", []arg{{wa.F64, 13829653735729319117}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f64_u:345", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_u", []arg{{wa.F64, 13830554455654793215}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f64_u:346", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_u", []arg{{wa.F64, 4726483295884279808}}, arg{wa.I32, 100000000})
	})
	t.Run("i32.trunc_sat_f64_u:347", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_u", []arg{{wa.F64, 4751297606875873280}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.trunc_sat_f64_u:348", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_u", []arg{{wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f64_u:349", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_u", []arg{{wa.F64, 4846369599423283200}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.trunc_sat_f64_u:350", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_u", []arg{{wa.F64, 5055640609639927018}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.trunc_sat_f64_u:351", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_u", []arg{{wa.F64, 4890909195324358656}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.trunc_sat_f64_u:352", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_u", []arg{{wa.F64, 9218868437227405312}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.trunc_sat_f64_u:353", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_u", []arg{{wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f64_u:354", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_u", []arg{{wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f64_u:355", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_u", []arg{{wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f64_u:356", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_u", []arg{{wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("i32.trunc_sat_f64_u:357", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.trunc_sat_f64_u", []arg{{wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("i64.trunc_sat_f32_s:359", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_s", []arg{{wa.F32, 0}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f32_s:360", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_s", []arg{{wa.F32, 2147483648}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f32_s:361", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_s", []arg{{wa.F32, 1}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f32_s:362", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_s", []arg{{wa.F32, 2147483649}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f32_s:363", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_s", []arg{{wa.F32, 1065353216}}, arg{wa.I64, 1})
	})
	t.Run("i64.trunc_sat_f32_s:364", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_s", []arg{{wa.F32, 1066192077}}, arg{wa.I64, 1})
	})
	t.Run("i64.trunc_sat_f32_s:365", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_s", []arg{{wa.F32, 1069547520}}, arg{wa.I64, 1})
	})
	t.Run("i64.trunc_sat_f32_s:366", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_s", []arg{{wa.F32, 3212836864}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64.trunc_sat_f32_s:367", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_s", []arg{{wa.F32, 3213675725}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64.trunc_sat_f32_s:368", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_s", []arg{{wa.F32, 3217031168}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64.trunc_sat_f32_s:369", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_s", []arg{{wa.F32, 3220386611}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64.trunc_sat_f32_s:370", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_s", []arg{{wa.F32, 3221225472}}, arg{wa.I64, 18446744073709551614})
	})
	t.Run("i64.trunc_sat_f32_s:371", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_s", []arg{{wa.F32, 1333788672}}, arg{wa.I64, 4294967296})
	})
	t.Run("i64.trunc_sat_f32_s:372", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_s", []arg{{wa.F32, 3481272320}}, arg{wa.I64, 18446744069414584320})
	})
	t.Run("i64.trunc_sat_f32_s:373", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_s", []arg{{wa.F32, 1593835519}}, arg{wa.I64, 9223371487098961920})
	})
	t.Run("i64.trunc_sat_f32_s:374", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_s", []arg{{wa.F32, 3741319168}}, arg{wa.I64, 9223372036854775808})
	})
	t.Run("i64.trunc_sat_f32_s:375", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_s", []arg{{wa.F32, 1593835520}}, arg{wa.I64, 9223372036854775807})
	})
	t.Run("i64.trunc_sat_f32_s:376", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_s", []arg{{wa.F32, 3741319169}}, arg{wa.I64, 9223372036854775808})
	})
	t.Run("i64.trunc_sat_f32_s:377", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_s", []arg{{wa.F32, 2139095040}}, arg{wa.I64, 9223372036854775807})
	})
	t.Run("i64.trunc_sat_f32_s:378", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_s", []arg{{wa.F32, 4286578688}}, arg{wa.I64, 9223372036854775808})
	})
	t.Run("i64.trunc_sat_f32_s:379", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_s", []arg{{wa.F32, 2143289344}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f32_s:380", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_s", []arg{{wa.F32, 2141192192}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f32_s:381", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_s", []arg{{wa.F32, 4290772992}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f32_s:382", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_s", []arg{{wa.F32, 4288675840}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f32_u:384", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_u", []arg{{wa.F32, 0}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f32_u:385", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_u", []arg{{wa.F32, 2147483648}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f32_u:386", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_u", []arg{{wa.F32, 1}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f32_u:387", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_u", []arg{{wa.F32, 2147483649}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f32_u:388", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_u", []arg{{wa.F32, 1065353216}}, arg{wa.I64, 1})
	})
	t.Run("i64.trunc_sat_f32_u:389", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_u", []arg{{wa.F32, 1066192077}}, arg{wa.I64, 1})
	})
	t.Run("i64.trunc_sat_f32_u:390", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_u", []arg{{wa.F32, 1069547520}}, arg{wa.I64, 1})
	})
	t.Run("i64.trunc_sat_f32_u:391", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_u", []arg{{wa.F32, 1333788672}}, arg{wa.I64, 4294967296})
	})
	t.Run("i64.trunc_sat_f32_u:392", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_u", []arg{{wa.F32, 1602224127}}, arg{wa.I64, 18446742974197923840})
	})
	t.Run("i64.trunc_sat_f32_u:393", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_u", []arg{{wa.F32, 3211159142}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f32_u:394", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_u", []arg{{wa.F32, 3212836863}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f32_u:395", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_u", []arg{{wa.F32, 1602224128}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64.trunc_sat_f32_u:396", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_u", []arg{{wa.F32, 3212836864}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f32_u:397", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_u", []arg{{wa.F32, 2139095040}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64.trunc_sat_f32_u:398", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_u", []arg{{wa.F32, 4286578688}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f32_u:399", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_u", []arg{{wa.F32, 2143289344}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f32_u:400", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_u", []arg{{wa.F32, 2141192192}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f32_u:401", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_u", []arg{{wa.F32, 4290772992}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f32_u:402", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f32_u", []arg{{wa.F32, 4288675840}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f64_s:404", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_s", []arg{{wa.F64, 0}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f64_s:405", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_s", []arg{{wa.F64, 9223372036854775808}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f64_s:406", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_s", []arg{{wa.F64, 1}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f64_s:407", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_s", []arg{{wa.F64, 9223372036854775809}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f64_s:408", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_s", []arg{{wa.F64, 4607182418800017408}}, arg{wa.I64, 1})
	})
	t.Run("i64.trunc_sat_f64_s:409", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_s", []arg{{wa.F64, 4607632778762754458}}, arg{wa.I64, 1})
	})
	t.Run("i64.trunc_sat_f64_s:410", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_s", []arg{{wa.F64, 4609434218613702656}}, arg{wa.I64, 1})
	})
	t.Run("i64.trunc_sat_f64_s:411", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_s", []arg{{wa.F64, 13830554455654793216}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64.trunc_sat_f64_s:412", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_s", []arg{{wa.F64, 13831004815617530266}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64.trunc_sat_f64_s:413", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_s", []arg{{wa.F64, 13832806255468478464}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64.trunc_sat_f64_s:414", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_s", []arg{{wa.F64, 13834607695319426662}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64.trunc_sat_f64_s:415", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_s", []arg{{wa.F64, 13835058055282163712}}, arg{wa.I64, 18446744073709551614})
	})
	t.Run("i64.trunc_sat_f64_s:416", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_s", []arg{{wa.F64, 4751297606875873280}}, arg{wa.I64, 4294967296})
	})
	t.Run("i64.trunc_sat_f64_s:417", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_s", []arg{{wa.F64, 13974669643730649088}}, arg{wa.I64, 18446744069414584320})
	})
	t.Run("i64.trunc_sat_f64_s:418", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_s", []arg{{wa.F64, 4890909195324358655}}, arg{wa.I64, 9223372036854774784})
	})
	t.Run("i64.trunc_sat_f64_s:419", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_s", []arg{{wa.F64, 14114281232179134464}}, arg{wa.I64, 9223372036854775808})
	})
	t.Run("i64.trunc_sat_f64_s:420", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_s", []arg{{wa.F64, 4890909195324358656}}, arg{wa.I64, 9223372036854775807})
	})
	t.Run("i64.trunc_sat_f64_s:421", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_s", []arg{{wa.F64, 14114281232179134465}}, arg{wa.I64, 9223372036854775808})
	})
	t.Run("i64.trunc_sat_f64_s:422", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_s", []arg{{wa.F64, 9218868437227405312}}, arg{wa.I64, 9223372036854775807})
	})
	t.Run("i64.trunc_sat_f64_s:423", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_s", []arg{{wa.F64, 18442240474082181120}}, arg{wa.I64, 9223372036854775808})
	})
	t.Run("i64.trunc_sat_f64_s:424", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_s", []arg{{wa.F64, 9221120237041090560}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f64_s:425", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_s", []arg{{wa.F64, 9219994337134247936}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f64_s:426", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_s", []arg{{wa.F64, 18444492273895866368}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f64_s:427", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_s", []arg{{wa.F64, 18443366373989023744}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f64_u:429", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_u", []arg{{wa.F64, 0}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f64_u:430", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_u", []arg{{wa.F64, 9223372036854775808}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f64_u:431", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_u", []arg{{wa.F64, 1}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f64_u:432", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_u", []arg{{wa.F64, 9223372036854775809}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f64_u:433", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_u", []arg{{wa.F64, 4607182418800017408}}, arg{wa.I64, 1})
	})
	t.Run("i64.trunc_sat_f64_u:434", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_u", []arg{{wa.F64, 4607632778762754458}}, arg{wa.I64, 1})
	})
	t.Run("i64.trunc_sat_f64_u:435", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_u", []arg{{wa.F64, 4609434218613702656}}, arg{wa.I64, 1})
	})
	t.Run("i64.trunc_sat_f64_u:436", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_u", []arg{{wa.F64, 4751297606873776128}}, arg{wa.I64, 4294967295})
	})
	t.Run("i64.trunc_sat_f64_u:437", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_u", []arg{{wa.F64, 4751297606875873280}}, arg{wa.I64, 4294967296})
	})
	t.Run("i64.trunc_sat_f64_u:438", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_u", []arg{{wa.F64, 4895412794951729151}}, arg{wa.I64, 18446744073709549568})
	})
	t.Run("i64.trunc_sat_f64_u:439", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_u", []arg{{wa.F64, 13829653735729319117}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f64_u:440", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_u", []arg{{wa.F64, 13830554455654793215}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f64_u:441", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_u", []arg{{wa.F64, 4726483295884279808}}, arg{wa.I64, 100000000})
	})
	t.Run("i64.trunc_sat_f64_u:442", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_u", []arg{{wa.F64, 4846369599423283200}}, arg{wa.I64, 10000000000000000})
	})
	t.Run("i64.trunc_sat_f64_u:443", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_u", []arg{{wa.F64, 4890909195324358656}}, arg{wa.I64, 9223372036854775808})
	})
	t.Run("i64.trunc_sat_f64_u:444", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_u", []arg{{wa.F64, 4895412794951729152}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64.trunc_sat_f64_u:445", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_u", []arg{{wa.F64, 13830554455654793216}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f64_u:446", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_u", []arg{{wa.F64, 9218868437227405312}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64.trunc_sat_f64_u:447", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_u", []arg{{wa.F64, 18442240474082181120}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f64_u:448", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_u", []arg{{wa.F64, 9221120237041090560}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f64_u:449", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_u", []arg{{wa.F64, 9219994337134247936}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f64_u:450", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_u", []arg{{wa.F64, 18444492273895866368}}, arg{wa.I64, 0})
	})
	t.Run("i64.trunc_sat_f64_u:451", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.trunc_sat_f64_u", []arg{{wa.F64, 18443366373989023744}}, arg{wa.I64, 0})
	})
	t.Run("f32.convert_i32_s:454", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i32_s", []arg{{wa.I32, 16777217}}, arg{wa.F32, 1266679808})
	})
	t.Run("f32.convert_i32_s:455", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i32_s", []arg{{wa.I32, 4278190079}}, arg{wa.F32, 3414163456})
	})
	t.Run("f32.convert_i32_s:456", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i32_s", []arg{{wa.I32, 16777219}}, arg{wa.F32, 1266679810})
	})
	t.Run("f32.convert_i32_s:457", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i32_s", []arg{{wa.I32, 4278190077}}, arg{wa.F32, 3414163458})
	})
	t.Run("f32.convert_i64_s:459", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i64_s", []arg{{wa.I64, 1}}, arg{wa.F32, 1065353216})
	})
	t.Run("f32.convert_i64_s:460", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i64_s", []arg{{wa.I64, 18446744073709551615}}, arg{wa.F32, 3212836864})
	})
	t.Run("f32.convert_i64_s:461", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.convert_i64_s", []arg{{wa.I64, 0}}, arg{wa.F32, 0}) })
	t.Run("f32.convert_i64_s:462", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i64_s", []arg{{wa.I64, 9223372036854775807}}, arg{wa.F32, 1593835520})
	})
	t.Run("f32.convert_i64_s:463", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i64_s", []arg{{wa.I64, 9223372036854775808}}, arg{wa.F32, 3741319168})
	})
	t.Run("f32.convert_i64_s:464", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i64_s", []arg{{wa.I64, 314159265358979}}, arg{wa.F32, 1468980468})
	})
	t.Run("f32.convert_i64_s:466", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i64_s", []arg{{wa.I64, 16777217}}, arg{wa.F32, 1266679808})
	})
	t.Run("f32.convert_i64_s:467", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i64_s", []arg{{wa.I64, 18446744073692774399}}, arg{wa.F32, 3414163456})
	})
	t.Run("f32.convert_i64_s:468", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i64_s", []arg{{wa.I64, 16777219}}, arg{wa.F32, 1266679810})
	})
	t.Run("f32.convert_i64_s:469", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i64_s", []arg{{wa.I64, 18446744073692774397}}, arg{wa.F32, 3414163458})
	})
	t.Run("f32.convert_i64_s:471", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i64_s", []arg{{wa.I64, 9223371212221054977}}, arg{wa.F32, 1593835519})
	})
	t.Run("f32.convert_i64_s:472", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i64_s", []arg{{wa.I64, 9223372311732682753}}, arg{wa.F32, 3741319167})
	})
	t.Run("f32.convert_i64_s:473", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i64_s", []arg{{wa.I64, 9007199791611905}}, arg{wa.F32, 1509949441})
	})
	t.Run("f32.convert_i64_s:474", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i64_s", []arg{{wa.I64, 18437736873917939711}}, arg{wa.F32, 3657433089})
	})
	t.Run("f64.convert_i32_s:476", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i32_s", []arg{{wa.I32, 1}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("f64.convert_i32_s:477", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i32_s", []arg{{wa.I32, 4294967295}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("f64.convert_i32_s:478", func(t *testing.T) { x0.assertReturnInvoke(t, "f64.convert_i32_s", []arg{{wa.I32, 0}}, arg{wa.F64, 0}) })
	t.Run("f64.convert_i32_s:479", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i32_s", []arg{{wa.I32, 2147483647}}, arg{wa.F64, 4746794007244308480})
	})
	t.Run("f64.convert_i32_s:480", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i32_s", []arg{{wa.I32, 2147483648}}, arg{wa.F64, 13970166044103278592})
	})
	t.Run("f64.convert_i32_s:481", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i32_s", []arg{{wa.I32, 987654321}}, arg{wa.F64, 4741568253304766464})
	})
	t.Run("f64.convert_i64_s:483", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i64_s", []arg{{wa.I64, 1}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("f64.convert_i64_s:484", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i64_s", []arg{{wa.I64, 18446744073709551615}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("f64.convert_i64_s:485", func(t *testing.T) { x0.assertReturnInvoke(t, "f64.convert_i64_s", []arg{{wa.I64, 0}}, arg{wa.F64, 0}) })
	t.Run("f64.convert_i64_s:486", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i64_s", []arg{{wa.I64, 9223372036854775807}}, arg{wa.F64, 4890909195324358656})
	})
	t.Run("f64.convert_i64_s:487", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i64_s", []arg{{wa.I64, 9223372036854775808}}, arg{wa.F64, 14114281232179134464})
	})
	t.Run("f64.convert_i64_s:488", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i64_s", []arg{{wa.I64, 4669201609102990}}, arg{wa.F64, 4841535201405015694})
	})
	t.Run("f64.convert_i64_s:490", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i64_s", []arg{{wa.I64, 9007199254740993}}, arg{wa.F64, 4845873199050653696})
	})
	t.Run("f64.convert_i64_s:491", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i64_s", []arg{{wa.I64, 18437736874454810623}}, arg{wa.F64, 14069245235905429504})
	})
	t.Run("f64.convert_i64_s:492", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i64_s", []arg{{wa.I64, 9007199254740995}}, arg{wa.F64, 4845873199050653698})
	})
	t.Run("f64.convert_i64_s:493", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i64_s", []arg{{wa.I64, 18437736874454810621}}, arg{wa.F64, 14069245235905429506})
	})
	t.Run("f32.convert_i32_u:495", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i32_u", []arg{{wa.I32, 1}}, arg{wa.F32, 1065353216})
	})
	t.Run("f32.convert_i32_u:496", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.convert_i32_u", []arg{{wa.I32, 0}}, arg{wa.F32, 0}) })
	t.Run("f32.convert_i32_u:497", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i32_u", []arg{{wa.I32, 2147483647}}, arg{wa.F32, 1325400064})
	})
	t.Run("f32.convert_i32_u:498", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i32_u", []arg{{wa.I32, 2147483648}}, arg{wa.F32, 1325400064})
	})
	t.Run("f32.convert_i32_u:499", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i32_u", []arg{{wa.I32, 305419896}}, arg{wa.F32, 1301390004})
	})
	t.Run("f32.convert_i32_u:500", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i32_u", []arg{{wa.I32, 4294967295}}, arg{wa.F32, 1333788672})
	})
	t.Run("f32.convert_i32_u:501", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i32_u", []arg{{wa.I32, 2147483776}}, arg{wa.F32, 1325400064})
	})
	t.Run("f32.convert_i32_u:502", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i32_u", []arg{{wa.I32, 2147483777}}, arg{wa.F32, 1325400065})
	})
	t.Run("f32.convert_i32_u:503", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i32_u", []arg{{wa.I32, 2147483778}}, arg{wa.F32, 1325400065})
	})
	t.Run("f32.convert_i32_u:504", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i32_u", []arg{{wa.I32, 4294966912}}, arg{wa.F32, 1333788670})
	})
	t.Run("f32.convert_i32_u:505", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i32_u", []arg{{wa.I32, 4294966913}}, arg{wa.F32, 1333788671})
	})
	t.Run("f32.convert_i32_u:506", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i32_u", []arg{{wa.I32, 4294966914}}, arg{wa.F32, 1333788671})
	})
	t.Run("f32.convert_i32_u:508", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i32_u", []arg{{wa.I32, 16777217}}, arg{wa.F32, 1266679808})
	})
	t.Run("f32.convert_i32_u:509", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i32_u", []arg{{wa.I32, 16777219}}, arg{wa.F32, 1266679810})
	})
	t.Run("f32.convert_i64_u:511", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i64_u", []arg{{wa.I64, 1}}, arg{wa.F32, 1065353216})
	})
	t.Run("f32.convert_i64_u:512", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.convert_i64_u", []arg{{wa.I64, 0}}, arg{wa.F32, 0}) })
	t.Run("f32.convert_i64_u:513", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i64_u", []arg{{wa.I64, 9223372036854775807}}, arg{wa.F32, 1593835520})
	})
	t.Run("f32.convert_i64_u:514", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i64_u", []arg{{wa.I64, 9223372036854775808}}, arg{wa.F32, 1593835520})
	})
	t.Run("f32.convert_i64_u:515", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i64_u", []arg{{wa.I64, 18446744073709551615}}, arg{wa.F32, 1602224128})
	})
	t.Run("f32.convert_i64_u:517", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i64_u", []arg{{wa.I64, 16777217}}, arg{wa.F32, 1266679808})
	})
	t.Run("f32.convert_i64_u:518", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i64_u", []arg{{wa.I64, 16777219}}, arg{wa.F32, 1266679810})
	})
	t.Run("f32.convert_i64_u:520", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i64_u", []arg{{wa.I64, 9007199791611905}}, arg{wa.F32, 1509949441})
	})
	t.Run("f32.convert_i64_u:521", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i64_u", []arg{{wa.I64, 9223371761976868863}}, arg{wa.F32, 1593835519})
	})
	t.Run("f32.convert_i64_u:522", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i64_u", []arg{{wa.I64, 9223372586610589697}}, arg{wa.F32, 1593835521})
	})
	t.Run("f32.convert_i64_u:523", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.convert_i64_u", []arg{{wa.I64, 18446742424442109953}}, arg{wa.F32, 1602224127})
	})
	t.Run("f64.convert_i32_u:525", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i32_u", []arg{{wa.I32, 1}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("f64.convert_i32_u:526", func(t *testing.T) { x0.assertReturnInvoke(t, "f64.convert_i32_u", []arg{{wa.I32, 0}}, arg{wa.F64, 0}) })
	t.Run("f64.convert_i32_u:527", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i32_u", []arg{{wa.I32, 2147483647}}, arg{wa.F64, 4746794007244308480})
	})
	t.Run("f64.convert_i32_u:528", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i32_u", []arg{{wa.I32, 2147483648}}, arg{wa.F64, 4746794007248502784})
	})
	t.Run("f64.convert_i32_u:529", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i32_u", []arg{{wa.I32, 4294967295}}, arg{wa.F64, 4751297606873776128})
	})
	t.Run("f64.convert_i64_u:531", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i64_u", []arg{{wa.I64, 1}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("f64.convert_i64_u:532", func(t *testing.T) { x0.assertReturnInvoke(t, "f64.convert_i64_u", []arg{{wa.I64, 0}}, arg{wa.F64, 0}) })
	t.Run("f64.convert_i64_u:533", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i64_u", []arg{{wa.I64, 9223372036854775807}}, arg{wa.F64, 4890909195324358656})
	})
	t.Run("f64.convert_i64_u:534", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i64_u", []arg{{wa.I64, 9223372036854775808}}, arg{wa.F64, 4890909195324358656})
	})
	t.Run("f64.convert_i64_u:535", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i64_u", []arg{{wa.I64, 18446744073709551615}}, arg{wa.F64, 4895412794951729152})
	})
	t.Run("f64.convert_i64_u:536", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i64_u", []arg{{wa.I64, 9223372036854776832}}, arg{wa.F64, 4890909195324358656})
	})
	t.Run("f64.convert_i64_u:537", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i64_u", []arg{{wa.I64, 9223372036854776833}}, arg{wa.F64, 4890909195324358657})
	})
	t.Run("f64.convert_i64_u:538", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i64_u", []arg{{wa.I64, 9223372036854776834}}, arg{wa.F64, 4890909195324358657})
	})
	t.Run("f64.convert_i64_u:539", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i64_u", []arg{{wa.I64, 18446744073709548544}}, arg{wa.F64, 4895412794951729150})
	})
	t.Run("f64.convert_i64_u:540", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i64_u", []arg{{wa.I64, 18446744073709548545}}, arg{wa.F64, 4895412794951729151})
	})
	t.Run("f64.convert_i64_u:541", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i64_u", []arg{{wa.I64, 18446744073709548546}}, arg{wa.F64, 4895412794951729151})
	})
	t.Run("f64.convert_i64_u:543", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i64_u", []arg{{wa.I64, 9007199254740993}}, arg{wa.F64, 4845873199050653696})
	})
	t.Run("f64.convert_i64_u:544", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.convert_i64_u", []arg{{wa.I64, 9007199254740995}}, arg{wa.F64, 4845873199050653698})
	})
	t.Run("f64.promote_f32:546", func(t *testing.T) { x0.assertReturnInvoke(t, "f64.promote_f32", []arg{{wa.F32, 0}}, arg{wa.F64, 0}) })
	t.Run("f64.promote_f32:547", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.promote_f32", []arg{{wa.F32, 2147483648}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("f64.promote_f32:548", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.promote_f32", []arg{{wa.F32, 1}}, arg{wa.F64, 3936146074321813504})
	})
	t.Run("f64.promote_f32:549", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.promote_f32", []arg{{wa.F32, 2147483649}}, arg{wa.F64, 13159518111176589312})
	})
	t.Run("f64.promote_f32:550", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.promote_f32", []arg{{wa.F32, 1065353216}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("f64.promote_f32:551", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.promote_f32", []arg{{wa.F32, 3212836864}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("f64.promote_f32:552", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.promote_f32", []arg{{wa.F32, 4286578687}}, arg{wa.F64, 14407015207421345792})
	})
	t.Run("f64.promote_f32:553", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.promote_f32", []arg{{wa.F32, 2139095039}}, arg{wa.F64, 5183643170566569984})
	})
	t.Run("f64.promote_f32:555", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.promote_f32", []arg{{wa.F32, 67108864}}, arg{wa.F64, 4071254063142928384})
	})
	t.Run("f64.promote_f32:557", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.promote_f32", []arg{{wa.F32, 2118632255}}, arg{wa.F64, 5172657297058430976})
	})
	t.Run("f64.promote_f32:558", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.promote_f32", []arg{{wa.F32, 2139095040}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("f64.promote_f32:559", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.promote_f32", []arg{{wa.F32, 4286578688}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("f64.promote_f32:560", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.promote_f32", []arg{{wa.F32, 2143289344}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("f64.promote_f32:561", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.promote_f32", []arg{{wa.F32, 2141192192}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("f64.promote_f32:562", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.promote_f32", []arg{{wa.F32, 4290772992}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("f64.promote_f32:563", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.promote_f32", []arg{{wa.F32, 4288675840}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("f32.demote_f64:565", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 0}}, arg{wa.F32, 0}) })
	t.Run("f32.demote_f64:566", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 9223372036854775808}}, arg{wa.F32, 2147483648})
	})
	t.Run("f32.demote_f64:567", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 1}}, arg{wa.F32, 0}) })
	t.Run("f32.demote_f64:568", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 9223372036854775809}}, arg{wa.F32, 2147483648})
	})
	t.Run("f32.demote_f64:569", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 4607182418800017408}}, arg{wa.F32, 1065353216})
	})
	t.Run("f32.demote_f64:570", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 13830554455654793216}}, arg{wa.F32, 3212836864})
	})
	t.Run("f32.demote_f64:571", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 4039728865214464000}}, arg{wa.F32, 8388608})
	})
	t.Run("f32.demote_f64:572", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 13263100902069239808}}, arg{wa.F32, 2155872256})
	})
	t.Run("f32.demote_f64:573", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 4039728865214463999}}, arg{wa.F32, 8388607})
	})
	t.Run("f32.demote_f64:574", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 13263100902069239807}}, arg{wa.F32, 2155872255})
	})
	t.Run("f32.demote_f64:575", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 3936146074321813504}}, arg{wa.F32, 1})
	})
	t.Run("f32.demote_f64:576", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 13159518111176589312}}, arg{wa.F32, 2147483649})
	})
	t.Run("f32.demote_f64:577", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 5183643170298134528}}, arg{wa.F32, 2139095038})
	})
	t.Run("f32.demote_f64:578", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 14407015207152910336}}, arg{wa.F32, 4286578686})
	})
	t.Run("f32.demote_f64:579", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 5183643170298134529}}, arg{wa.F32, 2139095039})
	})
	t.Run("f32.demote_f64:580", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 14407015207152910337}}, arg{wa.F32, 4286578687})
	})
	t.Run("f32.demote_f64:581", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 5183643170566569984}}, arg{wa.F32, 2139095039})
	})
	t.Run("f32.demote_f64:582", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 14407015207421345792}}, arg{wa.F32, 4286578687})
	})
	t.Run("f32.demote_f64:583", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 5183643170835005439}}, arg{wa.F32, 2139095039})
	})
	t.Run("f32.demote_f64:584", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 14407015207689781247}}, arg{wa.F32, 4286578687})
	})
	t.Run("f32.demote_f64:585", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 5183643170835005440}}, arg{wa.F32, 2139095040})
	})
	t.Run("f32.demote_f64:586", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 14407015207689781248}}, arg{wa.F32, 4286578688})
	})
	t.Run("f32.demote_f64:587", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 4071254063142928384}}, arg{wa.F32, 67108864})
	})
	t.Run("f32.demote_f64:588", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 5172657297058430976}}, arg{wa.F32, 2118632255})
	})
	t.Run("f32.demote_f64:589", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 9218868437227405312}}, arg{wa.F32, 2139095040})
	})
	t.Run("f32.demote_f64:590", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 18442240474082181120}}, arg{wa.F32, 4286578688})
	})
	t.Run("f32.demote_f64:591", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 4607182418800017409}}, arg{wa.F32, 1065353216})
	})
	t.Run("f32.demote_f64:592", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 4607182418800017407}}, arg{wa.F32, 1065353216})
	})
	t.Run("f32.demote_f64:593", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 4607182419068452864}}, arg{wa.F32, 1065353216})
	})
	t.Run("f32.demote_f64:594", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 4607182419068452865}}, arg{wa.F32, 1065353217})
	})
	t.Run("f32.demote_f64:595", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 4607182419605323775}}, arg{wa.F32, 1065353217})
	})
	t.Run("f32.demote_f64:596", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 4607182419605323776}}, arg{wa.F32, 1065353218})
	})
	t.Run("f32.demote_f64:597", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 4607182420142194688}}, arg{wa.F32, 1065353218})
	})
	t.Run("f32.demote_f64:598", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 4715268810125344768}}, arg{wa.F32, 1266679808})
	})
	t.Run("f32.demote_f64:599", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 4715268810125344769}}, arg{wa.F32, 1266679809})
	})
	t.Run("f32.demote_f64:600", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 4715268810662215679}}, arg{wa.F32, 1266679809})
	})
	t.Run("f32.demote_f64:601", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 4715268810662215680}}, arg{wa.F32, 1266679810})
	})
	t.Run("f32.demote_f64:602", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 5094955347580439664}}, arg{wa.F32, 1973901096})
	})
	t.Run("f32.demote_f64:603", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 4101111194527827589}}, arg{wa.F32, 122722105})
	})
	t.Run("f32.demote_f64:604", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 4038806939559600639}}, arg{wa.F32, 7529997})
	})
	t.Run("f32.demote_f64:605", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 13836913116900734306}}, arg{wa.F32, 3224680794})
	})
	t.Run("f32.demote_f64:606", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 14338315240173327556}}, arg{wa.F32, 4158615026})
	})
	t.Run("f32.demote_f64:607", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 9221120237041090560}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("f32.demote_f64:608", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 9219994337134247936}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("f32.demote_f64:609", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 18444492273895866368}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("f32.demote_f64:610", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 18443366373989023744}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("f32.demote_f64:611", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 4503599627370496}}, arg{wa.F32, 0})
	})
	t.Run("f32.demote_f64:612", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 9227875636482146304}}, arg{wa.F32, 2147483648})
	})
	t.Run("f32.demote_f64:613", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 3931642474694443008}}, arg{wa.F32, 0})
	})
	t.Run("f32.demote_f64:614", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 13155014511549218816}}, arg{wa.F32, 2147483648})
	})
	t.Run("f32.demote_f64:615", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 3931642474694443009}}, arg{wa.F32, 1})
	})
	t.Run("f32.demote_f64:616", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.demote_f64", []arg{{wa.F64, 13155014511549218817}}, arg{wa.F32, 2147483649})
	})
	t.Run("f32.reinterpret_i32:618", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.reinterpret_i32", []arg{{wa.I32, 0}}, arg{wa.F32, 0})
	})
	t.Run("f32.reinterpret_i32:619", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.reinterpret_i32", []arg{{wa.I32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("f32.reinterpret_i32:620", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.reinterpret_i32", []arg{{wa.I32, 1}}, arg{wa.F32, 1})
	})
	t.Run("f32.reinterpret_i32:621", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.reinterpret_i32", []arg{{wa.I32, 4294967295}}, arg{wa.F32, 4294967295})
	})
	t.Run("f32.reinterpret_i32:622", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.reinterpret_i32", []arg{{wa.I32, 123456789}}, arg{wa.F32, 123456789})
	})
	t.Run("f32.reinterpret_i32:623", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.reinterpret_i32", []arg{{wa.I32, 2147483649}}, arg{wa.F32, 2147483649})
	})
	t.Run("f32.reinterpret_i32:624", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.reinterpret_i32", []arg{{wa.I32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("f32.reinterpret_i32:625", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.reinterpret_i32", []arg{{wa.I32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("f32.reinterpret_i32:626", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.reinterpret_i32", []arg{{wa.I32, 2143289344}}, arg{wa.F32, 2143289344})
	})
	t.Run("f32.reinterpret_i32:627", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.reinterpret_i32", []arg{{wa.I32, 4290772992}}, arg{wa.F32, 4290772992})
	})
	t.Run("f32.reinterpret_i32:628", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.reinterpret_i32", []arg{{wa.I32, 2141192192}}, arg{wa.F32, 2141192192})
	})
	t.Run("f32.reinterpret_i32:629", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.reinterpret_i32", []arg{{wa.I32, 4288675840}}, arg{wa.F32, 4288675840})
	})
	t.Run("f64.reinterpret_i64:631", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.reinterpret_i64", []arg{{wa.I64, 0}}, arg{wa.F64, 0})
	})
	t.Run("f64.reinterpret_i64:632", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.reinterpret_i64", []arg{{wa.I64, 1}}, arg{wa.F64, 1})
	})
	t.Run("f64.reinterpret_i64:633", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.reinterpret_i64", []arg{{wa.I64, 18446744073709551615}}, arg{wa.F64, 18446744073709551615})
	})
	t.Run("f64.reinterpret_i64:634", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.reinterpret_i64", []arg{{wa.I64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("f64.reinterpret_i64:635", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.reinterpret_i64", []arg{{wa.I64, 1234567890}}, arg{wa.F64, 1234567890})
	})
	t.Run("f64.reinterpret_i64:636", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.reinterpret_i64", []arg{{wa.I64, 9223372036854775809}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("f64.reinterpret_i64:637", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.reinterpret_i64", []arg{{wa.I64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("f64.reinterpret_i64:638", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.reinterpret_i64", []arg{{wa.I64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("f64.reinterpret_i64:639", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.reinterpret_i64", []arg{{wa.I64, 9221120237041090560}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("f64.reinterpret_i64:640", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.reinterpret_i64", []arg{{wa.I64, 18444492273895866368}}, arg{wa.F64, 18444492273895866368})
	})
	t.Run("f64.reinterpret_i64:641", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.reinterpret_i64", []arg{{wa.I64, 9219994337134247936}}, arg{wa.F64, 9219994337134247936})
	})
	t.Run("f64.reinterpret_i64:642", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.reinterpret_i64", []arg{{wa.I64, 18443366373989023744}}, arg{wa.F64, 18443366373989023744})
	})
	t.Run("i32.reinterpret_f32:644", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.reinterpret_f32", []arg{{wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("i32.reinterpret_f32:645", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.reinterpret_f32", []arg{{wa.F32, 2147483648}}, arg{wa.I32, 2147483648})
	})
	t.Run("i32.reinterpret_f32:646", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.reinterpret_f32", []arg{{wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("i32.reinterpret_f32:647", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.reinterpret_f32", []arg{{wa.F32, 4294967295}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32.reinterpret_f32:648", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.reinterpret_f32", []arg{{wa.F32, 2147483649}}, arg{wa.I32, 2147483649})
	})
	t.Run("i32.reinterpret_f32:649", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.reinterpret_f32", []arg{{wa.F32, 1065353216}}, arg{wa.I32, 1065353216})
	})
	t.Run("i32.reinterpret_f32:650", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.reinterpret_f32", []arg{{wa.F32, 1078530010}}, arg{wa.I32, 1078530010})
	})
	t.Run("i32.reinterpret_f32:651", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.reinterpret_f32", []arg{{wa.F32, 2139095039}}, arg{wa.I32, 2139095039})
	})
	t.Run("i32.reinterpret_f32:652", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.reinterpret_f32", []arg{{wa.F32, 4286578687}}, arg{wa.I32, 4286578687})
	})
	t.Run("i32.reinterpret_f32:653", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.reinterpret_f32", []arg{{wa.F32, 2139095040}}, arg{wa.I32, 2139095040})
	})
	t.Run("i32.reinterpret_f32:654", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.reinterpret_f32", []arg{{wa.F32, 4286578688}}, arg{wa.I32, 4286578688})
	})
	t.Run("i32.reinterpret_f32:655", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.reinterpret_f32", []arg{{wa.F32, 2143289344}}, arg{wa.I32, 2143289344})
	})
	t.Run("i32.reinterpret_f32:656", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.reinterpret_f32", []arg{{wa.F32, 4290772992}}, arg{wa.I32, 4290772992})
	})
	t.Run("i32.reinterpret_f32:657", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.reinterpret_f32", []arg{{wa.F32, 2141192192}}, arg{wa.I32, 2141192192})
	})
	t.Run("i32.reinterpret_f32:658", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.reinterpret_f32", []arg{{wa.F32, 4288675840}}, arg{wa.I32, 4288675840})
	})
	t.Run("i64.reinterpret_f64:660", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.reinterpret_f64", []arg{{wa.F64, 0}}, arg{wa.I64, 0})
	})
	t.Run("i64.reinterpret_f64:661", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.reinterpret_f64", []arg{{wa.F64, 9223372036854775808}}, arg{wa.I64, 9223372036854775808})
	})
	t.Run("i64.reinterpret_f64:662", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.reinterpret_f64", []arg{{wa.F64, 1}}, arg{wa.I64, 1})
	})
	t.Run("i64.reinterpret_f64:663", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.reinterpret_f64", []arg{{wa.F64, 18446744073709551615}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64.reinterpret_f64:664", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.reinterpret_f64", []arg{{wa.F64, 9223372036854775809}}, arg{wa.I64, 9223372036854775809})
	})
	t.Run("i64.reinterpret_f64:665", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.reinterpret_f64", []arg{{wa.F64, 4607182418800017408}}, arg{wa.I64, 4607182418800017408})
	})
	t.Run("i64.reinterpret_f64:666", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.reinterpret_f64", []arg{{wa.F64, 4614256656552045841}}, arg{wa.I64, 4614256656552045841})
	})
	t.Run("i64.reinterpret_f64:667", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.reinterpret_f64", []arg{{wa.F64, 9218868437227405311}}, arg{wa.I64, 9218868437227405311})
	})
	t.Run("i64.reinterpret_f64:668", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.reinterpret_f64", []arg{{wa.F64, 18442240474082181119}}, arg{wa.I64, 18442240474082181119})
	})
	t.Run("i64.reinterpret_f64:669", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.reinterpret_f64", []arg{{wa.F64, 9218868437227405312}}, arg{wa.I64, 9218868437227405312})
	})
	t.Run("i64.reinterpret_f64:670", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.reinterpret_f64", []arg{{wa.F64, 18442240474082181120}}, arg{wa.I64, 18442240474082181120})
	})
	t.Run("i64.reinterpret_f64:671", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.reinterpret_f64", []arg{{wa.F64, 9221120237041090560}}, arg{wa.I64, 9221120237041090560})
	})
	t.Run("i64.reinterpret_f64:672", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.reinterpret_f64", []arg{{wa.F64, 18444492273895866368}}, arg{wa.I64, 18444492273895866368})
	})
	t.Run("i64.reinterpret_f64:673", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.reinterpret_f64", []arg{{wa.F64, 9219994337134247936}}, arg{wa.I64, 9219994337134247936})
	})
	t.Run("i64.reinterpret_f64:674", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.reinterpret_f64", []arg{{wa.F64, 18443366373989023744}}, arg{wa.I64, 18443366373989023744})
	})
	t.Run("assert_invalid:678", func(t *testing.T) { assertInvalidSpec(t, "conversions.1.wasm", "type mismatch") })
	t.Run("assert_invalid:679", func(t *testing.T) { assertInvalidSpec(t, "conversions.2.wasm", "type mismatch") })
	t.Run("assert_invalid:680", func(t *testing.T) { assertInvalidSpec(t, "conversions.3.wasm", "type mismatch") })
	t.Run("assert_invalid:681", func(t *testing.T) { assertInvalidSpec(t, "conversions.4.wasm", "type mismatch") })
	t.Run("assert_invalid:682", func(t *testing.T) { assertInvalidSpec(t, "conversions.5.wasm", "type mismatch") })
	t.Run("assert_invalid:683", func(t *testing.T) { assertInvalidSpec(t, "conversions.6.wasm", "type mismatch") })
	t.Run("assert_invalid:684", func(t *testing.T) { assertInvalidSpec(t, "conversions.7.wasm", "type mismatch") })
	t.Run("assert_invalid:685", func(t *testing.T) { assertInvalidSpec(t, "conversions.8.wasm", "type mismatch") })
	t.Run("assert_invalid:686", func(t *testing.T) { assertInvalidSpec(t, "conversions.9.wasm", "type mismatch") })
	t.Run("assert_invalid:687", func(t *testing.T) { assertInvalidSpec(t, "conversions.10.wasm", "type mismatch") })
	t.Run("assert_invalid:688", func(t *testing.T) { assertInvalidSpec(t, "conversions.11.wasm", "type mismatch") })
	t.Run("assert_invalid:689", func(t *testing.T) { assertInvalidSpec(t, "conversions.12.wasm", "type mismatch") })
	t.Run("assert_invalid:690", func(t *testing.T) { assertInvalidSpec(t, "conversions.13.wasm", "type mismatch") })
	t.Run("assert_invalid:691", func(t *testing.T) { assertInvalidSpec(t, "conversions.14.wasm", "type mismatch") })
	t.Run("assert_invalid:692", func(t *testing.T) { assertInvalidSpec(t, "conversions.15.wasm", "type mismatch") })
	t.Run("assert_invalid:693", func(t *testing.T) { assertInvalidSpec(t, "conversions.16.wasm", "type mismatch") })
	t.Run("assert_invalid:694", func(t *testing.T) { assertInvalidSpec(t, "conversions.17.wasm", "type mismatch") })
	t.Run("assert_invalid:695", func(t *testing.T) { assertInvalidSpec(t, "conversions.18.wasm", "type mismatch") })
	t.Run("assert_invalid:696", func(t *testing.T) { assertInvalidSpec(t, "conversions.19.wasm", "type mismatch") })
	t.Run("assert_invalid:697", func(t *testing.T) { assertInvalidSpec(t, "conversions.20.wasm", "type mismatch") })
	t.Run("assert_invalid:698", func(t *testing.T) { assertInvalidSpec(t, "conversions.21.wasm", "type mismatch") })
	t.Run("assert_invalid:699", func(t *testing.T) { assertInvalidSpec(t, "conversions.22.wasm", "type mismatch") })
	t.Run("assert_invalid:700", func(t *testing.T) { assertInvalidSpec(t, "conversions.23.wasm", "type mismatch") })
	t.Run("assert_invalid:701", func(t *testing.T) { assertInvalidSpec(t, "conversions.24.wasm", "type mismatch") })
	t.Run("assert_invalid:702", func(t *testing.T) { assertInvalidSpec(t, "conversions.25.wasm", "type mismatch") })
}

func Test_custom(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "custom.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	x1 := instantiateSpecTest(t, "1", "custom.1.wasm")
	t.Cleanup(func() { x1.close(t) })
	x2 := instantiateSpecTest(t, "2", "custom.2.wasm")
	t.Cleanup(func() { x2.close(t) })
	t.Run("assert_malformed:61", func(t *testing.T) { assertMalformedSpec(t, "custom.3.wasm", "unexpected end") })
	t.Run("assert_malformed:69", func(t *testing.T) { assertMalformedSpec(t, "custom.4.wasm", "unexpected end") })
	t.Run("assert_malformed:77", func(t *testing.T) { assertMalformedSpec(t, "custom.5.wasm", "unexpected end") })
	t.Run("assert_malformed:85", func(t *testing.T) { assertMalformedSpec(t, "custom.6.wasm", "unexpected end") })
	t.Run("assert_malformed:93", func(t *testing.T) { assertMalformedSpec(t, "custom.7.wasm", "malformed section id") })
	t.Run("assert_malformed:102", func(t *testing.T) {
		assertMalformedSpec(t, "custom.8.wasm", "function and code section have inconsistent lengths")
	})
	t.Run("assert_malformed:115", func(t *testing.T) { assertMalformedSpec(t, "custom.9.wasm", "length out of bounds") })
	t.Run("assert_malformed:123", func(t *testing.T) {
		assertMalformedSpec(t, "custom.10.wasm", "data count and data section have inconsistent lengths")
	})
}

func Test_data(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "data.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	x1 := instantiateSpecTest(t, "1", "data.1.wasm")
	t.Cleanup(func() { x1.close(t) })
	x2 := instantiateSpecTest(t, "2", "data.2.wasm")
	t.Cleanup(func() { x2.close(t) })
	x3 := instantiateSpecTest(t, "3", "data.3.wasm")
	t.Cleanup(func() { x3.close(t) })
	x4 := instantiateSpecTest(t, "4", "data.4.wasm")
	t.Cleanup(func() { x4.close(t) })
	x5 := instantiateSpecTest(t, "5", "data.5.wasm")
	t.Cleanup(func() { x5.close(t) })
	x6 := instantiateSpecTest(t, "6", "data.6.wasm")
	t.Cleanup(func() { x6.close(t) })
	x7 := instantiateSpecTest(t, "7", "data.7.wasm")
	t.Cleanup(func() { x7.close(t) })
	x8 := instantiateSpecTest(t, "8", "data.8.wasm")
	t.Cleanup(func() { x8.close(t) })
	x9 := instantiateSpecTest(t, "9", "data.9.wasm")
	t.Cleanup(func() { x9.close(t) })
	x10 := instantiateSpecTest(t, "10", "data.10.wasm")
	t.Cleanup(func() { x10.close(t) })
	x11 := instantiateSpecTest(t, "11", "data.11.wasm")
	t.Cleanup(func() { x11.close(t) })
	x12 := instantiateSpecTest(t, "12", "data.12.wasm")
	t.Cleanup(func() { x12.close(t) })
	x13 := instantiateSpecTest(t, "13", "data.13.wasm")
	t.Cleanup(func() { x13.close(t) })
	x14 := instantiateSpecTest(t, "14", "data.14.wasm")
	t.Cleanup(func() { x14.close(t) })
	x15 := instantiateSpecTest(t, "15", "data.15.wasm")
	t.Cleanup(func() { x15.close(t) })
	x16 := instantiateSpecTest(t, "16", "data.16.wasm")
	t.Cleanup(func() { x16.close(t) })
	x17 := instantiateSpecTest(t, "17", "data.17.wasm")
	t.Cleanup(func() { x17.close(t) })
	x18 := instantiateSpecTest(t, "18", "data.18.wasm")
	t.Cleanup(func() { x18.close(t) })
	x19 := instantiateSpecTest(t, "19", "data.19.wasm")
	t.Cleanup(func() { x19.close(t) })
	x20 := instantiateSpecTest(t, "20", "data.20.wasm")
	t.Cleanup(func() { x20.close(t) })
	x21 := instantiateSpecTest(t, "21", "data.21.wasm")
	t.Cleanup(func() { x21.close(t) })
	x22 := instantiateSpecTest(t, "22", "data.22.wasm")
	t.Cleanup(func() { x22.close(t) })
	x23 := instantiateSpecTest(t, "23", "data.23.wasm")
	t.Cleanup(func() { x23.close(t) })
	x24 := instantiateSpecTest(t, "24", "data.24.wasm")
	t.Cleanup(func() { x24.close(t) })
	t.Run("assert_uninstantiable:174", func(t *testing.T) { assertUninstantiableSpec(t, "data.25.wasm", "out of bounds memory access") })
	t.Run("assert_uninstantiable:182", func(t *testing.T) { assertUninstantiableSpec(t, "data.26.wasm", "out of bounds memory access") })
	t.Run("assert_uninstantiable:190", func(t *testing.T) { assertUninstantiableSpec(t, "data.27.wasm", "out of bounds memory access") })
	t.Run("assert_uninstantiable:197", func(t *testing.T) { assertUninstantiableSpec(t, "data.28.wasm", "out of bounds memory access") })
	t.Run("assert_uninstantiable:204", func(t *testing.T) { assertUninstantiableSpec(t, "data.29.wasm", "out of bounds memory access") })
	t.Run("assert_uninstantiable:221", func(t *testing.T) { assertUninstantiableSpec(t, "data.30.wasm", "out of bounds memory access") })
	t.Run("assert_uninstantiable:230", func(t *testing.T) { assertUninstantiableSpec(t, "data.31.wasm", "out of bounds memory access") })
	t.Run("assert_uninstantiable:237", func(t *testing.T) { assertUninstantiableSpec(t, "data.32.wasm", "out of bounds memory access") })
	t.Run("assert_uninstantiable:245", func(t *testing.T) { assertUninstantiableSpec(t, "data.33.wasm", "out of bounds memory access") })
	t.Run("assert_uninstantiable:253", func(t *testing.T) { assertUninstantiableSpec(t, "data.34.wasm", "out of bounds memory access") })
	t.Run("assert_uninstantiable:261", func(t *testing.T) { assertUninstantiableSpec(t, "data.35.wasm", "out of bounds memory access") })
	t.Run("assert_uninstantiable:268", func(t *testing.T) { assertUninstantiableSpec(t, "data.36.wasm", "out of bounds memory access") })
	t.Run("assert_uninstantiable:276", func(t *testing.T) { assertUninstantiableSpec(t, "data.37.wasm", "out of bounds memory access") })
	t.Run("assert_uninstantiable:283", func(t *testing.T) { assertUninstantiableSpec(t, "data.38.wasm", "out of bounds memory access") })
	t.Run("assert_invalid:293", func(t *testing.T) { assertInvalidSpec(t, "data.39.wasm", "unknown memory") })
	t.Run("assert_invalid:301", func(t *testing.T) { assertInvalidSpec(t, "data.40.wasm", "unknown memory 1") })
	t.Run("assert_invalid:314", func(t *testing.T) { assertInvalidSpec(t, "data.41.wasm", "unknown memory 0") })
	t.Run("assert_invalid:325", func(t *testing.T) { assertInvalidSpec(t, "data.42.wasm", "unknown memory 1") })
	t.Run("assert_invalid:337", func(t *testing.T) { assertInvalidSpec(t, "data.43.wasm", "unknown memory 1") })
	t.Run("assert_invalid:359", func(t *testing.T) { assertInvalidSpec(t, "data.44.wasm", "unknown memory 1") })
	t.Run("assert_invalid:378", func(t *testing.T) { assertInvalidSpec(t, "data.45.wasm", "type mismatch") })
	t.Run("assert_invalid:386", func(t *testing.T) { assertInvalidSpec(t, "data.46.wasm", "type mismatch") })
	t.Run("assert_invalid:394", func(t *testing.T) { assertInvalidSpec(t, "data.47.wasm", "type mismatch") })
	t.Run("assert_invalid:402", func(t *testing.T) { assertInvalidSpec(t, "data.48.wasm", "type mismatch") })
	t.Run("assert_invalid:410", func(t *testing.T) { assertInvalidSpec(t, "data.49.wasm", "type mismatch") })
	t.Run("assert_invalid:419", func(t *testing.T) { assertInvalidSpec(t, "data.50.wasm", "type mismatch") })
	t.Run("assert_invalid:428", func(t *testing.T) { assertInvalidSpec(t, "data.51.wasm", "constant expression required") })
	t.Run("assert_invalid:436", func(t *testing.T) { assertInvalidSpec(t, "data.52.wasm", "constant expression required") })
	t.Run("assert_invalid:444", func(t *testing.T) { assertInvalidSpec(t, "data.53.wasm", "constant expression required") })
	t.Run("assert_invalid:452", func(t *testing.T) { assertInvalidSpec(t, "data.54.wasm", "constant expression required") })
	t.Run("assert_invalid:466", func(t *testing.T) { assertInvalidSpec(t, "data.55.wasm", "unknown global 0") })
	t.Run("assert_invalid:474", func(t *testing.T) { assertInvalidSpec(t, "data.56.wasm", "unknown global 1") })
	t.Run("assert_invalid:483", func(t *testing.T) { assertInvalidSpec(t, "data.57.wasm", "constant expression required") })
}

func Test_elem(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "elem.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	x1 := instantiateSpecTest(t, "1", "elem.1.wasm")
	t.Cleanup(func() { x1.close(t) })
	x2 := instantiateSpecTest(t, "2", "elem.2.wasm")
	t.Cleanup(func() { x2.close(t) })
	x3 := instantiateSpecTest(t, "3", "elem.3.wasm")
	t.Cleanup(func() { x3.close(t) })
	x4 := instantiateSpecTest(t, "4", "elem.4.wasm")
	t.Cleanup(func() { x4.close(t) })
	x5 := instantiateSpecTest(t, "5", "elem.5.wasm")
	t.Cleanup(func() { x5.close(t) })
	x6 := instantiateSpecTest(t, "6", "elem.6.wasm")
	t.Cleanup(func() { x6.close(t) })
	x7 := instantiateSpecTest(t, "7", "elem.7.wasm")
	t.Cleanup(func() { x7.close(t) })
	x8 := instantiateSpecTest(t, "8", "elem.8.wasm")
	t.Cleanup(func() { x8.close(t) })
	t.Run("call-7:148", func(t *testing.T) { x8.assertReturnInvoke(t, "call-7", nil, arg{wa.I32, 65}) })
	t.Run("call-9:149", func(t *testing.T) { x8.assertReturnInvoke(t, "call-9", nil, arg{wa.I32, 66}) })
	x9 := instantiateSpecTest(t, "9", "elem.9.wasm")
	t.Cleanup(func() { x9.close(t) })
	x10 := instantiateSpecTest(t, "10", "elem.10.wasm")
	t.Cleanup(func() { x10.close(t) })
	x11 := instantiateSpecTest(t, "11", "elem.11.wasm")
	t.Cleanup(func() { x11.close(t) })
	x12 := instantiateSpecTest(t, "12", "elem.12.wasm")
	t.Cleanup(func() { x12.close(t) })
	x13 := instantiateSpecTest(t, "13", "elem.13.wasm")
	t.Cleanup(func() { x13.close(t) })
	x14 := instantiateSpecTest(t, "14", "elem.14.wasm")
	t.Cleanup(func() { x14.close(t) })
	x15 := instantiateSpecTest(t, "15", "elem.15.wasm")
	t.Cleanup(func() { x15.close(t) })
	x16 := instantiateSpecTest(t, "16", "elem.16.wasm")
	t.Cleanup(func() { x16.close(t) })
	x17 := instantiateSpecTest(t, "17", "elem.17.wasm")
	t.Cleanup(func() { x17.close(t) })
	x18 := instantiateSpecTest(t, "18", "elem.18.wasm")
	t.Cleanup(func() { x18.close(t) })
	t.Run("assert_uninstantiable:210", func(t *testing.T) { assertUninstantiableSpec(t, "elem.19.wasm", "out of bounds table access") })
	t.Run("assert_uninstantiable:219", func(t *testing.T) { assertUninstantiableSpec(t, "elem.20.wasm", "out of bounds table access") })
	t.Run("assert_uninstantiable:228", func(t *testing.T) { assertUninstantiableSpec(t, "elem.21.wasm", "out of bounds table access") })
	t.Run("assert_uninstantiable:237", func(t *testing.T) { assertUninstantiableSpec(t, "elem.22.wasm", "out of bounds table access") })
	t.Run("assert_uninstantiable:244", func(t *testing.T) { assertUninstantiableSpec(t, "elem.23.wasm", "out of bounds table access") })
	t.Run("assert_uninstantiable:252", func(t *testing.T) { assertUninstantiableSpec(t, "elem.24.wasm", "out of bounds table access") })
	t.Run("assert_uninstantiable:261", func(t *testing.T) { assertUninstantiableSpec(t, "elem.25.wasm", "out of bounds table access") })
	t.Run("assert_uninstantiable:269", func(t *testing.T) { assertUninstantiableSpec(t, "elem.26.wasm", "out of bounds table access") })
	t.Run("assert_uninstantiable:278", func(t *testing.T) { assertUninstantiableSpec(t, "elem.27.wasm", "out of bounds table access") })
	t.Run("assert_uninstantiable:286", func(t *testing.T) { assertUninstantiableSpec(t, "elem.28.wasm", "out of bounds table access") })
	t.Run("assert_uninstantiable:295", func(t *testing.T) { assertUninstantiableSpec(t, "elem.29.wasm", "out of bounds table access") })
	t.Run("assert_uninstantiable:303", func(t *testing.T) { assertUninstantiableSpec(t, "elem.30.wasm", "out of bounds table access") })
	x19 := instantiateSpecTest(t, "19", "elem.31.wasm")
	t.Cleanup(func() { x19.close(t) })
	t.Run("init:321", func(t *testing.T) { x19.assertTrap(t, "init", nil, arg{}, "out of bounds table access") })
	x20 := instantiateSpecTest(t, "20", "elem.32.wasm")
	t.Cleanup(func() { x20.close(t) })
	t.Run("init:331", func(t *testing.T) { x20.assertTrap(t, "init", nil, arg{}, "out of bounds table access") })
	t.Run("assert_invalid:336", func(t *testing.T) { assertInvalidSpec(t, "elem.33.wasm", "unknown table") })
	t.Run("assert_invalid:346", func(t *testing.T) { assertInvalidSpec(t, "elem.34.wasm", "type mismatch") })
	t.Run("assert_invalid:354", func(t *testing.T) { assertInvalidSpec(t, "elem.35.wasm", "type mismatch") })
	t.Run("assert_invalid:362", func(t *testing.T) { assertInvalidSpec(t, "elem.36.wasm", "type mismatch") })
	t.Run("assert_invalid:370", func(t *testing.T) { assertInvalidSpec(t, "elem.37.wasm", "type mismatch") })
	t.Run("assert_invalid:378", func(t *testing.T) { assertInvalidSpec(t, "elem.38.wasm", "type mismatch") })
	t.Run("assert_invalid:387", func(t *testing.T) { assertInvalidSpec(t, "elem.39.wasm", "type mismatch") })
	t.Run("assert_invalid:397", func(t *testing.T) { assertInvalidSpec(t, "elem.40.wasm", "constant expression required") })
	t.Run("assert_invalid:405", func(t *testing.T) { assertInvalidSpec(t, "elem.41.wasm", "constant expression required") })
	t.Run("assert_invalid:413", func(t *testing.T) { assertInvalidSpec(t, "elem.42.wasm", "constant expression required") })
	t.Run("assert_invalid:421", func(t *testing.T) { assertInvalidSpec(t, "elem.43.wasm", "constant expression required") })
	t.Run("assert_invalid:435", func(t *testing.T) { assertInvalidSpec(t, "elem.44.wasm", "unknown global 0") })
	t.Run("assert_invalid:443", func(t *testing.T) { assertInvalidSpec(t, "elem.45.wasm", "unknown global 1") })
	t.Run("assert_invalid:452", func(t *testing.T) { assertInvalidSpec(t, "elem.46.wasm", "constant expression required") })
	t.Run("assert_invalid:463", func(t *testing.T) { assertInvalidSpec(t, "elem.47.wasm", "type mismatch") })
	t.Run("assert_invalid:471", func(t *testing.T) { assertInvalidSpec(t, "elem.48.wasm", "type mismatch") })
	t.Run("assert_invalid:479", func(t *testing.T) { assertInvalidSpec(t, "elem.49.wasm", "type mismatch") })
	t.Run("assert_invalid:487", func(t *testing.T) { assertInvalidSpec(t, "elem.50.wasm", "type mismatch") })
	t.Run("assert_invalid:495", func(t *testing.T) { assertInvalidSpec(t, "elem.51.wasm", "constant expression required") })
	t.Run("assert_invalid:504", func(t *testing.T) { assertInvalidSpec(t, "elem.52.wasm", "constant expression required") })
	x21 := instantiateSpecTest(t, "21", "elem.53.wasm")
	t.Cleanup(func() { x21.close(t) })
	t.Run("call-overwritten:524", func(t *testing.T) { x21.assertReturnInvoke(t, "call-overwritten", nil, arg{wa.I32, 66}) })
	x22 := instantiateSpecTest(t, "22", "elem.54.wasm")
	t.Cleanup(func() { x22.close(t) })
	t.Run("call-overwritten-element:537", func(t *testing.T) { x22.assertReturnInvoke(t, "call-overwritten-element", nil, arg{wa.I32, 66}) })
	xmodule1 := instantiateSpecTest(t, "$module1", "elem.55.wasm")
	t.Cleanup(func() { xmodule1.close(t) })
	xmodule1.register(t)
	t.Run("call-7:561", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("call-8:562", func(t *testing.T) { xmodule1.assertReturnInvoke(t, "call-8", nil, arg{wa.I32, 65}) })
	t.Run("call-9:563", func(t *testing.T) { xmodule1.assertReturnInvoke(t, "call-9", nil, arg{wa.I32, 66}) })
	xmodule2 := instantiateSpecTest(t, "$module2", "elem.56.wasm")
	t.Cleanup(func() { xmodule2.close(t) })
	t.Run("call-7:574", func(t *testing.T) { xmodule1.assertReturnInvoke(t, "call-7", nil, arg{wa.I32, 67}) })
	t.Run("call-8:575", func(t *testing.T) { xmodule1.assertReturnInvoke(t, "call-8", nil, arg{wa.I32, 68}) })
	t.Run("call-9:576", func(t *testing.T) { xmodule1.assertReturnInvoke(t, "call-9", nil, arg{wa.I32, 66}) })
	xmodule3 := instantiateSpecTest(t, "$module3", "elem.57.wasm")
	t.Cleanup(func() { xmodule3.close(t) })
	t.Run("call-7:587", func(t *testing.T) { xmodule1.assertReturnInvoke(t, "call-7", nil, arg{wa.I32, 67}) })
	t.Run("call-8:588", func(t *testing.T) { xmodule1.assertReturnInvoke(t, "call-8", nil, arg{wa.I32, 69}) })
	t.Run("call-9:589", func(t *testing.T) { xmodule1.assertReturnInvoke(t, "call-9", nil, arg{wa.I32, 70}) })
}

func Test_endianness(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "endianness.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("i32_load16_s:133", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32_load16_s", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32_load16_s:134", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32_load16_s", []arg{{wa.I32, 4294963054}}, arg{wa.I32, 4294963054})
	})
	t.Run("i32_load16_s:135", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_load16_s", []arg{{wa.I32, 42}}, arg{wa.I32, 42}) })
	t.Run("i32_load16_s:136", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32_load16_s", []arg{{wa.I32, 12816}}, arg{wa.I32, 12816})
	})
	t.Run("i32_load16_u:138", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32_load16_u", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 65535})
	})
	t.Run("i32_load16_u:139", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32_load16_u", []arg{{wa.I32, 4294963054}}, arg{wa.I32, 61294})
	})
	t.Run("i32_load16_u:140", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_load16_u", []arg{{wa.I32, 42}}, arg{wa.I32, 42}) })
	t.Run("i32_load16_u:141", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32_load16_u", []arg{{wa.I32, 51966}}, arg{wa.I32, 51966})
	})
	t.Run("i32_load:143", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32_load", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32_load:144", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32_load", []arg{{wa.I32, 4252543054}}, arg{wa.I32, 4252543054})
	})
	t.Run("i32_load:145", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32_load", []arg{{wa.I32, 42424242}}, arg{wa.I32, 42424242})
	})
	t.Run("i32_load:146", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32_load", []arg{{wa.I32, 2880249322}}, arg{wa.I32, 2880249322})
	})
	t.Run("i64_load16_s:148", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_load16_s", []arg{{wa.I64, 18446744073709551615}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64_load16_s:149", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_load16_s", []arg{{wa.I64, 18446744073709547374}}, arg{wa.I64, 18446744073709547374})
	})
	t.Run("i64_load16_s:150", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_load16_s", []arg{{wa.I64, 42}}, arg{wa.I64, 42}) })
	t.Run("i64_load16_s:151", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_load16_s", []arg{{wa.I64, 12816}}, arg{wa.I64, 12816})
	})
	t.Run("i64_load16_u:153", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_load16_u", []arg{{wa.I64, 18446744073709551615}}, arg{wa.I64, 65535})
	})
	t.Run("i64_load16_u:154", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_load16_u", []arg{{wa.I64, 18446744073709547374}}, arg{wa.I64, 61294})
	})
	t.Run("i64_load16_u:155", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_load16_u", []arg{{wa.I64, 42}}, arg{wa.I64, 42}) })
	t.Run("i64_load16_u:156", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_load16_u", []arg{{wa.I64, 51966}}, arg{wa.I64, 51966})
	})
	t.Run("i64_load32_s:158", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_load32_s", []arg{{wa.I64, 18446744073709551615}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64_load32_s:159", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_load32_s", []arg{{wa.I64, 18446744073667127374}}, arg{wa.I64, 18446744073667127374})
	})
	t.Run("i64_load32_s:160", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_load32_s", []arg{{wa.I64, 42424242}}, arg{wa.I64, 42424242})
	})
	t.Run("i64_load32_s:161", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_load32_s", []arg{{wa.I64, 305419896}}, arg{wa.I64, 305419896})
	})
	t.Run("i64_load32_u:163", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_load32_u", []arg{{wa.I64, 18446744073709551615}}, arg{wa.I64, 4294967295})
	})
	t.Run("i64_load32_u:164", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_load32_u", []arg{{wa.I64, 18446744073667127374}}, arg{wa.I64, 4252543054})
	})
	t.Run("i64_load32_u:165", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_load32_u", []arg{{wa.I64, 42424242}}, arg{wa.I64, 42424242})
	})
	t.Run("i64_load32_u:166", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_load32_u", []arg{{wa.I64, 2880249322}}, arg{wa.I64, 2880249322})
	})
	t.Run("i64_load:168", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_load", []arg{{wa.I64, 18446744073709551615}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64_load:169", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_load", []arg{{wa.I64, 18446744073667127374}}, arg{wa.I64, 18446744073667127374})
	})
	t.Run("i64_load:170", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_load", []arg{{wa.I64, 2880249322}}, arg{wa.I64, 2880249322})
	})
	t.Run("i64_load:171", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_load", []arg{{wa.I64, 12370766947463011818}}, arg{wa.I64, 12370766947463011818})
	})
	t.Run("f32_load:173", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32_load", []arg{{wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("f32_load:174", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32_load", []arg{{wa.F32, 1011494326}}, arg{wa.F32, 1011494326})
	})
	t.Run("f32_load:175", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32_load", []arg{{wa.F32, 1166316389}}, arg{wa.F32, 1166316389})
	})
	t.Run("f32_load:176", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32_load", []arg{{wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("f64_load:178", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64_load", []arg{{wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("f64_load:179", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64_load", []arg{{wa.F64, 4653144502447687399}}, arg{wa.F64, 4653144502447687399})
	})
	t.Run("f64_load:180", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64_load", []arg{{wa.F64, 4691032041816096430}}, arg{wa.F64, 4691032041816096430})
	})
	t.Run("f64_load:181", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64_load", []arg{{wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("i32_store16:184", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32_store16", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 65535})
	})
	t.Run("i32_store16:185", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32_store16", []arg{{wa.I32, 4294963054}}, arg{wa.I32, 61294})
	})
	t.Run("i32_store16:186", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_store16", []arg{{wa.I32, 42}}, arg{wa.I32, 42}) })
	t.Run("i32_store16:187", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32_store16", []arg{{wa.I32, 51966}}, arg{wa.I32, 51966})
	})
	t.Run("i32_store:189", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32_store", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32_store:190", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32_store", []arg{{wa.I32, 4294963054}}, arg{wa.I32, 4294963054})
	})
	t.Run("i32_store:191", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32_store", []arg{{wa.I32, 42424242}}, arg{wa.I32, 42424242})
	})
	t.Run("i32_store:192", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32_store", []arg{{wa.I32, 3735931646}}, arg{wa.I32, 3735931646})
	})
	t.Run("i64_store16:194", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_store16", []arg{{wa.I64, 18446744073709551615}}, arg{wa.I64, 65535})
	})
	t.Run("i64_store16:195", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_store16", []arg{{wa.I64, 18446744073709547374}}, arg{wa.I64, 61294})
	})
	t.Run("i64_store16:196", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_store16", []arg{{wa.I64, 42}}, arg{wa.I64, 42}) })
	t.Run("i64_store16:197", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_store16", []arg{{wa.I64, 51966}}, arg{wa.I64, 51966})
	})
	t.Run("i64_store32:199", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_store32", []arg{{wa.I64, 18446744073709551615}}, arg{wa.I64, 4294967295})
	})
	t.Run("i64_store32:200", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_store32", []arg{{wa.I64, 18446744073709547374}}, arg{wa.I64, 4294963054})
	})
	t.Run("i64_store32:201", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_store32", []arg{{wa.I64, 42424242}}, arg{wa.I64, 42424242})
	})
	t.Run("i64_store32:202", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_store32", []arg{{wa.I64, 3735931646}}, arg{wa.I64, 3735931646})
	})
	t.Run("i64_store:204", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_store", []arg{{wa.I64, 18446744073709551615}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64_store:205", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_store", []arg{{wa.I64, 18446744073667127374}}, arg{wa.I64, 18446744073667127374})
	})
	t.Run("i64_store:206", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_store", []arg{{wa.I64, 2880249322}}, arg{wa.I64, 2880249322})
	})
	t.Run("i64_store:207", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64_store", []arg{{wa.I64, 12370766947463011818}}, arg{wa.I64, 12370766947463011818})
	})
	t.Run("f32_store:209", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32_store", []arg{{wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("f32_store:210", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32_store", []arg{{wa.F32, 1011494326}}, arg{wa.F32, 1011494326})
	})
	t.Run("f32_store:211", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32_store", []arg{{wa.F32, 1166316389}}, arg{wa.F32, 1166316389})
	})
	t.Run("f32_store:212", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32_store", []arg{{wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("f64_store:214", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64_store", []arg{{wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("f64_store:215", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64_store", []arg{{wa.F64, 4653144502447687399}}, arg{wa.F64, 4653144502447687399})
	})
	t.Run("f64_store:216", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64_store", []arg{{wa.F64, 4691032041816096430}}, arg{wa.F64, 4691032041816096430})
	})
	t.Run("f64_store:217", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64_store", []arg{{wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
}

func Test_exports(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "exports.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	x1 := instantiateSpecTest(t, "1", "exports.1.wasm")
	t.Cleanup(func() { x1.close(t) })
	x2 := instantiateSpecTest(t, "2", "exports.2.wasm")
	t.Cleanup(func() { x2.close(t) })
	x3 := instantiateSpecTest(t, "3", "exports.3.wasm")
	t.Cleanup(func() { x3.close(t) })
	x4 := instantiateSpecTest(t, "4", "exports.4.wasm")
	t.Cleanup(func() { x4.close(t) })
	x5 := instantiateSpecTest(t, "5", "exports.5.wasm")
	t.Cleanup(func() { x5.close(t) })
	x6 := instantiateSpecTest(t, "6", "exports.6.wasm")
	t.Cleanup(func() { x6.close(t) })
	x7 := instantiateSpecTest(t, "7", "exports.7.wasm")
	t.Cleanup(func() { x7.close(t) })
	x8 := instantiateSpecTest(t, "8", "exports.8.wasm")
	t.Cleanup(func() { x8.close(t) })
	x9 := instantiateSpecTest(t, "9", "exports.9.wasm")
	t.Cleanup(func() { x9.close(t) })
	x10 := instantiateSpecTest(t, "10", "exports.10.wasm")
	t.Cleanup(func() { x10.close(t) })
	xFunc := instantiateSpecTest(t, "$Func", "exports.11.wasm")
	t.Cleanup(func() { xFunc.close(t) })
	t.Run("e:22", func(t *testing.T) { xFunc.assertReturnInvoke(t, "e", []arg{{wa.I32, 42}}, arg{wa.I32, 43}) })
	t.Run("e:23", func(t *testing.T) { xFunc.assertReturnInvoke(t, "e", []arg{{wa.I32, 42}}, arg{wa.I32, 43}) })
	x11 := instantiateSpecTest(t, "11", "exports.12.wasm")
	t.Cleanup(func() { x11.close(t) })
	xOther1 := instantiateSpecTest(t, "$Other1", "exports.13.wasm")
	t.Cleanup(func() { xOther1.close(t) })
	t.Run("e:26", func(t *testing.T) { xFunc.assertReturnInvoke(t, "e", []arg{{wa.I32, 42}}, arg{wa.I32, 43}) })
	x12 := instantiateSpecTest(t, "12", "exports.14.wasm")
	t.Cleanup(func() { x12.close(t) })
	t.Run("a:34", func(t *testing.T) { x12.assertReturnInvoke(t, "a", nil, arg{wa.I32, 42}) })
	t.Run("b:35", func(t *testing.T) { x12.assertReturnInvoke(t, "b", nil, arg{wa.I32, 42}) })
	t.Run("c:36", func(t *testing.T) { x12.assertReturnInvoke(t, "c", nil, arg{wa.I32, 42}) })
	t.Run("assert_invalid:39", func(t *testing.T) { assertInvalidSpec(t, "exports.15.wasm", "unknown function") })
	t.Run("assert_invalid:43", func(t *testing.T) { assertInvalidSpec(t, "exports.16.wasm", "unknown function") })
	t.Run("assert_invalid:47", func(t *testing.T) { assertInvalidSpec(t, "exports.17.wasm", "unknown function") })
	t.Run("assert_invalid:51", func(t *testing.T) { assertInvalidSpec(t, "exports.18.wasm", "duplicate export name") })
	t.Run("assert_invalid:55", func(t *testing.T) { assertInvalidSpec(t, "exports.19.wasm", "duplicate export name") })
	t.Run("assert_invalid:59", func(t *testing.T) { assertInvalidSpec(t, "exports.20.wasm", "duplicate export name") })
	t.Run("assert_invalid:63", func(t *testing.T) { assertInvalidSpec(t, "exports.21.wasm", "duplicate export name") })
	t.Run("assert_invalid:67", func(t *testing.T) { assertInvalidSpec(t, "exports.22.wasm", "duplicate export name") })
	x13 := instantiateSpecTest(t, "13", "exports.23.wasm")
	t.Cleanup(func() { x13.close(t) })
	x14 := instantiateSpecTest(t, "14", "exports.24.wasm")
	t.Cleanup(func() { x14.close(t) })
	x15 := instantiateSpecTest(t, "15", "exports.25.wasm")
	t.Cleanup(func() { x15.close(t) })
	x16 := instantiateSpecTest(t, "16", "exports.26.wasm")
	t.Cleanup(func() { x16.close(t) })
	x17 := instantiateSpecTest(t, "17", "exports.27.wasm")
	t.Cleanup(func() { x17.close(t) })
	x18 := instantiateSpecTest(t, "18", "exports.28.wasm")
	t.Cleanup(func() { x18.close(t) })
	x19 := instantiateSpecTest(t, "19", "exports.29.wasm")
	t.Cleanup(func() { x19.close(t) })
	x20 := instantiateSpecTest(t, "20", "exports.30.wasm")
	t.Cleanup(func() { x20.close(t) })
	x21 := instantiateSpecTest(t, "21", "exports.31.wasm")
	t.Cleanup(func() { x21.close(t) })
	xGlobal := instantiateSpecTest(t, "$Global", "exports.32.wasm")
	t.Cleanup(func() { xGlobal.close(t) })
	t.Run("e:89", func(t *testing.T) { xGlobal.assertReturnGet(t, "e", arg{wa.I32, 42}) })
	t.Run("e:90", func(t *testing.T) { xGlobal.assertReturnGet(t, "e", arg{wa.I32, 42}) })
	x22 := instantiateSpecTest(t, "22", "exports.33.wasm")
	t.Cleanup(func() { x22.close(t) })
	xOther2 := instantiateSpecTest(t, "$Other2", "exports.34.wasm")
	t.Cleanup(func() { xOther2.close(t) })
	t.Run("e:93", func(t *testing.T) { xGlobal.assertReturnGet(t, "e", arg{wa.I32, 42}) })
	t.Run("assert_invalid:96", func(t *testing.T) { assertInvalidSpec(t, "exports.35.wasm", "unknown global") })
	t.Run("assert_invalid:100", func(t *testing.T) { assertInvalidSpec(t, "exports.36.wasm", "unknown global") })
	t.Run("assert_invalid:104", func(t *testing.T) { assertInvalidSpec(t, "exports.37.wasm", "unknown global") })
	t.Run("assert_invalid:108", func(t *testing.T) { assertInvalidSpec(t, "exports.38.wasm", "duplicate export name") })
	t.Run("assert_invalid:112", func(t *testing.T) { assertInvalidSpec(t, "exports.39.wasm", "duplicate export name") })
	t.Run("assert_invalid:116", func(t *testing.T) { assertInvalidSpec(t, "exports.40.wasm", "duplicate export name") })
	t.Run("assert_invalid:120", func(t *testing.T) { assertInvalidSpec(t, "exports.41.wasm", "duplicate export name") })
	t.Run("assert_invalid:124", func(t *testing.T) { assertInvalidSpec(t, "exports.42.wasm", "duplicate export name") })
	x23 := instantiateSpecTest(t, "23", "exports.43.wasm")
	t.Cleanup(func() { x23.close(t) })
	x24 := instantiateSpecTest(t, "24", "exports.44.wasm")
	t.Cleanup(func() { x24.close(t) })
	x25 := instantiateSpecTest(t, "25", "exports.45.wasm")
	t.Cleanup(func() { x25.close(t) })
	x26 := instantiateSpecTest(t, "26", "exports.46.wasm")
	t.Cleanup(func() { x26.close(t) })
	x27 := instantiateSpecTest(t, "27", "exports.47.wasm")
	t.Cleanup(func() { x27.close(t) })
	x28 := instantiateSpecTest(t, "28", "exports.48.wasm")
	t.Cleanup(func() { x28.close(t) })
	x29 := instantiateSpecTest(t, "29", "exports.49.wasm")
	t.Cleanup(func() { x29.close(t) })
	x30 := instantiateSpecTest(t, "30", "exports.50.wasm")
	t.Cleanup(func() { x30.close(t) })
	x31 := instantiateSpecTest(t, "31", "exports.51.wasm")
	t.Cleanup(func() { x31.close(t) })
	x32 := instantiateSpecTest(t, "32", "exports.52.wasm")
	t.Cleanup(func() { x32.close(t) })
	x33 := instantiateSpecTest(t, "33", "exports.53.wasm")
	t.Cleanup(func() { x33.close(t) })
	x34 := instantiateSpecTest(t, "34", "exports.54.wasm")
	t.Cleanup(func() { x34.close(t) })
	x35 := instantiateSpecTest(t, "35", "exports.55.wasm")
	t.Cleanup(func() { x35.close(t) })
	x36 := instantiateSpecTest(t, "36", "exports.56.wasm")
	t.Cleanup(func() { x36.close(t) })
	x37 := instantiateSpecTest(t, "37", "exports.57.wasm")
	t.Cleanup(func() { x37.close(t) })
	t.Run("assert_invalid:151", func(t *testing.T) { assertInvalidSpec(t, "exports.58.wasm", "unknown table") })
	t.Run("assert_invalid:155", func(t *testing.T) { assertInvalidSpec(t, "exports.59.wasm", "unknown table") })
	t.Run("assert_invalid:159", func(t *testing.T) { assertInvalidSpec(t, "exports.60.wasm", "unknown table") })
	t.Run("assert_invalid:163", func(t *testing.T) { assertInvalidSpec(t, "exports.61.wasm", "duplicate export name") })
	t.Run("assert_invalid:167", func(t *testing.T) { assertInvalidSpec(t, "exports.62.wasm", "duplicate export name") })
	t.Run("assert_invalid:171", func(t *testing.T) { assertInvalidSpec(t, "exports.63.wasm", "duplicate export name") })
	t.Run("assert_invalid:175", func(t *testing.T) { assertInvalidSpec(t, "exports.64.wasm", "duplicate export name") })
	t.Run("assert_invalid:179", func(t *testing.T) { assertInvalidSpec(t, "exports.65.wasm", "duplicate export name") })
	x38 := instantiateSpecTest(t, "38", "exports.66.wasm")
	t.Cleanup(func() { x38.close(t) })
	x39 := instantiateSpecTest(t, "39", "exports.67.wasm")
	t.Cleanup(func() { x39.close(t) })
	x40 := instantiateSpecTest(t, "40", "exports.68.wasm")
	t.Cleanup(func() { x40.close(t) })
	x41 := instantiateSpecTest(t, "41", "exports.69.wasm")
	t.Cleanup(func() { x41.close(t) })
	x42 := instantiateSpecTest(t, "42", "exports.70.wasm")
	t.Cleanup(func() { x42.close(t) })
	x43 := instantiateSpecTest(t, "43", "exports.71.wasm")
	t.Cleanup(func() { x43.close(t) })
	x44 := instantiateSpecTest(t, "44", "exports.72.wasm")
	t.Cleanup(func() { x44.close(t) })
	x45 := instantiateSpecTest(t, "45", "exports.73.wasm")
	t.Cleanup(func() { x45.close(t) })
	x46 := instantiateSpecTest(t, "46", "exports.74.wasm")
	t.Cleanup(func() { x46.close(t) })
	x47 := instantiateSpecTest(t, "47", "exports.75.wasm")
	t.Cleanup(func() { x47.close(t) })
	x48 := instantiateSpecTest(t, "48", "exports.76.wasm")
	t.Cleanup(func() { x48.close(t) })
	x49 := instantiateSpecTest(t, "49", "exports.77.wasm")
	t.Cleanup(func() { x49.close(t) })
	x50 := instantiateSpecTest(t, "50", "exports.78.wasm")
	t.Cleanup(func() { x50.close(t) })
	x51 := instantiateSpecTest(t, "51", "exports.79.wasm")
	t.Cleanup(func() { x51.close(t) })
	t.Run("assert_invalid:207", func(t *testing.T) { assertInvalidSpec(t, "exports.80.wasm", "unknown memory") })
	t.Run("assert_invalid:211", func(t *testing.T) { assertInvalidSpec(t, "exports.81.wasm", "unknown memory") })
	t.Run("assert_invalid:215", func(t *testing.T) { assertInvalidSpec(t, "exports.82.wasm", "unknown memory") })
	t.Run("assert_invalid:219", func(t *testing.T) { assertInvalidSpec(t, "exports.83.wasm", "duplicate export name") })
	t.Run("assert_invalid:228", func(t *testing.T) { assertInvalidSpec(t, "exports.84.wasm", "duplicate export name") })
	t.Run("assert_invalid:232", func(t *testing.T) { assertInvalidSpec(t, "exports.85.wasm", "duplicate export name") })
	t.Run("assert_invalid:236", func(t *testing.T) { assertInvalidSpec(t, "exports.86.wasm", "duplicate export name") })
}

func Test_f32(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "f32.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("add:19", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("add:20", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483648}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("add:21", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 0}, {wa.F32, 2147483648}}, arg{wa.F32, 0})
	})
	t.Run("add:22", func(t *testing.T) { x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 0}, {wa.F32, 0}}, arg{wa.F32, 0}) })
	t.Run("add:23", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483649})
	})
	t.Run("add:24", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483648}, {wa.F32, 1}}, arg{wa.F32, 1})
	})
	t.Run("add:25", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 0}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483649})
	})
	t.Run("add:26", func(t *testing.T) { x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 0}, {wa.F32, 1}}, arg{wa.F32, 1}) })
	t.Run("add:27", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483648}, {wa.F32, 2155872256}}, arg{wa.F32, 2155872256})
	})
	t.Run("add:28", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483648}, {wa.F32, 8388608}}, arg{wa.F32, 8388608})
	})
	t.Run("add:29", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 0}, {wa.F32, 2155872256}}, arg{wa.F32, 2155872256})
	})
	t.Run("add:30", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 0}, {wa.F32, 8388608}}, arg{wa.F32, 8388608})
	})
	t.Run("add:31", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483648}, {wa.F32, 3204448256}}, arg{wa.F32, 3204448256})
	})
	t.Run("add:32", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483648}, {wa.F32, 1056964608}}, arg{wa.F32, 1056964608})
	})
	t.Run("add:33", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 0}, {wa.F32, 3204448256}}, arg{wa.F32, 3204448256})
	})
	t.Run("add:34", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 0}, {wa.F32, 1056964608}}, arg{wa.F32, 1056964608})
	})
	t.Run("add:35", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483648}, {wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("add:36", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483648}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("add:37", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 0}, {wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("add:38", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 0}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("add:39", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483648}, {wa.F32, 3234402267}}, arg{wa.F32, 3234402267})
	})
	t.Run("add:40", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483648}, {wa.F32, 1086918619}}, arg{wa.F32, 1086918619})
	})
	t.Run("add:41", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 0}, {wa.F32, 3234402267}}, arg{wa.F32, 3234402267})
	})
	t.Run("add:42", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 0}, {wa.F32, 1086918619}}, arg{wa.F32, 1086918619})
	})
	t.Run("add:43", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483648}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("add:44", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483648}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("add:45", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 0}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("add:46", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 0}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("add:47", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483648}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:48", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483648}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:49", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 0}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:50", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 0}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:51", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483648}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:52", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483648}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:53", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483648}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:54", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483648}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:55", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 0}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:56", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 0}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:57", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 0}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:58", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 0}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:59", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483649}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483649})
	})
	t.Run("add:60", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483649}, {wa.F32, 0}}, arg{wa.F32, 2147483649})
	})
	t.Run("add:61", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1}, {wa.F32, 2147483648}}, arg{wa.F32, 1})
	})
	t.Run("add:62", func(t *testing.T) { x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1}, {wa.F32, 0}}, arg{wa.F32, 1}) })
	t.Run("add:63", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483649}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483650})
	})
	t.Run("add:64", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483649}, {wa.F32, 1}}, arg{wa.F32, 0})
	})
	t.Run("add:65", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1}, {wa.F32, 2147483649}}, arg{wa.F32, 0})
	})
	t.Run("add:66", func(t *testing.T) { x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1}, {wa.F32, 1}}, arg{wa.F32, 2}) })
	t.Run("add:67", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483649}, {wa.F32, 2155872256}}, arg{wa.F32, 2155872257})
	})
	t.Run("add:68", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483649}, {wa.F32, 8388608}}, arg{wa.F32, 8388607})
	})
	t.Run("add:69", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1}, {wa.F32, 2155872256}}, arg{wa.F32, 2155872255})
	})
	t.Run("add:70", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1}, {wa.F32, 8388608}}, arg{wa.F32, 8388609})
	})
	t.Run("add:71", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483649}, {wa.F32, 3204448256}}, arg{wa.F32, 3204448256})
	})
	t.Run("add:72", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483649}, {wa.F32, 1056964608}}, arg{wa.F32, 1056964608})
	})
	t.Run("add:73", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1}, {wa.F32, 3204448256}}, arg{wa.F32, 3204448256})
	})
	t.Run("add:74", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1}, {wa.F32, 1056964608}}, arg{wa.F32, 1056964608})
	})
	t.Run("add:75", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483649}, {wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("add:76", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483649}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("add:77", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1}, {wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("add:78", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("add:79", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483649}, {wa.F32, 3234402267}}, arg{wa.F32, 3234402267})
	})
	t.Run("add:80", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483649}, {wa.F32, 1086918619}}, arg{wa.F32, 1086918619})
	})
	t.Run("add:81", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1}, {wa.F32, 3234402267}}, arg{wa.F32, 3234402267})
	})
	t.Run("add:82", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1}, {wa.F32, 1086918619}}, arg{wa.F32, 1086918619})
	})
	t.Run("add:83", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483649}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("add:84", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483649}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("add:85", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("add:86", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("add:87", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483649}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:88", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483649}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:89", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:90", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:91", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483649}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:92", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483649}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:93", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483649}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:94", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2147483649}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:95", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:96", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:97", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:98", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:99", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2155872256}, {wa.F32, 2147483648}}, arg{wa.F32, 2155872256})
	})
	t.Run("add:100", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2155872256}, {wa.F32, 0}}, arg{wa.F32, 2155872256})
	})
	t.Run("add:101", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 8388608}, {wa.F32, 2147483648}}, arg{wa.F32, 8388608})
	})
	t.Run("add:102", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 8388608}, {wa.F32, 0}}, arg{wa.F32, 8388608})
	})
	t.Run("add:103", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2155872256}, {wa.F32, 2147483649}}, arg{wa.F32, 2155872257})
	})
	t.Run("add:104", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2155872256}, {wa.F32, 1}}, arg{wa.F32, 2155872255})
	})
	t.Run("add:105", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 8388608}, {wa.F32, 2147483649}}, arg{wa.F32, 8388607})
	})
	t.Run("add:106", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 8388608}, {wa.F32, 1}}, arg{wa.F32, 8388609})
	})
	t.Run("add:107", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2155872256}, {wa.F32, 2155872256}}, arg{wa.F32, 2164260864})
	})
	t.Run("add:108", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2155872256}, {wa.F32, 8388608}}, arg{wa.F32, 0})
	})
	t.Run("add:109", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 8388608}, {wa.F32, 2155872256}}, arg{wa.F32, 0})
	})
	t.Run("add:110", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 8388608}, {wa.F32, 8388608}}, arg{wa.F32, 16777216})
	})
	t.Run("add:111", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2155872256}, {wa.F32, 3204448256}}, arg{wa.F32, 3204448256})
	})
	t.Run("add:112", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2155872256}, {wa.F32, 1056964608}}, arg{wa.F32, 1056964608})
	})
	t.Run("add:113", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 8388608}, {wa.F32, 3204448256}}, arg{wa.F32, 3204448256})
	})
	t.Run("add:114", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 8388608}, {wa.F32, 1056964608}}, arg{wa.F32, 1056964608})
	})
	t.Run("add:115", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2155872256}, {wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("add:116", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2155872256}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("add:117", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 8388608}, {wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("add:118", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 8388608}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("add:119", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2155872256}, {wa.F32, 3234402267}}, arg{wa.F32, 3234402267})
	})
	t.Run("add:120", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2155872256}, {wa.F32, 1086918619}}, arg{wa.F32, 1086918619})
	})
	t.Run("add:121", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 8388608}, {wa.F32, 3234402267}}, arg{wa.F32, 3234402267})
	})
	t.Run("add:122", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 8388608}, {wa.F32, 1086918619}}, arg{wa.F32, 1086918619})
	})
	t.Run("add:123", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2155872256}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("add:124", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2155872256}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("add:125", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 8388608}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("add:126", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 8388608}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("add:127", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2155872256}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:128", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2155872256}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:129", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 8388608}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:130", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 8388608}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:131", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2155872256}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:132", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2155872256}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:133", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2155872256}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:134", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2155872256}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:135", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 8388608}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:136", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 8388608}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:137", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 8388608}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:138", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 8388608}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:139", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3204448256}, {wa.F32, 2147483648}}, arg{wa.F32, 3204448256})
	})
	t.Run("add:140", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3204448256}, {wa.F32, 0}}, arg{wa.F32, 3204448256})
	})
	t.Run("add:141", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1056964608}, {wa.F32, 2147483648}}, arg{wa.F32, 1056964608})
	})
	t.Run("add:142", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1056964608}, {wa.F32, 0}}, arg{wa.F32, 1056964608})
	})
	t.Run("add:143", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3204448256}, {wa.F32, 2147483649}}, arg{wa.F32, 3204448256})
	})
	t.Run("add:144", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3204448256}, {wa.F32, 1}}, arg{wa.F32, 3204448256})
	})
	t.Run("add:145", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1056964608}, {wa.F32, 2147483649}}, arg{wa.F32, 1056964608})
	})
	t.Run("add:146", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1056964608}, {wa.F32, 1}}, arg{wa.F32, 1056964608})
	})
	t.Run("add:147", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3204448256}, {wa.F32, 2155872256}}, arg{wa.F32, 3204448256})
	})
	t.Run("add:148", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3204448256}, {wa.F32, 8388608}}, arg{wa.F32, 3204448256})
	})
	t.Run("add:149", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1056964608}, {wa.F32, 2155872256}}, arg{wa.F32, 1056964608})
	})
	t.Run("add:150", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1056964608}, {wa.F32, 8388608}}, arg{wa.F32, 1056964608})
	})
	t.Run("add:151", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3204448256}, {wa.F32, 3204448256}}, arg{wa.F32, 3212836864})
	})
	t.Run("add:152", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3204448256}, {wa.F32, 1056964608}}, arg{wa.F32, 0})
	})
	t.Run("add:153", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1056964608}, {wa.F32, 3204448256}}, arg{wa.F32, 0})
	})
	t.Run("add:154", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1056964608}, {wa.F32, 1056964608}}, arg{wa.F32, 1065353216})
	})
	t.Run("add:155", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3204448256}, {wa.F32, 3212836864}}, arg{wa.F32, 3217031168})
	})
	t.Run("add:156", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3204448256}, {wa.F32, 1065353216}}, arg{wa.F32, 1056964608})
	})
	t.Run("add:157", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1056964608}, {wa.F32, 3212836864}}, arg{wa.F32, 3204448256})
	})
	t.Run("add:158", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1056964608}, {wa.F32, 1065353216}}, arg{wa.F32, 1069547520})
	})
	t.Run("add:159", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3204448256}, {wa.F32, 3234402267}}, arg{wa.F32, 3235450843})
	})
	t.Run("add:160", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3204448256}, {wa.F32, 1086918619}}, arg{wa.F32, 1085870043})
	})
	t.Run("add:161", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1056964608}, {wa.F32, 3234402267}}, arg{wa.F32, 3233353691})
	})
	t.Run("add:162", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1056964608}, {wa.F32, 1086918619}}, arg{wa.F32, 1087967195})
	})
	t.Run("add:163", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3204448256}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("add:164", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3204448256}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("add:165", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1056964608}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("add:166", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1056964608}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("add:167", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3204448256}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:168", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3204448256}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:169", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1056964608}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:170", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1056964608}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:171", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3204448256}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:172", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3204448256}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:173", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3204448256}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:174", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3204448256}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:175", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1056964608}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:176", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1056964608}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:177", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1056964608}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:178", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1056964608}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:179", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3212836864}, {wa.F32, 2147483648}}, arg{wa.F32, 3212836864})
	})
	t.Run("add:180", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3212836864}, {wa.F32, 0}}, arg{wa.F32, 3212836864})
	})
	t.Run("add:181", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1065353216}, {wa.F32, 2147483648}}, arg{wa.F32, 1065353216})
	})
	t.Run("add:182", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1065353216}, {wa.F32, 0}}, arg{wa.F32, 1065353216})
	})
	t.Run("add:183", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3212836864}, {wa.F32, 2147483649}}, arg{wa.F32, 3212836864})
	})
	t.Run("add:184", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3212836864}, {wa.F32, 1}}, arg{wa.F32, 3212836864})
	})
	t.Run("add:185", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1065353216}, {wa.F32, 2147483649}}, arg{wa.F32, 1065353216})
	})
	t.Run("add:186", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1065353216}, {wa.F32, 1}}, arg{wa.F32, 1065353216})
	})
	t.Run("add:187", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3212836864}, {wa.F32, 2155872256}}, arg{wa.F32, 3212836864})
	})
	t.Run("add:188", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3212836864}, {wa.F32, 8388608}}, arg{wa.F32, 3212836864})
	})
	t.Run("add:189", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1065353216}, {wa.F32, 2155872256}}, arg{wa.F32, 1065353216})
	})
	t.Run("add:190", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1065353216}, {wa.F32, 8388608}}, arg{wa.F32, 1065353216})
	})
	t.Run("add:191", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3212836864}, {wa.F32, 3204448256}}, arg{wa.F32, 3217031168})
	})
	t.Run("add:192", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3212836864}, {wa.F32, 1056964608}}, arg{wa.F32, 3204448256})
	})
	t.Run("add:193", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1065353216}, {wa.F32, 3204448256}}, arg{wa.F32, 1056964608})
	})
	t.Run("add:194", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1065353216}, {wa.F32, 1056964608}}, arg{wa.F32, 1069547520})
	})
	t.Run("add:195", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3212836864}, {wa.F32, 3212836864}}, arg{wa.F32, 3221225472})
	})
	t.Run("add:196", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3212836864}, {wa.F32, 1065353216}}, arg{wa.F32, 0})
	})
	t.Run("add:197", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1065353216}, {wa.F32, 3212836864}}, arg{wa.F32, 0})
	})
	t.Run("add:198", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1065353216}, {wa.F32, 1065353216}}, arg{wa.F32, 1073741824})
	})
	t.Run("add:199", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3212836864}, {wa.F32, 3234402267}}, arg{wa.F32, 3236499419})
	})
	t.Run("add:200", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3212836864}, {wa.F32, 1086918619}}, arg{wa.F32, 1084821467})
	})
	t.Run("add:201", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1065353216}, {wa.F32, 3234402267}}, arg{wa.F32, 3232305115})
	})
	t.Run("add:202", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1065353216}, {wa.F32, 1086918619}}, arg{wa.F32, 1089015771})
	})
	t.Run("add:203", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3212836864}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("add:204", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3212836864}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("add:205", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1065353216}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("add:206", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1065353216}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("add:207", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3212836864}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:208", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3212836864}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:209", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1065353216}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:210", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1065353216}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:211", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3212836864}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:212", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3212836864}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:213", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3212836864}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:214", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3212836864}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:215", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1065353216}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:216", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1065353216}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:217", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1065353216}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:218", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1065353216}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:219", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3234402267}, {wa.F32, 2147483648}}, arg{wa.F32, 3234402267})
	})
	t.Run("add:220", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3234402267}, {wa.F32, 0}}, arg{wa.F32, 3234402267})
	})
	t.Run("add:221", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1086918619}, {wa.F32, 2147483648}}, arg{wa.F32, 1086918619})
	})
	t.Run("add:222", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1086918619}, {wa.F32, 0}}, arg{wa.F32, 1086918619})
	})
	t.Run("add:223", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3234402267}, {wa.F32, 2147483649}}, arg{wa.F32, 3234402267})
	})
	t.Run("add:224", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3234402267}, {wa.F32, 1}}, arg{wa.F32, 3234402267})
	})
	t.Run("add:225", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1086918619}, {wa.F32, 2147483649}}, arg{wa.F32, 1086918619})
	})
	t.Run("add:226", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1086918619}, {wa.F32, 1}}, arg{wa.F32, 1086918619})
	})
	t.Run("add:227", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3234402267}, {wa.F32, 2155872256}}, arg{wa.F32, 3234402267})
	})
	t.Run("add:228", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3234402267}, {wa.F32, 8388608}}, arg{wa.F32, 3234402267})
	})
	t.Run("add:229", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1086918619}, {wa.F32, 2155872256}}, arg{wa.F32, 1086918619})
	})
	t.Run("add:230", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1086918619}, {wa.F32, 8388608}}, arg{wa.F32, 1086918619})
	})
	t.Run("add:231", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3234402267}, {wa.F32, 3204448256}}, arg{wa.F32, 3235450843})
	})
	t.Run("add:232", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3234402267}, {wa.F32, 1056964608}}, arg{wa.F32, 3233353691})
	})
	t.Run("add:233", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1086918619}, {wa.F32, 3204448256}}, arg{wa.F32, 1085870043})
	})
	t.Run("add:234", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1086918619}, {wa.F32, 1056964608}}, arg{wa.F32, 1087967195})
	})
	t.Run("add:235", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3234402267}, {wa.F32, 3212836864}}, arg{wa.F32, 3236499419})
	})
	t.Run("add:236", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3234402267}, {wa.F32, 1065353216}}, arg{wa.F32, 3232305115})
	})
	t.Run("add:237", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1086918619}, {wa.F32, 3212836864}}, arg{wa.F32, 1084821467})
	})
	t.Run("add:238", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1086918619}, {wa.F32, 1065353216}}, arg{wa.F32, 1089015771})
	})
	t.Run("add:239", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3234402267}, {wa.F32, 3234402267}}, arg{wa.F32, 3242790875})
	})
	t.Run("add:240", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3234402267}, {wa.F32, 1086918619}}, arg{wa.F32, 0})
	})
	t.Run("add:241", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1086918619}, {wa.F32, 3234402267}}, arg{wa.F32, 0})
	})
	t.Run("add:242", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1086918619}, {wa.F32, 1086918619}}, arg{wa.F32, 1095307227})
	})
	t.Run("add:243", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3234402267}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("add:244", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3234402267}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("add:245", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1086918619}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("add:246", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1086918619}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("add:247", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3234402267}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:248", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3234402267}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:249", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1086918619}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:250", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1086918619}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:251", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3234402267}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:252", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3234402267}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:253", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3234402267}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:254", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 3234402267}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:255", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1086918619}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:256", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1086918619}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:257", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1086918619}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:258", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 1086918619}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:259", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578687}, {wa.F32, 2147483648}}, arg{wa.F32, 4286578687})
	})
	t.Run("add:260", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578687}, {wa.F32, 0}}, arg{wa.F32, 4286578687})
	})
	t.Run("add:261", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095039}, {wa.F32, 2147483648}}, arg{wa.F32, 2139095039})
	})
	t.Run("add:262", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095039}, {wa.F32, 0}}, arg{wa.F32, 2139095039})
	})
	t.Run("add:263", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578687}, {wa.F32, 2147483649}}, arg{wa.F32, 4286578687})
	})
	t.Run("add:264", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578687}, {wa.F32, 1}}, arg{wa.F32, 4286578687})
	})
	t.Run("add:265", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095039}, {wa.F32, 2147483649}}, arg{wa.F32, 2139095039})
	})
	t.Run("add:266", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095039}, {wa.F32, 1}}, arg{wa.F32, 2139095039})
	})
	t.Run("add:267", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578687}, {wa.F32, 2155872256}}, arg{wa.F32, 4286578687})
	})
	t.Run("add:268", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578687}, {wa.F32, 8388608}}, arg{wa.F32, 4286578687})
	})
	t.Run("add:269", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095039}, {wa.F32, 2155872256}}, arg{wa.F32, 2139095039})
	})
	t.Run("add:270", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095039}, {wa.F32, 8388608}}, arg{wa.F32, 2139095039})
	})
	t.Run("add:271", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578687}, {wa.F32, 3204448256}}, arg{wa.F32, 4286578687})
	})
	t.Run("add:272", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578687}, {wa.F32, 1056964608}}, arg{wa.F32, 4286578687})
	})
	t.Run("add:273", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095039}, {wa.F32, 3204448256}}, arg{wa.F32, 2139095039})
	})
	t.Run("add:274", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095039}, {wa.F32, 1056964608}}, arg{wa.F32, 2139095039})
	})
	t.Run("add:275", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578687}, {wa.F32, 3212836864}}, arg{wa.F32, 4286578687})
	})
	t.Run("add:276", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578687}, {wa.F32, 1065353216}}, arg{wa.F32, 4286578687})
	})
	t.Run("add:277", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095039}, {wa.F32, 3212836864}}, arg{wa.F32, 2139095039})
	})
	t.Run("add:278", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095039}, {wa.F32, 1065353216}}, arg{wa.F32, 2139095039})
	})
	t.Run("add:279", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578687}, {wa.F32, 3234402267}}, arg{wa.F32, 4286578687})
	})
	t.Run("add:280", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578687}, {wa.F32, 1086918619}}, arg{wa.F32, 4286578687})
	})
	t.Run("add:281", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095039}, {wa.F32, 3234402267}}, arg{wa.F32, 2139095039})
	})
	t.Run("add:282", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095039}, {wa.F32, 1086918619}}, arg{wa.F32, 2139095039})
	})
	t.Run("add:283", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578687}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:284", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578687}, {wa.F32, 2139095039}}, arg{wa.F32, 0})
	})
	t.Run("add:285", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095039}, {wa.F32, 4286578687}}, arg{wa.F32, 0})
	})
	t.Run("add:286", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095039}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:287", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578687}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:288", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578687}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:289", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095039}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:290", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095039}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:291", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578687}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:292", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578687}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:293", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578687}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:294", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578687}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:295", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095039}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:296", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095039}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:297", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095039}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:298", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095039}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:299", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578688}, {wa.F32, 2147483648}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:300", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578688}, {wa.F32, 0}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:301", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095040}, {wa.F32, 2147483648}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:302", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095040}, {wa.F32, 0}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:303", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578688}, {wa.F32, 2147483649}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:304", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578688}, {wa.F32, 1}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:305", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095040}, {wa.F32, 2147483649}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:306", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095040}, {wa.F32, 1}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:307", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578688}, {wa.F32, 2155872256}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:308", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578688}, {wa.F32, 8388608}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:309", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095040}, {wa.F32, 2155872256}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:310", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095040}, {wa.F32, 8388608}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:311", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578688}, {wa.F32, 3204448256}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:312", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578688}, {wa.F32, 1056964608}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:313", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095040}, {wa.F32, 3204448256}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:314", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095040}, {wa.F32, 1056964608}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:315", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578688}, {wa.F32, 3212836864}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:316", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578688}, {wa.F32, 1065353216}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:317", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095040}, {wa.F32, 3212836864}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:318", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095040}, {wa.F32, 1065353216}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:319", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578688}, {wa.F32, 3234402267}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:320", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578688}, {wa.F32, 1086918619}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:321", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095040}, {wa.F32, 3234402267}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:322", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095040}, {wa.F32, 1086918619}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:323", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578688}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:324", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578688}, {wa.F32, 2139095039}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:325", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095040}, {wa.F32, 4286578687}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:326", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095040}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:327", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578688}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("add:328", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578688}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:329", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095040}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:330", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095040}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("add:331", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578688}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:332", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578688}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:333", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578688}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:334", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4286578688}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:335", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095040}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:336", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095040}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:337", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095040}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:338", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2139095040}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:339", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4290772992}, {wa.F32, 2147483648}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:340", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4288675840}, {wa.F32, 2147483648}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:341", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4290772992}, {wa.F32, 0}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:342", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4288675840}, {wa.F32, 0}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:343", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2143289344}, {wa.F32, 2147483648}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:344", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2141192192}, {wa.F32, 2147483648}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:345", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2143289344}, {wa.F32, 0}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:346", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2141192192}, {wa.F32, 0}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:347", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4290772992}, {wa.F32, 2147483649}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:348", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4288675840}, {wa.F32, 2147483649}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:349", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4290772992}, {wa.F32, 1}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:350", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4288675840}, {wa.F32, 1}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:351", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2143289344}, {wa.F32, 2147483649}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:352", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2141192192}, {wa.F32, 2147483649}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:353", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2143289344}, {wa.F32, 1}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:354", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2141192192}, {wa.F32, 1}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:355", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4290772992}, {wa.F32, 2155872256}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:356", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4288675840}, {wa.F32, 2155872256}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:357", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4290772992}, {wa.F32, 8388608}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:358", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4288675840}, {wa.F32, 8388608}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:359", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2143289344}, {wa.F32, 2155872256}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:360", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2141192192}, {wa.F32, 2155872256}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:361", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2143289344}, {wa.F32, 8388608}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:362", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2141192192}, {wa.F32, 8388608}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:363", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4290772992}, {wa.F32, 3204448256}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:364", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4288675840}, {wa.F32, 3204448256}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:365", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4290772992}, {wa.F32, 1056964608}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:366", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4288675840}, {wa.F32, 1056964608}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:367", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2143289344}, {wa.F32, 3204448256}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:368", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2141192192}, {wa.F32, 3204448256}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:369", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2143289344}, {wa.F32, 1056964608}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:370", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2141192192}, {wa.F32, 1056964608}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:371", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4290772992}, {wa.F32, 3212836864}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:372", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4288675840}, {wa.F32, 3212836864}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:373", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4290772992}, {wa.F32, 1065353216}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:374", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4288675840}, {wa.F32, 1065353216}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:375", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2143289344}, {wa.F32, 3212836864}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:376", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2141192192}, {wa.F32, 3212836864}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:377", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2143289344}, {wa.F32, 1065353216}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:378", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2141192192}, {wa.F32, 1065353216}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:379", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4290772992}, {wa.F32, 3234402267}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:380", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4288675840}, {wa.F32, 3234402267}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:381", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4290772992}, {wa.F32, 1086918619}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:382", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4288675840}, {wa.F32, 1086918619}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:383", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2143289344}, {wa.F32, 3234402267}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:384", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2141192192}, {wa.F32, 3234402267}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:385", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2143289344}, {wa.F32, 1086918619}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:386", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2141192192}, {wa.F32, 1086918619}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:387", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4290772992}, {wa.F32, 4286578687}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:388", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4288675840}, {wa.F32, 4286578687}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:389", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4290772992}, {wa.F32, 2139095039}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:390", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4288675840}, {wa.F32, 2139095039}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:391", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2143289344}, {wa.F32, 4286578687}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:392", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2141192192}, {wa.F32, 4286578687}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:393", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2143289344}, {wa.F32, 2139095039}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:394", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2141192192}, {wa.F32, 2139095039}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:395", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4290772992}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:396", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4288675840}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:397", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4290772992}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:398", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4288675840}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:399", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2143289344}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:400", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2141192192}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:401", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2143289344}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:402", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2141192192}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:403", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4290772992}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:404", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4288675840}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:405", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4290772992}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:406", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4288675840}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:407", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4290772992}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:408", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4288675840}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:409", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4290772992}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:410", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 4288675840}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:411", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2143289344}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:412", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2141192192}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:413", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2143289344}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:414", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2141192192}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:415", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2143289344}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("add:416", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2141192192}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:417", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2143289344}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("add:418", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F32, 2141192192}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:419", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483648}}, arg{wa.F32, 0})
	})
	t.Run("sub:420", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483648}, {wa.F32, 0}}, arg{wa.F32, 2147483648})
	})
	t.Run("sub:421", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 0}, {wa.F32, 2147483648}}, arg{wa.F32, 0})
	})
	t.Run("sub:422", func(t *testing.T) { x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 0}, {wa.F32, 0}}, arg{wa.F32, 0}) })
	t.Run("sub:423", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483649}}, arg{wa.F32, 1})
	})
	t.Run("sub:424", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483648}, {wa.F32, 1}}, arg{wa.F32, 2147483649})
	})
	t.Run("sub:425", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 0}, {wa.F32, 2147483649}}, arg{wa.F32, 1})
	})
	t.Run("sub:426", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 0}, {wa.F32, 1}}, arg{wa.F32, 2147483649})
	})
	t.Run("sub:427", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483648}, {wa.F32, 2155872256}}, arg{wa.F32, 8388608})
	})
	t.Run("sub:428", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483648}, {wa.F32, 8388608}}, arg{wa.F32, 2155872256})
	})
	t.Run("sub:429", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 0}, {wa.F32, 2155872256}}, arg{wa.F32, 8388608})
	})
	t.Run("sub:430", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 0}, {wa.F32, 8388608}}, arg{wa.F32, 2155872256})
	})
	t.Run("sub:431", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483648}, {wa.F32, 3204448256}}, arg{wa.F32, 1056964608})
	})
	t.Run("sub:432", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483648}, {wa.F32, 1056964608}}, arg{wa.F32, 3204448256})
	})
	t.Run("sub:433", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 0}, {wa.F32, 3204448256}}, arg{wa.F32, 1056964608})
	})
	t.Run("sub:434", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 0}, {wa.F32, 1056964608}}, arg{wa.F32, 3204448256})
	})
	t.Run("sub:435", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483648}, {wa.F32, 3212836864}}, arg{wa.F32, 1065353216})
	})
	t.Run("sub:436", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483648}, {wa.F32, 1065353216}}, arg{wa.F32, 3212836864})
	})
	t.Run("sub:437", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 0}, {wa.F32, 3212836864}}, arg{wa.F32, 1065353216})
	})
	t.Run("sub:438", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 0}, {wa.F32, 1065353216}}, arg{wa.F32, 3212836864})
	})
	t.Run("sub:439", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483648}, {wa.F32, 3234402267}}, arg{wa.F32, 1086918619})
	})
	t.Run("sub:440", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483648}, {wa.F32, 1086918619}}, arg{wa.F32, 3234402267})
	})
	t.Run("sub:441", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 0}, {wa.F32, 3234402267}}, arg{wa.F32, 1086918619})
	})
	t.Run("sub:442", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 0}, {wa.F32, 1086918619}}, arg{wa.F32, 3234402267})
	})
	t.Run("sub:443", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483648}, {wa.F32, 4286578687}}, arg{wa.F32, 2139095039})
	})
	t.Run("sub:444", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483648}, {wa.F32, 2139095039}}, arg{wa.F32, 4286578687})
	})
	t.Run("sub:445", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 0}, {wa.F32, 4286578687}}, arg{wa.F32, 2139095039})
	})
	t.Run("sub:446", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 0}, {wa.F32, 2139095039}}, arg{wa.F32, 4286578687})
	})
	t.Run("sub:447", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483648}, {wa.F32, 4286578688}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:448", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483648}, {wa.F32, 2139095040}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:449", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 0}, {wa.F32, 4286578688}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:450", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 0}, {wa.F32, 2139095040}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:451", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483648}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:452", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483648}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:453", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483648}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:454", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483648}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:455", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 0}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:456", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 0}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:457", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 0}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:458", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 0}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:459", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483649}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483649})
	})
	t.Run("sub:460", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483649}, {wa.F32, 0}}, arg{wa.F32, 2147483649})
	})
	t.Run("sub:461", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1}, {wa.F32, 2147483648}}, arg{wa.F32, 1})
	})
	t.Run("sub:462", func(t *testing.T) { x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1}, {wa.F32, 0}}, arg{wa.F32, 1}) })
	t.Run("sub:463", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483649}, {wa.F32, 2147483649}}, arg{wa.F32, 0})
	})
	t.Run("sub:464", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483649}, {wa.F32, 1}}, arg{wa.F32, 2147483650})
	})
	t.Run("sub:465", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1}, {wa.F32, 2147483649}}, arg{wa.F32, 2})
	})
	t.Run("sub:466", func(t *testing.T) { x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1}, {wa.F32, 1}}, arg{wa.F32, 0}) })
	t.Run("sub:467", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483649}, {wa.F32, 2155872256}}, arg{wa.F32, 8388607})
	})
	t.Run("sub:468", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483649}, {wa.F32, 8388608}}, arg{wa.F32, 2155872257})
	})
	t.Run("sub:469", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1}, {wa.F32, 2155872256}}, arg{wa.F32, 8388609})
	})
	t.Run("sub:470", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1}, {wa.F32, 8388608}}, arg{wa.F32, 2155872255})
	})
	t.Run("sub:471", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483649}, {wa.F32, 3204448256}}, arg{wa.F32, 1056964608})
	})
	t.Run("sub:472", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483649}, {wa.F32, 1056964608}}, arg{wa.F32, 3204448256})
	})
	t.Run("sub:473", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1}, {wa.F32, 3204448256}}, arg{wa.F32, 1056964608})
	})
	t.Run("sub:474", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1}, {wa.F32, 1056964608}}, arg{wa.F32, 3204448256})
	})
	t.Run("sub:475", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483649}, {wa.F32, 3212836864}}, arg{wa.F32, 1065353216})
	})
	t.Run("sub:476", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483649}, {wa.F32, 1065353216}}, arg{wa.F32, 3212836864})
	})
	t.Run("sub:477", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1}, {wa.F32, 3212836864}}, arg{wa.F32, 1065353216})
	})
	t.Run("sub:478", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1}, {wa.F32, 1065353216}}, arg{wa.F32, 3212836864})
	})
	t.Run("sub:479", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483649}, {wa.F32, 3234402267}}, arg{wa.F32, 1086918619})
	})
	t.Run("sub:480", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483649}, {wa.F32, 1086918619}}, arg{wa.F32, 3234402267})
	})
	t.Run("sub:481", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1}, {wa.F32, 3234402267}}, arg{wa.F32, 1086918619})
	})
	t.Run("sub:482", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1}, {wa.F32, 1086918619}}, arg{wa.F32, 3234402267})
	})
	t.Run("sub:483", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483649}, {wa.F32, 4286578687}}, arg{wa.F32, 2139095039})
	})
	t.Run("sub:484", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483649}, {wa.F32, 2139095039}}, arg{wa.F32, 4286578687})
	})
	t.Run("sub:485", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1}, {wa.F32, 4286578687}}, arg{wa.F32, 2139095039})
	})
	t.Run("sub:486", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1}, {wa.F32, 2139095039}}, arg{wa.F32, 4286578687})
	})
	t.Run("sub:487", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483649}, {wa.F32, 4286578688}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:488", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483649}, {wa.F32, 2139095040}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:489", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1}, {wa.F32, 4286578688}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:490", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1}, {wa.F32, 2139095040}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:491", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483649}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:492", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483649}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:493", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483649}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:494", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2147483649}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:495", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:496", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:497", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:498", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:499", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2155872256}, {wa.F32, 2147483648}}, arg{wa.F32, 2155872256})
	})
	t.Run("sub:500", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2155872256}, {wa.F32, 0}}, arg{wa.F32, 2155872256})
	})
	t.Run("sub:501", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 8388608}, {wa.F32, 2147483648}}, arg{wa.F32, 8388608})
	})
	t.Run("sub:502", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 8388608}, {wa.F32, 0}}, arg{wa.F32, 8388608})
	})
	t.Run("sub:503", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2155872256}, {wa.F32, 2147483649}}, arg{wa.F32, 2155872255})
	})
	t.Run("sub:504", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2155872256}, {wa.F32, 1}}, arg{wa.F32, 2155872257})
	})
	t.Run("sub:505", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 8388608}, {wa.F32, 2147483649}}, arg{wa.F32, 8388609})
	})
	t.Run("sub:506", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 8388608}, {wa.F32, 1}}, arg{wa.F32, 8388607})
	})
	t.Run("sub:507", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2155872256}, {wa.F32, 2155872256}}, arg{wa.F32, 0})
	})
	t.Run("sub:508", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2155872256}, {wa.F32, 8388608}}, arg{wa.F32, 2164260864})
	})
	t.Run("sub:509", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 8388608}, {wa.F32, 2155872256}}, arg{wa.F32, 16777216})
	})
	t.Run("sub:510", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 8388608}, {wa.F32, 8388608}}, arg{wa.F32, 0})
	})
	t.Run("sub:511", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2155872256}, {wa.F32, 3204448256}}, arg{wa.F32, 1056964608})
	})
	t.Run("sub:512", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2155872256}, {wa.F32, 1056964608}}, arg{wa.F32, 3204448256})
	})
	t.Run("sub:513", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 8388608}, {wa.F32, 3204448256}}, arg{wa.F32, 1056964608})
	})
	t.Run("sub:514", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 8388608}, {wa.F32, 1056964608}}, arg{wa.F32, 3204448256})
	})
	t.Run("sub:515", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2155872256}, {wa.F32, 3212836864}}, arg{wa.F32, 1065353216})
	})
	t.Run("sub:516", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2155872256}, {wa.F32, 1065353216}}, arg{wa.F32, 3212836864})
	})
	t.Run("sub:517", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 8388608}, {wa.F32, 3212836864}}, arg{wa.F32, 1065353216})
	})
	t.Run("sub:518", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 8388608}, {wa.F32, 1065353216}}, arg{wa.F32, 3212836864})
	})
	t.Run("sub:519", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2155872256}, {wa.F32, 3234402267}}, arg{wa.F32, 1086918619})
	})
	t.Run("sub:520", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2155872256}, {wa.F32, 1086918619}}, arg{wa.F32, 3234402267})
	})
	t.Run("sub:521", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 8388608}, {wa.F32, 3234402267}}, arg{wa.F32, 1086918619})
	})
	t.Run("sub:522", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 8388608}, {wa.F32, 1086918619}}, arg{wa.F32, 3234402267})
	})
	t.Run("sub:523", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2155872256}, {wa.F32, 4286578687}}, arg{wa.F32, 2139095039})
	})
	t.Run("sub:524", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2155872256}, {wa.F32, 2139095039}}, arg{wa.F32, 4286578687})
	})
	t.Run("sub:525", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 8388608}, {wa.F32, 4286578687}}, arg{wa.F32, 2139095039})
	})
	t.Run("sub:526", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 8388608}, {wa.F32, 2139095039}}, arg{wa.F32, 4286578687})
	})
	t.Run("sub:527", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2155872256}, {wa.F32, 4286578688}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:528", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2155872256}, {wa.F32, 2139095040}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:529", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 8388608}, {wa.F32, 4286578688}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:530", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 8388608}, {wa.F32, 2139095040}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:531", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2155872256}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:532", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2155872256}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:533", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2155872256}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:534", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2155872256}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:535", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 8388608}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:536", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 8388608}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:537", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 8388608}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:538", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 8388608}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:539", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3204448256}, {wa.F32, 2147483648}}, arg{wa.F32, 3204448256})
	})
	t.Run("sub:540", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3204448256}, {wa.F32, 0}}, arg{wa.F32, 3204448256})
	})
	t.Run("sub:541", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1056964608}, {wa.F32, 2147483648}}, arg{wa.F32, 1056964608})
	})
	t.Run("sub:542", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1056964608}, {wa.F32, 0}}, arg{wa.F32, 1056964608})
	})
	t.Run("sub:543", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3204448256}, {wa.F32, 2147483649}}, arg{wa.F32, 3204448256})
	})
	t.Run("sub:544", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3204448256}, {wa.F32, 1}}, arg{wa.F32, 3204448256})
	})
	t.Run("sub:545", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1056964608}, {wa.F32, 2147483649}}, arg{wa.F32, 1056964608})
	})
	t.Run("sub:546", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1056964608}, {wa.F32, 1}}, arg{wa.F32, 1056964608})
	})
	t.Run("sub:547", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3204448256}, {wa.F32, 2155872256}}, arg{wa.F32, 3204448256})
	})
	t.Run("sub:548", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3204448256}, {wa.F32, 8388608}}, arg{wa.F32, 3204448256})
	})
	t.Run("sub:549", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1056964608}, {wa.F32, 2155872256}}, arg{wa.F32, 1056964608})
	})
	t.Run("sub:550", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1056964608}, {wa.F32, 8388608}}, arg{wa.F32, 1056964608})
	})
	t.Run("sub:551", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3204448256}, {wa.F32, 3204448256}}, arg{wa.F32, 0})
	})
	t.Run("sub:552", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3204448256}, {wa.F32, 1056964608}}, arg{wa.F32, 3212836864})
	})
	t.Run("sub:553", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1056964608}, {wa.F32, 3204448256}}, arg{wa.F32, 1065353216})
	})
	t.Run("sub:554", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1056964608}, {wa.F32, 1056964608}}, arg{wa.F32, 0})
	})
	t.Run("sub:555", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3204448256}, {wa.F32, 3212836864}}, arg{wa.F32, 1056964608})
	})
	t.Run("sub:556", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3204448256}, {wa.F32, 1065353216}}, arg{wa.F32, 3217031168})
	})
	t.Run("sub:557", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1056964608}, {wa.F32, 3212836864}}, arg{wa.F32, 1069547520})
	})
	t.Run("sub:558", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1056964608}, {wa.F32, 1065353216}}, arg{wa.F32, 3204448256})
	})
	t.Run("sub:559", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3204448256}, {wa.F32, 3234402267}}, arg{wa.F32, 1085870043})
	})
	t.Run("sub:560", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3204448256}, {wa.F32, 1086918619}}, arg{wa.F32, 3235450843})
	})
	t.Run("sub:561", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1056964608}, {wa.F32, 3234402267}}, arg{wa.F32, 1087967195})
	})
	t.Run("sub:562", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1056964608}, {wa.F32, 1086918619}}, arg{wa.F32, 3233353691})
	})
	t.Run("sub:563", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3204448256}, {wa.F32, 4286578687}}, arg{wa.F32, 2139095039})
	})
	t.Run("sub:564", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3204448256}, {wa.F32, 2139095039}}, arg{wa.F32, 4286578687})
	})
	t.Run("sub:565", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1056964608}, {wa.F32, 4286578687}}, arg{wa.F32, 2139095039})
	})
	t.Run("sub:566", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1056964608}, {wa.F32, 2139095039}}, arg{wa.F32, 4286578687})
	})
	t.Run("sub:567", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3204448256}, {wa.F32, 4286578688}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:568", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3204448256}, {wa.F32, 2139095040}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:569", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1056964608}, {wa.F32, 4286578688}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:570", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1056964608}, {wa.F32, 2139095040}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:571", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3204448256}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:572", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3204448256}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:573", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3204448256}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:574", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3204448256}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:575", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1056964608}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:576", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1056964608}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:577", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1056964608}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:578", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1056964608}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:579", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3212836864}, {wa.F32, 2147483648}}, arg{wa.F32, 3212836864})
	})
	t.Run("sub:580", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3212836864}, {wa.F32, 0}}, arg{wa.F32, 3212836864})
	})
	t.Run("sub:581", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1065353216}, {wa.F32, 2147483648}}, arg{wa.F32, 1065353216})
	})
	t.Run("sub:582", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1065353216}, {wa.F32, 0}}, arg{wa.F32, 1065353216})
	})
	t.Run("sub:583", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3212836864}, {wa.F32, 2147483649}}, arg{wa.F32, 3212836864})
	})
	t.Run("sub:584", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3212836864}, {wa.F32, 1}}, arg{wa.F32, 3212836864})
	})
	t.Run("sub:585", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1065353216}, {wa.F32, 2147483649}}, arg{wa.F32, 1065353216})
	})
	t.Run("sub:586", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1065353216}, {wa.F32, 1}}, arg{wa.F32, 1065353216})
	})
	t.Run("sub:587", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3212836864}, {wa.F32, 2155872256}}, arg{wa.F32, 3212836864})
	})
	t.Run("sub:588", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3212836864}, {wa.F32, 8388608}}, arg{wa.F32, 3212836864})
	})
	t.Run("sub:589", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1065353216}, {wa.F32, 2155872256}}, arg{wa.F32, 1065353216})
	})
	t.Run("sub:590", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1065353216}, {wa.F32, 8388608}}, arg{wa.F32, 1065353216})
	})
	t.Run("sub:591", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3212836864}, {wa.F32, 3204448256}}, arg{wa.F32, 3204448256})
	})
	t.Run("sub:592", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3212836864}, {wa.F32, 1056964608}}, arg{wa.F32, 3217031168})
	})
	t.Run("sub:593", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1065353216}, {wa.F32, 3204448256}}, arg{wa.F32, 1069547520})
	})
	t.Run("sub:594", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1065353216}, {wa.F32, 1056964608}}, arg{wa.F32, 1056964608})
	})
	t.Run("sub:595", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3212836864}, {wa.F32, 3212836864}}, arg{wa.F32, 0})
	})
	t.Run("sub:596", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3212836864}, {wa.F32, 1065353216}}, arg{wa.F32, 3221225472})
	})
	t.Run("sub:597", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1065353216}, {wa.F32, 3212836864}}, arg{wa.F32, 1073741824})
	})
	t.Run("sub:598", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1065353216}, {wa.F32, 1065353216}}, arg{wa.F32, 0})
	})
	t.Run("sub:599", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3212836864}, {wa.F32, 3234402267}}, arg{wa.F32, 1084821467})
	})
	t.Run("sub:600", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3212836864}, {wa.F32, 1086918619}}, arg{wa.F32, 3236499419})
	})
	t.Run("sub:601", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1065353216}, {wa.F32, 3234402267}}, arg{wa.F32, 1089015771})
	})
	t.Run("sub:602", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1065353216}, {wa.F32, 1086918619}}, arg{wa.F32, 3232305115})
	})
	t.Run("sub:603", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3212836864}, {wa.F32, 4286578687}}, arg{wa.F32, 2139095039})
	})
	t.Run("sub:604", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3212836864}, {wa.F32, 2139095039}}, arg{wa.F32, 4286578687})
	})
	t.Run("sub:605", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1065353216}, {wa.F32, 4286578687}}, arg{wa.F32, 2139095039})
	})
	t.Run("sub:606", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1065353216}, {wa.F32, 2139095039}}, arg{wa.F32, 4286578687})
	})
	t.Run("sub:607", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3212836864}, {wa.F32, 4286578688}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:608", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3212836864}, {wa.F32, 2139095040}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:609", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1065353216}, {wa.F32, 4286578688}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:610", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1065353216}, {wa.F32, 2139095040}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:611", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3212836864}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:612", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3212836864}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:613", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3212836864}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:614", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3212836864}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:615", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1065353216}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:616", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1065353216}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:617", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1065353216}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:618", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1065353216}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:619", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3234402267}, {wa.F32, 2147483648}}, arg{wa.F32, 3234402267})
	})
	t.Run("sub:620", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3234402267}, {wa.F32, 0}}, arg{wa.F32, 3234402267})
	})
	t.Run("sub:621", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1086918619}, {wa.F32, 2147483648}}, arg{wa.F32, 1086918619})
	})
	t.Run("sub:622", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1086918619}, {wa.F32, 0}}, arg{wa.F32, 1086918619})
	})
	t.Run("sub:623", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3234402267}, {wa.F32, 2147483649}}, arg{wa.F32, 3234402267})
	})
	t.Run("sub:624", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3234402267}, {wa.F32, 1}}, arg{wa.F32, 3234402267})
	})
	t.Run("sub:625", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1086918619}, {wa.F32, 2147483649}}, arg{wa.F32, 1086918619})
	})
	t.Run("sub:626", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1086918619}, {wa.F32, 1}}, arg{wa.F32, 1086918619})
	})
	t.Run("sub:627", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3234402267}, {wa.F32, 2155872256}}, arg{wa.F32, 3234402267})
	})
	t.Run("sub:628", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3234402267}, {wa.F32, 8388608}}, arg{wa.F32, 3234402267})
	})
	t.Run("sub:629", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1086918619}, {wa.F32, 2155872256}}, arg{wa.F32, 1086918619})
	})
	t.Run("sub:630", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1086918619}, {wa.F32, 8388608}}, arg{wa.F32, 1086918619})
	})
	t.Run("sub:631", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3234402267}, {wa.F32, 3204448256}}, arg{wa.F32, 3233353691})
	})
	t.Run("sub:632", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3234402267}, {wa.F32, 1056964608}}, arg{wa.F32, 3235450843})
	})
	t.Run("sub:633", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1086918619}, {wa.F32, 3204448256}}, arg{wa.F32, 1087967195})
	})
	t.Run("sub:634", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1086918619}, {wa.F32, 1056964608}}, arg{wa.F32, 1085870043})
	})
	t.Run("sub:635", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3234402267}, {wa.F32, 3212836864}}, arg{wa.F32, 3232305115})
	})
	t.Run("sub:636", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3234402267}, {wa.F32, 1065353216}}, arg{wa.F32, 3236499419})
	})
	t.Run("sub:637", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1086918619}, {wa.F32, 3212836864}}, arg{wa.F32, 1089015771})
	})
	t.Run("sub:638", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1086918619}, {wa.F32, 1065353216}}, arg{wa.F32, 1084821467})
	})
	t.Run("sub:639", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3234402267}, {wa.F32, 3234402267}}, arg{wa.F32, 0})
	})
	t.Run("sub:640", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3234402267}, {wa.F32, 1086918619}}, arg{wa.F32, 3242790875})
	})
	t.Run("sub:641", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1086918619}, {wa.F32, 3234402267}}, arg{wa.F32, 1095307227})
	})
	t.Run("sub:642", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1086918619}, {wa.F32, 1086918619}}, arg{wa.F32, 0})
	})
	t.Run("sub:643", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3234402267}, {wa.F32, 4286578687}}, arg{wa.F32, 2139095039})
	})
	t.Run("sub:644", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3234402267}, {wa.F32, 2139095039}}, arg{wa.F32, 4286578687})
	})
	t.Run("sub:645", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1086918619}, {wa.F32, 4286578687}}, arg{wa.F32, 2139095039})
	})
	t.Run("sub:646", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1086918619}, {wa.F32, 2139095039}}, arg{wa.F32, 4286578687})
	})
	t.Run("sub:647", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3234402267}, {wa.F32, 4286578688}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:648", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3234402267}, {wa.F32, 2139095040}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:649", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1086918619}, {wa.F32, 4286578688}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:650", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1086918619}, {wa.F32, 2139095040}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:651", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3234402267}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:652", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3234402267}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:653", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3234402267}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:654", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 3234402267}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:655", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1086918619}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:656", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1086918619}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:657", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1086918619}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:658", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 1086918619}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:659", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578687}, {wa.F32, 2147483648}}, arg{wa.F32, 4286578687})
	})
	t.Run("sub:660", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578687}, {wa.F32, 0}}, arg{wa.F32, 4286578687})
	})
	t.Run("sub:661", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095039}, {wa.F32, 2147483648}}, arg{wa.F32, 2139095039})
	})
	t.Run("sub:662", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095039}, {wa.F32, 0}}, arg{wa.F32, 2139095039})
	})
	t.Run("sub:663", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578687}, {wa.F32, 2147483649}}, arg{wa.F32, 4286578687})
	})
	t.Run("sub:664", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578687}, {wa.F32, 1}}, arg{wa.F32, 4286578687})
	})
	t.Run("sub:665", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095039}, {wa.F32, 2147483649}}, arg{wa.F32, 2139095039})
	})
	t.Run("sub:666", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095039}, {wa.F32, 1}}, arg{wa.F32, 2139095039})
	})
	t.Run("sub:667", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578687}, {wa.F32, 2155872256}}, arg{wa.F32, 4286578687})
	})
	t.Run("sub:668", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578687}, {wa.F32, 8388608}}, arg{wa.F32, 4286578687})
	})
	t.Run("sub:669", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095039}, {wa.F32, 2155872256}}, arg{wa.F32, 2139095039})
	})
	t.Run("sub:670", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095039}, {wa.F32, 8388608}}, arg{wa.F32, 2139095039})
	})
	t.Run("sub:671", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578687}, {wa.F32, 3204448256}}, arg{wa.F32, 4286578687})
	})
	t.Run("sub:672", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578687}, {wa.F32, 1056964608}}, arg{wa.F32, 4286578687})
	})
	t.Run("sub:673", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095039}, {wa.F32, 3204448256}}, arg{wa.F32, 2139095039})
	})
	t.Run("sub:674", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095039}, {wa.F32, 1056964608}}, arg{wa.F32, 2139095039})
	})
	t.Run("sub:675", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578687}, {wa.F32, 3212836864}}, arg{wa.F32, 4286578687})
	})
	t.Run("sub:676", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578687}, {wa.F32, 1065353216}}, arg{wa.F32, 4286578687})
	})
	t.Run("sub:677", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095039}, {wa.F32, 3212836864}}, arg{wa.F32, 2139095039})
	})
	t.Run("sub:678", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095039}, {wa.F32, 1065353216}}, arg{wa.F32, 2139095039})
	})
	t.Run("sub:679", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578687}, {wa.F32, 3234402267}}, arg{wa.F32, 4286578687})
	})
	t.Run("sub:680", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578687}, {wa.F32, 1086918619}}, arg{wa.F32, 4286578687})
	})
	t.Run("sub:681", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095039}, {wa.F32, 3234402267}}, arg{wa.F32, 2139095039})
	})
	t.Run("sub:682", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095039}, {wa.F32, 1086918619}}, arg{wa.F32, 2139095039})
	})
	t.Run("sub:683", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578687}, {wa.F32, 4286578687}}, arg{wa.F32, 0})
	})
	t.Run("sub:684", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578687}, {wa.F32, 2139095039}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:685", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095039}, {wa.F32, 4286578687}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:686", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095039}, {wa.F32, 2139095039}}, arg{wa.F32, 0})
	})
	t.Run("sub:687", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578687}, {wa.F32, 4286578688}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:688", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578687}, {wa.F32, 2139095040}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:689", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095039}, {wa.F32, 4286578688}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:690", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095039}, {wa.F32, 2139095040}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:691", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578687}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:692", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578687}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:693", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578687}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:694", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578687}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:695", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095039}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:696", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095039}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:697", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095039}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:698", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095039}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:699", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578688}, {wa.F32, 2147483648}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:700", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578688}, {wa.F32, 0}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:701", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095040}, {wa.F32, 2147483648}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:702", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095040}, {wa.F32, 0}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:703", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578688}, {wa.F32, 2147483649}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:704", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578688}, {wa.F32, 1}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:705", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095040}, {wa.F32, 2147483649}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:706", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095040}, {wa.F32, 1}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:707", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578688}, {wa.F32, 2155872256}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:708", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578688}, {wa.F32, 8388608}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:709", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095040}, {wa.F32, 2155872256}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:710", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095040}, {wa.F32, 8388608}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:711", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578688}, {wa.F32, 3204448256}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:712", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578688}, {wa.F32, 1056964608}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:713", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095040}, {wa.F32, 3204448256}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:714", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095040}, {wa.F32, 1056964608}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:715", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578688}, {wa.F32, 3212836864}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:716", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578688}, {wa.F32, 1065353216}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:717", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095040}, {wa.F32, 3212836864}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:718", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095040}, {wa.F32, 1065353216}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:719", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578688}, {wa.F32, 3234402267}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:720", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578688}, {wa.F32, 1086918619}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:721", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095040}, {wa.F32, 3234402267}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:722", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095040}, {wa.F32, 1086918619}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:723", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578688}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:724", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578688}, {wa.F32, 2139095039}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:725", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095040}, {wa.F32, 4286578687}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:726", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095040}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:727", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578688}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:728", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578688}, {wa.F32, 2139095040}}, arg{wa.F32, 4286578688})
	})
	t.Run("sub:729", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095040}, {wa.F32, 4286578688}}, arg{wa.F32, 2139095040})
	})
	t.Run("sub:730", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095040}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:731", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578688}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:732", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578688}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:733", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578688}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:734", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4286578688}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:735", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095040}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:736", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095040}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:737", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095040}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:738", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2139095040}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:739", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4290772992}, {wa.F32, 2147483648}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:740", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4288675840}, {wa.F32, 2147483648}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:741", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4290772992}, {wa.F32, 0}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:742", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4288675840}, {wa.F32, 0}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:743", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2143289344}, {wa.F32, 2147483648}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:744", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2141192192}, {wa.F32, 2147483648}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:745", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2143289344}, {wa.F32, 0}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:746", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2141192192}, {wa.F32, 0}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:747", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4290772992}, {wa.F32, 2147483649}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:748", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4288675840}, {wa.F32, 2147483649}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:749", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4290772992}, {wa.F32, 1}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:750", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4288675840}, {wa.F32, 1}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:751", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2143289344}, {wa.F32, 2147483649}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:752", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2141192192}, {wa.F32, 2147483649}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:753", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2143289344}, {wa.F32, 1}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:754", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2141192192}, {wa.F32, 1}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:755", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4290772992}, {wa.F32, 2155872256}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:756", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4288675840}, {wa.F32, 2155872256}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:757", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4290772992}, {wa.F32, 8388608}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:758", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4288675840}, {wa.F32, 8388608}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:759", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2143289344}, {wa.F32, 2155872256}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:760", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2141192192}, {wa.F32, 2155872256}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:761", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2143289344}, {wa.F32, 8388608}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:762", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2141192192}, {wa.F32, 8388608}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:763", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4290772992}, {wa.F32, 3204448256}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:764", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4288675840}, {wa.F32, 3204448256}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:765", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4290772992}, {wa.F32, 1056964608}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:766", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4288675840}, {wa.F32, 1056964608}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:767", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2143289344}, {wa.F32, 3204448256}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:768", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2141192192}, {wa.F32, 3204448256}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:769", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2143289344}, {wa.F32, 1056964608}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:770", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2141192192}, {wa.F32, 1056964608}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:771", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4290772992}, {wa.F32, 3212836864}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:772", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4288675840}, {wa.F32, 3212836864}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:773", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4290772992}, {wa.F32, 1065353216}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:774", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4288675840}, {wa.F32, 1065353216}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:775", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2143289344}, {wa.F32, 3212836864}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:776", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2141192192}, {wa.F32, 3212836864}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:777", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2143289344}, {wa.F32, 1065353216}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:778", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2141192192}, {wa.F32, 1065353216}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:779", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4290772992}, {wa.F32, 3234402267}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:780", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4288675840}, {wa.F32, 3234402267}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:781", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4290772992}, {wa.F32, 1086918619}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:782", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4288675840}, {wa.F32, 1086918619}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:783", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2143289344}, {wa.F32, 3234402267}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:784", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2141192192}, {wa.F32, 3234402267}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:785", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2143289344}, {wa.F32, 1086918619}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:786", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2141192192}, {wa.F32, 1086918619}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:787", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4290772992}, {wa.F32, 4286578687}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:788", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4288675840}, {wa.F32, 4286578687}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:789", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4290772992}, {wa.F32, 2139095039}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:790", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4288675840}, {wa.F32, 2139095039}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:791", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2143289344}, {wa.F32, 4286578687}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:792", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2141192192}, {wa.F32, 4286578687}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:793", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2143289344}, {wa.F32, 2139095039}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:794", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2141192192}, {wa.F32, 2139095039}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:795", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4290772992}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:796", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4288675840}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:797", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4290772992}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:798", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4288675840}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:799", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2143289344}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:800", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2141192192}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:801", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2143289344}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:802", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2141192192}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:803", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4290772992}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:804", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4288675840}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:805", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4290772992}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:806", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4288675840}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:807", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4290772992}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:808", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4288675840}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:809", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4290772992}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:810", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 4288675840}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:811", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2143289344}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:812", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2141192192}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:813", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2143289344}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:814", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2141192192}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:815", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2143289344}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sub:816", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2141192192}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:817", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2143289344}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sub:818", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F32, 2141192192}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:819", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483648}}, arg{wa.F32, 0})
	})
	t.Run("mul:820", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483648}, {wa.F32, 0}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:821", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 0}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:822", func(t *testing.T) { x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 0}, {wa.F32, 0}}, arg{wa.F32, 0}) })
	t.Run("mul:823", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483649}}, arg{wa.F32, 0})
	})
	t.Run("mul:824", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483648}, {wa.F32, 1}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:825", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 0}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:826", func(t *testing.T) { x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 0}, {wa.F32, 1}}, arg{wa.F32, 0}) })
	t.Run("mul:827", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483648}, {wa.F32, 2155872256}}, arg{wa.F32, 0})
	})
	t.Run("mul:828", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483648}, {wa.F32, 8388608}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:829", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 0}, {wa.F32, 2155872256}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:830", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 0}, {wa.F32, 8388608}}, arg{wa.F32, 0})
	})
	t.Run("mul:831", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483648}, {wa.F32, 3204448256}}, arg{wa.F32, 0})
	})
	t.Run("mul:832", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483648}, {wa.F32, 1056964608}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:833", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 0}, {wa.F32, 3204448256}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:834", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 0}, {wa.F32, 1056964608}}, arg{wa.F32, 0})
	})
	t.Run("mul:835", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483648}, {wa.F32, 3212836864}}, arg{wa.F32, 0})
	})
	t.Run("mul:836", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483648}, {wa.F32, 1065353216}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:837", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 0}, {wa.F32, 3212836864}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:838", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 0}, {wa.F32, 1065353216}}, arg{wa.F32, 0})
	})
	t.Run("mul:839", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483648}, {wa.F32, 3234402267}}, arg{wa.F32, 0})
	})
	t.Run("mul:840", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483648}, {wa.F32, 1086918619}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:841", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 0}, {wa.F32, 3234402267}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:842", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 0}, {wa.F32, 1086918619}}, arg{wa.F32, 0})
	})
	t.Run("mul:843", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483648}, {wa.F32, 4286578687}}, arg{wa.F32, 0})
	})
	t.Run("mul:844", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483648}, {wa.F32, 2139095039}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:845", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 0}, {wa.F32, 4286578687}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:846", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 0}, {wa.F32, 2139095039}}, arg{wa.F32, 0})
	})
	t.Run("mul:847", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483648}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:848", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483648}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:849", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 0}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:850", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 0}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:851", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483648}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:852", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483648}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:853", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483648}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:854", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483648}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:855", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 0}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:856", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 0}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:857", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 0}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:858", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 0}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:859", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483649}, {wa.F32, 2147483648}}, arg{wa.F32, 0})
	})
	t.Run("mul:860", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483649}, {wa.F32, 0}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:861", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:862", func(t *testing.T) { x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1}, {wa.F32, 0}}, arg{wa.F32, 0}) })
	t.Run("mul:863", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483649}, {wa.F32, 2147483649}}, arg{wa.F32, 0})
	})
	t.Run("mul:864", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483649}, {wa.F32, 1}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:865", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:866", func(t *testing.T) { x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1}, {wa.F32, 1}}, arg{wa.F32, 0}) })
	t.Run("mul:867", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483649}, {wa.F32, 2155872256}}, arg{wa.F32, 0})
	})
	t.Run("mul:868", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483649}, {wa.F32, 8388608}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:869", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1}, {wa.F32, 2155872256}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:870", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1}, {wa.F32, 8388608}}, arg{wa.F32, 0})
	})
	t.Run("mul:871", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483649}, {wa.F32, 3204448256}}, arg{wa.F32, 0})
	})
	t.Run("mul:872", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483649}, {wa.F32, 1056964608}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:873", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1}, {wa.F32, 3204448256}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:874", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1}, {wa.F32, 1056964608}}, arg{wa.F32, 0})
	})
	t.Run("mul:875", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483649}, {wa.F32, 3212836864}}, arg{wa.F32, 1})
	})
	t.Run("mul:876", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483649}, {wa.F32, 1065353216}}, arg{wa.F32, 2147483649})
	})
	t.Run("mul:877", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1}, {wa.F32, 3212836864}}, arg{wa.F32, 2147483649})
	})
	t.Run("mul:878", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1}, {wa.F32, 1065353216}}, arg{wa.F32, 1})
	})
	t.Run("mul:879", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483649}, {wa.F32, 3234402267}}, arg{wa.F32, 6})
	})
	t.Run("mul:880", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483649}, {wa.F32, 1086918619}}, arg{wa.F32, 2147483654})
	})
	t.Run("mul:881", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1}, {wa.F32, 3234402267}}, arg{wa.F32, 2147483654})
	})
	t.Run("mul:882", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1}, {wa.F32, 1086918619}}, arg{wa.F32, 6})
	})
	t.Run("mul:883", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483649}, {wa.F32, 4286578687}}, arg{wa.F32, 889192447})
	})
	t.Run("mul:884", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483649}, {wa.F32, 2139095039}}, arg{wa.F32, 3036676095})
	})
	t.Run("mul:885", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1}, {wa.F32, 4286578687}}, arg{wa.F32, 3036676095})
	})
	t.Run("mul:886", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1}, {wa.F32, 2139095039}}, arg{wa.F32, 889192447})
	})
	t.Run("mul:887", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483649}, {wa.F32, 4286578688}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:888", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483649}, {wa.F32, 2139095040}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:889", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:890", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:891", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483649}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:892", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483649}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:893", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483649}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:894", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2147483649}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:895", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:896", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:897", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:898", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:899", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2155872256}, {wa.F32, 2147483648}}, arg{wa.F32, 0})
	})
	t.Run("mul:900", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2155872256}, {wa.F32, 0}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:901", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 8388608}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:902", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 8388608}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("mul:903", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2155872256}, {wa.F32, 2147483649}}, arg{wa.F32, 0})
	})
	t.Run("mul:904", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2155872256}, {wa.F32, 1}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:905", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 8388608}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:906", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 8388608}, {wa.F32, 1}}, arg{wa.F32, 0})
	})
	t.Run("mul:907", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2155872256}, {wa.F32, 2155872256}}, arg{wa.F32, 0})
	})
	t.Run("mul:908", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2155872256}, {wa.F32, 8388608}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:909", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 8388608}, {wa.F32, 2155872256}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:910", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 8388608}, {wa.F32, 8388608}}, arg{wa.F32, 0})
	})
	t.Run("mul:911", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2155872256}, {wa.F32, 3204448256}}, arg{wa.F32, 4194304})
	})
	t.Run("mul:912", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2155872256}, {wa.F32, 1056964608}}, arg{wa.F32, 2151677952})
	})
	t.Run("mul:913", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 8388608}, {wa.F32, 3204448256}}, arg{wa.F32, 2151677952})
	})
	t.Run("mul:914", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 8388608}, {wa.F32, 1056964608}}, arg{wa.F32, 4194304})
	})
	t.Run("mul:915", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2155872256}, {wa.F32, 3212836864}}, arg{wa.F32, 8388608})
	})
	t.Run("mul:916", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2155872256}, {wa.F32, 1065353216}}, arg{wa.F32, 2155872256})
	})
	t.Run("mul:917", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 8388608}, {wa.F32, 3212836864}}, arg{wa.F32, 2155872256})
	})
	t.Run("mul:918", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 8388608}, {wa.F32, 1065353216}}, arg{wa.F32, 8388608})
	})
	t.Run("mul:919", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2155872256}, {wa.F32, 3234402267}}, arg{wa.F32, 29954011})
	})
	t.Run("mul:920", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2155872256}, {wa.F32, 1086918619}}, arg{wa.F32, 2177437659})
	})
	t.Run("mul:921", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 8388608}, {wa.F32, 3234402267}}, arg{wa.F32, 2177437659})
	})
	t.Run("mul:922", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 8388608}, {wa.F32, 1086918619}}, arg{wa.F32, 29954011})
	})
	t.Run("mul:923", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2155872256}, {wa.F32, 4286578687}}, arg{wa.F32, 1082130431})
	})
	t.Run("mul:924", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2155872256}, {wa.F32, 2139095039}}, arg{wa.F32, 3229614079})
	})
	t.Run("mul:925", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 8388608}, {wa.F32, 4286578687}}, arg{wa.F32, 3229614079})
	})
	t.Run("mul:926", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 8388608}, {wa.F32, 2139095039}}, arg{wa.F32, 1082130431})
	})
	t.Run("mul:927", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2155872256}, {wa.F32, 4286578688}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:928", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2155872256}, {wa.F32, 2139095040}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:929", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 8388608}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:930", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 8388608}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:931", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2155872256}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:932", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2155872256}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:933", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2155872256}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:934", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2155872256}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:935", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 8388608}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:936", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 8388608}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:937", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 8388608}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:938", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 8388608}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:939", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3204448256}, {wa.F32, 2147483648}}, arg{wa.F32, 0})
	})
	t.Run("mul:940", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3204448256}, {wa.F32, 0}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:941", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1056964608}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:942", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1056964608}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("mul:943", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3204448256}, {wa.F32, 2147483649}}, arg{wa.F32, 0})
	})
	t.Run("mul:944", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3204448256}, {wa.F32, 1}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:945", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1056964608}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:946", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1056964608}, {wa.F32, 1}}, arg{wa.F32, 0})
	})
	t.Run("mul:947", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3204448256}, {wa.F32, 2155872256}}, arg{wa.F32, 4194304})
	})
	t.Run("mul:948", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3204448256}, {wa.F32, 8388608}}, arg{wa.F32, 2151677952})
	})
	t.Run("mul:949", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1056964608}, {wa.F32, 2155872256}}, arg{wa.F32, 2151677952})
	})
	t.Run("mul:950", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1056964608}, {wa.F32, 8388608}}, arg{wa.F32, 4194304})
	})
	t.Run("mul:951", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3204448256}, {wa.F32, 3204448256}}, arg{wa.F32, 1048576000})
	})
	t.Run("mul:952", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3204448256}, {wa.F32, 1056964608}}, arg{wa.F32, 3196059648})
	})
	t.Run("mul:953", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1056964608}, {wa.F32, 3204448256}}, arg{wa.F32, 3196059648})
	})
	t.Run("mul:954", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1056964608}, {wa.F32, 1056964608}}, arg{wa.F32, 1048576000})
	})
	t.Run("mul:955", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3204448256}, {wa.F32, 3212836864}}, arg{wa.F32, 1056964608})
	})
	t.Run("mul:956", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3204448256}, {wa.F32, 1065353216}}, arg{wa.F32, 3204448256})
	})
	t.Run("mul:957", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1056964608}, {wa.F32, 3212836864}}, arg{wa.F32, 3204448256})
	})
	t.Run("mul:958", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1056964608}, {wa.F32, 1065353216}}, arg{wa.F32, 1056964608})
	})
	t.Run("mul:959", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3204448256}, {wa.F32, 3234402267}}, arg{wa.F32, 1078530011})
	})
	t.Run("mul:960", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3204448256}, {wa.F32, 1086918619}}, arg{wa.F32, 3226013659})
	})
	t.Run("mul:961", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1056964608}, {wa.F32, 3234402267}}, arg{wa.F32, 3226013659})
	})
	t.Run("mul:962", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1056964608}, {wa.F32, 1086918619}}, arg{wa.F32, 1078530011})
	})
	t.Run("mul:963", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3204448256}, {wa.F32, 4286578687}}, arg{wa.F32, 2130706431})
	})
	t.Run("mul:964", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3204448256}, {wa.F32, 2139095039}}, arg{wa.F32, 4278190079})
	})
	t.Run("mul:965", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1056964608}, {wa.F32, 4286578687}}, arg{wa.F32, 4278190079})
	})
	t.Run("mul:966", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1056964608}, {wa.F32, 2139095039}}, arg{wa.F32, 2130706431})
	})
	t.Run("mul:967", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3204448256}, {wa.F32, 4286578688}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:968", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3204448256}, {wa.F32, 2139095040}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:969", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1056964608}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:970", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1056964608}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:971", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3204448256}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:972", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3204448256}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:973", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3204448256}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:974", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3204448256}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:975", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1056964608}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:976", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1056964608}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:977", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1056964608}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:978", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1056964608}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:979", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3212836864}, {wa.F32, 2147483648}}, arg{wa.F32, 0})
	})
	t.Run("mul:980", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3212836864}, {wa.F32, 0}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:981", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1065353216}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:982", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1065353216}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("mul:983", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3212836864}, {wa.F32, 2147483649}}, arg{wa.F32, 1})
	})
	t.Run("mul:984", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3212836864}, {wa.F32, 1}}, arg{wa.F32, 2147483649})
	})
	t.Run("mul:985", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1065353216}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483649})
	})
	t.Run("mul:986", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1065353216}, {wa.F32, 1}}, arg{wa.F32, 1})
	})
	t.Run("mul:987", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3212836864}, {wa.F32, 2155872256}}, arg{wa.F32, 8388608})
	})
	t.Run("mul:988", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3212836864}, {wa.F32, 8388608}}, arg{wa.F32, 2155872256})
	})
	t.Run("mul:989", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1065353216}, {wa.F32, 2155872256}}, arg{wa.F32, 2155872256})
	})
	t.Run("mul:990", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1065353216}, {wa.F32, 8388608}}, arg{wa.F32, 8388608})
	})
	t.Run("mul:991", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3212836864}, {wa.F32, 3204448256}}, arg{wa.F32, 1056964608})
	})
	t.Run("mul:992", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3212836864}, {wa.F32, 1056964608}}, arg{wa.F32, 3204448256})
	})
	t.Run("mul:993", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1065353216}, {wa.F32, 3204448256}}, arg{wa.F32, 3204448256})
	})
	t.Run("mul:994", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1065353216}, {wa.F32, 1056964608}}, arg{wa.F32, 1056964608})
	})
	t.Run("mul:995", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3212836864}, {wa.F32, 3212836864}}, arg{wa.F32, 1065353216})
	})
	t.Run("mul:996", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3212836864}, {wa.F32, 1065353216}}, arg{wa.F32, 3212836864})
	})
	t.Run("mul:997", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1065353216}, {wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("mul:998", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1065353216}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("mul:999", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3212836864}, {wa.F32, 3234402267}}, arg{wa.F32, 1086918619})
	})
	t.Run("mul:1000", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3212836864}, {wa.F32, 1086918619}}, arg{wa.F32, 3234402267})
	})
	t.Run("mul:1001", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1065353216}, {wa.F32, 3234402267}}, arg{wa.F32, 3234402267})
	})
	t.Run("mul:1002", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1065353216}, {wa.F32, 1086918619}}, arg{wa.F32, 1086918619})
	})
	t.Run("mul:1003", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3212836864}, {wa.F32, 4286578687}}, arg{wa.F32, 2139095039})
	})
	t.Run("mul:1004", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3212836864}, {wa.F32, 2139095039}}, arg{wa.F32, 4286578687})
	})
	t.Run("mul:1005", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1065353216}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("mul:1006", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1065353216}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("mul:1007", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3212836864}, {wa.F32, 4286578688}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:1008", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3212836864}, {wa.F32, 2139095040}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:1009", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1065353216}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:1010", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1065353216}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:1011", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3212836864}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1012", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3212836864}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1013", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3212836864}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1014", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3212836864}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1015", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1065353216}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1016", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1065353216}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1017", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1065353216}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1018", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1065353216}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1019", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3234402267}, {wa.F32, 2147483648}}, arg{wa.F32, 0})
	})
	t.Run("mul:1020", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3234402267}, {wa.F32, 0}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:1021", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1086918619}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:1022", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1086918619}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("mul:1023", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3234402267}, {wa.F32, 2147483649}}, arg{wa.F32, 6})
	})
	t.Run("mul:1024", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3234402267}, {wa.F32, 1}}, arg{wa.F32, 2147483654})
	})
	t.Run("mul:1025", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1086918619}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483654})
	})
	t.Run("mul:1026", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1086918619}, {wa.F32, 1}}, arg{wa.F32, 6})
	})
	t.Run("mul:1027", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3234402267}, {wa.F32, 2155872256}}, arg{wa.F32, 29954011})
	})
	t.Run("mul:1028", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3234402267}, {wa.F32, 8388608}}, arg{wa.F32, 2177437659})
	})
	t.Run("mul:1029", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1086918619}, {wa.F32, 2155872256}}, arg{wa.F32, 2177437659})
	})
	t.Run("mul:1030", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1086918619}, {wa.F32, 8388608}}, arg{wa.F32, 29954011})
	})
	t.Run("mul:1031", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3234402267}, {wa.F32, 3204448256}}, arg{wa.F32, 1078530011})
	})
	t.Run("mul:1032", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3234402267}, {wa.F32, 1056964608}}, arg{wa.F32, 3226013659})
	})
	t.Run("mul:1033", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1086918619}, {wa.F32, 3204448256}}, arg{wa.F32, 3226013659})
	})
	t.Run("mul:1034", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1086918619}, {wa.F32, 1056964608}}, arg{wa.F32, 1078530011})
	})
	t.Run("mul:1035", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3234402267}, {wa.F32, 3212836864}}, arg{wa.F32, 1086918619})
	})
	t.Run("mul:1036", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3234402267}, {wa.F32, 1065353216}}, arg{wa.F32, 3234402267})
	})
	t.Run("mul:1037", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1086918619}, {wa.F32, 3212836864}}, arg{wa.F32, 3234402267})
	})
	t.Run("mul:1038", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1086918619}, {wa.F32, 1065353216}}, arg{wa.F32, 1086918619})
	})
	t.Run("mul:1039", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3234402267}, {wa.F32, 3234402267}}, arg{wa.F32, 1109256679})
	})
	t.Run("mul:1040", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3234402267}, {wa.F32, 1086918619}}, arg{wa.F32, 3256740327})
	})
	t.Run("mul:1041", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1086918619}, {wa.F32, 3234402267}}, arg{wa.F32, 3256740327})
	})
	t.Run("mul:1042", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1086918619}, {wa.F32, 1086918619}}, arg{wa.F32, 1109256679})
	})
	t.Run("mul:1043", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3234402267}, {wa.F32, 4286578687}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:1044", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3234402267}, {wa.F32, 2139095039}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:1045", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1086918619}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:1046", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1086918619}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:1047", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3234402267}, {wa.F32, 4286578688}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:1048", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3234402267}, {wa.F32, 2139095040}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:1049", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1086918619}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:1050", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1086918619}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:1051", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3234402267}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1052", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3234402267}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1053", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3234402267}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1054", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 3234402267}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1055", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1086918619}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1056", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1086918619}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1057", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1086918619}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1058", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 1086918619}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1059", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578687}, {wa.F32, 2147483648}}, arg{wa.F32, 0})
	})
	t.Run("mul:1060", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578687}, {wa.F32, 0}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:1061", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095039}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("mul:1062", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095039}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("mul:1063", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578687}, {wa.F32, 2147483649}}, arg{wa.F32, 889192447})
	})
	t.Run("mul:1064", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578687}, {wa.F32, 1}}, arg{wa.F32, 3036676095})
	})
	t.Run("mul:1065", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095039}, {wa.F32, 2147483649}}, arg{wa.F32, 3036676095})
	})
	t.Run("mul:1066", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095039}, {wa.F32, 1}}, arg{wa.F32, 889192447})
	})
	t.Run("mul:1067", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578687}, {wa.F32, 2155872256}}, arg{wa.F32, 1082130431})
	})
	t.Run("mul:1068", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578687}, {wa.F32, 8388608}}, arg{wa.F32, 3229614079})
	})
	t.Run("mul:1069", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095039}, {wa.F32, 2155872256}}, arg{wa.F32, 3229614079})
	})
	t.Run("mul:1070", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095039}, {wa.F32, 8388608}}, arg{wa.F32, 1082130431})
	})
	t.Run("mul:1071", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578687}, {wa.F32, 3204448256}}, arg{wa.F32, 2130706431})
	})
	t.Run("mul:1072", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578687}, {wa.F32, 1056964608}}, arg{wa.F32, 4278190079})
	})
	t.Run("mul:1073", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095039}, {wa.F32, 3204448256}}, arg{wa.F32, 4278190079})
	})
	t.Run("mul:1074", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095039}, {wa.F32, 1056964608}}, arg{wa.F32, 2130706431})
	})
	t.Run("mul:1075", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578687}, {wa.F32, 3212836864}}, arg{wa.F32, 2139095039})
	})
	t.Run("mul:1076", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578687}, {wa.F32, 1065353216}}, arg{wa.F32, 4286578687})
	})
	t.Run("mul:1077", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095039}, {wa.F32, 3212836864}}, arg{wa.F32, 4286578687})
	})
	t.Run("mul:1078", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095039}, {wa.F32, 1065353216}}, arg{wa.F32, 2139095039})
	})
	t.Run("mul:1079", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578687}, {wa.F32, 3234402267}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:1080", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578687}, {wa.F32, 1086918619}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:1081", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095039}, {wa.F32, 3234402267}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:1082", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095039}, {wa.F32, 1086918619}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:1083", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578687}, {wa.F32, 4286578687}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:1084", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578687}, {wa.F32, 2139095039}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:1085", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095039}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:1086", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095039}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:1087", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578687}, {wa.F32, 4286578688}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:1088", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578687}, {wa.F32, 2139095040}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:1089", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095039}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:1090", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095039}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:1091", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578687}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1092", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578687}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1093", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578687}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1094", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578687}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1095", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095039}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1096", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095039}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1097", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095039}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1098", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095039}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1099", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578688}, {wa.F32, 2147483648}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1100", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578688}, {wa.F32, 0}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1101", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095040}, {wa.F32, 2147483648}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1102", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095040}, {wa.F32, 0}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1103", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578688}, {wa.F32, 2147483649}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:1104", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578688}, {wa.F32, 1}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:1105", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095040}, {wa.F32, 2147483649}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:1106", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095040}, {wa.F32, 1}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:1107", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578688}, {wa.F32, 2155872256}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:1108", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578688}, {wa.F32, 8388608}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:1109", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095040}, {wa.F32, 2155872256}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:1110", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095040}, {wa.F32, 8388608}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:1111", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578688}, {wa.F32, 3204448256}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:1112", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578688}, {wa.F32, 1056964608}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:1113", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095040}, {wa.F32, 3204448256}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:1114", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095040}, {wa.F32, 1056964608}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:1115", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578688}, {wa.F32, 3212836864}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:1116", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578688}, {wa.F32, 1065353216}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:1117", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095040}, {wa.F32, 3212836864}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:1118", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095040}, {wa.F32, 1065353216}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:1119", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578688}, {wa.F32, 3234402267}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:1120", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578688}, {wa.F32, 1086918619}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:1121", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095040}, {wa.F32, 3234402267}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:1122", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095040}, {wa.F32, 1086918619}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:1123", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578688}, {wa.F32, 4286578687}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:1124", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578688}, {wa.F32, 2139095039}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:1125", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095040}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:1126", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095040}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:1127", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578688}, {wa.F32, 4286578688}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:1128", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578688}, {wa.F32, 2139095040}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:1129", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095040}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("mul:1130", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095040}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("mul:1131", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578688}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1132", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578688}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1133", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578688}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1134", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4286578688}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1135", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095040}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1136", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095040}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1137", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095040}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1138", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2139095040}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1139", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4290772992}, {wa.F32, 2147483648}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1140", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4288675840}, {wa.F32, 2147483648}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1141", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4290772992}, {wa.F32, 0}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1142", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4288675840}, {wa.F32, 0}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1143", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2143289344}, {wa.F32, 2147483648}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1144", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2141192192}, {wa.F32, 2147483648}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1145", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2143289344}, {wa.F32, 0}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1146", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2141192192}, {wa.F32, 0}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1147", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4290772992}, {wa.F32, 2147483649}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1148", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4288675840}, {wa.F32, 2147483649}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1149", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4290772992}, {wa.F32, 1}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1150", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4288675840}, {wa.F32, 1}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1151", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2143289344}, {wa.F32, 2147483649}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1152", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2141192192}, {wa.F32, 2147483649}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1153", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2143289344}, {wa.F32, 1}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1154", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2141192192}, {wa.F32, 1}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1155", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4290772992}, {wa.F32, 2155872256}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1156", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4288675840}, {wa.F32, 2155872256}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1157", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4290772992}, {wa.F32, 8388608}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1158", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4288675840}, {wa.F32, 8388608}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1159", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2143289344}, {wa.F32, 2155872256}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1160", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2141192192}, {wa.F32, 2155872256}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1161", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2143289344}, {wa.F32, 8388608}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1162", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2141192192}, {wa.F32, 8388608}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1163", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4290772992}, {wa.F32, 3204448256}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1164", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4288675840}, {wa.F32, 3204448256}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1165", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4290772992}, {wa.F32, 1056964608}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1166", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4288675840}, {wa.F32, 1056964608}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1167", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2143289344}, {wa.F32, 3204448256}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1168", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2141192192}, {wa.F32, 3204448256}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1169", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2143289344}, {wa.F32, 1056964608}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1170", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2141192192}, {wa.F32, 1056964608}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1171", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4290772992}, {wa.F32, 3212836864}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1172", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4288675840}, {wa.F32, 3212836864}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1173", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4290772992}, {wa.F32, 1065353216}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1174", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4288675840}, {wa.F32, 1065353216}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1175", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2143289344}, {wa.F32, 3212836864}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1176", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2141192192}, {wa.F32, 3212836864}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1177", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2143289344}, {wa.F32, 1065353216}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1178", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2141192192}, {wa.F32, 1065353216}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1179", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4290772992}, {wa.F32, 3234402267}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1180", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4288675840}, {wa.F32, 3234402267}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1181", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4290772992}, {wa.F32, 1086918619}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1182", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4288675840}, {wa.F32, 1086918619}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1183", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2143289344}, {wa.F32, 3234402267}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1184", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2141192192}, {wa.F32, 3234402267}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1185", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2143289344}, {wa.F32, 1086918619}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1186", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2141192192}, {wa.F32, 1086918619}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1187", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4290772992}, {wa.F32, 4286578687}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1188", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4288675840}, {wa.F32, 4286578687}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1189", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4290772992}, {wa.F32, 2139095039}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1190", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4288675840}, {wa.F32, 2139095039}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1191", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2143289344}, {wa.F32, 4286578687}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1192", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2141192192}, {wa.F32, 4286578687}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1193", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2143289344}, {wa.F32, 2139095039}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1194", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2141192192}, {wa.F32, 2139095039}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1195", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4290772992}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1196", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4288675840}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1197", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4290772992}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1198", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4288675840}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1199", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2143289344}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1200", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2141192192}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1201", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2143289344}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1202", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2141192192}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1203", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4290772992}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1204", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4288675840}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1205", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4290772992}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1206", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4288675840}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1207", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4290772992}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1208", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4288675840}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1209", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4290772992}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1210", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 4288675840}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1211", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2143289344}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1212", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2141192192}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1213", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2143289344}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1214", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2141192192}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1215", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2143289344}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("mul:1216", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2141192192}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1217", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2143289344}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("mul:1218", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F32, 2141192192}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1219", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483648}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1220", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483648}, {wa.F32, 0}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1221", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 0}, {wa.F32, 2147483648}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1222", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 0}, {wa.F32, 0}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1223", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483649}}, arg{wa.F32, 0})
	})
	t.Run("div:1224", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483648}, {wa.F32, 1}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1225", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 0}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1226", func(t *testing.T) { x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 0}, {wa.F32, 1}}, arg{wa.F32, 0}) })
	t.Run("div:1227", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483648}, {wa.F32, 2155872256}}, arg{wa.F32, 0})
	})
	t.Run("div:1228", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483648}, {wa.F32, 8388608}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1229", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 0}, {wa.F32, 2155872256}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1230", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 0}, {wa.F32, 8388608}}, arg{wa.F32, 0})
	})
	t.Run("div:1231", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483648}, {wa.F32, 3204448256}}, arg{wa.F32, 0})
	})
	t.Run("div:1232", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483648}, {wa.F32, 1056964608}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1233", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 0}, {wa.F32, 3204448256}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1234", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 0}, {wa.F32, 1056964608}}, arg{wa.F32, 0})
	})
	t.Run("div:1235", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483648}, {wa.F32, 3212836864}}, arg{wa.F32, 0})
	})
	t.Run("div:1236", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483648}, {wa.F32, 1065353216}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1237", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 0}, {wa.F32, 3212836864}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1238", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 0}, {wa.F32, 1065353216}}, arg{wa.F32, 0})
	})
	t.Run("div:1239", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483648}, {wa.F32, 3234402267}}, arg{wa.F32, 0})
	})
	t.Run("div:1240", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483648}, {wa.F32, 1086918619}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1241", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 0}, {wa.F32, 3234402267}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1242", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 0}, {wa.F32, 1086918619}}, arg{wa.F32, 0})
	})
	t.Run("div:1243", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483648}, {wa.F32, 4286578687}}, arg{wa.F32, 0})
	})
	t.Run("div:1244", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483648}, {wa.F32, 2139095039}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1245", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 0}, {wa.F32, 4286578687}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1246", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 0}, {wa.F32, 2139095039}}, arg{wa.F32, 0})
	})
	t.Run("div:1247", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483648}, {wa.F32, 4286578688}}, arg{wa.F32, 0})
	})
	t.Run("div:1248", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483648}, {wa.F32, 2139095040}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1249", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 0}, {wa.F32, 4286578688}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1250", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 0}, {wa.F32, 2139095040}}, arg{wa.F32, 0})
	})
	t.Run("div:1251", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483648}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1252", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483648}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1253", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483648}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1254", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483648}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1255", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 0}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1256", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 0}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1257", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 0}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1258", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 0}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1259", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483649}, {wa.F32, 2147483648}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1260", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483649}, {wa.F32, 0}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1261", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1}, {wa.F32, 2147483648}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1262", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1}, {wa.F32, 0}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1263", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483649}, {wa.F32, 2147483649}}, arg{wa.F32, 1065353216})
	})
	t.Run("div:1264", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483649}, {wa.F32, 1}}, arg{wa.F32, 3212836864})
	})
	t.Run("div:1265", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1}, {wa.F32, 2147483649}}, arg{wa.F32, 3212836864})
	})
	t.Run("div:1266", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1}, {wa.F32, 1}}, arg{wa.F32, 1065353216})
	})
	t.Run("div:1267", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483649}, {wa.F32, 2155872256}}, arg{wa.F32, 872415232})
	})
	t.Run("div:1268", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483649}, {wa.F32, 8388608}}, arg{wa.F32, 3019898880})
	})
	t.Run("div:1269", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1}, {wa.F32, 2155872256}}, arg{wa.F32, 3019898880})
	})
	t.Run("div:1270", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1}, {wa.F32, 8388608}}, arg{wa.F32, 872415232})
	})
	t.Run("div:1271", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483649}, {wa.F32, 3204448256}}, arg{wa.F32, 2})
	})
	t.Run("div:1272", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483649}, {wa.F32, 1056964608}}, arg{wa.F32, 2147483650})
	})
	t.Run("div:1273", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1}, {wa.F32, 3204448256}}, arg{wa.F32, 2147483650})
	})
	t.Run("div:1274", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1}, {wa.F32, 1056964608}}, arg{wa.F32, 2})
	})
	t.Run("div:1275", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483649}, {wa.F32, 3212836864}}, arg{wa.F32, 1})
	})
	t.Run("div:1276", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483649}, {wa.F32, 1065353216}}, arg{wa.F32, 2147483649})
	})
	t.Run("div:1277", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1}, {wa.F32, 3212836864}}, arg{wa.F32, 2147483649})
	})
	t.Run("div:1278", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1}, {wa.F32, 1065353216}}, arg{wa.F32, 1})
	})
	t.Run("div:1279", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483649}, {wa.F32, 3234402267}}, arg{wa.F32, 0})
	})
	t.Run("div:1280", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483649}, {wa.F32, 1086918619}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1281", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1}, {wa.F32, 3234402267}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1282", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1}, {wa.F32, 1086918619}}, arg{wa.F32, 0})
	})
	t.Run("div:1283", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483649}, {wa.F32, 4286578687}}, arg{wa.F32, 0})
	})
	t.Run("div:1284", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483649}, {wa.F32, 2139095039}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1285", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1}, {wa.F32, 4286578687}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1286", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1}, {wa.F32, 2139095039}}, arg{wa.F32, 0})
	})
	t.Run("div:1287", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483649}, {wa.F32, 4286578688}}, arg{wa.F32, 0})
	})
	t.Run("div:1288", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483649}, {wa.F32, 2139095040}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1289", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1}, {wa.F32, 4286578688}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1290", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1}, {wa.F32, 2139095040}}, arg{wa.F32, 0})
	})
	t.Run("div:1291", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483649}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1292", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483649}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1293", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483649}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1294", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2147483649}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1295", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1296", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1297", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1298", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1299", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2155872256}, {wa.F32, 2147483648}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1300", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2155872256}, {wa.F32, 0}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1301", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 8388608}, {wa.F32, 2147483648}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1302", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 8388608}, {wa.F32, 0}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1303", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2155872256}, {wa.F32, 2147483649}}, arg{wa.F32, 1258291200})
	})
	t.Run("div:1304", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2155872256}, {wa.F32, 1}}, arg{wa.F32, 3405774848})
	})
	t.Run("div:1305", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 8388608}, {wa.F32, 2147483649}}, arg{wa.F32, 3405774848})
	})
	t.Run("div:1306", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 8388608}, {wa.F32, 1}}, arg{wa.F32, 1258291200})
	})
	t.Run("div:1307", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2155872256}, {wa.F32, 2155872256}}, arg{wa.F32, 1065353216})
	})
	t.Run("div:1308", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2155872256}, {wa.F32, 8388608}}, arg{wa.F32, 3212836864})
	})
	t.Run("div:1309", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 8388608}, {wa.F32, 2155872256}}, arg{wa.F32, 3212836864})
	})
	t.Run("div:1310", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 8388608}, {wa.F32, 8388608}}, arg{wa.F32, 1065353216})
	})
	t.Run("div:1311", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2155872256}, {wa.F32, 3204448256}}, arg{wa.F32, 16777216})
	})
	t.Run("div:1312", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2155872256}, {wa.F32, 1056964608}}, arg{wa.F32, 2164260864})
	})
	t.Run("div:1313", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 8388608}, {wa.F32, 3204448256}}, arg{wa.F32, 2164260864})
	})
	t.Run("div:1314", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 8388608}, {wa.F32, 1056964608}}, arg{wa.F32, 16777216})
	})
	t.Run("div:1315", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2155872256}, {wa.F32, 3212836864}}, arg{wa.F32, 8388608})
	})
	t.Run("div:1316", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2155872256}, {wa.F32, 1065353216}}, arg{wa.F32, 2155872256})
	})
	t.Run("div:1317", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 8388608}, {wa.F32, 3212836864}}, arg{wa.F32, 2155872256})
	})
	t.Run("div:1318", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 8388608}, {wa.F32, 1065353216}}, arg{wa.F32, 8388608})
	})
	t.Run("div:1319", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2155872256}, {wa.F32, 3234402267}}, arg{wa.F32, 1335088})
	})
	t.Run("div:1320", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2155872256}, {wa.F32, 1086918619}}, arg{wa.F32, 2148818736})
	})
	t.Run("div:1321", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 8388608}, {wa.F32, 3234402267}}, arg{wa.F32, 2148818736})
	})
	t.Run("div:1322", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 8388608}, {wa.F32, 1086918619}}, arg{wa.F32, 1335088})
	})
	t.Run("div:1323", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2155872256}, {wa.F32, 4286578687}}, arg{wa.F32, 0})
	})
	t.Run("div:1324", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2155872256}, {wa.F32, 2139095039}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1325", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 8388608}, {wa.F32, 4286578687}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1326", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 8388608}, {wa.F32, 2139095039}}, arg{wa.F32, 0})
	})
	t.Run("div:1327", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2155872256}, {wa.F32, 4286578688}}, arg{wa.F32, 0})
	})
	t.Run("div:1328", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2155872256}, {wa.F32, 2139095040}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1329", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 8388608}, {wa.F32, 4286578688}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1330", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 8388608}, {wa.F32, 2139095040}}, arg{wa.F32, 0})
	})
	t.Run("div:1331", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2155872256}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1332", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2155872256}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1333", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2155872256}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1334", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2155872256}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1335", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 8388608}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1336", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 8388608}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1337", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 8388608}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1338", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 8388608}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1339", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3204448256}, {wa.F32, 2147483648}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1340", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3204448256}, {wa.F32, 0}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1341", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1056964608}, {wa.F32, 2147483648}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1342", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1056964608}, {wa.F32, 0}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1343", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3204448256}, {wa.F32, 2147483649}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1344", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3204448256}, {wa.F32, 1}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1345", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1056964608}, {wa.F32, 2147483649}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1346", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1056964608}, {wa.F32, 1}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1347", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3204448256}, {wa.F32, 2155872256}}, arg{wa.F32, 2113929216})
	})
	t.Run("div:1348", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3204448256}, {wa.F32, 8388608}}, arg{wa.F32, 4261412864})
	})
	t.Run("div:1349", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1056964608}, {wa.F32, 2155872256}}, arg{wa.F32, 4261412864})
	})
	t.Run("div:1350", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1056964608}, {wa.F32, 8388608}}, arg{wa.F32, 2113929216})
	})
	t.Run("div:1351", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3204448256}, {wa.F32, 3204448256}}, arg{wa.F32, 1065353216})
	})
	t.Run("div:1352", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3204448256}, {wa.F32, 1056964608}}, arg{wa.F32, 3212836864})
	})
	t.Run("div:1353", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1056964608}, {wa.F32, 3204448256}}, arg{wa.F32, 3212836864})
	})
	t.Run("div:1354", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1056964608}, {wa.F32, 1056964608}}, arg{wa.F32, 1065353216})
	})
	t.Run("div:1355", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3204448256}, {wa.F32, 3212836864}}, arg{wa.F32, 1056964608})
	})
	t.Run("div:1356", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3204448256}, {wa.F32, 1065353216}}, arg{wa.F32, 3204448256})
	})
	t.Run("div:1357", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1056964608}, {wa.F32, 3212836864}}, arg{wa.F32, 3204448256})
	})
	t.Run("div:1358", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1056964608}, {wa.F32, 1065353216}}, arg{wa.F32, 1056964608})
	})
	t.Run("div:1359", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3204448256}, {wa.F32, 3234402267}}, arg{wa.F32, 1034090883})
	})
	t.Run("div:1360", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3204448256}, {wa.F32, 1086918619}}, arg{wa.F32, 3181574531})
	})
	t.Run("div:1361", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1056964608}, {wa.F32, 3234402267}}, arg{wa.F32, 3181574531})
	})
	t.Run("div:1362", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1056964608}, {wa.F32, 1086918619}}, arg{wa.F32, 1034090883})
	})
	t.Run("div:1363", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3204448256}, {wa.F32, 4286578687}}, arg{wa.F32, 1048576})
	})
	t.Run("div:1364", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3204448256}, {wa.F32, 2139095039}}, arg{wa.F32, 2148532224})
	})
	t.Run("div:1365", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1056964608}, {wa.F32, 4286578687}}, arg{wa.F32, 2148532224})
	})
	t.Run("div:1366", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1056964608}, {wa.F32, 2139095039}}, arg{wa.F32, 1048576})
	})
	t.Run("div:1367", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3204448256}, {wa.F32, 4286578688}}, arg{wa.F32, 0})
	})
	t.Run("div:1368", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3204448256}, {wa.F32, 2139095040}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1369", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1056964608}, {wa.F32, 4286578688}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1370", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1056964608}, {wa.F32, 2139095040}}, arg{wa.F32, 0})
	})
	t.Run("div:1371", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3204448256}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1372", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3204448256}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1373", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3204448256}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1374", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3204448256}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1375", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1056964608}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1376", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1056964608}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1377", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1056964608}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1378", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1056964608}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1379", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3212836864}, {wa.F32, 2147483648}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1380", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3212836864}, {wa.F32, 0}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1381", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1065353216}, {wa.F32, 2147483648}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1382", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1065353216}, {wa.F32, 0}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1383", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3212836864}, {wa.F32, 2147483649}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1384", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3212836864}, {wa.F32, 1}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1385", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1065353216}, {wa.F32, 2147483649}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1386", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1065353216}, {wa.F32, 1}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1387", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3212836864}, {wa.F32, 2155872256}}, arg{wa.F32, 2122317824})
	})
	t.Run("div:1388", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3212836864}, {wa.F32, 8388608}}, arg{wa.F32, 4269801472})
	})
	t.Run("div:1389", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1065353216}, {wa.F32, 2155872256}}, arg{wa.F32, 4269801472})
	})
	t.Run("div:1390", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1065353216}, {wa.F32, 8388608}}, arg{wa.F32, 2122317824})
	})
	t.Run("div:1391", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3212836864}, {wa.F32, 3204448256}}, arg{wa.F32, 1073741824})
	})
	t.Run("div:1392", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3212836864}, {wa.F32, 1056964608}}, arg{wa.F32, 3221225472})
	})
	t.Run("div:1393", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1065353216}, {wa.F32, 3204448256}}, arg{wa.F32, 3221225472})
	})
	t.Run("div:1394", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1065353216}, {wa.F32, 1056964608}}, arg{wa.F32, 1073741824})
	})
	t.Run("div:1395", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3212836864}, {wa.F32, 3212836864}}, arg{wa.F32, 1065353216})
	})
	t.Run("div:1396", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3212836864}, {wa.F32, 1065353216}}, arg{wa.F32, 3212836864})
	})
	t.Run("div:1397", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1065353216}, {wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("div:1398", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1065353216}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("div:1399", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3212836864}, {wa.F32, 3234402267}}, arg{wa.F32, 1042479491})
	})
	t.Run("div:1400", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3212836864}, {wa.F32, 1086918619}}, arg{wa.F32, 3189963139})
	})
	t.Run("div:1401", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1065353216}, {wa.F32, 3234402267}}, arg{wa.F32, 3189963139})
	})
	t.Run("div:1402", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1065353216}, {wa.F32, 1086918619}}, arg{wa.F32, 1042479491})
	})
	t.Run("div:1403", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3212836864}, {wa.F32, 4286578687}}, arg{wa.F32, 2097152})
	})
	t.Run("div:1404", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3212836864}, {wa.F32, 2139095039}}, arg{wa.F32, 2149580800})
	})
	t.Run("div:1405", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1065353216}, {wa.F32, 4286578687}}, arg{wa.F32, 2149580800})
	})
	t.Run("div:1406", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1065353216}, {wa.F32, 2139095039}}, arg{wa.F32, 2097152})
	})
	t.Run("div:1407", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3212836864}, {wa.F32, 4286578688}}, arg{wa.F32, 0})
	})
	t.Run("div:1408", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3212836864}, {wa.F32, 2139095040}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1409", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1065353216}, {wa.F32, 4286578688}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1410", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1065353216}, {wa.F32, 2139095040}}, arg{wa.F32, 0})
	})
	t.Run("div:1411", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3212836864}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1412", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3212836864}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1413", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3212836864}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1414", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3212836864}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1415", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1065353216}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1416", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1065353216}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1417", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1065353216}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1418", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1065353216}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1419", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3234402267}, {wa.F32, 2147483648}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1420", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3234402267}, {wa.F32, 0}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1421", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1086918619}, {wa.F32, 2147483648}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1422", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1086918619}, {wa.F32, 0}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1423", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3234402267}, {wa.F32, 2147483649}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1424", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3234402267}, {wa.F32, 1}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1425", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1086918619}, {wa.F32, 2147483649}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1426", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1086918619}, {wa.F32, 1}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1427", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3234402267}, {wa.F32, 2155872256}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1428", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3234402267}, {wa.F32, 8388608}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1429", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1086918619}, {wa.F32, 2155872256}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1430", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1086918619}, {wa.F32, 8388608}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1431", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3234402267}, {wa.F32, 3204448256}}, arg{wa.F32, 1095307227})
	})
	t.Run("div:1432", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3234402267}, {wa.F32, 1056964608}}, arg{wa.F32, 3242790875})
	})
	t.Run("div:1433", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1086918619}, {wa.F32, 3204448256}}, arg{wa.F32, 3242790875})
	})
	t.Run("div:1434", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1086918619}, {wa.F32, 1056964608}}, arg{wa.F32, 1095307227})
	})
	t.Run("div:1435", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3234402267}, {wa.F32, 3212836864}}, arg{wa.F32, 1086918619})
	})
	t.Run("div:1436", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3234402267}, {wa.F32, 1065353216}}, arg{wa.F32, 3234402267})
	})
	t.Run("div:1437", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1086918619}, {wa.F32, 3212836864}}, arg{wa.F32, 3234402267})
	})
	t.Run("div:1438", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1086918619}, {wa.F32, 1065353216}}, arg{wa.F32, 1086918619})
	})
	t.Run("div:1439", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3234402267}, {wa.F32, 3234402267}}, arg{wa.F32, 1065353216})
	})
	t.Run("div:1440", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3234402267}, {wa.F32, 1086918619}}, arg{wa.F32, 3212836864})
	})
	t.Run("div:1441", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1086918619}, {wa.F32, 3234402267}}, arg{wa.F32, 3212836864})
	})
	t.Run("div:1442", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1086918619}, {wa.F32, 1086918619}}, arg{wa.F32, 1065353216})
	})
	t.Run("div:1443", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3234402267}, {wa.F32, 4286578687}}, arg{wa.F32, 13176796})
	})
	t.Run("div:1444", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3234402267}, {wa.F32, 2139095039}}, arg{wa.F32, 2160660444})
	})
	t.Run("div:1445", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1086918619}, {wa.F32, 4286578687}}, arg{wa.F32, 2160660444})
	})
	t.Run("div:1446", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1086918619}, {wa.F32, 2139095039}}, arg{wa.F32, 13176796})
	})
	t.Run("div:1447", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3234402267}, {wa.F32, 4286578688}}, arg{wa.F32, 0})
	})
	t.Run("div:1448", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3234402267}, {wa.F32, 2139095040}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1449", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1086918619}, {wa.F32, 4286578688}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1450", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1086918619}, {wa.F32, 2139095040}}, arg{wa.F32, 0})
	})
	t.Run("div:1451", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3234402267}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1452", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3234402267}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1453", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3234402267}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1454", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 3234402267}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1455", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1086918619}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1456", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1086918619}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1457", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1086918619}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1458", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 1086918619}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1459", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578687}, {wa.F32, 2147483648}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1460", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578687}, {wa.F32, 0}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1461", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095039}, {wa.F32, 2147483648}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1462", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095039}, {wa.F32, 0}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1463", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578687}, {wa.F32, 2147483649}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1464", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578687}, {wa.F32, 1}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1465", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095039}, {wa.F32, 2147483649}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1466", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095039}, {wa.F32, 1}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1467", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578687}, {wa.F32, 2155872256}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1468", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578687}, {wa.F32, 8388608}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1469", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095039}, {wa.F32, 2155872256}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1470", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095039}, {wa.F32, 8388608}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1471", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578687}, {wa.F32, 3204448256}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1472", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578687}, {wa.F32, 1056964608}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1473", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095039}, {wa.F32, 3204448256}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1474", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095039}, {wa.F32, 1056964608}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1475", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578687}, {wa.F32, 3212836864}}, arg{wa.F32, 2139095039})
	})
	t.Run("div:1476", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578687}, {wa.F32, 1065353216}}, arg{wa.F32, 4286578687})
	})
	t.Run("div:1477", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095039}, {wa.F32, 3212836864}}, arg{wa.F32, 4286578687})
	})
	t.Run("div:1478", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095039}, {wa.F32, 1065353216}}, arg{wa.F32, 2139095039})
	})
	t.Run("div:1479", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578687}, {wa.F32, 3234402267}}, arg{wa.F32, 2116221314})
	})
	t.Run("div:1480", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578687}, {wa.F32, 1086918619}}, arg{wa.F32, 4263704962})
	})
	t.Run("div:1481", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095039}, {wa.F32, 3234402267}}, arg{wa.F32, 4263704962})
	})
	t.Run("div:1482", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095039}, {wa.F32, 1086918619}}, arg{wa.F32, 2116221314})
	})
	t.Run("div:1483", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578687}, {wa.F32, 4286578687}}, arg{wa.F32, 1065353216})
	})
	t.Run("div:1484", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578687}, {wa.F32, 2139095039}}, arg{wa.F32, 3212836864})
	})
	t.Run("div:1485", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095039}, {wa.F32, 4286578687}}, arg{wa.F32, 3212836864})
	})
	t.Run("div:1486", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095039}, {wa.F32, 2139095039}}, arg{wa.F32, 1065353216})
	})
	t.Run("div:1487", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578687}, {wa.F32, 4286578688}}, arg{wa.F32, 0})
	})
	t.Run("div:1488", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578687}, {wa.F32, 2139095040}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1489", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095039}, {wa.F32, 4286578688}}, arg{wa.F32, 2147483648})
	})
	t.Run("div:1490", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095039}, {wa.F32, 2139095040}}, arg{wa.F32, 0})
	})
	t.Run("div:1491", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578687}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1492", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578687}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1493", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578687}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1494", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578687}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1495", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095039}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1496", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095039}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1497", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095039}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1498", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095039}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1499", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578688}, {wa.F32, 2147483648}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1500", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578688}, {wa.F32, 0}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1501", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095040}, {wa.F32, 2147483648}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1502", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095040}, {wa.F32, 0}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1503", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578688}, {wa.F32, 2147483649}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1504", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578688}, {wa.F32, 1}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1505", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095040}, {wa.F32, 2147483649}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1506", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095040}, {wa.F32, 1}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1507", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578688}, {wa.F32, 2155872256}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1508", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578688}, {wa.F32, 8388608}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1509", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095040}, {wa.F32, 2155872256}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1510", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095040}, {wa.F32, 8388608}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1511", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578688}, {wa.F32, 3204448256}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1512", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578688}, {wa.F32, 1056964608}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1513", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095040}, {wa.F32, 3204448256}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1514", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095040}, {wa.F32, 1056964608}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1515", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578688}, {wa.F32, 3212836864}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1516", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578688}, {wa.F32, 1065353216}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1517", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095040}, {wa.F32, 3212836864}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1518", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095040}, {wa.F32, 1065353216}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1519", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578688}, {wa.F32, 3234402267}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1520", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578688}, {wa.F32, 1086918619}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1521", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095040}, {wa.F32, 3234402267}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1522", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095040}, {wa.F32, 1086918619}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1523", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578688}, {wa.F32, 4286578687}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1524", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578688}, {wa.F32, 2139095039}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1525", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095040}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578688})
	})
	t.Run("div:1526", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095040}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095040})
	})
	t.Run("div:1527", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578688}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1528", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578688}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1529", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095040}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1530", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095040}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1531", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578688}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1532", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578688}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1533", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578688}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1534", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4286578688}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1535", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095040}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1536", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095040}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1537", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095040}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1538", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2139095040}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1539", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4290772992}, {wa.F32, 2147483648}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1540", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4288675840}, {wa.F32, 2147483648}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1541", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4290772992}, {wa.F32, 0}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1542", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4288675840}, {wa.F32, 0}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1543", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2143289344}, {wa.F32, 2147483648}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1544", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2141192192}, {wa.F32, 2147483648}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1545", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2143289344}, {wa.F32, 0}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1546", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2141192192}, {wa.F32, 0}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1547", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4290772992}, {wa.F32, 2147483649}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1548", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4288675840}, {wa.F32, 2147483649}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1549", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4290772992}, {wa.F32, 1}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1550", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4288675840}, {wa.F32, 1}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1551", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2143289344}, {wa.F32, 2147483649}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1552", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2141192192}, {wa.F32, 2147483649}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1553", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2143289344}, {wa.F32, 1}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1554", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2141192192}, {wa.F32, 1}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1555", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4290772992}, {wa.F32, 2155872256}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1556", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4288675840}, {wa.F32, 2155872256}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1557", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4290772992}, {wa.F32, 8388608}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1558", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4288675840}, {wa.F32, 8388608}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1559", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2143289344}, {wa.F32, 2155872256}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1560", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2141192192}, {wa.F32, 2155872256}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1561", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2143289344}, {wa.F32, 8388608}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1562", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2141192192}, {wa.F32, 8388608}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1563", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4290772992}, {wa.F32, 3204448256}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1564", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4288675840}, {wa.F32, 3204448256}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1565", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4290772992}, {wa.F32, 1056964608}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1566", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4288675840}, {wa.F32, 1056964608}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1567", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2143289344}, {wa.F32, 3204448256}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1568", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2141192192}, {wa.F32, 3204448256}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1569", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2143289344}, {wa.F32, 1056964608}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1570", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2141192192}, {wa.F32, 1056964608}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1571", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4290772992}, {wa.F32, 3212836864}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1572", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4288675840}, {wa.F32, 3212836864}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1573", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4290772992}, {wa.F32, 1065353216}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1574", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4288675840}, {wa.F32, 1065353216}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1575", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2143289344}, {wa.F32, 3212836864}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1576", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2141192192}, {wa.F32, 3212836864}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1577", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2143289344}, {wa.F32, 1065353216}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1578", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2141192192}, {wa.F32, 1065353216}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1579", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4290772992}, {wa.F32, 3234402267}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1580", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4288675840}, {wa.F32, 3234402267}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1581", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4290772992}, {wa.F32, 1086918619}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1582", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4288675840}, {wa.F32, 1086918619}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1583", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2143289344}, {wa.F32, 3234402267}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1584", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2141192192}, {wa.F32, 3234402267}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1585", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2143289344}, {wa.F32, 1086918619}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1586", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2141192192}, {wa.F32, 1086918619}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1587", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4290772992}, {wa.F32, 4286578687}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1588", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4288675840}, {wa.F32, 4286578687}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1589", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4290772992}, {wa.F32, 2139095039}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1590", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4288675840}, {wa.F32, 2139095039}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1591", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2143289344}, {wa.F32, 4286578687}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1592", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2141192192}, {wa.F32, 4286578687}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1593", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2143289344}, {wa.F32, 2139095039}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1594", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2141192192}, {wa.F32, 2139095039}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1595", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4290772992}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1596", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4288675840}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1597", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4290772992}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1598", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4288675840}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1599", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2143289344}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1600", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2141192192}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1601", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2143289344}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1602", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2141192192}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1603", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4290772992}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1604", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4288675840}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1605", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4290772992}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1606", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4288675840}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1607", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4290772992}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1608", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4288675840}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1609", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4290772992}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1610", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 4288675840}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1611", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2143289344}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1612", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2141192192}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1613", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2143289344}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1614", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2141192192}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1615", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2143289344}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("div:1616", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2141192192}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1617", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2143289344}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("div:1618", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F32, 2141192192}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1619", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("min:1620", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483648}, {wa.F32, 0}}, arg{wa.F32, 2147483648})
	})
	t.Run("min:1621", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 0}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("min:1622", func(t *testing.T) { x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 0}, {wa.F32, 0}}, arg{wa.F32, 0}) })
	t.Run("min:1623", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483649})
	})
	t.Run("min:1624", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483648}, {wa.F32, 1}}, arg{wa.F32, 2147483648})
	})
	t.Run("min:1625", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 0}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483649})
	})
	t.Run("min:1626", func(t *testing.T) { x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 0}, {wa.F32, 1}}, arg{wa.F32, 0}) })
	t.Run("min:1627", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483648}, {wa.F32, 2155872256}}, arg{wa.F32, 2155872256})
	})
	t.Run("min:1628", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483648}, {wa.F32, 8388608}}, arg{wa.F32, 2147483648})
	})
	t.Run("min:1629", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 0}, {wa.F32, 2155872256}}, arg{wa.F32, 2155872256})
	})
	t.Run("min:1630", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 0}, {wa.F32, 8388608}}, arg{wa.F32, 0})
	})
	t.Run("min:1631", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483648}, {wa.F32, 3204448256}}, arg{wa.F32, 3204448256})
	})
	t.Run("min:1632", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483648}, {wa.F32, 1056964608}}, arg{wa.F32, 2147483648})
	})
	t.Run("min:1633", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 0}, {wa.F32, 3204448256}}, arg{wa.F32, 3204448256})
	})
	t.Run("min:1634", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 0}, {wa.F32, 1056964608}}, arg{wa.F32, 0})
	})
	t.Run("min:1635", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483648}, {wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("min:1636", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483648}, {wa.F32, 1065353216}}, arg{wa.F32, 2147483648})
	})
	t.Run("min:1637", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 0}, {wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("min:1638", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 0}, {wa.F32, 1065353216}}, arg{wa.F32, 0})
	})
	t.Run("min:1639", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483648}, {wa.F32, 3234402267}}, arg{wa.F32, 3234402267})
	})
	t.Run("min:1640", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483648}, {wa.F32, 1086918619}}, arg{wa.F32, 2147483648})
	})
	t.Run("min:1641", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 0}, {wa.F32, 3234402267}}, arg{wa.F32, 3234402267})
	})
	t.Run("min:1642", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 0}, {wa.F32, 1086918619}}, arg{wa.F32, 0})
	})
	t.Run("min:1643", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483648}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1644", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483648}, {wa.F32, 2139095039}}, arg{wa.F32, 2147483648})
	})
	t.Run("min:1645", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 0}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1646", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 0}, {wa.F32, 2139095039}}, arg{wa.F32, 0})
	})
	t.Run("min:1647", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483648}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1648", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483648}, {wa.F32, 2139095040}}, arg{wa.F32, 2147483648})
	})
	t.Run("min:1649", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 0}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1650", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 0}, {wa.F32, 2139095040}}, arg{wa.F32, 0})
	})
	t.Run("min:1651", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483648}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1652", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483648}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1653", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483648}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1654", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483648}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1655", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 0}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1656", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 0}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1657", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 0}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1658", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 0}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1659", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483649}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483649})
	})
	t.Run("min:1660", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483649}, {wa.F32, 0}}, arg{wa.F32, 2147483649})
	})
	t.Run("min:1661", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("min:1662", func(t *testing.T) { x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1}, {wa.F32, 0}}, arg{wa.F32, 0}) })
	t.Run("min:1663", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483649}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483649})
	})
	t.Run("min:1664", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483649}, {wa.F32, 1}}, arg{wa.F32, 2147483649})
	})
	t.Run("min:1665", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483649})
	})
	t.Run("min:1666", func(t *testing.T) { x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1}, {wa.F32, 1}}, arg{wa.F32, 1}) })
	t.Run("min:1667", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483649}, {wa.F32, 2155872256}}, arg{wa.F32, 2155872256})
	})
	t.Run("min:1668", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483649}, {wa.F32, 8388608}}, arg{wa.F32, 2147483649})
	})
	t.Run("min:1669", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1}, {wa.F32, 2155872256}}, arg{wa.F32, 2155872256})
	})
	t.Run("min:1670", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1}, {wa.F32, 8388608}}, arg{wa.F32, 1})
	})
	t.Run("min:1671", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483649}, {wa.F32, 3204448256}}, arg{wa.F32, 3204448256})
	})
	t.Run("min:1672", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483649}, {wa.F32, 1056964608}}, arg{wa.F32, 2147483649})
	})
	t.Run("min:1673", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1}, {wa.F32, 3204448256}}, arg{wa.F32, 3204448256})
	})
	t.Run("min:1674", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1}, {wa.F32, 1056964608}}, arg{wa.F32, 1})
	})
	t.Run("min:1675", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483649}, {wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("min:1676", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483649}, {wa.F32, 1065353216}}, arg{wa.F32, 2147483649})
	})
	t.Run("min:1677", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1}, {wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("min:1678", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1}, {wa.F32, 1065353216}}, arg{wa.F32, 1})
	})
	t.Run("min:1679", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483649}, {wa.F32, 3234402267}}, arg{wa.F32, 3234402267})
	})
	t.Run("min:1680", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483649}, {wa.F32, 1086918619}}, arg{wa.F32, 2147483649})
	})
	t.Run("min:1681", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1}, {wa.F32, 3234402267}}, arg{wa.F32, 3234402267})
	})
	t.Run("min:1682", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1}, {wa.F32, 1086918619}}, arg{wa.F32, 1})
	})
	t.Run("min:1683", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483649}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1684", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483649}, {wa.F32, 2139095039}}, arg{wa.F32, 2147483649})
	})
	t.Run("min:1685", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1686", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1}, {wa.F32, 2139095039}}, arg{wa.F32, 1})
	})
	t.Run("min:1687", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483649}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1688", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483649}, {wa.F32, 2139095040}}, arg{wa.F32, 2147483649})
	})
	t.Run("min:1689", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1690", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1}, {wa.F32, 2139095040}}, arg{wa.F32, 1})
	})
	t.Run("min:1691", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483649}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1692", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483649}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1693", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483649}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1694", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2147483649}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1695", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1696", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1697", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1698", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1699", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2155872256}, {wa.F32, 2147483648}}, arg{wa.F32, 2155872256})
	})
	t.Run("min:1700", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2155872256}, {wa.F32, 0}}, arg{wa.F32, 2155872256})
	})
	t.Run("min:1701", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 8388608}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("min:1702", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 8388608}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("min:1703", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2155872256}, {wa.F32, 2147483649}}, arg{wa.F32, 2155872256})
	})
	t.Run("min:1704", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2155872256}, {wa.F32, 1}}, arg{wa.F32, 2155872256})
	})
	t.Run("min:1705", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 8388608}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483649})
	})
	t.Run("min:1706", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 8388608}, {wa.F32, 1}}, arg{wa.F32, 1})
	})
	t.Run("min:1707", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2155872256}, {wa.F32, 2155872256}}, arg{wa.F32, 2155872256})
	})
	t.Run("min:1708", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2155872256}, {wa.F32, 8388608}}, arg{wa.F32, 2155872256})
	})
	t.Run("min:1709", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 8388608}, {wa.F32, 2155872256}}, arg{wa.F32, 2155872256})
	})
	t.Run("min:1710", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 8388608}, {wa.F32, 8388608}}, arg{wa.F32, 8388608})
	})
	t.Run("min:1711", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2155872256}, {wa.F32, 3204448256}}, arg{wa.F32, 3204448256})
	})
	t.Run("min:1712", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2155872256}, {wa.F32, 1056964608}}, arg{wa.F32, 2155872256})
	})
	t.Run("min:1713", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 8388608}, {wa.F32, 3204448256}}, arg{wa.F32, 3204448256})
	})
	t.Run("min:1714", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 8388608}, {wa.F32, 1056964608}}, arg{wa.F32, 8388608})
	})
	t.Run("min:1715", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2155872256}, {wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("min:1716", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2155872256}, {wa.F32, 1065353216}}, arg{wa.F32, 2155872256})
	})
	t.Run("min:1717", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 8388608}, {wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("min:1718", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 8388608}, {wa.F32, 1065353216}}, arg{wa.F32, 8388608})
	})
	t.Run("min:1719", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2155872256}, {wa.F32, 3234402267}}, arg{wa.F32, 3234402267})
	})
	t.Run("min:1720", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2155872256}, {wa.F32, 1086918619}}, arg{wa.F32, 2155872256})
	})
	t.Run("min:1721", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 8388608}, {wa.F32, 3234402267}}, arg{wa.F32, 3234402267})
	})
	t.Run("min:1722", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 8388608}, {wa.F32, 1086918619}}, arg{wa.F32, 8388608})
	})
	t.Run("min:1723", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2155872256}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1724", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2155872256}, {wa.F32, 2139095039}}, arg{wa.F32, 2155872256})
	})
	t.Run("min:1725", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 8388608}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1726", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 8388608}, {wa.F32, 2139095039}}, arg{wa.F32, 8388608})
	})
	t.Run("min:1727", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2155872256}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1728", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2155872256}, {wa.F32, 2139095040}}, arg{wa.F32, 2155872256})
	})
	t.Run("min:1729", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 8388608}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1730", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 8388608}, {wa.F32, 2139095040}}, arg{wa.F32, 8388608})
	})
	t.Run("min:1731", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2155872256}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1732", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2155872256}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1733", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2155872256}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1734", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2155872256}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1735", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 8388608}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1736", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 8388608}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1737", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 8388608}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1738", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 8388608}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1739", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3204448256}, {wa.F32, 2147483648}}, arg{wa.F32, 3204448256})
	})
	t.Run("min:1740", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3204448256}, {wa.F32, 0}}, arg{wa.F32, 3204448256})
	})
	t.Run("min:1741", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1056964608}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("min:1742", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1056964608}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("min:1743", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3204448256}, {wa.F32, 2147483649}}, arg{wa.F32, 3204448256})
	})
	t.Run("min:1744", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3204448256}, {wa.F32, 1}}, arg{wa.F32, 3204448256})
	})
	t.Run("min:1745", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1056964608}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483649})
	})
	t.Run("min:1746", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1056964608}, {wa.F32, 1}}, arg{wa.F32, 1})
	})
	t.Run("min:1747", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3204448256}, {wa.F32, 2155872256}}, arg{wa.F32, 3204448256})
	})
	t.Run("min:1748", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3204448256}, {wa.F32, 8388608}}, arg{wa.F32, 3204448256})
	})
	t.Run("min:1749", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1056964608}, {wa.F32, 2155872256}}, arg{wa.F32, 2155872256})
	})
	t.Run("min:1750", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1056964608}, {wa.F32, 8388608}}, arg{wa.F32, 8388608})
	})
	t.Run("min:1751", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3204448256}, {wa.F32, 3204448256}}, arg{wa.F32, 3204448256})
	})
	t.Run("min:1752", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3204448256}, {wa.F32, 1056964608}}, arg{wa.F32, 3204448256})
	})
	t.Run("min:1753", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1056964608}, {wa.F32, 3204448256}}, arg{wa.F32, 3204448256})
	})
	t.Run("min:1754", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1056964608}, {wa.F32, 1056964608}}, arg{wa.F32, 1056964608})
	})
	t.Run("min:1755", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3204448256}, {wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("min:1756", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3204448256}, {wa.F32, 1065353216}}, arg{wa.F32, 3204448256})
	})
	t.Run("min:1757", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1056964608}, {wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("min:1758", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1056964608}, {wa.F32, 1065353216}}, arg{wa.F32, 1056964608})
	})
	t.Run("min:1759", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3204448256}, {wa.F32, 3234402267}}, arg{wa.F32, 3234402267})
	})
	t.Run("min:1760", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3204448256}, {wa.F32, 1086918619}}, arg{wa.F32, 3204448256})
	})
	t.Run("min:1761", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1056964608}, {wa.F32, 3234402267}}, arg{wa.F32, 3234402267})
	})
	t.Run("min:1762", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1056964608}, {wa.F32, 1086918619}}, arg{wa.F32, 1056964608})
	})
	t.Run("min:1763", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3204448256}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1764", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3204448256}, {wa.F32, 2139095039}}, arg{wa.F32, 3204448256})
	})
	t.Run("min:1765", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1056964608}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1766", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1056964608}, {wa.F32, 2139095039}}, arg{wa.F32, 1056964608})
	})
	t.Run("min:1767", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3204448256}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1768", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3204448256}, {wa.F32, 2139095040}}, arg{wa.F32, 3204448256})
	})
	t.Run("min:1769", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1056964608}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1770", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1056964608}, {wa.F32, 2139095040}}, arg{wa.F32, 1056964608})
	})
	t.Run("min:1771", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3204448256}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1772", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3204448256}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1773", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3204448256}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1774", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3204448256}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1775", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1056964608}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1776", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1056964608}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1777", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1056964608}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1778", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1056964608}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1779", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3212836864}, {wa.F32, 2147483648}}, arg{wa.F32, 3212836864})
	})
	t.Run("min:1780", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3212836864}, {wa.F32, 0}}, arg{wa.F32, 3212836864})
	})
	t.Run("min:1781", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1065353216}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("min:1782", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1065353216}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("min:1783", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3212836864}, {wa.F32, 2147483649}}, arg{wa.F32, 3212836864})
	})
	t.Run("min:1784", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3212836864}, {wa.F32, 1}}, arg{wa.F32, 3212836864})
	})
	t.Run("min:1785", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1065353216}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483649})
	})
	t.Run("min:1786", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1065353216}, {wa.F32, 1}}, arg{wa.F32, 1})
	})
	t.Run("min:1787", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3212836864}, {wa.F32, 2155872256}}, arg{wa.F32, 3212836864})
	})
	t.Run("min:1788", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3212836864}, {wa.F32, 8388608}}, arg{wa.F32, 3212836864})
	})
	t.Run("min:1789", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1065353216}, {wa.F32, 2155872256}}, arg{wa.F32, 2155872256})
	})
	t.Run("min:1790", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1065353216}, {wa.F32, 8388608}}, arg{wa.F32, 8388608})
	})
	t.Run("min:1791", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3212836864}, {wa.F32, 3204448256}}, arg{wa.F32, 3212836864})
	})
	t.Run("min:1792", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3212836864}, {wa.F32, 1056964608}}, arg{wa.F32, 3212836864})
	})
	t.Run("min:1793", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1065353216}, {wa.F32, 3204448256}}, arg{wa.F32, 3204448256})
	})
	t.Run("min:1794", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1065353216}, {wa.F32, 1056964608}}, arg{wa.F32, 1056964608})
	})
	t.Run("min:1795", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3212836864}, {wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("min:1796", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3212836864}, {wa.F32, 1065353216}}, arg{wa.F32, 3212836864})
	})
	t.Run("min:1797", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1065353216}, {wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("min:1798", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1065353216}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("min:1799", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3212836864}, {wa.F32, 3234402267}}, arg{wa.F32, 3234402267})
	})
	t.Run("min:1800", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3212836864}, {wa.F32, 1086918619}}, arg{wa.F32, 3212836864})
	})
	t.Run("min:1801", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1065353216}, {wa.F32, 3234402267}}, arg{wa.F32, 3234402267})
	})
	t.Run("min:1802", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1065353216}, {wa.F32, 1086918619}}, arg{wa.F32, 1065353216})
	})
	t.Run("min:1803", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3212836864}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1804", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3212836864}, {wa.F32, 2139095039}}, arg{wa.F32, 3212836864})
	})
	t.Run("min:1805", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1065353216}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1806", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1065353216}, {wa.F32, 2139095039}}, arg{wa.F32, 1065353216})
	})
	t.Run("min:1807", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3212836864}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1808", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3212836864}, {wa.F32, 2139095040}}, arg{wa.F32, 3212836864})
	})
	t.Run("min:1809", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1065353216}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1810", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1065353216}, {wa.F32, 2139095040}}, arg{wa.F32, 1065353216})
	})
	t.Run("min:1811", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3212836864}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1812", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3212836864}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1813", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3212836864}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1814", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3212836864}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1815", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1065353216}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1816", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1065353216}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1817", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1065353216}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1818", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1065353216}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1819", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3234402267}, {wa.F32, 2147483648}}, arg{wa.F32, 3234402267})
	})
	t.Run("min:1820", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3234402267}, {wa.F32, 0}}, arg{wa.F32, 3234402267})
	})
	t.Run("min:1821", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1086918619}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("min:1822", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1086918619}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("min:1823", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3234402267}, {wa.F32, 2147483649}}, arg{wa.F32, 3234402267})
	})
	t.Run("min:1824", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3234402267}, {wa.F32, 1}}, arg{wa.F32, 3234402267})
	})
	t.Run("min:1825", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1086918619}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483649})
	})
	t.Run("min:1826", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1086918619}, {wa.F32, 1}}, arg{wa.F32, 1})
	})
	t.Run("min:1827", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3234402267}, {wa.F32, 2155872256}}, arg{wa.F32, 3234402267})
	})
	t.Run("min:1828", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3234402267}, {wa.F32, 8388608}}, arg{wa.F32, 3234402267})
	})
	t.Run("min:1829", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1086918619}, {wa.F32, 2155872256}}, arg{wa.F32, 2155872256})
	})
	t.Run("min:1830", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1086918619}, {wa.F32, 8388608}}, arg{wa.F32, 8388608})
	})
	t.Run("min:1831", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3234402267}, {wa.F32, 3204448256}}, arg{wa.F32, 3234402267})
	})
	t.Run("min:1832", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3234402267}, {wa.F32, 1056964608}}, arg{wa.F32, 3234402267})
	})
	t.Run("min:1833", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1086918619}, {wa.F32, 3204448256}}, arg{wa.F32, 3204448256})
	})
	t.Run("min:1834", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1086918619}, {wa.F32, 1056964608}}, arg{wa.F32, 1056964608})
	})
	t.Run("min:1835", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3234402267}, {wa.F32, 3212836864}}, arg{wa.F32, 3234402267})
	})
	t.Run("min:1836", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3234402267}, {wa.F32, 1065353216}}, arg{wa.F32, 3234402267})
	})
	t.Run("min:1837", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1086918619}, {wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("min:1838", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1086918619}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("min:1839", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3234402267}, {wa.F32, 3234402267}}, arg{wa.F32, 3234402267})
	})
	t.Run("min:1840", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3234402267}, {wa.F32, 1086918619}}, arg{wa.F32, 3234402267})
	})
	t.Run("min:1841", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1086918619}, {wa.F32, 3234402267}}, arg{wa.F32, 3234402267})
	})
	t.Run("min:1842", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1086918619}, {wa.F32, 1086918619}}, arg{wa.F32, 1086918619})
	})
	t.Run("min:1843", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3234402267}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1844", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3234402267}, {wa.F32, 2139095039}}, arg{wa.F32, 3234402267})
	})
	t.Run("min:1845", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1086918619}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1846", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1086918619}, {wa.F32, 2139095039}}, arg{wa.F32, 1086918619})
	})
	t.Run("min:1847", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3234402267}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1848", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3234402267}, {wa.F32, 2139095040}}, arg{wa.F32, 3234402267})
	})
	t.Run("min:1849", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1086918619}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1850", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1086918619}, {wa.F32, 2139095040}}, arg{wa.F32, 1086918619})
	})
	t.Run("min:1851", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3234402267}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1852", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3234402267}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1853", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3234402267}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1854", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 3234402267}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1855", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1086918619}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1856", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1086918619}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1857", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1086918619}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1858", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 1086918619}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1859", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578687}, {wa.F32, 2147483648}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1860", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578687}, {wa.F32, 0}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1861", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095039}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("min:1862", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095039}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("min:1863", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578687}, {wa.F32, 2147483649}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1864", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578687}, {wa.F32, 1}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1865", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095039}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483649})
	})
	t.Run("min:1866", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095039}, {wa.F32, 1}}, arg{wa.F32, 1})
	})
	t.Run("min:1867", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578687}, {wa.F32, 2155872256}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1868", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578687}, {wa.F32, 8388608}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1869", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095039}, {wa.F32, 2155872256}}, arg{wa.F32, 2155872256})
	})
	t.Run("min:1870", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095039}, {wa.F32, 8388608}}, arg{wa.F32, 8388608})
	})
	t.Run("min:1871", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578687}, {wa.F32, 3204448256}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1872", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578687}, {wa.F32, 1056964608}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1873", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095039}, {wa.F32, 3204448256}}, arg{wa.F32, 3204448256})
	})
	t.Run("min:1874", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095039}, {wa.F32, 1056964608}}, arg{wa.F32, 1056964608})
	})
	t.Run("min:1875", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578687}, {wa.F32, 3212836864}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1876", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578687}, {wa.F32, 1065353216}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1877", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095039}, {wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("min:1878", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095039}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("min:1879", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578687}, {wa.F32, 3234402267}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1880", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578687}, {wa.F32, 1086918619}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1881", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095039}, {wa.F32, 3234402267}}, arg{wa.F32, 3234402267})
	})
	t.Run("min:1882", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095039}, {wa.F32, 1086918619}}, arg{wa.F32, 1086918619})
	})
	t.Run("min:1883", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578687}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1884", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578687}, {wa.F32, 2139095039}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1885", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095039}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1886", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095039}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("min:1887", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578687}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1888", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578687}, {wa.F32, 2139095040}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1889", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095039}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1890", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095039}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095039})
	})
	t.Run("min:1891", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578687}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1892", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578687}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1893", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578687}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1894", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578687}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1895", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095039}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1896", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095039}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1897", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095039}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1898", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095039}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1899", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578688}, {wa.F32, 2147483648}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1900", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578688}, {wa.F32, 0}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1901", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095040}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("min:1902", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095040}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("min:1903", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578688}, {wa.F32, 2147483649}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1904", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578688}, {wa.F32, 1}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1905", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095040}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483649})
	})
	t.Run("min:1906", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095040}, {wa.F32, 1}}, arg{wa.F32, 1})
	})
	t.Run("min:1907", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578688}, {wa.F32, 2155872256}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1908", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578688}, {wa.F32, 8388608}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1909", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095040}, {wa.F32, 2155872256}}, arg{wa.F32, 2155872256})
	})
	t.Run("min:1910", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095040}, {wa.F32, 8388608}}, arg{wa.F32, 8388608})
	})
	t.Run("min:1911", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578688}, {wa.F32, 3204448256}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1912", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578688}, {wa.F32, 1056964608}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1913", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095040}, {wa.F32, 3204448256}}, arg{wa.F32, 3204448256})
	})
	t.Run("min:1914", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095040}, {wa.F32, 1056964608}}, arg{wa.F32, 1056964608})
	})
	t.Run("min:1915", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578688}, {wa.F32, 3212836864}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1916", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578688}, {wa.F32, 1065353216}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1917", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095040}, {wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("min:1918", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095040}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("min:1919", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578688}, {wa.F32, 3234402267}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1920", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578688}, {wa.F32, 1086918619}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1921", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095040}, {wa.F32, 3234402267}}, arg{wa.F32, 3234402267})
	})
	t.Run("min:1922", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095040}, {wa.F32, 1086918619}}, arg{wa.F32, 1086918619})
	})
	t.Run("min:1923", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578688}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1924", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578688}, {wa.F32, 2139095039}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1925", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095040}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("min:1926", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095040}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("min:1927", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578688}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1928", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578688}, {wa.F32, 2139095040}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1929", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095040}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("min:1930", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095040}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("min:1931", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578688}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1932", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578688}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1933", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578688}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1934", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4286578688}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1935", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095040}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1936", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095040}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1937", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095040}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1938", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2139095040}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1939", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4290772992}, {wa.F32, 2147483648}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1940", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4288675840}, {wa.F32, 2147483648}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1941", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4290772992}, {wa.F32, 0}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1942", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4288675840}, {wa.F32, 0}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1943", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2143289344}, {wa.F32, 2147483648}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1944", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2141192192}, {wa.F32, 2147483648}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1945", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2143289344}, {wa.F32, 0}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1946", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2141192192}, {wa.F32, 0}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1947", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4290772992}, {wa.F32, 2147483649}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1948", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4288675840}, {wa.F32, 2147483649}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1949", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4290772992}, {wa.F32, 1}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1950", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4288675840}, {wa.F32, 1}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1951", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2143289344}, {wa.F32, 2147483649}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1952", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2141192192}, {wa.F32, 2147483649}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1953", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2143289344}, {wa.F32, 1}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1954", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2141192192}, {wa.F32, 1}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1955", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4290772992}, {wa.F32, 2155872256}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1956", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4288675840}, {wa.F32, 2155872256}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1957", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4290772992}, {wa.F32, 8388608}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1958", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4288675840}, {wa.F32, 8388608}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1959", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2143289344}, {wa.F32, 2155872256}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1960", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2141192192}, {wa.F32, 2155872256}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1961", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2143289344}, {wa.F32, 8388608}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1962", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2141192192}, {wa.F32, 8388608}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1963", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4290772992}, {wa.F32, 3204448256}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1964", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4288675840}, {wa.F32, 3204448256}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1965", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4290772992}, {wa.F32, 1056964608}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1966", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4288675840}, {wa.F32, 1056964608}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1967", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2143289344}, {wa.F32, 3204448256}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1968", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2141192192}, {wa.F32, 3204448256}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1969", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2143289344}, {wa.F32, 1056964608}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1970", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2141192192}, {wa.F32, 1056964608}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1971", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4290772992}, {wa.F32, 3212836864}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1972", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4288675840}, {wa.F32, 3212836864}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1973", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4290772992}, {wa.F32, 1065353216}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1974", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4288675840}, {wa.F32, 1065353216}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1975", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2143289344}, {wa.F32, 3212836864}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1976", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2141192192}, {wa.F32, 3212836864}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1977", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2143289344}, {wa.F32, 1065353216}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1978", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2141192192}, {wa.F32, 1065353216}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1979", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4290772992}, {wa.F32, 3234402267}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1980", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4288675840}, {wa.F32, 3234402267}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1981", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4290772992}, {wa.F32, 1086918619}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1982", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4288675840}, {wa.F32, 1086918619}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1983", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2143289344}, {wa.F32, 3234402267}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1984", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2141192192}, {wa.F32, 3234402267}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1985", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2143289344}, {wa.F32, 1086918619}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1986", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2141192192}, {wa.F32, 1086918619}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1987", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4290772992}, {wa.F32, 4286578687}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1988", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4288675840}, {wa.F32, 4286578687}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1989", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4290772992}, {wa.F32, 2139095039}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1990", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4288675840}, {wa.F32, 2139095039}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1991", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2143289344}, {wa.F32, 4286578687}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1992", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2141192192}, {wa.F32, 4286578687}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1993", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2143289344}, {wa.F32, 2139095039}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1994", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2141192192}, {wa.F32, 2139095039}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1995", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4290772992}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1996", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4288675840}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1997", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4290772992}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:1998", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4288675840}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:1999", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2143289344}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:2000", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2141192192}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:2001", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2143289344}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:2002", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2141192192}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:2003", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4290772992}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:2004", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4288675840}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:2005", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4290772992}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:2006", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4288675840}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:2007", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4290772992}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:2008", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4288675840}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:2009", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4290772992}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:2010", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 4288675840}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:2011", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2143289344}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:2012", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2141192192}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:2013", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2143289344}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:2014", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2141192192}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:2015", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2143289344}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("min:2016", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2141192192}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:2017", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2143289344}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("min:2018", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F32, 2141192192}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2019", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("max:2020", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483648}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("max:2021", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 0}, {wa.F32, 2147483648}}, arg{wa.F32, 0})
	})
	t.Run("max:2022", func(t *testing.T) { x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 0}, {wa.F32, 0}}, arg{wa.F32, 0}) })
	t.Run("max:2023", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483648})
	})
	t.Run("max:2024", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483648}, {wa.F32, 1}}, arg{wa.F32, 1})
	})
	t.Run("max:2025", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 0}, {wa.F32, 2147483649}}, arg{wa.F32, 0})
	})
	t.Run("max:2026", func(t *testing.T) { x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 0}, {wa.F32, 1}}, arg{wa.F32, 1}) })
	t.Run("max:2027", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483648}, {wa.F32, 2155872256}}, arg{wa.F32, 2147483648})
	})
	t.Run("max:2028", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483648}, {wa.F32, 8388608}}, arg{wa.F32, 8388608})
	})
	t.Run("max:2029", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 0}, {wa.F32, 2155872256}}, arg{wa.F32, 0})
	})
	t.Run("max:2030", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 0}, {wa.F32, 8388608}}, arg{wa.F32, 8388608})
	})
	t.Run("max:2031", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483648}, {wa.F32, 3204448256}}, arg{wa.F32, 2147483648})
	})
	t.Run("max:2032", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483648}, {wa.F32, 1056964608}}, arg{wa.F32, 1056964608})
	})
	t.Run("max:2033", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 0}, {wa.F32, 3204448256}}, arg{wa.F32, 0})
	})
	t.Run("max:2034", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 0}, {wa.F32, 1056964608}}, arg{wa.F32, 1056964608})
	})
	t.Run("max:2035", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483648}, {wa.F32, 3212836864}}, arg{wa.F32, 2147483648})
	})
	t.Run("max:2036", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483648}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("max:2037", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 0}, {wa.F32, 3212836864}}, arg{wa.F32, 0})
	})
	t.Run("max:2038", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 0}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("max:2039", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483648}, {wa.F32, 3234402267}}, arg{wa.F32, 2147483648})
	})
	t.Run("max:2040", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483648}, {wa.F32, 1086918619}}, arg{wa.F32, 1086918619})
	})
	t.Run("max:2041", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 0}, {wa.F32, 3234402267}}, arg{wa.F32, 0})
	})
	t.Run("max:2042", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 0}, {wa.F32, 1086918619}}, arg{wa.F32, 1086918619})
	})
	t.Run("max:2043", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483648}, {wa.F32, 4286578687}}, arg{wa.F32, 2147483648})
	})
	t.Run("max:2044", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483648}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2045", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 0}, {wa.F32, 4286578687}}, arg{wa.F32, 0})
	})
	t.Run("max:2046", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 0}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2047", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483648}, {wa.F32, 4286578688}}, arg{wa.F32, 2147483648})
	})
	t.Run("max:2048", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483648}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2049", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 0}, {wa.F32, 4286578688}}, arg{wa.F32, 0})
	})
	t.Run("max:2050", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 0}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2051", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483648}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2052", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483648}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2053", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483648}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2054", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483648}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2055", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 0}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2056", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 0}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2057", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 0}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2058", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 0}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2059", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483649}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("max:2060", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483649}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("max:2061", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1}, {wa.F32, 2147483648}}, arg{wa.F32, 1})
	})
	t.Run("max:2062", func(t *testing.T) { x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1}, {wa.F32, 0}}, arg{wa.F32, 1}) })
	t.Run("max:2063", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483649}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483649})
	})
	t.Run("max:2064", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483649}, {wa.F32, 1}}, arg{wa.F32, 1})
	})
	t.Run("max:2065", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1}, {wa.F32, 2147483649}}, arg{wa.F32, 1})
	})
	t.Run("max:2066", func(t *testing.T) { x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1}, {wa.F32, 1}}, arg{wa.F32, 1}) })
	t.Run("max:2067", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483649}, {wa.F32, 2155872256}}, arg{wa.F32, 2147483649})
	})
	t.Run("max:2068", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483649}, {wa.F32, 8388608}}, arg{wa.F32, 8388608})
	})
	t.Run("max:2069", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1}, {wa.F32, 2155872256}}, arg{wa.F32, 1})
	})
	t.Run("max:2070", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1}, {wa.F32, 8388608}}, arg{wa.F32, 8388608})
	})
	t.Run("max:2071", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483649}, {wa.F32, 3204448256}}, arg{wa.F32, 2147483649})
	})
	t.Run("max:2072", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483649}, {wa.F32, 1056964608}}, arg{wa.F32, 1056964608})
	})
	t.Run("max:2073", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1}, {wa.F32, 3204448256}}, arg{wa.F32, 1})
	})
	t.Run("max:2074", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1}, {wa.F32, 1056964608}}, arg{wa.F32, 1056964608})
	})
	t.Run("max:2075", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483649}, {wa.F32, 3212836864}}, arg{wa.F32, 2147483649})
	})
	t.Run("max:2076", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483649}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("max:2077", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1}, {wa.F32, 3212836864}}, arg{wa.F32, 1})
	})
	t.Run("max:2078", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("max:2079", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483649}, {wa.F32, 3234402267}}, arg{wa.F32, 2147483649})
	})
	t.Run("max:2080", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483649}, {wa.F32, 1086918619}}, arg{wa.F32, 1086918619})
	})
	t.Run("max:2081", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1}, {wa.F32, 3234402267}}, arg{wa.F32, 1})
	})
	t.Run("max:2082", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1}, {wa.F32, 1086918619}}, arg{wa.F32, 1086918619})
	})
	t.Run("max:2083", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483649}, {wa.F32, 4286578687}}, arg{wa.F32, 2147483649})
	})
	t.Run("max:2084", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483649}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2085", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1}, {wa.F32, 4286578687}}, arg{wa.F32, 1})
	})
	t.Run("max:2086", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2087", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483649}, {wa.F32, 4286578688}}, arg{wa.F32, 2147483649})
	})
	t.Run("max:2088", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483649}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2089", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1}, {wa.F32, 4286578688}}, arg{wa.F32, 1})
	})
	t.Run("max:2090", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2091", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483649}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2092", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483649}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2093", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483649}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2094", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2147483649}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2095", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2096", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2097", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2098", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2099", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2155872256}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("max:2100", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2155872256}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("max:2101", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 8388608}, {wa.F32, 2147483648}}, arg{wa.F32, 8388608})
	})
	t.Run("max:2102", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 8388608}, {wa.F32, 0}}, arg{wa.F32, 8388608})
	})
	t.Run("max:2103", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2155872256}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483649})
	})
	t.Run("max:2104", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2155872256}, {wa.F32, 1}}, arg{wa.F32, 1})
	})
	t.Run("max:2105", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 8388608}, {wa.F32, 2147483649}}, arg{wa.F32, 8388608})
	})
	t.Run("max:2106", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 8388608}, {wa.F32, 1}}, arg{wa.F32, 8388608})
	})
	t.Run("max:2107", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2155872256}, {wa.F32, 2155872256}}, arg{wa.F32, 2155872256})
	})
	t.Run("max:2108", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2155872256}, {wa.F32, 8388608}}, arg{wa.F32, 8388608})
	})
	t.Run("max:2109", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 8388608}, {wa.F32, 2155872256}}, arg{wa.F32, 8388608})
	})
	t.Run("max:2110", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 8388608}, {wa.F32, 8388608}}, arg{wa.F32, 8388608})
	})
	t.Run("max:2111", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2155872256}, {wa.F32, 3204448256}}, arg{wa.F32, 2155872256})
	})
	t.Run("max:2112", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2155872256}, {wa.F32, 1056964608}}, arg{wa.F32, 1056964608})
	})
	t.Run("max:2113", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 8388608}, {wa.F32, 3204448256}}, arg{wa.F32, 8388608})
	})
	t.Run("max:2114", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 8388608}, {wa.F32, 1056964608}}, arg{wa.F32, 1056964608})
	})
	t.Run("max:2115", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2155872256}, {wa.F32, 3212836864}}, arg{wa.F32, 2155872256})
	})
	t.Run("max:2116", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2155872256}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("max:2117", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 8388608}, {wa.F32, 3212836864}}, arg{wa.F32, 8388608})
	})
	t.Run("max:2118", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 8388608}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("max:2119", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2155872256}, {wa.F32, 3234402267}}, arg{wa.F32, 2155872256})
	})
	t.Run("max:2120", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2155872256}, {wa.F32, 1086918619}}, arg{wa.F32, 1086918619})
	})
	t.Run("max:2121", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 8388608}, {wa.F32, 3234402267}}, arg{wa.F32, 8388608})
	})
	t.Run("max:2122", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 8388608}, {wa.F32, 1086918619}}, arg{wa.F32, 1086918619})
	})
	t.Run("max:2123", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2155872256}, {wa.F32, 4286578687}}, arg{wa.F32, 2155872256})
	})
	t.Run("max:2124", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2155872256}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2125", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 8388608}, {wa.F32, 4286578687}}, arg{wa.F32, 8388608})
	})
	t.Run("max:2126", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 8388608}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2127", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2155872256}, {wa.F32, 4286578688}}, arg{wa.F32, 2155872256})
	})
	t.Run("max:2128", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2155872256}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2129", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 8388608}, {wa.F32, 4286578688}}, arg{wa.F32, 8388608})
	})
	t.Run("max:2130", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 8388608}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2131", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2155872256}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2132", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2155872256}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2133", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2155872256}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2134", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2155872256}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2135", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 8388608}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2136", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 8388608}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2137", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 8388608}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2138", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 8388608}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2139", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3204448256}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("max:2140", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3204448256}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("max:2141", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1056964608}, {wa.F32, 2147483648}}, arg{wa.F32, 1056964608})
	})
	t.Run("max:2142", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1056964608}, {wa.F32, 0}}, arg{wa.F32, 1056964608})
	})
	t.Run("max:2143", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3204448256}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483649})
	})
	t.Run("max:2144", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3204448256}, {wa.F32, 1}}, arg{wa.F32, 1})
	})
	t.Run("max:2145", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1056964608}, {wa.F32, 2147483649}}, arg{wa.F32, 1056964608})
	})
	t.Run("max:2146", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1056964608}, {wa.F32, 1}}, arg{wa.F32, 1056964608})
	})
	t.Run("max:2147", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3204448256}, {wa.F32, 2155872256}}, arg{wa.F32, 2155872256})
	})
	t.Run("max:2148", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3204448256}, {wa.F32, 8388608}}, arg{wa.F32, 8388608})
	})
	t.Run("max:2149", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1056964608}, {wa.F32, 2155872256}}, arg{wa.F32, 1056964608})
	})
	t.Run("max:2150", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1056964608}, {wa.F32, 8388608}}, arg{wa.F32, 1056964608})
	})
	t.Run("max:2151", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3204448256}, {wa.F32, 3204448256}}, arg{wa.F32, 3204448256})
	})
	t.Run("max:2152", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3204448256}, {wa.F32, 1056964608}}, arg{wa.F32, 1056964608})
	})
	t.Run("max:2153", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1056964608}, {wa.F32, 3204448256}}, arg{wa.F32, 1056964608})
	})
	t.Run("max:2154", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1056964608}, {wa.F32, 1056964608}}, arg{wa.F32, 1056964608})
	})
	t.Run("max:2155", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3204448256}, {wa.F32, 3212836864}}, arg{wa.F32, 3204448256})
	})
	t.Run("max:2156", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3204448256}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("max:2157", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1056964608}, {wa.F32, 3212836864}}, arg{wa.F32, 1056964608})
	})
	t.Run("max:2158", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1056964608}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("max:2159", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3204448256}, {wa.F32, 3234402267}}, arg{wa.F32, 3204448256})
	})
	t.Run("max:2160", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3204448256}, {wa.F32, 1086918619}}, arg{wa.F32, 1086918619})
	})
	t.Run("max:2161", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1056964608}, {wa.F32, 3234402267}}, arg{wa.F32, 1056964608})
	})
	t.Run("max:2162", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1056964608}, {wa.F32, 1086918619}}, arg{wa.F32, 1086918619})
	})
	t.Run("max:2163", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3204448256}, {wa.F32, 4286578687}}, arg{wa.F32, 3204448256})
	})
	t.Run("max:2164", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3204448256}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2165", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1056964608}, {wa.F32, 4286578687}}, arg{wa.F32, 1056964608})
	})
	t.Run("max:2166", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1056964608}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2167", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3204448256}, {wa.F32, 4286578688}}, arg{wa.F32, 3204448256})
	})
	t.Run("max:2168", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3204448256}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2169", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1056964608}, {wa.F32, 4286578688}}, arg{wa.F32, 1056964608})
	})
	t.Run("max:2170", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1056964608}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2171", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3204448256}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2172", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3204448256}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2173", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3204448256}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2174", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3204448256}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2175", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1056964608}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2176", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1056964608}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2177", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1056964608}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2178", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1056964608}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2179", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3212836864}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("max:2180", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3212836864}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("max:2181", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1065353216}, {wa.F32, 2147483648}}, arg{wa.F32, 1065353216})
	})
	t.Run("max:2182", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1065353216}, {wa.F32, 0}}, arg{wa.F32, 1065353216})
	})
	t.Run("max:2183", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3212836864}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483649})
	})
	t.Run("max:2184", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3212836864}, {wa.F32, 1}}, arg{wa.F32, 1})
	})
	t.Run("max:2185", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1065353216}, {wa.F32, 2147483649}}, arg{wa.F32, 1065353216})
	})
	t.Run("max:2186", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1065353216}, {wa.F32, 1}}, arg{wa.F32, 1065353216})
	})
	t.Run("max:2187", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3212836864}, {wa.F32, 2155872256}}, arg{wa.F32, 2155872256})
	})
	t.Run("max:2188", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3212836864}, {wa.F32, 8388608}}, arg{wa.F32, 8388608})
	})
	t.Run("max:2189", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1065353216}, {wa.F32, 2155872256}}, arg{wa.F32, 1065353216})
	})
	t.Run("max:2190", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1065353216}, {wa.F32, 8388608}}, arg{wa.F32, 1065353216})
	})
	t.Run("max:2191", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3212836864}, {wa.F32, 3204448256}}, arg{wa.F32, 3204448256})
	})
	t.Run("max:2192", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3212836864}, {wa.F32, 1056964608}}, arg{wa.F32, 1056964608})
	})
	t.Run("max:2193", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1065353216}, {wa.F32, 3204448256}}, arg{wa.F32, 1065353216})
	})
	t.Run("max:2194", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1065353216}, {wa.F32, 1056964608}}, arg{wa.F32, 1065353216})
	})
	t.Run("max:2195", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3212836864}, {wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("max:2196", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3212836864}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("max:2197", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1065353216}, {wa.F32, 3212836864}}, arg{wa.F32, 1065353216})
	})
	t.Run("max:2198", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1065353216}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("max:2199", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3212836864}, {wa.F32, 3234402267}}, arg{wa.F32, 3212836864})
	})
	t.Run("max:2200", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3212836864}, {wa.F32, 1086918619}}, arg{wa.F32, 1086918619})
	})
	t.Run("max:2201", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1065353216}, {wa.F32, 3234402267}}, arg{wa.F32, 1065353216})
	})
	t.Run("max:2202", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1065353216}, {wa.F32, 1086918619}}, arg{wa.F32, 1086918619})
	})
	t.Run("max:2203", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3212836864}, {wa.F32, 4286578687}}, arg{wa.F32, 3212836864})
	})
	t.Run("max:2204", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3212836864}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2205", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1065353216}, {wa.F32, 4286578687}}, arg{wa.F32, 1065353216})
	})
	t.Run("max:2206", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1065353216}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2207", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3212836864}, {wa.F32, 4286578688}}, arg{wa.F32, 3212836864})
	})
	t.Run("max:2208", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3212836864}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2209", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1065353216}, {wa.F32, 4286578688}}, arg{wa.F32, 1065353216})
	})
	t.Run("max:2210", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1065353216}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2211", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3212836864}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2212", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3212836864}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2213", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3212836864}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2214", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3212836864}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2215", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1065353216}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2216", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1065353216}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2217", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1065353216}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2218", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1065353216}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2219", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3234402267}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("max:2220", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3234402267}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("max:2221", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1086918619}, {wa.F32, 2147483648}}, arg{wa.F32, 1086918619})
	})
	t.Run("max:2222", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1086918619}, {wa.F32, 0}}, arg{wa.F32, 1086918619})
	})
	t.Run("max:2223", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3234402267}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483649})
	})
	t.Run("max:2224", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3234402267}, {wa.F32, 1}}, arg{wa.F32, 1})
	})
	t.Run("max:2225", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1086918619}, {wa.F32, 2147483649}}, arg{wa.F32, 1086918619})
	})
	t.Run("max:2226", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1086918619}, {wa.F32, 1}}, arg{wa.F32, 1086918619})
	})
	t.Run("max:2227", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3234402267}, {wa.F32, 2155872256}}, arg{wa.F32, 2155872256})
	})
	t.Run("max:2228", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3234402267}, {wa.F32, 8388608}}, arg{wa.F32, 8388608})
	})
	t.Run("max:2229", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1086918619}, {wa.F32, 2155872256}}, arg{wa.F32, 1086918619})
	})
	t.Run("max:2230", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1086918619}, {wa.F32, 8388608}}, arg{wa.F32, 1086918619})
	})
	t.Run("max:2231", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3234402267}, {wa.F32, 3204448256}}, arg{wa.F32, 3204448256})
	})
	t.Run("max:2232", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3234402267}, {wa.F32, 1056964608}}, arg{wa.F32, 1056964608})
	})
	t.Run("max:2233", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1086918619}, {wa.F32, 3204448256}}, arg{wa.F32, 1086918619})
	})
	t.Run("max:2234", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1086918619}, {wa.F32, 1056964608}}, arg{wa.F32, 1086918619})
	})
	t.Run("max:2235", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3234402267}, {wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("max:2236", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3234402267}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("max:2237", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1086918619}, {wa.F32, 3212836864}}, arg{wa.F32, 1086918619})
	})
	t.Run("max:2238", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1086918619}, {wa.F32, 1065353216}}, arg{wa.F32, 1086918619})
	})
	t.Run("max:2239", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3234402267}, {wa.F32, 3234402267}}, arg{wa.F32, 3234402267})
	})
	t.Run("max:2240", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3234402267}, {wa.F32, 1086918619}}, arg{wa.F32, 1086918619})
	})
	t.Run("max:2241", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1086918619}, {wa.F32, 3234402267}}, arg{wa.F32, 1086918619})
	})
	t.Run("max:2242", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1086918619}, {wa.F32, 1086918619}}, arg{wa.F32, 1086918619})
	})
	t.Run("max:2243", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3234402267}, {wa.F32, 4286578687}}, arg{wa.F32, 3234402267})
	})
	t.Run("max:2244", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3234402267}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2245", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1086918619}, {wa.F32, 4286578687}}, arg{wa.F32, 1086918619})
	})
	t.Run("max:2246", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1086918619}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2247", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3234402267}, {wa.F32, 4286578688}}, arg{wa.F32, 3234402267})
	})
	t.Run("max:2248", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3234402267}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2249", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1086918619}, {wa.F32, 4286578688}}, arg{wa.F32, 1086918619})
	})
	t.Run("max:2250", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1086918619}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2251", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3234402267}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2252", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3234402267}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2253", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3234402267}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2254", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 3234402267}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2255", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1086918619}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2256", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1086918619}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2257", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1086918619}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2258", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 1086918619}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2259", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578687}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("max:2260", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578687}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("max:2261", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095039}, {wa.F32, 2147483648}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2262", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095039}, {wa.F32, 0}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2263", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578687}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483649})
	})
	t.Run("max:2264", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578687}, {wa.F32, 1}}, arg{wa.F32, 1})
	})
	t.Run("max:2265", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095039}, {wa.F32, 2147483649}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2266", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095039}, {wa.F32, 1}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2267", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578687}, {wa.F32, 2155872256}}, arg{wa.F32, 2155872256})
	})
	t.Run("max:2268", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578687}, {wa.F32, 8388608}}, arg{wa.F32, 8388608})
	})
	t.Run("max:2269", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095039}, {wa.F32, 2155872256}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2270", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095039}, {wa.F32, 8388608}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2271", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578687}, {wa.F32, 3204448256}}, arg{wa.F32, 3204448256})
	})
	t.Run("max:2272", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578687}, {wa.F32, 1056964608}}, arg{wa.F32, 1056964608})
	})
	t.Run("max:2273", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095039}, {wa.F32, 3204448256}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2274", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095039}, {wa.F32, 1056964608}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2275", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578687}, {wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("max:2276", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578687}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("max:2277", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095039}, {wa.F32, 3212836864}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2278", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095039}, {wa.F32, 1065353216}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2279", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578687}, {wa.F32, 3234402267}}, arg{wa.F32, 3234402267})
	})
	t.Run("max:2280", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578687}, {wa.F32, 1086918619}}, arg{wa.F32, 1086918619})
	})
	t.Run("max:2281", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095039}, {wa.F32, 3234402267}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2282", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095039}, {wa.F32, 1086918619}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2283", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578687}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("max:2284", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578687}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2285", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095039}, {wa.F32, 4286578687}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2286", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095039}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2287", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578687}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578687})
	})
	t.Run("max:2288", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578687}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2289", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095039}, {wa.F32, 4286578688}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2290", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095039}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2291", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578687}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2292", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578687}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2293", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578687}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2294", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578687}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2295", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095039}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2296", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095039}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2297", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095039}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2298", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095039}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2299", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578688}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("max:2300", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578688}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("max:2301", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095040}, {wa.F32, 2147483648}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2302", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095040}, {wa.F32, 0}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2303", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578688}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483649})
	})
	t.Run("max:2304", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578688}, {wa.F32, 1}}, arg{wa.F32, 1})
	})
	t.Run("max:2305", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095040}, {wa.F32, 2147483649}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2306", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095040}, {wa.F32, 1}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2307", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578688}, {wa.F32, 2155872256}}, arg{wa.F32, 2155872256})
	})
	t.Run("max:2308", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578688}, {wa.F32, 8388608}}, arg{wa.F32, 8388608})
	})
	t.Run("max:2309", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095040}, {wa.F32, 2155872256}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2310", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095040}, {wa.F32, 8388608}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2311", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578688}, {wa.F32, 3204448256}}, arg{wa.F32, 3204448256})
	})
	t.Run("max:2312", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578688}, {wa.F32, 1056964608}}, arg{wa.F32, 1056964608})
	})
	t.Run("max:2313", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095040}, {wa.F32, 3204448256}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2314", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095040}, {wa.F32, 1056964608}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2315", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578688}, {wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("max:2316", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578688}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("max:2317", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095040}, {wa.F32, 3212836864}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2318", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095040}, {wa.F32, 1065353216}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2319", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578688}, {wa.F32, 3234402267}}, arg{wa.F32, 3234402267})
	})
	t.Run("max:2320", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578688}, {wa.F32, 1086918619}}, arg{wa.F32, 1086918619})
	})
	t.Run("max:2321", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095040}, {wa.F32, 3234402267}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2322", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095040}, {wa.F32, 1086918619}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2323", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578688}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("max:2324", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578688}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("max:2325", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095040}, {wa.F32, 4286578687}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2326", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095040}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2327", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578688}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("max:2328", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578688}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2329", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095040}, {wa.F32, 4286578688}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2330", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095040}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("max:2331", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578688}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2332", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578688}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2333", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578688}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2334", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4286578688}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2335", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095040}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2336", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095040}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2337", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095040}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2338", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2139095040}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2339", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4290772992}, {wa.F32, 2147483648}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2340", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4288675840}, {wa.F32, 2147483648}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2341", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4290772992}, {wa.F32, 0}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2342", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4288675840}, {wa.F32, 0}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2343", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2143289344}, {wa.F32, 2147483648}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2344", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2141192192}, {wa.F32, 2147483648}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2345", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2143289344}, {wa.F32, 0}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2346", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2141192192}, {wa.F32, 0}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2347", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4290772992}, {wa.F32, 2147483649}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2348", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4288675840}, {wa.F32, 2147483649}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2349", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4290772992}, {wa.F32, 1}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2350", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4288675840}, {wa.F32, 1}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2351", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2143289344}, {wa.F32, 2147483649}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2352", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2141192192}, {wa.F32, 2147483649}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2353", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2143289344}, {wa.F32, 1}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2354", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2141192192}, {wa.F32, 1}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2355", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4290772992}, {wa.F32, 2155872256}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2356", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4288675840}, {wa.F32, 2155872256}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2357", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4290772992}, {wa.F32, 8388608}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2358", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4288675840}, {wa.F32, 8388608}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2359", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2143289344}, {wa.F32, 2155872256}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2360", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2141192192}, {wa.F32, 2155872256}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2361", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2143289344}, {wa.F32, 8388608}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2362", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2141192192}, {wa.F32, 8388608}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2363", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4290772992}, {wa.F32, 3204448256}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2364", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4288675840}, {wa.F32, 3204448256}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2365", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4290772992}, {wa.F32, 1056964608}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2366", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4288675840}, {wa.F32, 1056964608}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2367", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2143289344}, {wa.F32, 3204448256}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2368", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2141192192}, {wa.F32, 3204448256}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2369", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2143289344}, {wa.F32, 1056964608}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2370", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2141192192}, {wa.F32, 1056964608}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2371", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4290772992}, {wa.F32, 3212836864}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2372", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4288675840}, {wa.F32, 3212836864}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2373", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4290772992}, {wa.F32, 1065353216}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2374", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4288675840}, {wa.F32, 1065353216}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2375", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2143289344}, {wa.F32, 3212836864}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2376", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2141192192}, {wa.F32, 3212836864}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2377", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2143289344}, {wa.F32, 1065353216}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2378", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2141192192}, {wa.F32, 1065353216}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2379", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4290772992}, {wa.F32, 3234402267}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2380", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4288675840}, {wa.F32, 3234402267}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2381", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4290772992}, {wa.F32, 1086918619}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2382", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4288675840}, {wa.F32, 1086918619}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2383", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2143289344}, {wa.F32, 3234402267}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2384", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2141192192}, {wa.F32, 3234402267}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2385", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2143289344}, {wa.F32, 1086918619}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2386", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2141192192}, {wa.F32, 1086918619}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2387", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4290772992}, {wa.F32, 4286578687}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2388", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4288675840}, {wa.F32, 4286578687}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2389", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4290772992}, {wa.F32, 2139095039}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2390", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4288675840}, {wa.F32, 2139095039}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2391", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2143289344}, {wa.F32, 4286578687}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2392", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2141192192}, {wa.F32, 4286578687}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2393", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2143289344}, {wa.F32, 2139095039}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2394", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2141192192}, {wa.F32, 2139095039}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2395", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4290772992}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2396", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4288675840}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2397", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4290772992}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2398", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4288675840}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2399", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2143289344}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2400", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2141192192}, {wa.F32, 4286578688}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2401", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2143289344}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2402", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2141192192}, {wa.F32, 2139095040}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2403", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4290772992}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2404", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4288675840}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2405", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4290772992}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2406", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4288675840}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2407", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4290772992}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2408", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4288675840}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2409", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4290772992}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2410", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 4288675840}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2411", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2143289344}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2412", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2141192192}, {wa.F32, 4290772992}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2413", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2143289344}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2414", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2141192192}, {wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2415", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2143289344}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("max:2416", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2141192192}, {wa.F32, 2143289344}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2417", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2143289344}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("max:2418", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F32, 2141192192}, {wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sqrt:2419", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("sqrt:2420", func(t *testing.T) { x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F32, 0}}, arg{wa.F32, 0}) })
	t.Run("sqrt:2421", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F32, 2147483649}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sqrt:2422", func(t *testing.T) { x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F32, 1}}, arg{wa.F32, 439682291}) })
	t.Run("sqrt:2423", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F32, 2155872256}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sqrt:2424", func(t *testing.T) { x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F32, 8388608}}, arg{wa.F32, 536870912}) })
	t.Run("sqrt:2425", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F32, 3204448256}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sqrt:2426", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F32, 1056964608}}, arg{wa.F32, 1060439283})
	})
	t.Run("sqrt:2427", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F32, 3212836864}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sqrt:2428", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("sqrt:2429", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F32, 3234402267}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sqrt:2430", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F32, 1086918619}}, arg{wa.F32, 1075866777})
	})
	t.Run("sqrt:2431", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F32, 4286578687}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sqrt:2432", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F32, 2139095039}}, arg{wa.F32, 1602224127})
	})
	t.Run("sqrt:2433", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F32, 4286578688}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sqrt:2434", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("sqrt:2435", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sqrt:2436", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("sqrt:2437", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("sqrt:2438", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("floor:2439", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("floor:2440", func(t *testing.T) { x0.assertReturnInvoke(t, "floor", []arg{{wa.F32, 0}}, arg{wa.F32, 0}) })
	t.Run("floor:2441", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F32, 2147483649}}, arg{wa.F32, 3212836864})
	})
	t.Run("floor:2442", func(t *testing.T) { x0.assertReturnInvoke(t, "floor", []arg{{wa.F32, 1}}, arg{wa.F32, 0}) })
	t.Run("floor:2443", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F32, 2155872256}}, arg{wa.F32, 3212836864})
	})
	t.Run("floor:2444", func(t *testing.T) { x0.assertReturnInvoke(t, "floor", []arg{{wa.F32, 8388608}}, arg{wa.F32, 0}) })
	t.Run("floor:2445", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F32, 3204448256}}, arg{wa.F32, 3212836864})
	})
	t.Run("floor:2446", func(t *testing.T) { x0.assertReturnInvoke(t, "floor", []arg{{wa.F32, 1056964608}}, arg{wa.F32, 0}) })
	t.Run("floor:2447", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("floor:2448", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("floor:2449", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F32, 3234402267}}, arg{wa.F32, 3235905536})
	})
	t.Run("floor:2450", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F32, 1086918619}}, arg{wa.F32, 1086324736})
	})
	t.Run("floor:2451", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("floor:2452", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("floor:2453", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("floor:2454", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("floor:2455", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("floor:2456", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("floor:2457", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("floor:2458", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("ceil:2459", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("ceil:2460", func(t *testing.T) { x0.assertReturnInvoke(t, "ceil", []arg{{wa.F32, 0}}, arg{wa.F32, 0}) })
	t.Run("ceil:2461", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F32, 2147483649}}, arg{wa.F32, 2147483648})
	})
	t.Run("ceil:2462", func(t *testing.T) { x0.assertReturnInvoke(t, "ceil", []arg{{wa.F32, 1}}, arg{wa.F32, 1065353216}) })
	t.Run("ceil:2463", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F32, 2155872256}}, arg{wa.F32, 2147483648})
	})
	t.Run("ceil:2464", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F32, 8388608}}, arg{wa.F32, 1065353216})
	})
	t.Run("ceil:2465", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F32, 3204448256}}, arg{wa.F32, 2147483648})
	})
	t.Run("ceil:2466", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F32, 1056964608}}, arg{wa.F32, 1065353216})
	})
	t.Run("ceil:2467", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("ceil:2468", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("ceil:2469", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F32, 3234402267}}, arg{wa.F32, 3233808384})
	})
	t.Run("ceil:2470", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F32, 1086918619}}, arg{wa.F32, 1088421888})
	})
	t.Run("ceil:2471", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("ceil:2472", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("ceil:2473", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("ceil:2474", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("ceil:2475", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("ceil:2476", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("ceil:2477", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("ceil:2478", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("trunc:2479", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("trunc:2480", func(t *testing.T) { x0.assertReturnInvoke(t, "trunc", []arg{{wa.F32, 0}}, arg{wa.F32, 0}) })
	t.Run("trunc:2481", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F32, 2147483649}}, arg{wa.F32, 2147483648})
	})
	t.Run("trunc:2482", func(t *testing.T) { x0.assertReturnInvoke(t, "trunc", []arg{{wa.F32, 1}}, arg{wa.F32, 0}) })
	t.Run("trunc:2483", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F32, 2155872256}}, arg{wa.F32, 2147483648})
	})
	t.Run("trunc:2484", func(t *testing.T) { x0.assertReturnInvoke(t, "trunc", []arg{{wa.F32, 8388608}}, arg{wa.F32, 0}) })
	t.Run("trunc:2485", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F32, 3204448256}}, arg{wa.F32, 2147483648})
	})
	t.Run("trunc:2486", func(t *testing.T) { x0.assertReturnInvoke(t, "trunc", []arg{{wa.F32, 1056964608}}, arg{wa.F32, 0}) })
	t.Run("trunc:2487", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("trunc:2488", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("trunc:2489", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F32, 3234402267}}, arg{wa.F32, 3233808384})
	})
	t.Run("trunc:2490", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F32, 1086918619}}, arg{wa.F32, 1086324736})
	})
	t.Run("trunc:2491", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("trunc:2492", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("trunc:2493", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("trunc:2494", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("trunc:2495", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("trunc:2496", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("trunc:2497", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("trunc:2498", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("nearest:2499", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("nearest:2500", func(t *testing.T) { x0.assertReturnInvoke(t, "nearest", []arg{{wa.F32, 0}}, arg{wa.F32, 0}) })
	t.Run("nearest:2501", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F32, 2147483649}}, arg{wa.F32, 2147483648})
	})
	t.Run("nearest:2502", func(t *testing.T) { x0.assertReturnInvoke(t, "nearest", []arg{{wa.F32, 1}}, arg{wa.F32, 0}) })
	t.Run("nearest:2503", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F32, 2155872256}}, arg{wa.F32, 2147483648})
	})
	t.Run("nearest:2504", func(t *testing.T) { x0.assertReturnInvoke(t, "nearest", []arg{{wa.F32, 8388608}}, arg{wa.F32, 0}) })
	t.Run("nearest:2505", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F32, 3204448256}}, arg{wa.F32, 2147483648})
	})
	t.Run("nearest:2506", func(t *testing.T) { x0.assertReturnInvoke(t, "nearest", []arg{{wa.F32, 1056964608}}, arg{wa.F32, 0}) })
	t.Run("nearest:2507", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("nearest:2508", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("nearest:2509", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F32, 3234402267}}, arg{wa.F32, 3233808384})
	})
	t.Run("nearest:2510", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F32, 1086918619}}, arg{wa.F32, 1086324736})
	})
	t.Run("nearest:2511", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("nearest:2512", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("nearest:2513", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("nearest:2514", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("nearest:2515", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F32, 4290772992}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("nearest:2516", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F32, 4288675840}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("nearest:2517", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("nearest:2518", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("assert_invalid:2523", func(t *testing.T) { assertInvalidSpec(t, "f32.1.wasm", "type mismatch") })
	t.Run("assert_invalid:2524", func(t *testing.T) { assertInvalidSpec(t, "f32.2.wasm", "type mismatch") })
	t.Run("assert_invalid:2525", func(t *testing.T) { assertInvalidSpec(t, "f32.3.wasm", "type mismatch") })
	t.Run("assert_invalid:2526", func(t *testing.T) { assertInvalidSpec(t, "f32.4.wasm", "type mismatch") })
	t.Run("assert_invalid:2527", func(t *testing.T) { assertInvalidSpec(t, "f32.5.wasm", "type mismatch") })
	t.Run("assert_invalid:2528", func(t *testing.T) { assertInvalidSpec(t, "f32.6.wasm", "type mismatch") })
	t.Run("assert_invalid:2529", func(t *testing.T) { assertInvalidSpec(t, "f32.7.wasm", "type mismatch") })
	t.Run("assert_invalid:2530", func(t *testing.T) { assertInvalidSpec(t, "f32.8.wasm", "type mismatch") })
	t.Run("assert_invalid:2531", func(t *testing.T) { assertInvalidSpec(t, "f32.9.wasm", "type mismatch") })
	t.Run("assert_invalid:2532", func(t *testing.T) { assertInvalidSpec(t, "f32.10.wasm", "type mismatch") })
	t.Run("assert_invalid:2533", func(t *testing.T) { assertInvalidSpec(t, "f32.11.wasm", "type mismatch") })
	t.Run("assert_malformed:2537", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:2541", func(t *testing.T) { t.Skip("text format not supported") })
}

func Test_f32_bitwise(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "f32_bitwise.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("copysign:10", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("copysign:11", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483648}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("copysign:12", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 0}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("copysign:13", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 0}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("copysign:14", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483648})
	})
	t.Run("copysign:15", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483648}, {wa.F32, 1}}, arg{wa.F32, 0})
	})
	t.Run("copysign:16", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 0}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483648})
	})
	t.Run("copysign:17", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 0}, {wa.F32, 1}}, arg{wa.F32, 0})
	})
	t.Run("copysign:18", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483648}, {wa.F32, 2155872256}}, arg{wa.F32, 2147483648})
	})
	t.Run("copysign:19", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483648}, {wa.F32, 8388608}}, arg{wa.F32, 0})
	})
	t.Run("copysign:20", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 0}, {wa.F32, 2155872256}}, arg{wa.F32, 2147483648})
	})
	t.Run("copysign:21", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 0}, {wa.F32, 8388608}}, arg{wa.F32, 0})
	})
	t.Run("copysign:22", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483648}, {wa.F32, 3204448256}}, arg{wa.F32, 2147483648})
	})
	t.Run("copysign:23", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483648}, {wa.F32, 1056964608}}, arg{wa.F32, 0})
	})
	t.Run("copysign:24", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 0}, {wa.F32, 3204448256}}, arg{wa.F32, 2147483648})
	})
	t.Run("copysign:25", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 0}, {wa.F32, 1056964608}}, arg{wa.F32, 0})
	})
	t.Run("copysign:26", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483648}, {wa.F32, 3212836864}}, arg{wa.F32, 2147483648})
	})
	t.Run("copysign:27", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483648}, {wa.F32, 1065353216}}, arg{wa.F32, 0})
	})
	t.Run("copysign:28", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 0}, {wa.F32, 3212836864}}, arg{wa.F32, 2147483648})
	})
	t.Run("copysign:29", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 0}, {wa.F32, 1065353216}}, arg{wa.F32, 0})
	})
	t.Run("copysign:30", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483648}, {wa.F32, 3234402267}}, arg{wa.F32, 2147483648})
	})
	t.Run("copysign:31", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483648}, {wa.F32, 1086918619}}, arg{wa.F32, 0})
	})
	t.Run("copysign:32", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 0}, {wa.F32, 3234402267}}, arg{wa.F32, 2147483648})
	})
	t.Run("copysign:33", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 0}, {wa.F32, 1086918619}}, arg{wa.F32, 0})
	})
	t.Run("copysign:34", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483648}, {wa.F32, 4286578687}}, arg{wa.F32, 2147483648})
	})
	t.Run("copysign:35", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483648}, {wa.F32, 2139095039}}, arg{wa.F32, 0})
	})
	t.Run("copysign:36", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 0}, {wa.F32, 4286578687}}, arg{wa.F32, 2147483648})
	})
	t.Run("copysign:37", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 0}, {wa.F32, 2139095039}}, arg{wa.F32, 0})
	})
	t.Run("copysign:38", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483648}, {wa.F32, 4286578688}}, arg{wa.F32, 2147483648})
	})
	t.Run("copysign:39", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483648}, {wa.F32, 2139095040}}, arg{wa.F32, 0})
	})
	t.Run("copysign:40", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 0}, {wa.F32, 4286578688}}, arg{wa.F32, 2147483648})
	})
	t.Run("copysign:41", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 0}, {wa.F32, 2139095040}}, arg{wa.F32, 0})
	})
	t.Run("copysign:42", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483648}, {wa.F32, 4290772992}}, arg{wa.F32, 2147483648})
	})
	t.Run("copysign:43", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483648}, {wa.F32, 2143289344}}, arg{wa.F32, 0})
	})
	t.Run("copysign:44", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 0}, {wa.F32, 4290772992}}, arg{wa.F32, 2147483648})
	})
	t.Run("copysign:45", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 0}, {wa.F32, 2143289344}}, arg{wa.F32, 0})
	})
	t.Run("copysign:46", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483649}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483649})
	})
	t.Run("copysign:47", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483649}, {wa.F32, 0}}, arg{wa.F32, 1})
	})
	t.Run("copysign:48", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483649})
	})
	t.Run("copysign:49", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1}, {wa.F32, 0}}, arg{wa.F32, 1})
	})
	t.Run("copysign:50", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483649}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483649})
	})
	t.Run("copysign:51", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483649}, {wa.F32, 1}}, arg{wa.F32, 1})
	})
	t.Run("copysign:52", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1}, {wa.F32, 2147483649}}, arg{wa.F32, 2147483649})
	})
	t.Run("copysign:53", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1}, {wa.F32, 1}}, arg{wa.F32, 1})
	})
	t.Run("copysign:54", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483649}, {wa.F32, 2155872256}}, arg{wa.F32, 2147483649})
	})
	t.Run("copysign:55", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483649}, {wa.F32, 8388608}}, arg{wa.F32, 1})
	})
	t.Run("copysign:56", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1}, {wa.F32, 2155872256}}, arg{wa.F32, 2147483649})
	})
	t.Run("copysign:57", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1}, {wa.F32, 8388608}}, arg{wa.F32, 1})
	})
	t.Run("copysign:58", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483649}, {wa.F32, 3204448256}}, arg{wa.F32, 2147483649})
	})
	t.Run("copysign:59", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483649}, {wa.F32, 1056964608}}, arg{wa.F32, 1})
	})
	t.Run("copysign:60", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1}, {wa.F32, 3204448256}}, arg{wa.F32, 2147483649})
	})
	t.Run("copysign:61", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1}, {wa.F32, 1056964608}}, arg{wa.F32, 1})
	})
	t.Run("copysign:62", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483649}, {wa.F32, 3212836864}}, arg{wa.F32, 2147483649})
	})
	t.Run("copysign:63", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483649}, {wa.F32, 1065353216}}, arg{wa.F32, 1})
	})
	t.Run("copysign:64", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1}, {wa.F32, 3212836864}}, arg{wa.F32, 2147483649})
	})
	t.Run("copysign:65", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1}, {wa.F32, 1065353216}}, arg{wa.F32, 1})
	})
	t.Run("copysign:66", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483649}, {wa.F32, 3234402267}}, arg{wa.F32, 2147483649})
	})
	t.Run("copysign:67", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483649}, {wa.F32, 1086918619}}, arg{wa.F32, 1})
	})
	t.Run("copysign:68", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1}, {wa.F32, 3234402267}}, arg{wa.F32, 2147483649})
	})
	t.Run("copysign:69", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1}, {wa.F32, 1086918619}}, arg{wa.F32, 1})
	})
	t.Run("copysign:70", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483649}, {wa.F32, 4286578687}}, arg{wa.F32, 2147483649})
	})
	t.Run("copysign:71", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483649}, {wa.F32, 2139095039}}, arg{wa.F32, 1})
	})
	t.Run("copysign:72", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1}, {wa.F32, 4286578687}}, arg{wa.F32, 2147483649})
	})
	t.Run("copysign:73", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1}, {wa.F32, 2139095039}}, arg{wa.F32, 1})
	})
	t.Run("copysign:74", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483649}, {wa.F32, 4286578688}}, arg{wa.F32, 2147483649})
	})
	t.Run("copysign:75", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483649}, {wa.F32, 2139095040}}, arg{wa.F32, 1})
	})
	t.Run("copysign:76", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1}, {wa.F32, 4286578688}}, arg{wa.F32, 2147483649})
	})
	t.Run("copysign:77", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1}, {wa.F32, 2139095040}}, arg{wa.F32, 1})
	})
	t.Run("copysign:78", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483649}, {wa.F32, 4290772992}}, arg{wa.F32, 2147483649})
	})
	t.Run("copysign:79", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2147483649}, {wa.F32, 2143289344}}, arg{wa.F32, 1})
	})
	t.Run("copysign:80", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1}, {wa.F32, 4290772992}}, arg{wa.F32, 2147483649})
	})
	t.Run("copysign:81", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1}, {wa.F32, 2143289344}}, arg{wa.F32, 1})
	})
	t.Run("copysign:82", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2155872256}, {wa.F32, 2147483648}}, arg{wa.F32, 2155872256})
	})
	t.Run("copysign:83", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2155872256}, {wa.F32, 0}}, arg{wa.F32, 8388608})
	})
	t.Run("copysign:84", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 8388608}, {wa.F32, 2147483648}}, arg{wa.F32, 2155872256})
	})
	t.Run("copysign:85", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 8388608}, {wa.F32, 0}}, arg{wa.F32, 8388608})
	})
	t.Run("copysign:86", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2155872256}, {wa.F32, 2147483649}}, arg{wa.F32, 2155872256})
	})
	t.Run("copysign:87", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2155872256}, {wa.F32, 1}}, arg{wa.F32, 8388608})
	})
	t.Run("copysign:88", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 8388608}, {wa.F32, 2147483649}}, arg{wa.F32, 2155872256})
	})
	t.Run("copysign:89", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 8388608}, {wa.F32, 1}}, arg{wa.F32, 8388608})
	})
	t.Run("copysign:90", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2155872256}, {wa.F32, 2155872256}}, arg{wa.F32, 2155872256})
	})
	t.Run("copysign:91", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2155872256}, {wa.F32, 8388608}}, arg{wa.F32, 8388608})
	})
	t.Run("copysign:92", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 8388608}, {wa.F32, 2155872256}}, arg{wa.F32, 2155872256})
	})
	t.Run("copysign:93", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 8388608}, {wa.F32, 8388608}}, arg{wa.F32, 8388608})
	})
	t.Run("copysign:94", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2155872256}, {wa.F32, 3204448256}}, arg{wa.F32, 2155872256})
	})
	t.Run("copysign:95", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2155872256}, {wa.F32, 1056964608}}, arg{wa.F32, 8388608})
	})
	t.Run("copysign:96", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 8388608}, {wa.F32, 3204448256}}, arg{wa.F32, 2155872256})
	})
	t.Run("copysign:97", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 8388608}, {wa.F32, 1056964608}}, arg{wa.F32, 8388608})
	})
	t.Run("copysign:98", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2155872256}, {wa.F32, 3212836864}}, arg{wa.F32, 2155872256})
	})
	t.Run("copysign:99", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2155872256}, {wa.F32, 1065353216}}, arg{wa.F32, 8388608})
	})
	t.Run("copysign:100", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 8388608}, {wa.F32, 3212836864}}, arg{wa.F32, 2155872256})
	})
	t.Run("copysign:101", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 8388608}, {wa.F32, 1065353216}}, arg{wa.F32, 8388608})
	})
	t.Run("copysign:102", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2155872256}, {wa.F32, 3234402267}}, arg{wa.F32, 2155872256})
	})
	t.Run("copysign:103", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2155872256}, {wa.F32, 1086918619}}, arg{wa.F32, 8388608})
	})
	t.Run("copysign:104", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 8388608}, {wa.F32, 3234402267}}, arg{wa.F32, 2155872256})
	})
	t.Run("copysign:105", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 8388608}, {wa.F32, 1086918619}}, arg{wa.F32, 8388608})
	})
	t.Run("copysign:106", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2155872256}, {wa.F32, 4286578687}}, arg{wa.F32, 2155872256})
	})
	t.Run("copysign:107", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2155872256}, {wa.F32, 2139095039}}, arg{wa.F32, 8388608})
	})
	t.Run("copysign:108", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 8388608}, {wa.F32, 4286578687}}, arg{wa.F32, 2155872256})
	})
	t.Run("copysign:109", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 8388608}, {wa.F32, 2139095039}}, arg{wa.F32, 8388608})
	})
	t.Run("copysign:110", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2155872256}, {wa.F32, 4286578688}}, arg{wa.F32, 2155872256})
	})
	t.Run("copysign:111", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2155872256}, {wa.F32, 2139095040}}, arg{wa.F32, 8388608})
	})
	t.Run("copysign:112", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 8388608}, {wa.F32, 4286578688}}, arg{wa.F32, 2155872256})
	})
	t.Run("copysign:113", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 8388608}, {wa.F32, 2139095040}}, arg{wa.F32, 8388608})
	})
	t.Run("copysign:114", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2155872256}, {wa.F32, 4290772992}}, arg{wa.F32, 2155872256})
	})
	t.Run("copysign:115", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2155872256}, {wa.F32, 2143289344}}, arg{wa.F32, 8388608})
	})
	t.Run("copysign:116", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 8388608}, {wa.F32, 4290772992}}, arg{wa.F32, 2155872256})
	})
	t.Run("copysign:117", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 8388608}, {wa.F32, 2143289344}}, arg{wa.F32, 8388608})
	})
	t.Run("copysign:118", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3204448256}, {wa.F32, 2147483648}}, arg{wa.F32, 3204448256})
	})
	t.Run("copysign:119", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3204448256}, {wa.F32, 0}}, arg{wa.F32, 1056964608})
	})
	t.Run("copysign:120", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1056964608}, {wa.F32, 2147483648}}, arg{wa.F32, 3204448256})
	})
	t.Run("copysign:121", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1056964608}, {wa.F32, 0}}, arg{wa.F32, 1056964608})
	})
	t.Run("copysign:122", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3204448256}, {wa.F32, 2147483649}}, arg{wa.F32, 3204448256})
	})
	t.Run("copysign:123", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3204448256}, {wa.F32, 1}}, arg{wa.F32, 1056964608})
	})
	t.Run("copysign:124", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1056964608}, {wa.F32, 2147483649}}, arg{wa.F32, 3204448256})
	})
	t.Run("copysign:125", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1056964608}, {wa.F32, 1}}, arg{wa.F32, 1056964608})
	})
	t.Run("copysign:126", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3204448256}, {wa.F32, 2155872256}}, arg{wa.F32, 3204448256})
	})
	t.Run("copysign:127", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3204448256}, {wa.F32, 8388608}}, arg{wa.F32, 1056964608})
	})
	t.Run("copysign:128", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1056964608}, {wa.F32, 2155872256}}, arg{wa.F32, 3204448256})
	})
	t.Run("copysign:129", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1056964608}, {wa.F32, 8388608}}, arg{wa.F32, 1056964608})
	})
	t.Run("copysign:130", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3204448256}, {wa.F32, 3204448256}}, arg{wa.F32, 3204448256})
	})
	t.Run("copysign:131", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3204448256}, {wa.F32, 1056964608}}, arg{wa.F32, 1056964608})
	})
	t.Run("copysign:132", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1056964608}, {wa.F32, 3204448256}}, arg{wa.F32, 3204448256})
	})
	t.Run("copysign:133", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1056964608}, {wa.F32, 1056964608}}, arg{wa.F32, 1056964608})
	})
	t.Run("copysign:134", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3204448256}, {wa.F32, 3212836864}}, arg{wa.F32, 3204448256})
	})
	t.Run("copysign:135", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3204448256}, {wa.F32, 1065353216}}, arg{wa.F32, 1056964608})
	})
	t.Run("copysign:136", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1056964608}, {wa.F32, 3212836864}}, arg{wa.F32, 3204448256})
	})
	t.Run("copysign:137", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1056964608}, {wa.F32, 1065353216}}, arg{wa.F32, 1056964608})
	})
	t.Run("copysign:138", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3204448256}, {wa.F32, 3234402267}}, arg{wa.F32, 3204448256})
	})
	t.Run("copysign:139", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3204448256}, {wa.F32, 1086918619}}, arg{wa.F32, 1056964608})
	})
	t.Run("copysign:140", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1056964608}, {wa.F32, 3234402267}}, arg{wa.F32, 3204448256})
	})
	t.Run("copysign:141", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1056964608}, {wa.F32, 1086918619}}, arg{wa.F32, 1056964608})
	})
	t.Run("copysign:142", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3204448256}, {wa.F32, 4286578687}}, arg{wa.F32, 3204448256})
	})
	t.Run("copysign:143", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3204448256}, {wa.F32, 2139095039}}, arg{wa.F32, 1056964608})
	})
	t.Run("copysign:144", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1056964608}, {wa.F32, 4286578687}}, arg{wa.F32, 3204448256})
	})
	t.Run("copysign:145", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1056964608}, {wa.F32, 2139095039}}, arg{wa.F32, 1056964608})
	})
	t.Run("copysign:146", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3204448256}, {wa.F32, 4286578688}}, arg{wa.F32, 3204448256})
	})
	t.Run("copysign:147", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3204448256}, {wa.F32, 2139095040}}, arg{wa.F32, 1056964608})
	})
	t.Run("copysign:148", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1056964608}, {wa.F32, 4286578688}}, arg{wa.F32, 3204448256})
	})
	t.Run("copysign:149", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1056964608}, {wa.F32, 2139095040}}, arg{wa.F32, 1056964608})
	})
	t.Run("copysign:150", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3204448256}, {wa.F32, 4290772992}}, arg{wa.F32, 3204448256})
	})
	t.Run("copysign:151", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3204448256}, {wa.F32, 2143289344}}, arg{wa.F32, 1056964608})
	})
	t.Run("copysign:152", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1056964608}, {wa.F32, 4290772992}}, arg{wa.F32, 3204448256})
	})
	t.Run("copysign:153", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1056964608}, {wa.F32, 2143289344}}, arg{wa.F32, 1056964608})
	})
	t.Run("copysign:154", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3212836864}, {wa.F32, 2147483648}}, arg{wa.F32, 3212836864})
	})
	t.Run("copysign:155", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3212836864}, {wa.F32, 0}}, arg{wa.F32, 1065353216})
	})
	t.Run("copysign:156", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1065353216}, {wa.F32, 2147483648}}, arg{wa.F32, 3212836864})
	})
	t.Run("copysign:157", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1065353216}, {wa.F32, 0}}, arg{wa.F32, 1065353216})
	})
	t.Run("copysign:158", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3212836864}, {wa.F32, 2147483649}}, arg{wa.F32, 3212836864})
	})
	t.Run("copysign:159", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3212836864}, {wa.F32, 1}}, arg{wa.F32, 1065353216})
	})
	t.Run("copysign:160", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1065353216}, {wa.F32, 2147483649}}, arg{wa.F32, 3212836864})
	})
	t.Run("copysign:161", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1065353216}, {wa.F32, 1}}, arg{wa.F32, 1065353216})
	})
	t.Run("copysign:162", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3212836864}, {wa.F32, 2155872256}}, arg{wa.F32, 3212836864})
	})
	t.Run("copysign:163", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3212836864}, {wa.F32, 8388608}}, arg{wa.F32, 1065353216})
	})
	t.Run("copysign:164", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1065353216}, {wa.F32, 2155872256}}, arg{wa.F32, 3212836864})
	})
	t.Run("copysign:165", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1065353216}, {wa.F32, 8388608}}, arg{wa.F32, 1065353216})
	})
	t.Run("copysign:166", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3212836864}, {wa.F32, 3204448256}}, arg{wa.F32, 3212836864})
	})
	t.Run("copysign:167", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3212836864}, {wa.F32, 1056964608}}, arg{wa.F32, 1065353216})
	})
	t.Run("copysign:168", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1065353216}, {wa.F32, 3204448256}}, arg{wa.F32, 3212836864})
	})
	t.Run("copysign:169", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1065353216}, {wa.F32, 1056964608}}, arg{wa.F32, 1065353216})
	})
	t.Run("copysign:170", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3212836864}, {wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("copysign:171", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3212836864}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("copysign:172", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1065353216}, {wa.F32, 3212836864}}, arg{wa.F32, 3212836864})
	})
	t.Run("copysign:173", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1065353216}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("copysign:174", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3212836864}, {wa.F32, 3234402267}}, arg{wa.F32, 3212836864})
	})
	t.Run("copysign:175", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3212836864}, {wa.F32, 1086918619}}, arg{wa.F32, 1065353216})
	})
	t.Run("copysign:176", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1065353216}, {wa.F32, 3234402267}}, arg{wa.F32, 3212836864})
	})
	t.Run("copysign:177", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1065353216}, {wa.F32, 1086918619}}, arg{wa.F32, 1065353216})
	})
	t.Run("copysign:178", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3212836864}, {wa.F32, 4286578687}}, arg{wa.F32, 3212836864})
	})
	t.Run("copysign:179", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3212836864}, {wa.F32, 2139095039}}, arg{wa.F32, 1065353216})
	})
	t.Run("copysign:180", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1065353216}, {wa.F32, 4286578687}}, arg{wa.F32, 3212836864})
	})
	t.Run("copysign:181", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1065353216}, {wa.F32, 2139095039}}, arg{wa.F32, 1065353216})
	})
	t.Run("copysign:182", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3212836864}, {wa.F32, 4286578688}}, arg{wa.F32, 3212836864})
	})
	t.Run("copysign:183", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3212836864}, {wa.F32, 2139095040}}, arg{wa.F32, 1065353216})
	})
	t.Run("copysign:184", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1065353216}, {wa.F32, 4286578688}}, arg{wa.F32, 3212836864})
	})
	t.Run("copysign:185", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1065353216}, {wa.F32, 2139095040}}, arg{wa.F32, 1065353216})
	})
	t.Run("copysign:186", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3212836864}, {wa.F32, 4290772992}}, arg{wa.F32, 3212836864})
	})
	t.Run("copysign:187", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3212836864}, {wa.F32, 2143289344}}, arg{wa.F32, 1065353216})
	})
	t.Run("copysign:188", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1065353216}, {wa.F32, 4290772992}}, arg{wa.F32, 3212836864})
	})
	t.Run("copysign:189", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1065353216}, {wa.F32, 2143289344}}, arg{wa.F32, 1065353216})
	})
	t.Run("copysign:190", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3234402267}, {wa.F32, 2147483648}}, arg{wa.F32, 3234402267})
	})
	t.Run("copysign:191", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3234402267}, {wa.F32, 0}}, arg{wa.F32, 1086918619})
	})
	t.Run("copysign:192", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1086918619}, {wa.F32, 2147483648}}, arg{wa.F32, 3234402267})
	})
	t.Run("copysign:193", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1086918619}, {wa.F32, 0}}, arg{wa.F32, 1086918619})
	})
	t.Run("copysign:194", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3234402267}, {wa.F32, 2147483649}}, arg{wa.F32, 3234402267})
	})
	t.Run("copysign:195", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3234402267}, {wa.F32, 1}}, arg{wa.F32, 1086918619})
	})
	t.Run("copysign:196", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1086918619}, {wa.F32, 2147483649}}, arg{wa.F32, 3234402267})
	})
	t.Run("copysign:197", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1086918619}, {wa.F32, 1}}, arg{wa.F32, 1086918619})
	})
	t.Run("copysign:198", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3234402267}, {wa.F32, 2155872256}}, arg{wa.F32, 3234402267})
	})
	t.Run("copysign:199", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3234402267}, {wa.F32, 8388608}}, arg{wa.F32, 1086918619})
	})
	t.Run("copysign:200", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1086918619}, {wa.F32, 2155872256}}, arg{wa.F32, 3234402267})
	})
	t.Run("copysign:201", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1086918619}, {wa.F32, 8388608}}, arg{wa.F32, 1086918619})
	})
	t.Run("copysign:202", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3234402267}, {wa.F32, 3204448256}}, arg{wa.F32, 3234402267})
	})
	t.Run("copysign:203", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3234402267}, {wa.F32, 1056964608}}, arg{wa.F32, 1086918619})
	})
	t.Run("copysign:204", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1086918619}, {wa.F32, 3204448256}}, arg{wa.F32, 3234402267})
	})
	t.Run("copysign:205", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1086918619}, {wa.F32, 1056964608}}, arg{wa.F32, 1086918619})
	})
	t.Run("copysign:206", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3234402267}, {wa.F32, 3212836864}}, arg{wa.F32, 3234402267})
	})
	t.Run("copysign:207", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3234402267}, {wa.F32, 1065353216}}, arg{wa.F32, 1086918619})
	})
	t.Run("copysign:208", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1086918619}, {wa.F32, 3212836864}}, arg{wa.F32, 3234402267})
	})
	t.Run("copysign:209", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1086918619}, {wa.F32, 1065353216}}, arg{wa.F32, 1086918619})
	})
	t.Run("copysign:210", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3234402267}, {wa.F32, 3234402267}}, arg{wa.F32, 3234402267})
	})
	t.Run("copysign:211", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3234402267}, {wa.F32, 1086918619}}, arg{wa.F32, 1086918619})
	})
	t.Run("copysign:212", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1086918619}, {wa.F32, 3234402267}}, arg{wa.F32, 3234402267})
	})
	t.Run("copysign:213", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1086918619}, {wa.F32, 1086918619}}, arg{wa.F32, 1086918619})
	})
	t.Run("copysign:214", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3234402267}, {wa.F32, 4286578687}}, arg{wa.F32, 3234402267})
	})
	t.Run("copysign:215", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3234402267}, {wa.F32, 2139095039}}, arg{wa.F32, 1086918619})
	})
	t.Run("copysign:216", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1086918619}, {wa.F32, 4286578687}}, arg{wa.F32, 3234402267})
	})
	t.Run("copysign:217", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1086918619}, {wa.F32, 2139095039}}, arg{wa.F32, 1086918619})
	})
	t.Run("copysign:218", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3234402267}, {wa.F32, 4286578688}}, arg{wa.F32, 3234402267})
	})
	t.Run("copysign:219", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3234402267}, {wa.F32, 2139095040}}, arg{wa.F32, 1086918619})
	})
	t.Run("copysign:220", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1086918619}, {wa.F32, 4286578688}}, arg{wa.F32, 3234402267})
	})
	t.Run("copysign:221", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1086918619}, {wa.F32, 2139095040}}, arg{wa.F32, 1086918619})
	})
	t.Run("copysign:222", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3234402267}, {wa.F32, 4290772992}}, arg{wa.F32, 3234402267})
	})
	t.Run("copysign:223", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 3234402267}, {wa.F32, 2143289344}}, arg{wa.F32, 1086918619})
	})
	t.Run("copysign:224", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1086918619}, {wa.F32, 4290772992}}, arg{wa.F32, 3234402267})
	})
	t.Run("copysign:225", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 1086918619}, {wa.F32, 2143289344}}, arg{wa.F32, 1086918619})
	})
	t.Run("copysign:226", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578687}, {wa.F32, 2147483648}}, arg{wa.F32, 4286578687})
	})
	t.Run("copysign:227", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578687}, {wa.F32, 0}}, arg{wa.F32, 2139095039})
	})
	t.Run("copysign:228", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095039}, {wa.F32, 2147483648}}, arg{wa.F32, 4286578687})
	})
	t.Run("copysign:229", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095039}, {wa.F32, 0}}, arg{wa.F32, 2139095039})
	})
	t.Run("copysign:230", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578687}, {wa.F32, 2147483649}}, arg{wa.F32, 4286578687})
	})
	t.Run("copysign:231", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578687}, {wa.F32, 1}}, arg{wa.F32, 2139095039})
	})
	t.Run("copysign:232", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095039}, {wa.F32, 2147483649}}, arg{wa.F32, 4286578687})
	})
	t.Run("copysign:233", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095039}, {wa.F32, 1}}, arg{wa.F32, 2139095039})
	})
	t.Run("copysign:234", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578687}, {wa.F32, 2155872256}}, arg{wa.F32, 4286578687})
	})
	t.Run("copysign:235", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578687}, {wa.F32, 8388608}}, arg{wa.F32, 2139095039})
	})
	t.Run("copysign:236", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095039}, {wa.F32, 2155872256}}, arg{wa.F32, 4286578687})
	})
	t.Run("copysign:237", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095039}, {wa.F32, 8388608}}, arg{wa.F32, 2139095039})
	})
	t.Run("copysign:238", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578687}, {wa.F32, 3204448256}}, arg{wa.F32, 4286578687})
	})
	t.Run("copysign:239", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578687}, {wa.F32, 1056964608}}, arg{wa.F32, 2139095039})
	})
	t.Run("copysign:240", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095039}, {wa.F32, 3204448256}}, arg{wa.F32, 4286578687})
	})
	t.Run("copysign:241", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095039}, {wa.F32, 1056964608}}, arg{wa.F32, 2139095039})
	})
	t.Run("copysign:242", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578687}, {wa.F32, 3212836864}}, arg{wa.F32, 4286578687})
	})
	t.Run("copysign:243", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578687}, {wa.F32, 1065353216}}, arg{wa.F32, 2139095039})
	})
	t.Run("copysign:244", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095039}, {wa.F32, 3212836864}}, arg{wa.F32, 4286578687})
	})
	t.Run("copysign:245", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095039}, {wa.F32, 1065353216}}, arg{wa.F32, 2139095039})
	})
	t.Run("copysign:246", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578687}, {wa.F32, 3234402267}}, arg{wa.F32, 4286578687})
	})
	t.Run("copysign:247", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578687}, {wa.F32, 1086918619}}, arg{wa.F32, 2139095039})
	})
	t.Run("copysign:248", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095039}, {wa.F32, 3234402267}}, arg{wa.F32, 4286578687})
	})
	t.Run("copysign:249", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095039}, {wa.F32, 1086918619}}, arg{wa.F32, 2139095039})
	})
	t.Run("copysign:250", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578687}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("copysign:251", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578687}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("copysign:252", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095039}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("copysign:253", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095039}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("copysign:254", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578687}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578687})
	})
	t.Run("copysign:255", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578687}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095039})
	})
	t.Run("copysign:256", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095039}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578687})
	})
	t.Run("copysign:257", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095039}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095039})
	})
	t.Run("copysign:258", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578687}, {wa.F32, 4290772992}}, arg{wa.F32, 4286578687})
	})
	t.Run("copysign:259", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578687}, {wa.F32, 2143289344}}, arg{wa.F32, 2139095039})
	})
	t.Run("copysign:260", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095039}, {wa.F32, 4290772992}}, arg{wa.F32, 4286578687})
	})
	t.Run("copysign:261", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095039}, {wa.F32, 2143289344}}, arg{wa.F32, 2139095039})
	})
	t.Run("copysign:262", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578688}, {wa.F32, 2147483648}}, arg{wa.F32, 4286578688})
	})
	t.Run("copysign:263", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578688}, {wa.F32, 0}}, arg{wa.F32, 2139095040})
	})
	t.Run("copysign:264", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095040}, {wa.F32, 2147483648}}, arg{wa.F32, 4286578688})
	})
	t.Run("copysign:265", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095040}, {wa.F32, 0}}, arg{wa.F32, 2139095040})
	})
	t.Run("copysign:266", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578688}, {wa.F32, 2147483649}}, arg{wa.F32, 4286578688})
	})
	t.Run("copysign:267", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578688}, {wa.F32, 1}}, arg{wa.F32, 2139095040})
	})
	t.Run("copysign:268", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095040}, {wa.F32, 2147483649}}, arg{wa.F32, 4286578688})
	})
	t.Run("copysign:269", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095040}, {wa.F32, 1}}, arg{wa.F32, 2139095040})
	})
	t.Run("copysign:270", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578688}, {wa.F32, 2155872256}}, arg{wa.F32, 4286578688})
	})
	t.Run("copysign:271", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578688}, {wa.F32, 8388608}}, arg{wa.F32, 2139095040})
	})
	t.Run("copysign:272", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095040}, {wa.F32, 2155872256}}, arg{wa.F32, 4286578688})
	})
	t.Run("copysign:273", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095040}, {wa.F32, 8388608}}, arg{wa.F32, 2139095040})
	})
	t.Run("copysign:274", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578688}, {wa.F32, 3204448256}}, arg{wa.F32, 4286578688})
	})
	t.Run("copysign:275", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578688}, {wa.F32, 1056964608}}, arg{wa.F32, 2139095040})
	})
	t.Run("copysign:276", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095040}, {wa.F32, 3204448256}}, arg{wa.F32, 4286578688})
	})
	t.Run("copysign:277", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095040}, {wa.F32, 1056964608}}, arg{wa.F32, 2139095040})
	})
	t.Run("copysign:278", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578688}, {wa.F32, 3212836864}}, arg{wa.F32, 4286578688})
	})
	t.Run("copysign:279", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578688}, {wa.F32, 1065353216}}, arg{wa.F32, 2139095040})
	})
	t.Run("copysign:280", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095040}, {wa.F32, 3212836864}}, arg{wa.F32, 4286578688})
	})
	t.Run("copysign:281", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095040}, {wa.F32, 1065353216}}, arg{wa.F32, 2139095040})
	})
	t.Run("copysign:282", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578688}, {wa.F32, 3234402267}}, arg{wa.F32, 4286578688})
	})
	t.Run("copysign:283", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578688}, {wa.F32, 1086918619}}, arg{wa.F32, 2139095040})
	})
	t.Run("copysign:284", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095040}, {wa.F32, 3234402267}}, arg{wa.F32, 4286578688})
	})
	t.Run("copysign:285", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095040}, {wa.F32, 1086918619}}, arg{wa.F32, 2139095040})
	})
	t.Run("copysign:286", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578688}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578688})
	})
	t.Run("copysign:287", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578688}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095040})
	})
	t.Run("copysign:288", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095040}, {wa.F32, 4286578687}}, arg{wa.F32, 4286578688})
	})
	t.Run("copysign:289", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095040}, {wa.F32, 2139095039}}, arg{wa.F32, 2139095040})
	})
	t.Run("copysign:290", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578688}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("copysign:291", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578688}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("copysign:292", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095040}, {wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("copysign:293", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095040}, {wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("copysign:294", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578688}, {wa.F32, 4290772992}}, arg{wa.F32, 4286578688})
	})
	t.Run("copysign:295", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4286578688}, {wa.F32, 2143289344}}, arg{wa.F32, 2139095040})
	})
	t.Run("copysign:296", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095040}, {wa.F32, 4290772992}}, arg{wa.F32, 4286578688})
	})
	t.Run("copysign:297", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2139095040}, {wa.F32, 2143289344}}, arg{wa.F32, 2139095040})
	})
	t.Run("copysign:298", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4290772992}, {wa.F32, 2147483648}}, arg{wa.F32, 4290772992})
	})
	t.Run("copysign:299", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4290772992}, {wa.F32, 0}}, arg{wa.F32, 2143289344})
	})
	t.Run("copysign:300", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2143289344}, {wa.F32, 2147483648}}, arg{wa.F32, 4290772992})
	})
	t.Run("copysign:301", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2143289344}, {wa.F32, 0}}, arg{wa.F32, 2143289344})
	})
	t.Run("copysign:302", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4290772992}, {wa.F32, 2147483649}}, arg{wa.F32, 4290772992})
	})
	t.Run("copysign:303", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4290772992}, {wa.F32, 1}}, arg{wa.F32, 2143289344})
	})
	t.Run("copysign:304", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2143289344}, {wa.F32, 2147483649}}, arg{wa.F32, 4290772992})
	})
	t.Run("copysign:305", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2143289344}, {wa.F32, 1}}, arg{wa.F32, 2143289344})
	})
	t.Run("copysign:306", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4290772992}, {wa.F32, 2155872256}}, arg{wa.F32, 4290772992})
	})
	t.Run("copysign:307", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4290772992}, {wa.F32, 8388608}}, arg{wa.F32, 2143289344})
	})
	t.Run("copysign:308", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2143289344}, {wa.F32, 2155872256}}, arg{wa.F32, 4290772992})
	})
	t.Run("copysign:309", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2143289344}, {wa.F32, 8388608}}, arg{wa.F32, 2143289344})
	})
	t.Run("copysign:310", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4290772992}, {wa.F32, 3204448256}}, arg{wa.F32, 4290772992})
	})
	t.Run("copysign:311", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4290772992}, {wa.F32, 1056964608}}, arg{wa.F32, 2143289344})
	})
	t.Run("copysign:312", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2143289344}, {wa.F32, 3204448256}}, arg{wa.F32, 4290772992})
	})
	t.Run("copysign:313", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2143289344}, {wa.F32, 1056964608}}, arg{wa.F32, 2143289344})
	})
	t.Run("copysign:314", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4290772992}, {wa.F32, 3212836864}}, arg{wa.F32, 4290772992})
	})
	t.Run("copysign:315", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4290772992}, {wa.F32, 1065353216}}, arg{wa.F32, 2143289344})
	})
	t.Run("copysign:316", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2143289344}, {wa.F32, 3212836864}}, arg{wa.F32, 4290772992})
	})
	t.Run("copysign:317", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2143289344}, {wa.F32, 1065353216}}, arg{wa.F32, 2143289344})
	})
	t.Run("copysign:318", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4290772992}, {wa.F32, 3234402267}}, arg{wa.F32, 4290772992})
	})
	t.Run("copysign:319", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4290772992}, {wa.F32, 1086918619}}, arg{wa.F32, 2143289344})
	})
	t.Run("copysign:320", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2143289344}, {wa.F32, 3234402267}}, arg{wa.F32, 4290772992})
	})
	t.Run("copysign:321", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2143289344}, {wa.F32, 1086918619}}, arg{wa.F32, 2143289344})
	})
	t.Run("copysign:322", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4290772992}, {wa.F32, 4286578687}}, arg{wa.F32, 4290772992})
	})
	t.Run("copysign:323", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4290772992}, {wa.F32, 2139095039}}, arg{wa.F32, 2143289344})
	})
	t.Run("copysign:324", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2143289344}, {wa.F32, 4286578687}}, arg{wa.F32, 4290772992})
	})
	t.Run("copysign:325", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2143289344}, {wa.F32, 2139095039}}, arg{wa.F32, 2143289344})
	})
	t.Run("copysign:326", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4290772992}, {wa.F32, 4286578688}}, arg{wa.F32, 4290772992})
	})
	t.Run("copysign:327", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4290772992}, {wa.F32, 2139095040}}, arg{wa.F32, 2143289344})
	})
	t.Run("copysign:328", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2143289344}, {wa.F32, 4286578688}}, arg{wa.F32, 4290772992})
	})
	t.Run("copysign:329", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2143289344}, {wa.F32, 2139095040}}, arg{wa.F32, 2143289344})
	})
	t.Run("copysign:330", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4290772992}, {wa.F32, 4290772992}}, arg{wa.F32, 4290772992})
	})
	t.Run("copysign:331", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 4290772992}, {wa.F32, 2143289344}}, arg{wa.F32, 2143289344})
	})
	t.Run("copysign:332", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2143289344}, {wa.F32, 4290772992}}, arg{wa.F32, 4290772992})
	})
	t.Run("copysign:333", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F32, 2143289344}, {wa.F32, 2143289344}}, arg{wa.F32, 2143289344})
	})
	t.Run("abs:334", func(t *testing.T) { x0.assertReturnInvoke(t, "abs", []arg{{wa.F32, 2147483648}}, arg{wa.F32, 0}) })
	t.Run("abs:335", func(t *testing.T) { x0.assertReturnInvoke(t, "abs", []arg{{wa.F32, 0}}, arg{wa.F32, 0}) })
	t.Run("abs:336", func(t *testing.T) { x0.assertReturnInvoke(t, "abs", []arg{{wa.F32, 2147483649}}, arg{wa.F32, 1}) })
	t.Run("abs:337", func(t *testing.T) { x0.assertReturnInvoke(t, "abs", []arg{{wa.F32, 1}}, arg{wa.F32, 1}) })
	t.Run("abs:338", func(t *testing.T) { x0.assertReturnInvoke(t, "abs", []arg{{wa.F32, 2155872256}}, arg{wa.F32, 8388608}) })
	t.Run("abs:339", func(t *testing.T) { x0.assertReturnInvoke(t, "abs", []arg{{wa.F32, 8388608}}, arg{wa.F32, 8388608}) })
	t.Run("abs:340", func(t *testing.T) {
		x0.assertReturnInvoke(t, "abs", []arg{{wa.F32, 3204448256}}, arg{wa.F32, 1056964608})
	})
	t.Run("abs:341", func(t *testing.T) {
		x0.assertReturnInvoke(t, "abs", []arg{{wa.F32, 1056964608}}, arg{wa.F32, 1056964608})
	})
	t.Run("abs:342", func(t *testing.T) {
		x0.assertReturnInvoke(t, "abs", []arg{{wa.F32, 3212836864}}, arg{wa.F32, 1065353216})
	})
	t.Run("abs:343", func(t *testing.T) {
		x0.assertReturnInvoke(t, "abs", []arg{{wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("abs:344", func(t *testing.T) {
		x0.assertReturnInvoke(t, "abs", []arg{{wa.F32, 3234402267}}, arg{wa.F32, 1086918619})
	})
	t.Run("abs:345", func(t *testing.T) {
		x0.assertReturnInvoke(t, "abs", []arg{{wa.F32, 1086918619}}, arg{wa.F32, 1086918619})
	})
	t.Run("abs:346", func(t *testing.T) {
		x0.assertReturnInvoke(t, "abs", []arg{{wa.F32, 4286578687}}, arg{wa.F32, 2139095039})
	})
	t.Run("abs:347", func(t *testing.T) {
		x0.assertReturnInvoke(t, "abs", []arg{{wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("abs:348", func(t *testing.T) {
		x0.assertReturnInvoke(t, "abs", []arg{{wa.F32, 4286578688}}, arg{wa.F32, 2139095040})
	})
	t.Run("abs:349", func(t *testing.T) {
		x0.assertReturnInvoke(t, "abs", []arg{{wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("abs:350", func(t *testing.T) {
		x0.assertReturnInvoke(t, "abs", []arg{{wa.F32, 4290772992}}, arg{wa.F32, 2143289344})
	})
	t.Run("abs:351", func(t *testing.T) {
		x0.assertReturnInvoke(t, "abs", []arg{{wa.F32, 2143289344}}, arg{wa.F32, 2143289344})
	})
	t.Run("neg:352", func(t *testing.T) { x0.assertReturnInvoke(t, "neg", []arg{{wa.F32, 2147483648}}, arg{wa.F32, 0}) })
	t.Run("neg:353", func(t *testing.T) { x0.assertReturnInvoke(t, "neg", []arg{{wa.F32, 0}}, arg{wa.F32, 2147483648}) })
	t.Run("neg:354", func(t *testing.T) { x0.assertReturnInvoke(t, "neg", []arg{{wa.F32, 2147483649}}, arg{wa.F32, 1}) })
	t.Run("neg:355", func(t *testing.T) { x0.assertReturnInvoke(t, "neg", []arg{{wa.F32, 1}}, arg{wa.F32, 2147483649}) })
	t.Run("neg:356", func(t *testing.T) { x0.assertReturnInvoke(t, "neg", []arg{{wa.F32, 2155872256}}, arg{wa.F32, 8388608}) })
	t.Run("neg:357", func(t *testing.T) { x0.assertReturnInvoke(t, "neg", []arg{{wa.F32, 8388608}}, arg{wa.F32, 2155872256}) })
	t.Run("neg:358", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F32, 3204448256}}, arg{wa.F32, 1056964608})
	})
	t.Run("neg:359", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F32, 1056964608}}, arg{wa.F32, 3204448256})
	})
	t.Run("neg:360", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F32, 3212836864}}, arg{wa.F32, 1065353216})
	})
	t.Run("neg:361", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F32, 1065353216}}, arg{wa.F32, 3212836864})
	})
	t.Run("neg:362", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F32, 3234402267}}, arg{wa.F32, 1086918619})
	})
	t.Run("neg:363", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F32, 1086918619}}, arg{wa.F32, 3234402267})
	})
	t.Run("neg:364", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F32, 4286578687}}, arg{wa.F32, 2139095039})
	})
	t.Run("neg:365", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F32, 2139095039}}, arg{wa.F32, 4286578687})
	})
	t.Run("neg:366", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F32, 4286578688}}, arg{wa.F32, 2139095040})
	})
	t.Run("neg:367", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F32, 2139095040}}, arg{wa.F32, 4286578688})
	})
	t.Run("neg:368", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F32, 4290772992}}, arg{wa.F32, 2143289344})
	})
	t.Run("neg:369", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F32, 2143289344}}, arg{wa.F32, 4290772992})
	})
	t.Run("assert_invalid:374", func(t *testing.T) { assertInvalidSpec(t, "f32_bitwise.1.wasm", "type mismatch") })
	t.Run("assert_invalid:375", func(t *testing.T) { assertInvalidSpec(t, "f32_bitwise.2.wasm", "type mismatch") })
	t.Run("assert_invalid:376", func(t *testing.T) { assertInvalidSpec(t, "f32_bitwise.3.wasm", "type mismatch") })
}

func Test_f32_cmp(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "f32_cmp.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("eq:13", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("eq:14", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483648}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("eq:15", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 0}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("eq:16", func(t *testing.T) { x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 0}, {wa.F32, 0}}, arg{wa.I32, 1}) })
	t.Run("eq:17", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("eq:18", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483648}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:19", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 0}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("eq:20", func(t *testing.T) { x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 0}, {wa.F32, 1}}, arg{wa.I32, 0}) })
	t.Run("eq:21", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483648}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("eq:22", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483648}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("eq:23", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 0}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("eq:24", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 0}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("eq:25", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483648}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("eq:26", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483648}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("eq:27", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 0}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("eq:28", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 0}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("eq:29", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483648}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("eq:30", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483648}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("eq:31", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 0}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("eq:32", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 0}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("eq:33", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483648}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("eq:34", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483648}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("eq:35", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 0}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("eq:36", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 0}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("eq:37", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483648}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("eq:38", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483648}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("eq:39", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 0}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("eq:40", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 0}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("eq:41", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483648}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("eq:42", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483648}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("eq:43", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 0}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("eq:44", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 0}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("eq:45", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483648}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("eq:46", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483648}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("eq:47", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483648}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("eq:48", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483648}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("eq:49", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 0}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("eq:50", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 0}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("eq:51", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 0}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("eq:52", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 0}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("eq:53", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483649}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("eq:54", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483649}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:55", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("eq:56", func(t *testing.T) { x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1}, {wa.F32, 0}}, arg{wa.I32, 0}) })
	t.Run("eq:57", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483649}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("eq:58", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483649}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:59", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("eq:60", func(t *testing.T) { x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1}, {wa.F32, 1}}, arg{wa.I32, 1}) })
	t.Run("eq:61", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483649}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("eq:62", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483649}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("eq:63", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("eq:64", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("eq:65", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483649}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("eq:66", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483649}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("eq:67", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("eq:68", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("eq:69", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483649}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("eq:70", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483649}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("eq:71", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("eq:72", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("eq:73", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483649}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("eq:74", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483649}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("eq:75", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("eq:76", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("eq:77", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483649}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("eq:78", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483649}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("eq:79", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("eq:80", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("eq:81", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483649}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("eq:82", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483649}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("eq:83", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("eq:84", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("eq:85", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483649}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("eq:86", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483649}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("eq:87", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483649}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("eq:88", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2147483649}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("eq:89", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("eq:90", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("eq:91", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("eq:92", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("eq:93", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2155872256}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("eq:94", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2155872256}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:95", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 8388608}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("eq:96", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 8388608}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:97", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2155872256}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("eq:98", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2155872256}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:99", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 8388608}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("eq:100", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 8388608}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:101", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2155872256}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("eq:102", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2155872256}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("eq:103", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 8388608}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("eq:104", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 8388608}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("eq:105", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2155872256}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("eq:106", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2155872256}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("eq:107", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 8388608}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("eq:108", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 8388608}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("eq:109", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2155872256}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("eq:110", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2155872256}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("eq:111", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 8388608}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("eq:112", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 8388608}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("eq:113", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2155872256}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("eq:114", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2155872256}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("eq:115", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 8388608}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("eq:116", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 8388608}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("eq:117", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2155872256}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("eq:118", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2155872256}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("eq:119", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 8388608}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("eq:120", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 8388608}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("eq:121", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2155872256}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("eq:122", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2155872256}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("eq:123", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 8388608}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("eq:124", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 8388608}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("eq:125", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2155872256}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("eq:126", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2155872256}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("eq:127", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2155872256}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("eq:128", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2155872256}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("eq:129", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 8388608}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("eq:130", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 8388608}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("eq:131", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 8388608}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("eq:132", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 8388608}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("eq:133", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3204448256}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("eq:134", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3204448256}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:135", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1056964608}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("eq:136", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1056964608}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:137", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3204448256}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("eq:138", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3204448256}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:139", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1056964608}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("eq:140", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1056964608}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:141", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3204448256}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("eq:142", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3204448256}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("eq:143", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1056964608}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("eq:144", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1056964608}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("eq:145", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3204448256}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("eq:146", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3204448256}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("eq:147", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1056964608}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("eq:148", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1056964608}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("eq:149", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3204448256}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("eq:150", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3204448256}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("eq:151", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1056964608}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("eq:152", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1056964608}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("eq:153", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3204448256}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("eq:154", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3204448256}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("eq:155", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1056964608}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("eq:156", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1056964608}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("eq:157", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3204448256}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("eq:158", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3204448256}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("eq:159", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1056964608}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("eq:160", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1056964608}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("eq:161", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3204448256}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("eq:162", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3204448256}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("eq:163", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1056964608}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("eq:164", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1056964608}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("eq:165", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3204448256}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("eq:166", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3204448256}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("eq:167", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3204448256}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("eq:168", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3204448256}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("eq:169", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1056964608}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("eq:170", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1056964608}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("eq:171", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1056964608}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("eq:172", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1056964608}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("eq:173", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3212836864}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("eq:174", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3212836864}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:175", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1065353216}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("eq:176", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1065353216}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:177", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3212836864}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("eq:178", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3212836864}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:179", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1065353216}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("eq:180", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1065353216}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:181", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3212836864}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("eq:182", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3212836864}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("eq:183", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1065353216}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("eq:184", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1065353216}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("eq:185", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3212836864}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("eq:186", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3212836864}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("eq:187", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1065353216}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("eq:188", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1065353216}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("eq:189", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3212836864}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("eq:190", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3212836864}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("eq:191", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1065353216}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("eq:192", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1065353216}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("eq:193", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3212836864}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("eq:194", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3212836864}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("eq:195", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1065353216}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("eq:196", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1065353216}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("eq:197", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3212836864}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("eq:198", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3212836864}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("eq:199", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1065353216}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("eq:200", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1065353216}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("eq:201", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3212836864}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("eq:202", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3212836864}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("eq:203", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1065353216}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("eq:204", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1065353216}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("eq:205", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3212836864}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("eq:206", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3212836864}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("eq:207", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3212836864}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("eq:208", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3212836864}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("eq:209", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1065353216}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("eq:210", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1065353216}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("eq:211", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1065353216}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("eq:212", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1065353216}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("eq:213", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3234402267}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("eq:214", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3234402267}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:215", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1086918619}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("eq:216", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1086918619}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:217", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3234402267}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("eq:218", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3234402267}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:219", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1086918619}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("eq:220", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1086918619}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:221", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3234402267}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("eq:222", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3234402267}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("eq:223", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1086918619}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("eq:224", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1086918619}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("eq:225", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3234402267}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("eq:226", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3234402267}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("eq:227", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1086918619}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("eq:228", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1086918619}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("eq:229", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3234402267}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("eq:230", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3234402267}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("eq:231", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1086918619}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("eq:232", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1086918619}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("eq:233", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3234402267}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("eq:234", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3234402267}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("eq:235", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1086918619}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("eq:236", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1086918619}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("eq:237", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3234402267}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("eq:238", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3234402267}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("eq:239", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1086918619}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("eq:240", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1086918619}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("eq:241", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3234402267}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("eq:242", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3234402267}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("eq:243", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1086918619}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("eq:244", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1086918619}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("eq:245", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3234402267}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("eq:246", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3234402267}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("eq:247", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3234402267}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("eq:248", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 3234402267}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("eq:249", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1086918619}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("eq:250", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1086918619}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("eq:251", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1086918619}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("eq:252", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 1086918619}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("eq:253", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578687}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("eq:254", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578687}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:255", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095039}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("eq:256", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095039}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:257", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578687}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("eq:258", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578687}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:259", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095039}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("eq:260", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095039}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:261", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578687}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("eq:262", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578687}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("eq:263", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095039}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("eq:264", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095039}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("eq:265", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578687}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("eq:266", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578687}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("eq:267", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095039}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("eq:268", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095039}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("eq:269", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578687}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("eq:270", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578687}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("eq:271", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095039}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("eq:272", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095039}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("eq:273", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578687}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("eq:274", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578687}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("eq:275", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095039}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("eq:276", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095039}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("eq:277", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578687}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("eq:278", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578687}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("eq:279", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095039}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("eq:280", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095039}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("eq:281", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578687}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("eq:282", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578687}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("eq:283", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095039}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("eq:284", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095039}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("eq:285", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578687}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("eq:286", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578687}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("eq:287", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578687}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("eq:288", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578687}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("eq:289", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095039}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("eq:290", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095039}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("eq:291", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095039}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("eq:292", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095039}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("eq:293", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578688}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("eq:294", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578688}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:295", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095040}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("eq:296", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095040}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:297", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578688}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("eq:298", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578688}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:299", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095040}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("eq:300", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095040}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:301", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578688}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("eq:302", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578688}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("eq:303", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095040}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("eq:304", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095040}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("eq:305", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578688}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("eq:306", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578688}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("eq:307", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095040}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("eq:308", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095040}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("eq:309", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578688}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("eq:310", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578688}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("eq:311", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095040}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("eq:312", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095040}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("eq:313", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578688}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("eq:314", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578688}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("eq:315", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095040}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("eq:316", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095040}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("eq:317", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578688}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("eq:318", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578688}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("eq:319", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095040}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("eq:320", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095040}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("eq:321", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578688}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("eq:322", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578688}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("eq:323", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095040}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("eq:324", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095040}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("eq:325", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578688}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("eq:326", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578688}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("eq:327", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578688}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("eq:328", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4286578688}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("eq:329", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095040}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("eq:330", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095040}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("eq:331", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095040}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("eq:332", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2139095040}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("eq:333", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4290772992}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("eq:334", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4288675840}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("eq:335", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4290772992}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:336", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4288675840}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:337", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2143289344}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("eq:338", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2141192192}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("eq:339", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2143289344}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:340", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2141192192}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:341", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4290772992}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("eq:342", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4288675840}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("eq:343", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4290772992}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:344", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4288675840}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:345", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2143289344}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("eq:346", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2141192192}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("eq:347", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2143289344}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:348", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2141192192}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:349", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4290772992}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("eq:350", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4288675840}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("eq:351", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4290772992}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("eq:352", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4288675840}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("eq:353", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2143289344}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("eq:354", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2141192192}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("eq:355", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2143289344}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("eq:356", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2141192192}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("eq:357", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4290772992}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("eq:358", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4288675840}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("eq:359", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4290772992}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("eq:360", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4288675840}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("eq:361", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2143289344}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("eq:362", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2141192192}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("eq:363", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2143289344}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("eq:364", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2141192192}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("eq:365", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4290772992}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("eq:366", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4288675840}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("eq:367", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4290772992}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("eq:368", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4288675840}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("eq:369", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2143289344}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("eq:370", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2141192192}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("eq:371", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2143289344}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("eq:372", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2141192192}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("eq:373", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4290772992}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("eq:374", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4288675840}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("eq:375", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4290772992}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("eq:376", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4288675840}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("eq:377", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2143289344}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("eq:378", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2141192192}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("eq:379", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2143289344}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("eq:380", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2141192192}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("eq:381", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4290772992}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("eq:382", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4288675840}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("eq:383", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4290772992}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("eq:384", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4288675840}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("eq:385", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2143289344}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("eq:386", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2141192192}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("eq:387", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2143289344}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("eq:388", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2141192192}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("eq:389", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4290772992}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("eq:390", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4288675840}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("eq:391", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4290772992}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("eq:392", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4288675840}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("eq:393", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2143289344}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("eq:394", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2141192192}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("eq:395", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2143289344}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("eq:396", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2141192192}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("eq:397", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4290772992}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("eq:398", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4288675840}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("eq:399", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4290772992}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("eq:400", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4288675840}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("eq:401", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4290772992}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("eq:402", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4288675840}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("eq:403", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4290772992}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("eq:404", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 4288675840}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("eq:405", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2143289344}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("eq:406", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2141192192}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("eq:407", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2143289344}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("eq:408", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2141192192}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("eq:409", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2143289344}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("eq:410", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2141192192}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("eq:411", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2143289344}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("eq:412", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F32, 2141192192}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("ne:413", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("ne:414", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483648}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("ne:415", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 0}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("ne:416", func(t *testing.T) { x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 0}, {wa.F32, 0}}, arg{wa.I32, 0}) })
	t.Run("ne:417", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ne:418", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483648}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:419", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 0}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ne:420", func(t *testing.T) { x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 0}, {wa.F32, 1}}, arg{wa.I32, 1}) })
	t.Run("ne:421", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483648}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ne:422", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483648}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("ne:423", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 0}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ne:424", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 0}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("ne:425", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483648}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ne:426", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483648}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("ne:427", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 0}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ne:428", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 0}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("ne:429", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483648}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ne:430", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483648}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("ne:431", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 0}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ne:432", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 0}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("ne:433", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483648}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ne:434", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483648}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("ne:435", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 0}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ne:436", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 0}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("ne:437", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483648}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ne:438", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483648}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("ne:439", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 0}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ne:440", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 0}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("ne:441", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483648}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ne:442", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483648}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("ne:443", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 0}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ne:444", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 0}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("ne:445", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483648}, {wa.F32, 4290772992}}, arg{wa.I32, 1})
	})
	t.Run("ne:446", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483648}, {wa.F32, 4288675840}}, arg{wa.I32, 1})
	})
	t.Run("ne:447", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483648}, {wa.F32, 2143289344}}, arg{wa.I32, 1})
	})
	t.Run("ne:448", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483648}, {wa.F32, 2141192192}}, arg{wa.I32, 1})
	})
	t.Run("ne:449", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 0}, {wa.F32, 4290772992}}, arg{wa.I32, 1})
	})
	t.Run("ne:450", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 0}, {wa.F32, 4288675840}}, arg{wa.I32, 1})
	})
	t.Run("ne:451", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 0}, {wa.F32, 2143289344}}, arg{wa.I32, 1})
	})
	t.Run("ne:452", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 0}, {wa.F32, 2141192192}}, arg{wa.I32, 1})
	})
	t.Run("ne:453", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483649}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ne:454", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483649}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:455", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ne:456", func(t *testing.T) { x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1}, {wa.F32, 0}}, arg{wa.I32, 1}) })
	t.Run("ne:457", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483649}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("ne:458", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483649}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:459", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ne:460", func(t *testing.T) { x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1}, {wa.F32, 1}}, arg{wa.I32, 0}) })
	t.Run("ne:461", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483649}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ne:462", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483649}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("ne:463", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ne:464", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("ne:465", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483649}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ne:466", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483649}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("ne:467", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ne:468", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("ne:469", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483649}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ne:470", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483649}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("ne:471", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ne:472", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("ne:473", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483649}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ne:474", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483649}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("ne:475", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ne:476", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("ne:477", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483649}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ne:478", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483649}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("ne:479", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ne:480", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("ne:481", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483649}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ne:482", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483649}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("ne:483", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ne:484", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("ne:485", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483649}, {wa.F32, 4290772992}}, arg{wa.I32, 1})
	})
	t.Run("ne:486", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483649}, {wa.F32, 4288675840}}, arg{wa.I32, 1})
	})
	t.Run("ne:487", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483649}, {wa.F32, 2143289344}}, arg{wa.I32, 1})
	})
	t.Run("ne:488", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2147483649}, {wa.F32, 2141192192}}, arg{wa.I32, 1})
	})
	t.Run("ne:489", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1}, {wa.F32, 4290772992}}, arg{wa.I32, 1})
	})
	t.Run("ne:490", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1}, {wa.F32, 4288675840}}, arg{wa.I32, 1})
	})
	t.Run("ne:491", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1}, {wa.F32, 2143289344}}, arg{wa.I32, 1})
	})
	t.Run("ne:492", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1}, {wa.F32, 2141192192}}, arg{wa.I32, 1})
	})
	t.Run("ne:493", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2155872256}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ne:494", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2155872256}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:495", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 8388608}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ne:496", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 8388608}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:497", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2155872256}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ne:498", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2155872256}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:499", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 8388608}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ne:500", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 8388608}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:501", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2155872256}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("ne:502", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2155872256}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("ne:503", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 8388608}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ne:504", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 8388608}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("ne:505", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2155872256}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ne:506", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2155872256}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("ne:507", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 8388608}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ne:508", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 8388608}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("ne:509", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2155872256}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ne:510", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2155872256}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("ne:511", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 8388608}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ne:512", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 8388608}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("ne:513", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2155872256}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ne:514", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2155872256}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("ne:515", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 8388608}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ne:516", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 8388608}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("ne:517", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2155872256}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ne:518", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2155872256}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("ne:519", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 8388608}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ne:520", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 8388608}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("ne:521", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2155872256}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ne:522", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2155872256}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("ne:523", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 8388608}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ne:524", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 8388608}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("ne:525", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2155872256}, {wa.F32, 4290772992}}, arg{wa.I32, 1})
	})
	t.Run("ne:526", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2155872256}, {wa.F32, 4288675840}}, arg{wa.I32, 1})
	})
	t.Run("ne:527", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2155872256}, {wa.F32, 2143289344}}, arg{wa.I32, 1})
	})
	t.Run("ne:528", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2155872256}, {wa.F32, 2141192192}}, arg{wa.I32, 1})
	})
	t.Run("ne:529", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 8388608}, {wa.F32, 4290772992}}, arg{wa.I32, 1})
	})
	t.Run("ne:530", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 8388608}, {wa.F32, 4288675840}}, arg{wa.I32, 1})
	})
	t.Run("ne:531", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 8388608}, {wa.F32, 2143289344}}, arg{wa.I32, 1})
	})
	t.Run("ne:532", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 8388608}, {wa.F32, 2141192192}}, arg{wa.I32, 1})
	})
	t.Run("ne:533", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3204448256}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ne:534", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3204448256}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:535", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1056964608}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ne:536", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1056964608}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:537", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3204448256}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ne:538", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3204448256}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:539", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1056964608}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ne:540", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1056964608}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:541", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3204448256}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ne:542", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3204448256}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("ne:543", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1056964608}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ne:544", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1056964608}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("ne:545", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3204448256}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("ne:546", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3204448256}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("ne:547", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1056964608}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ne:548", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1056964608}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("ne:549", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3204448256}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ne:550", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3204448256}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("ne:551", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1056964608}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ne:552", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1056964608}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("ne:553", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3204448256}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ne:554", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3204448256}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("ne:555", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1056964608}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ne:556", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1056964608}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("ne:557", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3204448256}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ne:558", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3204448256}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("ne:559", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1056964608}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ne:560", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1056964608}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("ne:561", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3204448256}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ne:562", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3204448256}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("ne:563", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1056964608}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ne:564", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1056964608}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("ne:565", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3204448256}, {wa.F32, 4290772992}}, arg{wa.I32, 1})
	})
	t.Run("ne:566", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3204448256}, {wa.F32, 4288675840}}, arg{wa.I32, 1})
	})
	t.Run("ne:567", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3204448256}, {wa.F32, 2143289344}}, arg{wa.I32, 1})
	})
	t.Run("ne:568", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3204448256}, {wa.F32, 2141192192}}, arg{wa.I32, 1})
	})
	t.Run("ne:569", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1056964608}, {wa.F32, 4290772992}}, arg{wa.I32, 1})
	})
	t.Run("ne:570", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1056964608}, {wa.F32, 4288675840}}, arg{wa.I32, 1})
	})
	t.Run("ne:571", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1056964608}, {wa.F32, 2143289344}}, arg{wa.I32, 1})
	})
	t.Run("ne:572", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1056964608}, {wa.F32, 2141192192}}, arg{wa.I32, 1})
	})
	t.Run("ne:573", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3212836864}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ne:574", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3212836864}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:575", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1065353216}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ne:576", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1065353216}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:577", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3212836864}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ne:578", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3212836864}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:579", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1065353216}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ne:580", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1065353216}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:581", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3212836864}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ne:582", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3212836864}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("ne:583", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1065353216}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ne:584", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1065353216}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("ne:585", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3212836864}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ne:586", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3212836864}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("ne:587", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1065353216}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ne:588", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1065353216}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("ne:589", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3212836864}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("ne:590", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3212836864}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("ne:591", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1065353216}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ne:592", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1065353216}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("ne:593", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3212836864}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ne:594", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3212836864}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("ne:595", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1065353216}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ne:596", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1065353216}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("ne:597", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3212836864}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ne:598", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3212836864}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("ne:599", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1065353216}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ne:600", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1065353216}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("ne:601", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3212836864}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ne:602", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3212836864}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("ne:603", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1065353216}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ne:604", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1065353216}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("ne:605", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3212836864}, {wa.F32, 4290772992}}, arg{wa.I32, 1})
	})
	t.Run("ne:606", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3212836864}, {wa.F32, 4288675840}}, arg{wa.I32, 1})
	})
	t.Run("ne:607", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3212836864}, {wa.F32, 2143289344}}, arg{wa.I32, 1})
	})
	t.Run("ne:608", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3212836864}, {wa.F32, 2141192192}}, arg{wa.I32, 1})
	})
	t.Run("ne:609", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1065353216}, {wa.F32, 4290772992}}, arg{wa.I32, 1})
	})
	t.Run("ne:610", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1065353216}, {wa.F32, 4288675840}}, arg{wa.I32, 1})
	})
	t.Run("ne:611", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1065353216}, {wa.F32, 2143289344}}, arg{wa.I32, 1})
	})
	t.Run("ne:612", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1065353216}, {wa.F32, 2141192192}}, arg{wa.I32, 1})
	})
	t.Run("ne:613", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3234402267}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ne:614", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3234402267}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:615", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1086918619}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ne:616", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1086918619}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:617", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3234402267}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ne:618", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3234402267}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:619", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1086918619}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ne:620", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1086918619}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:621", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3234402267}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ne:622", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3234402267}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("ne:623", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1086918619}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ne:624", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1086918619}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("ne:625", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3234402267}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ne:626", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3234402267}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("ne:627", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1086918619}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ne:628", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1086918619}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("ne:629", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3234402267}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ne:630", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3234402267}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("ne:631", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1086918619}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ne:632", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1086918619}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("ne:633", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3234402267}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("ne:634", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3234402267}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("ne:635", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1086918619}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ne:636", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1086918619}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("ne:637", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3234402267}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ne:638", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3234402267}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("ne:639", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1086918619}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ne:640", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1086918619}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("ne:641", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3234402267}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ne:642", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3234402267}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("ne:643", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1086918619}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ne:644", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1086918619}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("ne:645", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3234402267}, {wa.F32, 4290772992}}, arg{wa.I32, 1})
	})
	t.Run("ne:646", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3234402267}, {wa.F32, 4288675840}}, arg{wa.I32, 1})
	})
	t.Run("ne:647", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3234402267}, {wa.F32, 2143289344}}, arg{wa.I32, 1})
	})
	t.Run("ne:648", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 3234402267}, {wa.F32, 2141192192}}, arg{wa.I32, 1})
	})
	t.Run("ne:649", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1086918619}, {wa.F32, 4290772992}}, arg{wa.I32, 1})
	})
	t.Run("ne:650", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1086918619}, {wa.F32, 4288675840}}, arg{wa.I32, 1})
	})
	t.Run("ne:651", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1086918619}, {wa.F32, 2143289344}}, arg{wa.I32, 1})
	})
	t.Run("ne:652", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 1086918619}, {wa.F32, 2141192192}}, arg{wa.I32, 1})
	})
	t.Run("ne:653", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578687}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ne:654", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578687}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:655", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095039}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ne:656", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095039}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:657", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578687}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ne:658", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578687}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:659", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095039}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ne:660", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095039}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:661", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578687}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ne:662", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578687}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("ne:663", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095039}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ne:664", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095039}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("ne:665", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578687}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ne:666", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578687}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("ne:667", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095039}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ne:668", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095039}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("ne:669", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578687}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ne:670", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578687}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("ne:671", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095039}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ne:672", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095039}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("ne:673", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578687}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ne:674", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578687}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("ne:675", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095039}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ne:676", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095039}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("ne:677", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578687}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("ne:678", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578687}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("ne:679", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095039}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ne:680", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095039}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("ne:681", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578687}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ne:682", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578687}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("ne:683", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095039}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ne:684", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095039}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("ne:685", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578687}, {wa.F32, 4290772992}}, arg{wa.I32, 1})
	})
	t.Run("ne:686", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578687}, {wa.F32, 4288675840}}, arg{wa.I32, 1})
	})
	t.Run("ne:687", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578687}, {wa.F32, 2143289344}}, arg{wa.I32, 1})
	})
	t.Run("ne:688", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578687}, {wa.F32, 2141192192}}, arg{wa.I32, 1})
	})
	t.Run("ne:689", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095039}, {wa.F32, 4290772992}}, arg{wa.I32, 1})
	})
	t.Run("ne:690", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095039}, {wa.F32, 4288675840}}, arg{wa.I32, 1})
	})
	t.Run("ne:691", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095039}, {wa.F32, 2143289344}}, arg{wa.I32, 1})
	})
	t.Run("ne:692", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095039}, {wa.F32, 2141192192}}, arg{wa.I32, 1})
	})
	t.Run("ne:693", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578688}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ne:694", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578688}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:695", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095040}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ne:696", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095040}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:697", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578688}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ne:698", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578688}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:699", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095040}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ne:700", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095040}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:701", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578688}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ne:702", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578688}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("ne:703", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095040}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ne:704", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095040}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("ne:705", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578688}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ne:706", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578688}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("ne:707", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095040}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ne:708", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095040}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("ne:709", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578688}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ne:710", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578688}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("ne:711", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095040}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ne:712", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095040}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("ne:713", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578688}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ne:714", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578688}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("ne:715", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095040}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ne:716", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095040}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("ne:717", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578688}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ne:718", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578688}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("ne:719", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095040}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ne:720", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095040}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("ne:721", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578688}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("ne:722", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578688}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("ne:723", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095040}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ne:724", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095040}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("ne:725", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578688}, {wa.F32, 4290772992}}, arg{wa.I32, 1})
	})
	t.Run("ne:726", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578688}, {wa.F32, 4288675840}}, arg{wa.I32, 1})
	})
	t.Run("ne:727", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578688}, {wa.F32, 2143289344}}, arg{wa.I32, 1})
	})
	t.Run("ne:728", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4286578688}, {wa.F32, 2141192192}}, arg{wa.I32, 1})
	})
	t.Run("ne:729", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095040}, {wa.F32, 4290772992}}, arg{wa.I32, 1})
	})
	t.Run("ne:730", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095040}, {wa.F32, 4288675840}}, arg{wa.I32, 1})
	})
	t.Run("ne:731", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095040}, {wa.F32, 2143289344}}, arg{wa.I32, 1})
	})
	t.Run("ne:732", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2139095040}, {wa.F32, 2141192192}}, arg{wa.I32, 1})
	})
	t.Run("ne:733", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4290772992}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ne:734", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4288675840}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ne:735", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4290772992}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:736", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4288675840}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:737", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2143289344}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ne:738", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2141192192}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ne:739", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2143289344}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:740", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2141192192}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:741", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4290772992}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ne:742", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4288675840}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ne:743", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4290772992}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:744", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4288675840}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:745", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2143289344}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ne:746", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2141192192}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ne:747", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2143289344}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:748", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2141192192}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:749", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4290772992}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ne:750", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4288675840}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ne:751", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4290772992}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("ne:752", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4288675840}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("ne:753", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2143289344}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ne:754", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2141192192}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ne:755", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2143289344}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("ne:756", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2141192192}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("ne:757", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4290772992}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ne:758", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4288675840}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ne:759", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4290772992}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("ne:760", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4288675840}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("ne:761", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2143289344}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ne:762", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2141192192}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ne:763", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2143289344}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("ne:764", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2141192192}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("ne:765", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4290772992}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ne:766", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4288675840}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ne:767", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4290772992}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("ne:768", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4288675840}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("ne:769", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2143289344}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ne:770", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2141192192}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ne:771", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2143289344}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("ne:772", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2141192192}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("ne:773", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4290772992}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ne:774", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4288675840}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ne:775", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4290772992}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("ne:776", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4288675840}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("ne:777", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2143289344}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ne:778", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2141192192}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ne:779", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2143289344}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("ne:780", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2141192192}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("ne:781", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4290772992}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ne:782", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4288675840}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ne:783", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4290772992}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("ne:784", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4288675840}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("ne:785", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2143289344}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ne:786", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2141192192}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ne:787", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2143289344}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("ne:788", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2141192192}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("ne:789", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4290772992}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ne:790", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4288675840}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ne:791", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4290772992}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("ne:792", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4288675840}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("ne:793", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2143289344}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ne:794", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2141192192}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ne:795", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2143289344}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("ne:796", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2141192192}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("ne:797", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4290772992}, {wa.F32, 4290772992}}, arg{wa.I32, 1})
	})
	t.Run("ne:798", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4288675840}, {wa.F32, 4290772992}}, arg{wa.I32, 1})
	})
	t.Run("ne:799", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4290772992}, {wa.F32, 4288675840}}, arg{wa.I32, 1})
	})
	t.Run("ne:800", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4288675840}, {wa.F32, 4288675840}}, arg{wa.I32, 1})
	})
	t.Run("ne:801", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4290772992}, {wa.F32, 2143289344}}, arg{wa.I32, 1})
	})
	t.Run("ne:802", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4288675840}, {wa.F32, 2143289344}}, arg{wa.I32, 1})
	})
	t.Run("ne:803", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4290772992}, {wa.F32, 2141192192}}, arg{wa.I32, 1})
	})
	t.Run("ne:804", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 4288675840}, {wa.F32, 2141192192}}, arg{wa.I32, 1})
	})
	t.Run("ne:805", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2143289344}, {wa.F32, 4290772992}}, arg{wa.I32, 1})
	})
	t.Run("ne:806", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2141192192}, {wa.F32, 4290772992}}, arg{wa.I32, 1})
	})
	t.Run("ne:807", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2143289344}, {wa.F32, 4288675840}}, arg{wa.I32, 1})
	})
	t.Run("ne:808", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2141192192}, {wa.F32, 4288675840}}, arg{wa.I32, 1})
	})
	t.Run("ne:809", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2143289344}, {wa.F32, 2143289344}}, arg{wa.I32, 1})
	})
	t.Run("ne:810", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2141192192}, {wa.F32, 2143289344}}, arg{wa.I32, 1})
	})
	t.Run("ne:811", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2143289344}, {wa.F32, 2141192192}}, arg{wa.I32, 1})
	})
	t.Run("ne:812", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F32, 2141192192}, {wa.F32, 2141192192}}, arg{wa.I32, 1})
	})
	t.Run("lt:813", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("lt:814", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483648}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("lt:815", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 0}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("lt:816", func(t *testing.T) { x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 0}, {wa.F32, 0}}, arg{wa.I32, 0}) })
	t.Run("lt:817", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("lt:818", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483648}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("lt:819", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 0}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("lt:820", func(t *testing.T) { x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 0}, {wa.F32, 1}}, arg{wa.I32, 1}) })
	t.Run("lt:821", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483648}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("lt:822", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483648}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("lt:823", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 0}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("lt:824", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 0}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("lt:825", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483648}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("lt:826", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483648}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("lt:827", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 0}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("lt:828", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 0}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("lt:829", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483648}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("lt:830", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483648}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("lt:831", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 0}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("lt:832", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 0}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("lt:833", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483648}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("lt:834", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483648}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("lt:835", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 0}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("lt:836", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 0}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("lt:837", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483648}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("lt:838", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483648}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("lt:839", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 0}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("lt:840", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 0}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("lt:841", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483648}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("lt:842", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483648}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("lt:843", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 0}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("lt:844", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 0}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("lt:845", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483648}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("lt:846", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483648}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("lt:847", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483648}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("lt:848", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483648}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("lt:849", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 0}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("lt:850", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 0}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("lt:851", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 0}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("lt:852", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 0}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("lt:853", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483649}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("lt:854", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483649}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("lt:855", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("lt:856", func(t *testing.T) { x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1}, {wa.F32, 0}}, arg{wa.I32, 0}) })
	t.Run("lt:857", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483649}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("lt:858", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483649}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("lt:859", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("lt:860", func(t *testing.T) { x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1}, {wa.F32, 1}}, arg{wa.I32, 0}) })
	t.Run("lt:861", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483649}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("lt:862", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483649}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("lt:863", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("lt:864", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("lt:865", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483649}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("lt:866", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483649}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("lt:867", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("lt:868", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("lt:869", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483649}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("lt:870", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483649}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("lt:871", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("lt:872", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("lt:873", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483649}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("lt:874", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483649}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("lt:875", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("lt:876", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("lt:877", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483649}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("lt:878", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483649}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("lt:879", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("lt:880", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("lt:881", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483649}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("lt:882", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483649}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("lt:883", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("lt:884", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("lt:885", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483649}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("lt:886", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483649}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("lt:887", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483649}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("lt:888", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2147483649}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("lt:889", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("lt:890", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("lt:891", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("lt:892", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("lt:893", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2155872256}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("lt:894", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2155872256}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("lt:895", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 8388608}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("lt:896", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 8388608}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("lt:897", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2155872256}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("lt:898", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2155872256}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("lt:899", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 8388608}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("lt:900", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 8388608}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("lt:901", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2155872256}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("lt:902", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2155872256}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("lt:903", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 8388608}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("lt:904", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 8388608}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("lt:905", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2155872256}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("lt:906", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2155872256}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("lt:907", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 8388608}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("lt:908", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 8388608}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("lt:909", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2155872256}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("lt:910", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2155872256}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("lt:911", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 8388608}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("lt:912", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 8388608}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("lt:913", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2155872256}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("lt:914", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2155872256}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("lt:915", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 8388608}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("lt:916", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 8388608}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("lt:917", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2155872256}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("lt:918", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2155872256}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("lt:919", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 8388608}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("lt:920", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 8388608}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("lt:921", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2155872256}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("lt:922", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2155872256}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("lt:923", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 8388608}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("lt:924", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 8388608}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("lt:925", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2155872256}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("lt:926", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2155872256}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("lt:927", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2155872256}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("lt:928", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2155872256}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("lt:929", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 8388608}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("lt:930", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 8388608}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("lt:931", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 8388608}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("lt:932", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 8388608}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("lt:933", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3204448256}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("lt:934", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3204448256}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("lt:935", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1056964608}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("lt:936", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1056964608}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("lt:937", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3204448256}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("lt:938", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3204448256}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("lt:939", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1056964608}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("lt:940", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1056964608}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("lt:941", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3204448256}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("lt:942", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3204448256}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("lt:943", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1056964608}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("lt:944", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1056964608}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("lt:945", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3204448256}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("lt:946", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3204448256}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("lt:947", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1056964608}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("lt:948", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1056964608}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("lt:949", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3204448256}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("lt:950", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3204448256}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("lt:951", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1056964608}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("lt:952", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1056964608}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("lt:953", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3204448256}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("lt:954", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3204448256}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("lt:955", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1056964608}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("lt:956", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1056964608}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("lt:957", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3204448256}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("lt:958", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3204448256}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("lt:959", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1056964608}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("lt:960", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1056964608}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("lt:961", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3204448256}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("lt:962", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3204448256}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("lt:963", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1056964608}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("lt:964", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1056964608}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("lt:965", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3204448256}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("lt:966", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3204448256}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("lt:967", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3204448256}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("lt:968", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3204448256}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("lt:969", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1056964608}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("lt:970", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1056964608}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("lt:971", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1056964608}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("lt:972", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1056964608}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("lt:973", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3212836864}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("lt:974", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3212836864}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("lt:975", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1065353216}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("lt:976", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1065353216}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("lt:977", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3212836864}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("lt:978", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3212836864}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("lt:979", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1065353216}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("lt:980", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1065353216}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("lt:981", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3212836864}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("lt:982", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3212836864}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("lt:983", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1065353216}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("lt:984", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1065353216}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("lt:985", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3212836864}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("lt:986", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3212836864}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("lt:987", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1065353216}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("lt:988", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1065353216}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("lt:989", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3212836864}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("lt:990", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3212836864}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("lt:991", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1065353216}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("lt:992", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1065353216}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("lt:993", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3212836864}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("lt:994", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3212836864}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("lt:995", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1065353216}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("lt:996", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1065353216}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("lt:997", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3212836864}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("lt:998", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3212836864}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("lt:999", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1065353216}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("lt:1000", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1065353216}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("lt:1001", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3212836864}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("lt:1002", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3212836864}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("lt:1003", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1065353216}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("lt:1004", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1065353216}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("lt:1005", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3212836864}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("lt:1006", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3212836864}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("lt:1007", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3212836864}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("lt:1008", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3212836864}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("lt:1009", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1065353216}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("lt:1010", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1065353216}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("lt:1011", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1065353216}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("lt:1012", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1065353216}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("lt:1013", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3234402267}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("lt:1014", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3234402267}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("lt:1015", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1086918619}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("lt:1016", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1086918619}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("lt:1017", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3234402267}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("lt:1018", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3234402267}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("lt:1019", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1086918619}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("lt:1020", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1086918619}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("lt:1021", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3234402267}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("lt:1022", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3234402267}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("lt:1023", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1086918619}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("lt:1024", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1086918619}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("lt:1025", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3234402267}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("lt:1026", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3234402267}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("lt:1027", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1086918619}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("lt:1028", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1086918619}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("lt:1029", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3234402267}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("lt:1030", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3234402267}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("lt:1031", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1086918619}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("lt:1032", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1086918619}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("lt:1033", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3234402267}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("lt:1034", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3234402267}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("lt:1035", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1086918619}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("lt:1036", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1086918619}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("lt:1037", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3234402267}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("lt:1038", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3234402267}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("lt:1039", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1086918619}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("lt:1040", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1086918619}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("lt:1041", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3234402267}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("lt:1042", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3234402267}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("lt:1043", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1086918619}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("lt:1044", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1086918619}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("lt:1045", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3234402267}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("lt:1046", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3234402267}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("lt:1047", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3234402267}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("lt:1048", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 3234402267}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("lt:1049", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1086918619}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("lt:1050", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1086918619}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("lt:1051", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1086918619}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("lt:1052", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 1086918619}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("lt:1053", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578687}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("lt:1054", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578687}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("lt:1055", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095039}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("lt:1056", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095039}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("lt:1057", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578687}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("lt:1058", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578687}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("lt:1059", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095039}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("lt:1060", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095039}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("lt:1061", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578687}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("lt:1062", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578687}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("lt:1063", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095039}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("lt:1064", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095039}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("lt:1065", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578687}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("lt:1066", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578687}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("lt:1067", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095039}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("lt:1068", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095039}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("lt:1069", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578687}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("lt:1070", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578687}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("lt:1071", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095039}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("lt:1072", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095039}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("lt:1073", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578687}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("lt:1074", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578687}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("lt:1075", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095039}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("lt:1076", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095039}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("lt:1077", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578687}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("lt:1078", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578687}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("lt:1079", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095039}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("lt:1080", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095039}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("lt:1081", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578687}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("lt:1082", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578687}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("lt:1083", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095039}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("lt:1084", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095039}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("lt:1085", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578687}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("lt:1086", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578687}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("lt:1087", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578687}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("lt:1088", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578687}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("lt:1089", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095039}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("lt:1090", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095039}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("lt:1091", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095039}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("lt:1092", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095039}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("lt:1093", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578688}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("lt:1094", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578688}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("lt:1095", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095040}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("lt:1096", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095040}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("lt:1097", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578688}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("lt:1098", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578688}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("lt:1099", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095040}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("lt:1100", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095040}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("lt:1101", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578688}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("lt:1102", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578688}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("lt:1103", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095040}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("lt:1104", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095040}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("lt:1105", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578688}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("lt:1106", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578688}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("lt:1107", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095040}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("lt:1108", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095040}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("lt:1109", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578688}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("lt:1110", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578688}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("lt:1111", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095040}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("lt:1112", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095040}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("lt:1113", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578688}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("lt:1114", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578688}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("lt:1115", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095040}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("lt:1116", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095040}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("lt:1117", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578688}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("lt:1118", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578688}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("lt:1119", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095040}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("lt:1120", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095040}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("lt:1121", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578688}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("lt:1122", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578688}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("lt:1123", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095040}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("lt:1124", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095040}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("lt:1125", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578688}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("lt:1126", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578688}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("lt:1127", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578688}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("lt:1128", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4286578688}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("lt:1129", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095040}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("lt:1130", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095040}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("lt:1131", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095040}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("lt:1132", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2139095040}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("lt:1133", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4290772992}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("lt:1134", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4288675840}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("lt:1135", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4290772992}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("lt:1136", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4288675840}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("lt:1137", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2143289344}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("lt:1138", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2141192192}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("lt:1139", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2143289344}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("lt:1140", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2141192192}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("lt:1141", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4290772992}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("lt:1142", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4288675840}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("lt:1143", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4290772992}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("lt:1144", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4288675840}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("lt:1145", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2143289344}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("lt:1146", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2141192192}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("lt:1147", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2143289344}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("lt:1148", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2141192192}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("lt:1149", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4290772992}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("lt:1150", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4288675840}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("lt:1151", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4290772992}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("lt:1152", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4288675840}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("lt:1153", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2143289344}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("lt:1154", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2141192192}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("lt:1155", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2143289344}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("lt:1156", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2141192192}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("lt:1157", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4290772992}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("lt:1158", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4288675840}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("lt:1159", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4290772992}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("lt:1160", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4288675840}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("lt:1161", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2143289344}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("lt:1162", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2141192192}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("lt:1163", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2143289344}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("lt:1164", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2141192192}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("lt:1165", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4290772992}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("lt:1166", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4288675840}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("lt:1167", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4290772992}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("lt:1168", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4288675840}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("lt:1169", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2143289344}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("lt:1170", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2141192192}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("lt:1171", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2143289344}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("lt:1172", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2141192192}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("lt:1173", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4290772992}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("lt:1174", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4288675840}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("lt:1175", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4290772992}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("lt:1176", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4288675840}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("lt:1177", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2143289344}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("lt:1178", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2141192192}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("lt:1179", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2143289344}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("lt:1180", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2141192192}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("lt:1181", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4290772992}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("lt:1182", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4288675840}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("lt:1183", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4290772992}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("lt:1184", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4288675840}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("lt:1185", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2143289344}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("lt:1186", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2141192192}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("lt:1187", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2143289344}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("lt:1188", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2141192192}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("lt:1189", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4290772992}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("lt:1190", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4288675840}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("lt:1191", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4290772992}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("lt:1192", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4288675840}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("lt:1193", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2143289344}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("lt:1194", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2141192192}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("lt:1195", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2143289344}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("lt:1196", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2141192192}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("lt:1197", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4290772992}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("lt:1198", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4288675840}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("lt:1199", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4290772992}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("lt:1200", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4288675840}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("lt:1201", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4290772992}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("lt:1202", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4288675840}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("lt:1203", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4290772992}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("lt:1204", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 4288675840}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("lt:1205", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2143289344}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("lt:1206", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2141192192}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("lt:1207", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2143289344}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("lt:1208", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2141192192}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("lt:1209", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2143289344}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("lt:1210", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2141192192}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("lt:1211", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2143289344}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("lt:1212", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F32, 2141192192}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("le:1213", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("le:1214", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483648}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("le:1215", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 0}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("le:1216", func(t *testing.T) { x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 0}, {wa.F32, 0}}, arg{wa.I32, 1}) })
	t.Run("le:1217", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("le:1218", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483648}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("le:1219", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 0}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("le:1220", func(t *testing.T) { x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 0}, {wa.F32, 1}}, arg{wa.I32, 1}) })
	t.Run("le:1221", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483648}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("le:1222", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483648}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("le:1223", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 0}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("le:1224", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 0}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("le:1225", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483648}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("le:1226", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483648}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("le:1227", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 0}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("le:1228", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 0}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("le:1229", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483648}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("le:1230", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483648}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("le:1231", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 0}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("le:1232", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 0}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("le:1233", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483648}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("le:1234", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483648}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("le:1235", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 0}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("le:1236", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 0}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("le:1237", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483648}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("le:1238", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483648}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("le:1239", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 0}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("le:1240", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 0}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("le:1241", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483648}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("le:1242", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483648}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("le:1243", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 0}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("le:1244", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 0}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("le:1245", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483648}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("le:1246", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483648}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("le:1247", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483648}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("le:1248", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483648}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("le:1249", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 0}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("le:1250", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 0}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("le:1251", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 0}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("le:1252", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 0}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("le:1253", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483649}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("le:1254", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483649}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("le:1255", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("le:1256", func(t *testing.T) { x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1}, {wa.F32, 0}}, arg{wa.I32, 0}) })
	t.Run("le:1257", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483649}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("le:1258", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483649}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("le:1259", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("le:1260", func(t *testing.T) { x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1}, {wa.F32, 1}}, arg{wa.I32, 1}) })
	t.Run("le:1261", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483649}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("le:1262", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483649}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("le:1263", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("le:1264", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("le:1265", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483649}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("le:1266", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483649}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("le:1267", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("le:1268", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("le:1269", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483649}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("le:1270", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483649}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("le:1271", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("le:1272", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("le:1273", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483649}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("le:1274", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483649}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("le:1275", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("le:1276", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("le:1277", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483649}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("le:1278", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483649}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("le:1279", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("le:1280", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("le:1281", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483649}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("le:1282", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483649}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("le:1283", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("le:1284", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("le:1285", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483649}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("le:1286", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483649}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("le:1287", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483649}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("le:1288", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2147483649}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("le:1289", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("le:1290", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("le:1291", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("le:1292", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("le:1293", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2155872256}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("le:1294", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2155872256}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("le:1295", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 8388608}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("le:1296", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 8388608}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("le:1297", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2155872256}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("le:1298", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2155872256}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("le:1299", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 8388608}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("le:1300", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 8388608}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("le:1301", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2155872256}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("le:1302", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2155872256}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("le:1303", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 8388608}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("le:1304", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 8388608}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("le:1305", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2155872256}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("le:1306", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2155872256}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("le:1307", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 8388608}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("le:1308", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 8388608}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("le:1309", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2155872256}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("le:1310", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2155872256}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("le:1311", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 8388608}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("le:1312", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 8388608}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("le:1313", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2155872256}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("le:1314", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2155872256}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("le:1315", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 8388608}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("le:1316", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 8388608}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("le:1317", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2155872256}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("le:1318", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2155872256}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("le:1319", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 8388608}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("le:1320", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 8388608}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("le:1321", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2155872256}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("le:1322", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2155872256}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("le:1323", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 8388608}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("le:1324", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 8388608}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("le:1325", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2155872256}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("le:1326", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2155872256}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("le:1327", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2155872256}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("le:1328", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2155872256}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("le:1329", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 8388608}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("le:1330", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 8388608}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("le:1331", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 8388608}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("le:1332", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 8388608}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("le:1333", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3204448256}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("le:1334", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3204448256}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("le:1335", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1056964608}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("le:1336", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1056964608}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("le:1337", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3204448256}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("le:1338", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3204448256}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("le:1339", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1056964608}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("le:1340", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1056964608}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("le:1341", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3204448256}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("le:1342", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3204448256}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("le:1343", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1056964608}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("le:1344", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1056964608}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("le:1345", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3204448256}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("le:1346", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3204448256}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("le:1347", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1056964608}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("le:1348", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1056964608}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("le:1349", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3204448256}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("le:1350", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3204448256}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("le:1351", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1056964608}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("le:1352", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1056964608}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("le:1353", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3204448256}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("le:1354", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3204448256}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("le:1355", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1056964608}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("le:1356", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1056964608}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("le:1357", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3204448256}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("le:1358", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3204448256}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("le:1359", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1056964608}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("le:1360", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1056964608}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("le:1361", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3204448256}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("le:1362", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3204448256}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("le:1363", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1056964608}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("le:1364", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1056964608}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("le:1365", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3204448256}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("le:1366", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3204448256}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("le:1367", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3204448256}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("le:1368", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3204448256}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("le:1369", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1056964608}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("le:1370", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1056964608}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("le:1371", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1056964608}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("le:1372", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1056964608}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("le:1373", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3212836864}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("le:1374", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3212836864}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("le:1375", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1065353216}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("le:1376", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1065353216}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("le:1377", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3212836864}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("le:1378", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3212836864}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("le:1379", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1065353216}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("le:1380", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1065353216}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("le:1381", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3212836864}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("le:1382", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3212836864}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("le:1383", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1065353216}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("le:1384", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1065353216}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("le:1385", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3212836864}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("le:1386", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3212836864}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("le:1387", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1065353216}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("le:1388", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1065353216}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("le:1389", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3212836864}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("le:1390", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3212836864}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("le:1391", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1065353216}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("le:1392", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1065353216}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("le:1393", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3212836864}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("le:1394", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3212836864}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("le:1395", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1065353216}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("le:1396", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1065353216}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("le:1397", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3212836864}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("le:1398", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3212836864}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("le:1399", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1065353216}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("le:1400", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1065353216}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("le:1401", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3212836864}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("le:1402", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3212836864}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("le:1403", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1065353216}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("le:1404", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1065353216}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("le:1405", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3212836864}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("le:1406", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3212836864}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("le:1407", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3212836864}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("le:1408", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3212836864}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("le:1409", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1065353216}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("le:1410", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1065353216}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("le:1411", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1065353216}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("le:1412", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1065353216}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("le:1413", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3234402267}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("le:1414", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3234402267}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("le:1415", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1086918619}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("le:1416", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1086918619}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("le:1417", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3234402267}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("le:1418", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3234402267}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("le:1419", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1086918619}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("le:1420", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1086918619}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("le:1421", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3234402267}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("le:1422", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3234402267}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("le:1423", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1086918619}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("le:1424", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1086918619}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("le:1425", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3234402267}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("le:1426", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3234402267}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("le:1427", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1086918619}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("le:1428", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1086918619}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("le:1429", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3234402267}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("le:1430", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3234402267}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("le:1431", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1086918619}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("le:1432", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1086918619}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("le:1433", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3234402267}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("le:1434", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3234402267}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("le:1435", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1086918619}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("le:1436", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1086918619}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("le:1437", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3234402267}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("le:1438", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3234402267}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("le:1439", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1086918619}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("le:1440", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1086918619}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("le:1441", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3234402267}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("le:1442", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3234402267}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("le:1443", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1086918619}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("le:1444", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1086918619}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("le:1445", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3234402267}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("le:1446", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3234402267}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("le:1447", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3234402267}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("le:1448", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 3234402267}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("le:1449", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1086918619}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("le:1450", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1086918619}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("le:1451", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1086918619}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("le:1452", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 1086918619}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("le:1453", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578687}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("le:1454", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578687}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("le:1455", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095039}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("le:1456", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095039}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("le:1457", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578687}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("le:1458", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578687}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("le:1459", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095039}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("le:1460", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095039}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("le:1461", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578687}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("le:1462", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578687}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("le:1463", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095039}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("le:1464", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095039}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("le:1465", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578687}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("le:1466", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578687}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("le:1467", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095039}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("le:1468", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095039}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("le:1469", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578687}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("le:1470", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578687}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("le:1471", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095039}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("le:1472", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095039}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("le:1473", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578687}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("le:1474", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578687}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("le:1475", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095039}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("le:1476", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095039}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("le:1477", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578687}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("le:1478", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578687}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("le:1479", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095039}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("le:1480", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095039}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("le:1481", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578687}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("le:1482", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578687}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("le:1483", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095039}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("le:1484", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095039}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("le:1485", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578687}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("le:1486", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578687}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("le:1487", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578687}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("le:1488", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578687}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("le:1489", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095039}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("le:1490", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095039}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("le:1491", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095039}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("le:1492", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095039}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("le:1493", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578688}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("le:1494", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578688}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("le:1495", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095040}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("le:1496", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095040}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("le:1497", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578688}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("le:1498", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578688}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("le:1499", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095040}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("le:1500", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095040}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("le:1501", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578688}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("le:1502", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578688}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("le:1503", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095040}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("le:1504", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095040}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("le:1505", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578688}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("le:1506", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578688}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("le:1507", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095040}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("le:1508", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095040}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("le:1509", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578688}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("le:1510", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578688}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("le:1511", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095040}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("le:1512", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095040}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("le:1513", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578688}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("le:1514", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578688}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("le:1515", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095040}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("le:1516", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095040}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("le:1517", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578688}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("le:1518", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578688}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("le:1519", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095040}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("le:1520", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095040}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("le:1521", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578688}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("le:1522", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578688}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("le:1523", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095040}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("le:1524", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095040}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("le:1525", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578688}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("le:1526", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578688}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("le:1527", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578688}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("le:1528", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4286578688}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("le:1529", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095040}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("le:1530", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095040}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("le:1531", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095040}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("le:1532", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2139095040}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("le:1533", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4290772992}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("le:1534", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4288675840}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("le:1535", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4290772992}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("le:1536", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4288675840}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("le:1537", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2143289344}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("le:1538", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2141192192}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("le:1539", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2143289344}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("le:1540", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2141192192}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("le:1541", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4290772992}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("le:1542", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4288675840}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("le:1543", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4290772992}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("le:1544", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4288675840}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("le:1545", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2143289344}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("le:1546", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2141192192}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("le:1547", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2143289344}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("le:1548", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2141192192}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("le:1549", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4290772992}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("le:1550", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4288675840}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("le:1551", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4290772992}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("le:1552", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4288675840}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("le:1553", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2143289344}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("le:1554", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2141192192}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("le:1555", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2143289344}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("le:1556", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2141192192}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("le:1557", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4290772992}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("le:1558", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4288675840}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("le:1559", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4290772992}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("le:1560", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4288675840}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("le:1561", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2143289344}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("le:1562", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2141192192}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("le:1563", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2143289344}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("le:1564", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2141192192}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("le:1565", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4290772992}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("le:1566", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4288675840}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("le:1567", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4290772992}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("le:1568", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4288675840}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("le:1569", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2143289344}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("le:1570", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2141192192}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("le:1571", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2143289344}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("le:1572", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2141192192}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("le:1573", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4290772992}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("le:1574", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4288675840}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("le:1575", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4290772992}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("le:1576", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4288675840}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("le:1577", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2143289344}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("le:1578", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2141192192}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("le:1579", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2143289344}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("le:1580", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2141192192}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("le:1581", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4290772992}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("le:1582", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4288675840}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("le:1583", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4290772992}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("le:1584", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4288675840}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("le:1585", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2143289344}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("le:1586", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2141192192}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("le:1587", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2143289344}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("le:1588", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2141192192}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("le:1589", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4290772992}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("le:1590", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4288675840}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("le:1591", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4290772992}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("le:1592", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4288675840}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("le:1593", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2143289344}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("le:1594", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2141192192}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("le:1595", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2143289344}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("le:1596", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2141192192}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("le:1597", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4290772992}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("le:1598", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4288675840}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("le:1599", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4290772992}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("le:1600", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4288675840}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("le:1601", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4290772992}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("le:1602", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4288675840}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("le:1603", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4290772992}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("le:1604", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 4288675840}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("le:1605", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2143289344}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("le:1606", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2141192192}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("le:1607", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2143289344}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("le:1608", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2141192192}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("le:1609", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2143289344}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("le:1610", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2141192192}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("le:1611", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2143289344}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("le:1612", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F32, 2141192192}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("gt:1613", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("gt:1614", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483648}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("gt:1615", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 0}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("gt:1616", func(t *testing.T) { x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 0}, {wa.F32, 0}}, arg{wa.I32, 0}) })
	t.Run("gt:1617", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("gt:1618", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483648}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("gt:1619", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 0}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("gt:1620", func(t *testing.T) { x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 0}, {wa.F32, 1}}, arg{wa.I32, 0}) })
	t.Run("gt:1621", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483648}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("gt:1622", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483648}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1623", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 0}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("gt:1624", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 0}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1625", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483648}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("gt:1626", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483648}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1627", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 0}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("gt:1628", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 0}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1629", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483648}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("gt:1630", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483648}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("gt:1631", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 0}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("gt:1632", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 0}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("gt:1633", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483648}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("gt:1634", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483648}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("gt:1635", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 0}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("gt:1636", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 0}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("gt:1637", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483648}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("gt:1638", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483648}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("gt:1639", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 0}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("gt:1640", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 0}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("gt:1641", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483648}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("gt:1642", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483648}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("gt:1643", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 0}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("gt:1644", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 0}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("gt:1645", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483648}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("gt:1646", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483648}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("gt:1647", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483648}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1648", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483648}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("gt:1649", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 0}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("gt:1650", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 0}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("gt:1651", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 0}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1652", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 0}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("gt:1653", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483649}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("gt:1654", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483649}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("gt:1655", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("gt:1656", func(t *testing.T) { x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1}, {wa.F32, 0}}, arg{wa.I32, 1}) })
	t.Run("gt:1657", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483649}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("gt:1658", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483649}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("gt:1659", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("gt:1660", func(t *testing.T) { x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1}, {wa.F32, 1}}, arg{wa.I32, 0}) })
	t.Run("gt:1661", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483649}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("gt:1662", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483649}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1663", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("gt:1664", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1665", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483649}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("gt:1666", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483649}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1667", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("gt:1668", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1669", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483649}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("gt:1670", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483649}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("gt:1671", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("gt:1672", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("gt:1673", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483649}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("gt:1674", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483649}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("gt:1675", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("gt:1676", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("gt:1677", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483649}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("gt:1678", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483649}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("gt:1679", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("gt:1680", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("gt:1681", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483649}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("gt:1682", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483649}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("gt:1683", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("gt:1684", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("gt:1685", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483649}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("gt:1686", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483649}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("gt:1687", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483649}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1688", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2147483649}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("gt:1689", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("gt:1690", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("gt:1691", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1692", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("gt:1693", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2155872256}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("gt:1694", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2155872256}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("gt:1695", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 8388608}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("gt:1696", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 8388608}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("gt:1697", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2155872256}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("gt:1698", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2155872256}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("gt:1699", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 8388608}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("gt:1700", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 8388608}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("gt:1701", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2155872256}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("gt:1702", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2155872256}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1703", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 8388608}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("gt:1704", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 8388608}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1705", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2155872256}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("gt:1706", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2155872256}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1707", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 8388608}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("gt:1708", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 8388608}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1709", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2155872256}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("gt:1710", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2155872256}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("gt:1711", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 8388608}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("gt:1712", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 8388608}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("gt:1713", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2155872256}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("gt:1714", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2155872256}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("gt:1715", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 8388608}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("gt:1716", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 8388608}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("gt:1717", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2155872256}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("gt:1718", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2155872256}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("gt:1719", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 8388608}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("gt:1720", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 8388608}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("gt:1721", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2155872256}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("gt:1722", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2155872256}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("gt:1723", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 8388608}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("gt:1724", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 8388608}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("gt:1725", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2155872256}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("gt:1726", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2155872256}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("gt:1727", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2155872256}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1728", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2155872256}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("gt:1729", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 8388608}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("gt:1730", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 8388608}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("gt:1731", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 8388608}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1732", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 8388608}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("gt:1733", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3204448256}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("gt:1734", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3204448256}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("gt:1735", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1056964608}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("gt:1736", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1056964608}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("gt:1737", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3204448256}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("gt:1738", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3204448256}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("gt:1739", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1056964608}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("gt:1740", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1056964608}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("gt:1741", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3204448256}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("gt:1742", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3204448256}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1743", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1056964608}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("gt:1744", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1056964608}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("gt:1745", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3204448256}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("gt:1746", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3204448256}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1747", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1056964608}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("gt:1748", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1056964608}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1749", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3204448256}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("gt:1750", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3204448256}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("gt:1751", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1056964608}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("gt:1752", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1056964608}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("gt:1753", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3204448256}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("gt:1754", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3204448256}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("gt:1755", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1056964608}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("gt:1756", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1056964608}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("gt:1757", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3204448256}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("gt:1758", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3204448256}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("gt:1759", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1056964608}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("gt:1760", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1056964608}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("gt:1761", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3204448256}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("gt:1762", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3204448256}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("gt:1763", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1056964608}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("gt:1764", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1056964608}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("gt:1765", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3204448256}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("gt:1766", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3204448256}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("gt:1767", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3204448256}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1768", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3204448256}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("gt:1769", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1056964608}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("gt:1770", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1056964608}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("gt:1771", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1056964608}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1772", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1056964608}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("gt:1773", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3212836864}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("gt:1774", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3212836864}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("gt:1775", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1065353216}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("gt:1776", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1065353216}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("gt:1777", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3212836864}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("gt:1778", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3212836864}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("gt:1779", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1065353216}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("gt:1780", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1065353216}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("gt:1781", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3212836864}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("gt:1782", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3212836864}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1783", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1065353216}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("gt:1784", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1065353216}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("gt:1785", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3212836864}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("gt:1786", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3212836864}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1787", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1065353216}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("gt:1788", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1065353216}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("gt:1789", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3212836864}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("gt:1790", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3212836864}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("gt:1791", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1065353216}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("gt:1792", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1065353216}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("gt:1793", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3212836864}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("gt:1794", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3212836864}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("gt:1795", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1065353216}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("gt:1796", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1065353216}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("gt:1797", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3212836864}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("gt:1798", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3212836864}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("gt:1799", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1065353216}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("gt:1800", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1065353216}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("gt:1801", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3212836864}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("gt:1802", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3212836864}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("gt:1803", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1065353216}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("gt:1804", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1065353216}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("gt:1805", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3212836864}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("gt:1806", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3212836864}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("gt:1807", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3212836864}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1808", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3212836864}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("gt:1809", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1065353216}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("gt:1810", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1065353216}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("gt:1811", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1065353216}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1812", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1065353216}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("gt:1813", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3234402267}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("gt:1814", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3234402267}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("gt:1815", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1086918619}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("gt:1816", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1086918619}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("gt:1817", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3234402267}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("gt:1818", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3234402267}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("gt:1819", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1086918619}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("gt:1820", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1086918619}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("gt:1821", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3234402267}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("gt:1822", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3234402267}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1823", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1086918619}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("gt:1824", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1086918619}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("gt:1825", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3234402267}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("gt:1826", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3234402267}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1827", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1086918619}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("gt:1828", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1086918619}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("gt:1829", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3234402267}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("gt:1830", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3234402267}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("gt:1831", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1086918619}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("gt:1832", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1086918619}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("gt:1833", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3234402267}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("gt:1834", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3234402267}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("gt:1835", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1086918619}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("gt:1836", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1086918619}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("gt:1837", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3234402267}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("gt:1838", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3234402267}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("gt:1839", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1086918619}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("gt:1840", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1086918619}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("gt:1841", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3234402267}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("gt:1842", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3234402267}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("gt:1843", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1086918619}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("gt:1844", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1086918619}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("gt:1845", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3234402267}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("gt:1846", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3234402267}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("gt:1847", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3234402267}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1848", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 3234402267}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("gt:1849", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1086918619}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("gt:1850", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1086918619}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("gt:1851", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1086918619}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1852", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 1086918619}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("gt:1853", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578687}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("gt:1854", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578687}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("gt:1855", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095039}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("gt:1856", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095039}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("gt:1857", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578687}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("gt:1858", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578687}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("gt:1859", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095039}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("gt:1860", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095039}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("gt:1861", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578687}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("gt:1862", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578687}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1863", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095039}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("gt:1864", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095039}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("gt:1865", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578687}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("gt:1866", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578687}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1867", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095039}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("gt:1868", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095039}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("gt:1869", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578687}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("gt:1870", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578687}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("gt:1871", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095039}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("gt:1872", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095039}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("gt:1873", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578687}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("gt:1874", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578687}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("gt:1875", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095039}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("gt:1876", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095039}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("gt:1877", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578687}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("gt:1878", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578687}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("gt:1879", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095039}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("gt:1880", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095039}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("gt:1881", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578687}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("gt:1882", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578687}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("gt:1883", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095039}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("gt:1884", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095039}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("gt:1885", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578687}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("gt:1886", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578687}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("gt:1887", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578687}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1888", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578687}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("gt:1889", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095039}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("gt:1890", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095039}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("gt:1891", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095039}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1892", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095039}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("gt:1893", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578688}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("gt:1894", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578688}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("gt:1895", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095040}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("gt:1896", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095040}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("gt:1897", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578688}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("gt:1898", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578688}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("gt:1899", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095040}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("gt:1900", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095040}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("gt:1901", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578688}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("gt:1902", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578688}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1903", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095040}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("gt:1904", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095040}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("gt:1905", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578688}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("gt:1906", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578688}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1907", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095040}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("gt:1908", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095040}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("gt:1909", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578688}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("gt:1910", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578688}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("gt:1911", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095040}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("gt:1912", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095040}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("gt:1913", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578688}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("gt:1914", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578688}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("gt:1915", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095040}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("gt:1916", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095040}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("gt:1917", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578688}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("gt:1918", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578688}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("gt:1919", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095040}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("gt:1920", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095040}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("gt:1921", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578688}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("gt:1922", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578688}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("gt:1923", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095040}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("gt:1924", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095040}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("gt:1925", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578688}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("gt:1926", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578688}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("gt:1927", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578688}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1928", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4286578688}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("gt:1929", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095040}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("gt:1930", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095040}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("gt:1931", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095040}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1932", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2139095040}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("gt:1933", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4290772992}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("gt:1934", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4288675840}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("gt:1935", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4290772992}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("gt:1936", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4288675840}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("gt:1937", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2143289344}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("gt:1938", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2141192192}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("gt:1939", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2143289344}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("gt:1940", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2141192192}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("gt:1941", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4290772992}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("gt:1942", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4288675840}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("gt:1943", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4290772992}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("gt:1944", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4288675840}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("gt:1945", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2143289344}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("gt:1946", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2141192192}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("gt:1947", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2143289344}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("gt:1948", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2141192192}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("gt:1949", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4290772992}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("gt:1950", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4288675840}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("gt:1951", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4290772992}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1952", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4288675840}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1953", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2143289344}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("gt:1954", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2141192192}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("gt:1955", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2143289344}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1956", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2141192192}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1957", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4290772992}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("gt:1958", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4288675840}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("gt:1959", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4290772992}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1960", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4288675840}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1961", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2143289344}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("gt:1962", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2141192192}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("gt:1963", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2143289344}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1964", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2141192192}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("gt:1965", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4290772992}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("gt:1966", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4288675840}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("gt:1967", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4290772992}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("gt:1968", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4288675840}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("gt:1969", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2143289344}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("gt:1970", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2141192192}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("gt:1971", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2143289344}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("gt:1972", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2141192192}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("gt:1973", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4290772992}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("gt:1974", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4288675840}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("gt:1975", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4290772992}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("gt:1976", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4288675840}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("gt:1977", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2143289344}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("gt:1978", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2141192192}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("gt:1979", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2143289344}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("gt:1980", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2141192192}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("gt:1981", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4290772992}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("gt:1982", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4288675840}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("gt:1983", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4290772992}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("gt:1984", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4288675840}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("gt:1985", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2143289344}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("gt:1986", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2141192192}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("gt:1987", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2143289344}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("gt:1988", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2141192192}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("gt:1989", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4290772992}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("gt:1990", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4288675840}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("gt:1991", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4290772992}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("gt:1992", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4288675840}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("gt:1993", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2143289344}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("gt:1994", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2141192192}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("gt:1995", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2143289344}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("gt:1996", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2141192192}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("gt:1997", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4290772992}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("gt:1998", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4288675840}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("gt:1999", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4290772992}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("gt:2000", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4288675840}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("gt:2001", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4290772992}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("gt:2002", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4288675840}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("gt:2003", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4290772992}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("gt:2004", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 4288675840}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("gt:2005", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2143289344}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("gt:2006", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2141192192}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("gt:2007", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2143289344}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("gt:2008", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2141192192}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("gt:2009", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2143289344}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("gt:2010", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2141192192}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("gt:2011", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2143289344}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("gt:2012", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F32, 2141192192}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("ge:2013", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ge:2014", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483648}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("ge:2015", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 0}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ge:2016", func(t *testing.T) { x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 0}, {wa.F32, 0}}, arg{wa.I32, 1}) })
	t.Run("ge:2017", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ge:2018", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483648}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("ge:2019", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 0}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ge:2020", func(t *testing.T) { x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 0}, {wa.F32, 1}}, arg{wa.I32, 0}) })
	t.Run("ge:2021", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483648}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ge:2022", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483648}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2023", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 0}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ge:2024", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 0}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2025", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483648}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ge:2026", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483648}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2027", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 0}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ge:2028", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 0}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2029", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483648}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ge:2030", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483648}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("ge:2031", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 0}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ge:2032", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 0}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("ge:2033", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483648}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ge:2034", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483648}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("ge:2035", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 0}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ge:2036", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 0}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("ge:2037", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483648}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ge:2038", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483648}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("ge:2039", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 0}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ge:2040", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 0}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("ge:2041", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483648}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ge:2042", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483648}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("ge:2043", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 0}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ge:2044", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 0}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("ge:2045", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483648}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("ge:2046", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483648}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("ge:2047", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483648}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2048", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483648}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("ge:2049", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 0}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("ge:2050", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 0}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("ge:2051", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 0}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2052", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 0}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("ge:2053", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483649}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("ge:2054", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483649}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("ge:2055", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ge:2056", func(t *testing.T) { x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1}, {wa.F32, 0}}, arg{wa.I32, 1}) })
	t.Run("ge:2057", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483649}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ge:2058", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483649}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("ge:2059", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ge:2060", func(t *testing.T) { x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1}, {wa.F32, 1}}, arg{wa.I32, 1}) })
	t.Run("ge:2061", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483649}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ge:2062", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483649}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2063", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ge:2064", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2065", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483649}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ge:2066", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483649}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2067", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ge:2068", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2069", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483649}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ge:2070", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483649}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("ge:2071", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ge:2072", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("ge:2073", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483649}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ge:2074", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483649}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("ge:2075", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ge:2076", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("ge:2077", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483649}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ge:2078", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483649}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("ge:2079", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ge:2080", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("ge:2081", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483649}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ge:2082", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483649}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("ge:2083", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ge:2084", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("ge:2085", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483649}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("ge:2086", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483649}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("ge:2087", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483649}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2088", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2147483649}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("ge:2089", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("ge:2090", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("ge:2091", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2092", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("ge:2093", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2155872256}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("ge:2094", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2155872256}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("ge:2095", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 8388608}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ge:2096", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 8388608}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("ge:2097", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2155872256}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("ge:2098", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2155872256}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("ge:2099", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 8388608}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ge:2100", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 8388608}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("ge:2101", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2155872256}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ge:2102", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2155872256}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2103", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 8388608}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ge:2104", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 8388608}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("ge:2105", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2155872256}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ge:2106", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2155872256}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2107", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 8388608}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ge:2108", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 8388608}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2109", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2155872256}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ge:2110", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2155872256}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("ge:2111", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 8388608}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ge:2112", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 8388608}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("ge:2113", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2155872256}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ge:2114", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2155872256}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("ge:2115", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 8388608}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ge:2116", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 8388608}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("ge:2117", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2155872256}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ge:2118", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2155872256}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("ge:2119", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 8388608}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ge:2120", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 8388608}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("ge:2121", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2155872256}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ge:2122", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2155872256}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("ge:2123", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 8388608}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ge:2124", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 8388608}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("ge:2125", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2155872256}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("ge:2126", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2155872256}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("ge:2127", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2155872256}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2128", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2155872256}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("ge:2129", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 8388608}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("ge:2130", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 8388608}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("ge:2131", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 8388608}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2132", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 8388608}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("ge:2133", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3204448256}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("ge:2134", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3204448256}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("ge:2135", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1056964608}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ge:2136", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1056964608}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("ge:2137", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3204448256}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("ge:2138", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3204448256}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("ge:2139", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1056964608}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ge:2140", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1056964608}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("ge:2141", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3204448256}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("ge:2142", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3204448256}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2143", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1056964608}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ge:2144", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1056964608}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("ge:2145", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3204448256}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ge:2146", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3204448256}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2147", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1056964608}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ge:2148", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1056964608}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("ge:2149", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3204448256}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ge:2150", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3204448256}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("ge:2151", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1056964608}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ge:2152", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1056964608}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("ge:2153", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3204448256}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ge:2154", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3204448256}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("ge:2155", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1056964608}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ge:2156", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1056964608}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("ge:2157", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3204448256}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ge:2158", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3204448256}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("ge:2159", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1056964608}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ge:2160", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1056964608}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("ge:2161", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3204448256}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ge:2162", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3204448256}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("ge:2163", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1056964608}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ge:2164", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1056964608}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("ge:2165", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3204448256}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("ge:2166", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3204448256}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("ge:2167", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3204448256}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2168", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3204448256}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("ge:2169", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1056964608}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("ge:2170", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1056964608}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("ge:2171", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1056964608}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2172", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1056964608}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("ge:2173", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3212836864}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("ge:2174", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3212836864}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("ge:2175", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1065353216}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ge:2176", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1065353216}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("ge:2177", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3212836864}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("ge:2178", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3212836864}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("ge:2179", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1065353216}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ge:2180", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1065353216}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("ge:2181", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3212836864}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("ge:2182", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3212836864}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2183", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1065353216}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ge:2184", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1065353216}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("ge:2185", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3212836864}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("ge:2186", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3212836864}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2187", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1065353216}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ge:2188", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1065353216}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("ge:2189", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3212836864}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ge:2190", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3212836864}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("ge:2191", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1065353216}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ge:2192", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1065353216}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("ge:2193", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3212836864}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ge:2194", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3212836864}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("ge:2195", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1065353216}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ge:2196", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1065353216}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("ge:2197", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3212836864}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ge:2198", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3212836864}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("ge:2199", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1065353216}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ge:2200", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1065353216}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("ge:2201", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3212836864}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ge:2202", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3212836864}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("ge:2203", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1065353216}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ge:2204", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1065353216}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("ge:2205", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3212836864}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("ge:2206", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3212836864}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("ge:2207", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3212836864}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2208", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3212836864}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("ge:2209", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1065353216}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("ge:2210", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1065353216}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("ge:2211", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1065353216}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2212", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1065353216}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("ge:2213", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3234402267}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("ge:2214", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3234402267}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("ge:2215", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1086918619}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ge:2216", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1086918619}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("ge:2217", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3234402267}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("ge:2218", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3234402267}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("ge:2219", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1086918619}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ge:2220", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1086918619}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("ge:2221", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3234402267}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("ge:2222", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3234402267}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2223", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1086918619}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ge:2224", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1086918619}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("ge:2225", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3234402267}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("ge:2226", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3234402267}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2227", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1086918619}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ge:2228", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1086918619}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("ge:2229", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3234402267}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("ge:2230", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3234402267}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("ge:2231", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1086918619}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ge:2232", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1086918619}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("ge:2233", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3234402267}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ge:2234", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3234402267}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("ge:2235", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1086918619}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ge:2236", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1086918619}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("ge:2237", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3234402267}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ge:2238", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3234402267}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("ge:2239", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1086918619}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ge:2240", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1086918619}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("ge:2241", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3234402267}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ge:2242", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3234402267}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("ge:2243", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1086918619}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ge:2244", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1086918619}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("ge:2245", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3234402267}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("ge:2246", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3234402267}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("ge:2247", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3234402267}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2248", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 3234402267}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("ge:2249", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1086918619}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("ge:2250", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1086918619}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("ge:2251", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1086918619}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2252", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 1086918619}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("ge:2253", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578687}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("ge:2254", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578687}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("ge:2255", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095039}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ge:2256", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095039}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("ge:2257", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578687}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("ge:2258", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578687}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("ge:2259", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095039}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ge:2260", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095039}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("ge:2261", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578687}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("ge:2262", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578687}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2263", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095039}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ge:2264", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095039}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("ge:2265", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578687}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("ge:2266", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578687}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2267", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095039}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ge:2268", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095039}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("ge:2269", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578687}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("ge:2270", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578687}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("ge:2271", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095039}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ge:2272", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095039}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("ge:2273", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578687}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("ge:2274", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578687}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("ge:2275", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095039}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ge:2276", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095039}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("ge:2277", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578687}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ge:2278", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578687}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("ge:2279", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095039}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ge:2280", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095039}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("ge:2281", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578687}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ge:2282", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578687}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("ge:2283", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095039}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ge:2284", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095039}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("ge:2285", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578687}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("ge:2286", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578687}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("ge:2287", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578687}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2288", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578687}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("ge:2289", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095039}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("ge:2290", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095039}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("ge:2291", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095039}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2292", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095039}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("ge:2293", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578688}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("ge:2294", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578688}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("ge:2295", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095040}, {wa.F32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ge:2296", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095040}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("ge:2297", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578688}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("ge:2298", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578688}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("ge:2299", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095040}, {wa.F32, 2147483649}}, arg{wa.I32, 1})
	})
	t.Run("ge:2300", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095040}, {wa.F32, 1}}, arg{wa.I32, 1})
	})
	t.Run("ge:2301", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578688}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("ge:2302", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578688}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2303", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095040}, {wa.F32, 2155872256}}, arg{wa.I32, 1})
	})
	t.Run("ge:2304", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095040}, {wa.F32, 8388608}}, arg{wa.I32, 1})
	})
	t.Run("ge:2305", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578688}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("ge:2306", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578688}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2307", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095040}, {wa.F32, 3204448256}}, arg{wa.I32, 1})
	})
	t.Run("ge:2308", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095040}, {wa.F32, 1056964608}}, arg{wa.I32, 1})
	})
	t.Run("ge:2309", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578688}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("ge:2310", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578688}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("ge:2311", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095040}, {wa.F32, 3212836864}}, arg{wa.I32, 1})
	})
	t.Run("ge:2312", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095040}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("ge:2313", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578688}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("ge:2314", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578688}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("ge:2315", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095040}, {wa.F32, 3234402267}}, arg{wa.I32, 1})
	})
	t.Run("ge:2316", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095040}, {wa.F32, 1086918619}}, arg{wa.I32, 1})
	})
	t.Run("ge:2317", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578688}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("ge:2318", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578688}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("ge:2319", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095040}, {wa.F32, 4286578687}}, arg{wa.I32, 1})
	})
	t.Run("ge:2320", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095040}, {wa.F32, 2139095039}}, arg{wa.I32, 1})
	})
	t.Run("ge:2321", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578688}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ge:2322", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578688}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("ge:2323", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095040}, {wa.F32, 4286578688}}, arg{wa.I32, 1})
	})
	t.Run("ge:2324", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095040}, {wa.F32, 2139095040}}, arg{wa.I32, 1})
	})
	t.Run("ge:2325", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578688}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("ge:2326", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578688}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("ge:2327", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578688}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2328", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4286578688}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("ge:2329", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095040}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("ge:2330", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095040}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("ge:2331", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095040}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2332", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2139095040}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("ge:2333", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4290772992}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("ge:2334", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4288675840}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("ge:2335", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4290772992}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("ge:2336", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4288675840}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("ge:2337", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2143289344}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("ge:2338", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2141192192}, {wa.F32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("ge:2339", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2143289344}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("ge:2340", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2141192192}, {wa.F32, 0}}, arg{wa.I32, 0})
	})
	t.Run("ge:2341", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4290772992}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("ge:2342", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4288675840}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("ge:2343", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4290772992}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("ge:2344", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4288675840}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("ge:2345", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2143289344}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("ge:2346", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2141192192}, {wa.F32, 2147483649}}, arg{wa.I32, 0})
	})
	t.Run("ge:2347", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2143289344}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("ge:2348", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2141192192}, {wa.F32, 1}}, arg{wa.I32, 0})
	})
	t.Run("ge:2349", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4290772992}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("ge:2350", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4288675840}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("ge:2351", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4290772992}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2352", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4288675840}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2353", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2143289344}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("ge:2354", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2141192192}, {wa.F32, 2155872256}}, arg{wa.I32, 0})
	})
	t.Run("ge:2355", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2143289344}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2356", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2141192192}, {wa.F32, 8388608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2357", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4290772992}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("ge:2358", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4288675840}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("ge:2359", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4290772992}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2360", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4288675840}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2361", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2143289344}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("ge:2362", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2141192192}, {wa.F32, 3204448256}}, arg{wa.I32, 0})
	})
	t.Run("ge:2363", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2143289344}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2364", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2141192192}, {wa.F32, 1056964608}}, arg{wa.I32, 0})
	})
	t.Run("ge:2365", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4290772992}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("ge:2366", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4288675840}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("ge:2367", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4290772992}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("ge:2368", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4288675840}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("ge:2369", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2143289344}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("ge:2370", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2141192192}, {wa.F32, 3212836864}}, arg{wa.I32, 0})
	})
	t.Run("ge:2371", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2143289344}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("ge:2372", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2141192192}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("ge:2373", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4290772992}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("ge:2374", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4288675840}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("ge:2375", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4290772992}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("ge:2376", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4288675840}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("ge:2377", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2143289344}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("ge:2378", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2141192192}, {wa.F32, 3234402267}}, arg{wa.I32, 0})
	})
	t.Run("ge:2379", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2143289344}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("ge:2380", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2141192192}, {wa.F32, 1086918619}}, arg{wa.I32, 0})
	})
	t.Run("ge:2381", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4290772992}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("ge:2382", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4288675840}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("ge:2383", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4290772992}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("ge:2384", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4288675840}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("ge:2385", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2143289344}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("ge:2386", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2141192192}, {wa.F32, 4286578687}}, arg{wa.I32, 0})
	})
	t.Run("ge:2387", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2143289344}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("ge:2388", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2141192192}, {wa.F32, 2139095039}}, arg{wa.I32, 0})
	})
	t.Run("ge:2389", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4290772992}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("ge:2390", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4288675840}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("ge:2391", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4290772992}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("ge:2392", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4288675840}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("ge:2393", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2143289344}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("ge:2394", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2141192192}, {wa.F32, 4286578688}}, arg{wa.I32, 0})
	})
	t.Run("ge:2395", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2143289344}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("ge:2396", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2141192192}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("ge:2397", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4290772992}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("ge:2398", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4288675840}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("ge:2399", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4290772992}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("ge:2400", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4288675840}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("ge:2401", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4290772992}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2402", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4288675840}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2403", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4290772992}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("ge:2404", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 4288675840}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("ge:2405", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2143289344}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("ge:2406", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2141192192}, {wa.F32, 4290772992}}, arg{wa.I32, 0})
	})
	t.Run("ge:2407", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2143289344}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("ge:2408", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2141192192}, {wa.F32, 4288675840}}, arg{wa.I32, 0})
	})
	t.Run("ge:2409", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2143289344}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2410", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2141192192}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2411", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2143289344}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("ge:2412", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F32, 2141192192}, {wa.F32, 2141192192}}, arg{wa.I32, 0})
	})
	t.Run("assert_invalid:2417", func(t *testing.T) { assertInvalidSpec(t, "f32_cmp.1.wasm", "type mismatch") })
	t.Run("assert_invalid:2418", func(t *testing.T) { assertInvalidSpec(t, "f32_cmp.2.wasm", "type mismatch") })
	t.Run("assert_invalid:2419", func(t *testing.T) { assertInvalidSpec(t, "f32_cmp.3.wasm", "type mismatch") })
	t.Run("assert_invalid:2420", func(t *testing.T) { assertInvalidSpec(t, "f32_cmp.4.wasm", "type mismatch") })
	t.Run("assert_invalid:2421", func(t *testing.T) { assertInvalidSpec(t, "f32_cmp.5.wasm", "type mismatch") })
	t.Run("assert_invalid:2422", func(t *testing.T) { assertInvalidSpec(t, "f32_cmp.6.wasm", "type mismatch") })
}

func Test_f64(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "f64.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("add:19", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("add:20", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("add:21", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0})
	})
	t.Run("add:22", func(t *testing.T) { x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 0}, {wa.F64, 0}}, arg{wa.F64, 0}) })
	t.Run("add:23", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("add:24", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 1}}, arg{wa.F64, 1})
	})
	t.Run("add:25", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("add:26", func(t *testing.T) { x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 0}, {wa.F64, 1}}, arg{wa.F64, 1}) })
	t.Run("add:27", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("add:28", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("add:29", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 0}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("add:30", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 0}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("add:31", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("add:32", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("add:33", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 0}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("add:34", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 0}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("add:35", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("add:36", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("add:37", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 0}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("add:38", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 0}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("add:39", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("add:40", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("add:41", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 0}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("add:42", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 0}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("add:43", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("add:44", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("add:45", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 0}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("add:46", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 0}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("add:47", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:48", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:49", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 0}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:50", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 0}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:51", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:52", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:53", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:54", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:55", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 0}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:56", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 0}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:57", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 0}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:58", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 0}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:59", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("add:60", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 0}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("add:61", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 1}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 1})
	})
	t.Run("add:62", func(t *testing.T) { x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 1}, {wa.F64, 0}}, arg{wa.F64, 1}) })
	t.Run("add:63", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775810})
	})
	t.Run("add:64", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 1}}, arg{wa.F64, 0})
	})
	t.Run("add:65", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 1}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0})
	})
	t.Run("add:66", func(t *testing.T) { x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 1}, {wa.F64, 1}}, arg{wa.F64, 2}) })
	t.Run("add:67", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9227875636482146305})
	})
	t.Run("add:68", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4503599627370495})
	})
	t.Run("add:69", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 1}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9227875636482146303})
	})
	t.Run("add:70", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 1}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4503599627370497})
	})
	t.Run("add:71", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("add:72", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("add:73", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 1}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("add:74", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 1}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("add:75", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("add:76", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("add:77", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 1}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("add:78", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 1}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("add:79", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("add:80", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("add:81", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 1}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("add:82", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 1}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("add:83", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("add:84", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("add:85", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 1}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("add:86", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 1}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("add:87", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:88", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:89", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 1}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:90", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 1}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:91", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:92", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:93", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:94", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:95", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 1}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:96", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 1}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:97", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 1}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:98", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 1}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:99", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("add:100", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 0}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("add:101", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("add:102", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4503599627370496}, {wa.F64, 0}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("add:103", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9227875636482146305})
	})
	t.Run("add:104", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 1}}, arg{wa.F64, 9227875636482146303})
	})
	t.Run("add:105", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 4503599627370495})
	})
	t.Run("add:106", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4503599627370496}, {wa.F64, 1}}, arg{wa.F64, 4503599627370497})
	})
	t.Run("add:107", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9232379236109516800})
	})
	t.Run("add:108", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0})
	})
	t.Run("add:109", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0})
	})
	t.Run("add:110", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9007199254740992})
	})
	t.Run("add:111", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("add:112", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("add:113", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("add:114", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("add:115", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("add:116", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("add:117", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("add:118", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("add:119", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("add:120", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("add:121", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("add:122", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("add:123", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("add:124", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("add:125", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("add:126", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("add:127", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:128", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:129", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:130", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:131", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:132", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:133", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:134", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:135", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:136", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:137", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:138", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:139", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("add:140", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 0}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("add:141", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("add:142", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 0}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("add:143", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("add:144", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 1}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("add:145", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("add:146", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 1}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("add:147", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("add:148", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4503599627370496}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("add:149", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("add:150", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("add:151", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("add:152", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0})
	})
	t.Run("add:153", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0})
	})
	t.Run("add:154", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("add:155", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13832806255468478464})
	})
	t.Run("add:156", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("add:157", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("add:158", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4609434218613702656})
	})
	t.Run("add:159", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13842695242987613464})
	})
	t.Run("add:160", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4618197306225995032})
	})
	t.Run("add:161", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13841569343080770840})
	})
	t.Run("add:162", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4619323206132837656})
	})
	t.Run("add:163", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("add:164", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("add:165", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("add:166", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("add:167", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:168", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:169", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:170", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:171", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:172", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:173", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:174", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:175", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:176", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:177", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:178", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:179", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("add:180", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 0}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("add:181", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("add:182", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 0}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("add:183", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("add:184", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 1}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("add:185", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("add:186", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 1}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("add:187", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("add:188", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4503599627370496}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("add:189", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("add:190", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("add:191", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13832806255468478464})
	})
	t.Run("add:192", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("add:193", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("add:194", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4609434218613702656})
	})
	t.Run("add:195", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13835058055282163712})
	})
	t.Run("add:196", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0})
	})
	t.Run("add:197", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0})
	})
	t.Run("add:198", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4611686018427387904})
	})
	t.Run("add:199", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13843258192941034776})
	})
	t.Run("add:200", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4617634356272573720})
	})
	t.Run("add:201", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13841006393127349528})
	})
	t.Run("add:202", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4619886156086258968})
	})
	t.Run("add:203", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("add:204", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("add:205", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("add:206", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("add:207", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:208", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:209", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:210", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:211", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:212", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:213", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:214", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:215", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:216", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:217", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:218", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:219", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("add:220", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 0}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("add:221", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("add:222", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 0}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("add:223", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("add:224", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 1}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("add:225", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("add:226", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 1}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("add:227", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("add:228", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4503599627370496}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("add:229", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("add:230", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("add:231", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13842695242987613464})
	})
	t.Run("add:232", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 13841569343080770840})
	})
	t.Run("add:233", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 4618197306225995032})
	})
	t.Run("add:234", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4619323206132837656})
	})
	t.Run("add:235", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13843258192941034776})
	})
	t.Run("add:236", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 13841006393127349528})
	})
	t.Run("add:237", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 4617634356272573720})
	})
	t.Run("add:238", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4619886156086258968})
	})
	t.Run("add:239", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13846635892661562648})
	})
	t.Run("add:240", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0})
	})
	t.Run("add:241", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0})
	})
	t.Run("add:242", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4623263855806786840})
	})
	t.Run("add:243", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("add:244", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("add:245", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("add:246", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("add:247", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:248", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:249", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:250", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:251", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:252", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:253", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:254", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:255", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:256", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:257", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:258", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:259", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("add:260", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 0}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("add:261", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("add:262", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 0}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("add:263", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("add:264", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 1}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("add:265", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("add:266", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 1}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("add:267", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("add:268", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4503599627370496}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("add:269", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("add:270", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("add:271", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("add:272", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("add:273", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("add:274", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("add:275", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("add:276", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("add:277", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("add:278", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("add:279", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("add:280", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("add:281", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("add:282", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("add:283", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:284", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0})
	})
	t.Run("add:285", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0})
	})
	t.Run("add:286", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:287", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:288", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:289", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:290", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:291", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:292", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:293", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:294", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:295", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:296", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:297", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:298", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:299", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:300", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 0}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:301", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:302", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 0}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:303", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:304", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 1}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:305", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:306", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 1}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:307", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:308", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4503599627370496}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:309", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:310", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:311", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:312", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:313", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:314", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:315", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:316", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:317", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:318", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:319", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:320", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:321", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:322", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:323", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:324", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:325", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:326", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:327", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("add:328", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:329", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:330", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("add:331", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:332", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:333", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:334", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:335", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:336", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:337", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:338", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:339", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:340", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:341", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 0}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:342", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 0}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:343", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:344", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:345", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 0}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:346", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 0}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:347", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:348", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:349", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 1}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:350", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 1}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:351", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:352", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:353", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 1}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:354", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 1}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:355", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:356", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:357", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:358", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:359", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:360", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:361", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:362", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:363", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:364", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:365", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:366", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:367", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:368", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:369", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:370", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:371", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:372", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:373", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:374", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:375", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:376", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:377", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:378", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:379", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:380", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:381", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:382", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:383", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:384", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:385", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:386", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:387", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:388", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:389", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:390", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:391", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:392", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:393", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:394", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:395", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:396", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:397", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:398", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:399", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:400", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:401", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:402", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:403", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:404", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:405", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:406", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:407", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:408", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:409", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:410", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:411", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:412", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:413", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:414", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:415", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("add:416", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:417", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("add:418", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:419", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0})
	})
	t.Run("sub:420", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 0}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("sub:421", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0})
	})
	t.Run("sub:422", func(t *testing.T) { x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 0}, {wa.F64, 0}}, arg{wa.F64, 0}) })
	t.Run("sub:423", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 1})
	})
	t.Run("sub:424", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 1}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("sub:425", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 1})
	})
	t.Run("sub:426", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 0}, {wa.F64, 1}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("sub:427", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("sub:428", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("sub:429", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 0}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("sub:430", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 0}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("sub:431", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("sub:432", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("sub:433", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 0}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("sub:434", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 0}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("sub:435", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("sub:436", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("sub:437", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 0}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("sub:438", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 0}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("sub:439", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("sub:440", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("sub:441", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 0}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("sub:442", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 0}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("sub:443", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("sub:444", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("sub:445", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 0}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("sub:446", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 0}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("sub:447", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:448", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:449", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 0}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:450", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 0}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:451", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:452", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:453", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:454", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:455", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 0}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:456", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 0}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:457", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 0}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:458", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 0}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:459", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("sub:460", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 0}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("sub:461", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 1}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 1})
	})
	t.Run("sub:462", func(t *testing.T) { x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 1}, {wa.F64, 0}}, arg{wa.F64, 1}) })
	t.Run("sub:463", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0})
	})
	t.Run("sub:464", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 1}}, arg{wa.F64, 9223372036854775810})
	})
	t.Run("sub:465", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 1}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 2})
	})
	t.Run("sub:466", func(t *testing.T) { x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 1}, {wa.F64, 1}}, arg{wa.F64, 0}) })
	t.Run("sub:467", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 4503599627370495})
	})
	t.Run("sub:468", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9227875636482146305})
	})
	t.Run("sub:469", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 1}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 4503599627370497})
	})
	t.Run("sub:470", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 1}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9227875636482146303})
	})
	t.Run("sub:471", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("sub:472", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("sub:473", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 1}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("sub:474", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 1}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("sub:475", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("sub:476", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("sub:477", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 1}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("sub:478", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 1}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("sub:479", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("sub:480", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("sub:481", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 1}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("sub:482", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 1}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("sub:483", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("sub:484", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("sub:485", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 1}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("sub:486", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 1}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("sub:487", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:488", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:489", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 1}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:490", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 1}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:491", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:492", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:493", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:494", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:495", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 1}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:496", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 1}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:497", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 1}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:498", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 1}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:499", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("sub:500", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 0}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("sub:501", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("sub:502", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4503599627370496}, {wa.F64, 0}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("sub:503", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9227875636482146303})
	})
	t.Run("sub:504", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 1}}, arg{wa.F64, 9227875636482146305})
	})
	t.Run("sub:505", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 4503599627370497})
	})
	t.Run("sub:506", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4503599627370496}, {wa.F64, 1}}, arg{wa.F64, 4503599627370495})
	})
	t.Run("sub:507", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0})
	})
	t.Run("sub:508", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9232379236109516800})
	})
	t.Run("sub:509", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9007199254740992})
	})
	t.Run("sub:510", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0})
	})
	t.Run("sub:511", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("sub:512", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("sub:513", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("sub:514", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("sub:515", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("sub:516", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("sub:517", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("sub:518", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("sub:519", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("sub:520", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("sub:521", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("sub:522", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("sub:523", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("sub:524", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("sub:525", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("sub:526", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("sub:527", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:528", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:529", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:530", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:531", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:532", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:533", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:534", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:535", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:536", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:537", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:538", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:539", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("sub:540", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 0}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("sub:541", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("sub:542", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 0}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("sub:543", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("sub:544", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 1}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("sub:545", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("sub:546", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 1}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("sub:547", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("sub:548", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4503599627370496}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("sub:549", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("sub:550", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("sub:551", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0})
	})
	t.Run("sub:552", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("sub:553", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("sub:554", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0})
	})
	t.Run("sub:555", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("sub:556", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 13832806255468478464})
	})
	t.Run("sub:557", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 4609434218613702656})
	})
	t.Run("sub:558", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("sub:559", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 4618197306225995032})
	})
	t.Run("sub:560", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 13842695242987613464})
	})
	t.Run("sub:561", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 4619323206132837656})
	})
	t.Run("sub:562", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 13841569343080770840})
	})
	t.Run("sub:563", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("sub:564", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("sub:565", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("sub:566", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("sub:567", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:568", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:569", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:570", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:571", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:572", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:573", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:574", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:575", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:576", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:577", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:578", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:579", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("sub:580", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 0}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("sub:581", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("sub:582", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 0}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("sub:583", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("sub:584", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 1}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("sub:585", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("sub:586", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 1}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("sub:587", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("sub:588", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4503599627370496}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("sub:589", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("sub:590", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("sub:591", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("sub:592", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 13832806255468478464})
	})
	t.Run("sub:593", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 4609434218613702656})
	})
	t.Run("sub:594", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("sub:595", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0})
	})
	t.Run("sub:596", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 13835058055282163712})
	})
	t.Run("sub:597", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 4611686018427387904})
	})
	t.Run("sub:598", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0})
	})
	t.Run("sub:599", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 4617634356272573720})
	})
	t.Run("sub:600", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 13843258192941034776})
	})
	t.Run("sub:601", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 4619886156086258968})
	})
	t.Run("sub:602", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 13841006393127349528})
	})
	t.Run("sub:603", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("sub:604", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("sub:605", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("sub:606", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("sub:607", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:608", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:609", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:610", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:611", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:612", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:613", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:614", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:615", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:616", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:617", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:618", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:619", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("sub:620", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 0}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("sub:621", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("sub:622", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 0}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("sub:623", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("sub:624", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 1}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("sub:625", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("sub:626", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 1}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("sub:627", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("sub:628", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4503599627370496}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("sub:629", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("sub:630", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("sub:631", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13841569343080770840})
	})
	t.Run("sub:632", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 13842695242987613464})
	})
	t.Run("sub:633", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 4619323206132837656})
	})
	t.Run("sub:634", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4618197306225995032})
	})
	t.Run("sub:635", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13841006393127349528})
	})
	t.Run("sub:636", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 13843258192941034776})
	})
	t.Run("sub:637", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 4619886156086258968})
	})
	t.Run("sub:638", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4617634356272573720})
	})
	t.Run("sub:639", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0})
	})
	t.Run("sub:640", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 13846635892661562648})
	})
	t.Run("sub:641", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 4623263855806786840})
	})
	t.Run("sub:642", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0})
	})
	t.Run("sub:643", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("sub:644", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("sub:645", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("sub:646", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("sub:647", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:648", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:649", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:650", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:651", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:652", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:653", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:654", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:655", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:656", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:657", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:658", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:659", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("sub:660", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 0}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("sub:661", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("sub:662", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 0}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("sub:663", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("sub:664", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 1}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("sub:665", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("sub:666", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 1}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("sub:667", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("sub:668", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4503599627370496}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("sub:669", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("sub:670", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("sub:671", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("sub:672", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("sub:673", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("sub:674", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("sub:675", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("sub:676", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("sub:677", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("sub:678", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("sub:679", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("sub:680", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("sub:681", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("sub:682", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("sub:683", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0})
	})
	t.Run("sub:684", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:685", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:686", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0})
	})
	t.Run("sub:687", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:688", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:689", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:690", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:691", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:692", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:693", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:694", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:695", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:696", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:697", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:698", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:699", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:700", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 0}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:701", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:702", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 0}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:703", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:704", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 1}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:705", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:706", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 1}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:707", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:708", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4503599627370496}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:709", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:710", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:711", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:712", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:713", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:714", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:715", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:716", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:717", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:718", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:719", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:720", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:721", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:722", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:723", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:724", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:725", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:726", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:727", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:728", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("sub:729", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sub:730", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:731", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:732", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:733", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:734", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:735", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:736", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:737", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:738", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:739", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:740", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:741", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 0}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:742", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 0}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:743", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:744", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:745", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 0}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:746", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 0}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:747", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:748", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:749", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 1}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:750", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 1}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:751", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:752", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:753", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 1}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:754", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 1}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:755", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:756", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:757", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:758", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:759", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:760", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:761", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:762", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:763", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:764", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:765", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:766", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:767", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:768", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:769", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:770", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:771", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:772", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:773", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:774", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:775", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:776", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:777", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:778", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:779", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:780", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:781", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:782", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:783", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:784", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:785", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:786", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:787", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:788", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:789", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:790", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:791", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:792", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:793", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:794", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:795", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:796", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:797", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:798", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:799", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:800", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:801", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:802", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:803", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:804", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:805", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:806", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:807", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:808", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:809", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:810", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:811", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:812", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:813", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:814", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:815", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sub:816", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:817", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sub:818", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:819", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0})
	})
	t.Run("mul:820", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 0}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:821", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:822", func(t *testing.T) { x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 0}, {wa.F64, 0}}, arg{wa.F64, 0}) })
	t.Run("mul:823", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0})
	})
	t.Run("mul:824", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 1}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:825", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:826", func(t *testing.T) { x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 0}, {wa.F64, 1}}, arg{wa.F64, 0}) })
	t.Run("mul:827", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0})
	})
	t.Run("mul:828", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:829", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 0}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:830", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 0}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0})
	})
	t.Run("mul:831", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0})
	})
	t.Run("mul:832", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:833", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 0}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:834", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 0}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0})
	})
	t.Run("mul:835", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0})
	})
	t.Run("mul:836", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:837", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 0}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:838", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 0}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0})
	})
	t.Run("mul:839", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0})
	})
	t.Run("mul:840", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:841", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 0}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:842", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 0}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0})
	})
	t.Run("mul:843", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0})
	})
	t.Run("mul:844", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:845", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 0}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:846", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 0}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0})
	})
	t.Run("mul:847", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:848", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:849", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 0}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:850", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 0}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:851", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:852", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:853", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:854", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:855", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 0}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:856", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 0}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:857", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 0}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:858", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 0}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:859", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0})
	})
	t.Run("mul:860", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 0}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:861", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 1}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:862", func(t *testing.T) { x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 1}, {wa.F64, 0}}, arg{wa.F64, 0}) })
	t.Run("mul:863", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0})
	})
	t.Run("mul:864", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 1}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:865", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 1}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:866", func(t *testing.T) { x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 1}, {wa.F64, 1}}, arg{wa.F64, 0}) })
	t.Run("mul:867", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0})
	})
	t.Run("mul:868", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:869", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 1}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:870", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 1}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0})
	})
	t.Run("mul:871", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0})
	})
	t.Run("mul:872", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:873", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 1}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:874", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 1}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0})
	})
	t.Run("mul:875", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 1})
	})
	t.Run("mul:876", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("mul:877", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 1}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("mul:878", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 1}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 1})
	})
	t.Run("mul:879", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 6})
	})
	t.Run("mul:880", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 9223372036854775814})
	})
	t.Run("mul:881", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 1}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 9223372036854775814})
	})
	t.Run("mul:882", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 1}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 6})
	})
	t.Run("mul:883", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 4382002437431492607})
	})
	t.Run("mul:884", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 13605374474286268415})
	})
	t.Run("mul:885", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 1}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 13605374474286268415})
	})
	t.Run("mul:886", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 1}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 4382002437431492607})
	})
	t.Run("mul:887", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:888", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:889", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 1}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:890", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 1}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:891", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:892", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:893", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:894", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:895", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 1}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:896", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 1}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:897", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 1}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:898", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 1}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:899", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0})
	})
	t.Run("mul:900", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 0}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:901", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:902", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4503599627370496}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("mul:903", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0})
	})
	t.Run("mul:904", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 1}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:905", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:906", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4503599627370496}, {wa.F64, 1}}, arg{wa.F64, 0})
	})
	t.Run("mul:907", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0})
	})
	t.Run("mul:908", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:909", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:910", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0})
	})
	t.Run("mul:911", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 2251799813685248})
	})
	t.Run("mul:912", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 9225623836668461056})
	})
	t.Run("mul:913", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 9225623836668461056})
	})
	t.Run("mul:914", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 2251799813685248})
	})
	t.Run("mul:915", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("mul:916", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("mul:917", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("mul:918", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("mul:919", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 16081437006769432})
	})
	t.Run("mul:920", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 9239453473861545240})
	})
	t.Run("mul:921", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 9239453473861545240})
	})
	t.Run("mul:922", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 16081437006769432})
	})
	t.Run("mul:923", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 4616189618054758399})
	})
	t.Run("mul:924", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 13839561654909534207})
	})
	t.Run("mul:925", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 13839561654909534207})
	})
	t.Run("mul:926", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 4616189618054758399})
	})
	t.Run("mul:927", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:928", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:929", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:930", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:931", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:932", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:933", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:934", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:935", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:936", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:937", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:938", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:939", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0})
	})
	t.Run("mul:940", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 0}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:941", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:942", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("mul:943", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0})
	})
	t.Run("mul:944", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 1}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:945", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:946", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 1}}, arg{wa.F64, 0})
	})
	t.Run("mul:947", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 2251799813685248})
	})
	t.Run("mul:948", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9225623836668461056})
	})
	t.Run("mul:949", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9225623836668461056})
	})
	t.Run("mul:950", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4503599627370496}}, arg{wa.F64, 2251799813685248})
	})
	t.Run("mul:951", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 4598175219545276416})
	})
	t.Run("mul:952", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 13821547256400052224})
	})
	t.Run("mul:953", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13821547256400052224})
	})
	t.Run("mul:954", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4598175219545276416})
	})
	t.Run("mul:955", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("mul:956", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("mul:957", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("mul:958", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("mul:959", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 4614256656552045848})
	})
	t.Run("mul:960", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 13837628693406821656})
	})
	t.Run("mul:961", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13837628693406821656})
	})
	t.Run("mul:962", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4614256656552045848})
	})
	t.Run("mul:963", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9214364837600034815})
	})
	t.Run("mul:964", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 18437736874454810623})
	})
	t.Run("mul:965", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18437736874454810623})
	})
	t.Run("mul:966", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9214364837600034815})
	})
	t.Run("mul:967", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:968", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:969", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:970", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:971", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:972", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:973", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:974", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:975", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:976", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:977", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:978", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:979", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0})
	})
	t.Run("mul:980", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 0}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:981", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:982", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("mul:983", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 1})
	})
	t.Run("mul:984", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 1}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("mul:985", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("mul:986", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 1}}, arg{wa.F64, 1})
	})
	t.Run("mul:987", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("mul:988", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("mul:989", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("mul:990", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("mul:991", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("mul:992", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("mul:993", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("mul:994", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("mul:995", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("mul:996", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("mul:997", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("mul:998", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("mul:999", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("mul:1000", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("mul:1001", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("mul:1002", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("mul:1003", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("mul:1004", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("mul:1005", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("mul:1006", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("mul:1007", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:1008", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:1009", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:1010", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:1011", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1012", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1013", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1014", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1015", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1016", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1017", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1018", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1019", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0})
	})
	t.Run("mul:1020", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 0}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:1021", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:1022", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("mul:1023", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 6})
	})
	t.Run("mul:1024", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 1}}, arg{wa.F64, 9223372036854775814})
	})
	t.Run("mul:1025", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775814})
	})
	t.Run("mul:1026", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 1}}, arg{wa.F64, 6})
	})
	t.Run("mul:1027", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 16081437006769432})
	})
	t.Run("mul:1028", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9239453473861545240})
	})
	t.Run("mul:1029", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9239453473861545240})
	})
	t.Run("mul:1030", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4503599627370496}}, arg{wa.F64, 16081437006769432})
	})
	t.Run("mul:1031", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 4614256656552045848})
	})
	t.Run("mul:1032", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 13837628693406821656})
	})
	t.Run("mul:1033", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13837628693406821656})
	})
	t.Run("mul:1034", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4614256656552045848})
	})
	t.Run("mul:1035", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("mul:1036", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("mul:1037", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("mul:1038", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("mul:1039", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 4630752910647379422})
	})
	t.Run("mul:1040", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 13854124947502155230})
	})
	t.Run("mul:1041", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13854124947502155230})
	})
	t.Run("mul:1042", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4630752910647379422})
	})
	t.Run("mul:1043", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:1044", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:1045", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:1046", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:1047", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:1048", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:1049", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:1050", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:1051", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1052", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1053", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1054", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1055", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1056", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1057", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1058", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1059", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0})
	})
	t.Run("mul:1060", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 0}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:1061", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("mul:1062", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("mul:1063", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 4382002437431492607})
	})
	t.Run("mul:1064", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 1}}, arg{wa.F64, 13605374474286268415})
	})
	t.Run("mul:1065", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 13605374474286268415})
	})
	t.Run("mul:1066", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 1}}, arg{wa.F64, 4382002437431492607})
	})
	t.Run("mul:1067", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 4616189618054758399})
	})
	t.Run("mul:1068", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4503599627370496}}, arg{wa.F64, 13839561654909534207})
	})
	t.Run("mul:1069", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 13839561654909534207})
	})
	t.Run("mul:1070", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4616189618054758399})
	})
	t.Run("mul:1071", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 9214364837600034815})
	})
	t.Run("mul:1072", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 18437736874454810623})
	})
	t.Run("mul:1073", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 18437736874454810623})
	})
	t.Run("mul:1074", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 9214364837600034815})
	})
	t.Run("mul:1075", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("mul:1076", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("mul:1077", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("mul:1078", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("mul:1079", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:1080", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:1081", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:1082", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:1083", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:1084", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:1085", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:1086", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:1087", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:1088", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:1089", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:1090", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:1091", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1092", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1093", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1094", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1095", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1096", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1097", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1098", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1099", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1100", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 0}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1101", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1102", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 0}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1103", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:1104", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 1}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:1105", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:1106", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 1}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:1107", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:1108", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4503599627370496}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:1109", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:1110", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:1111", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:1112", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:1113", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:1114", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:1115", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:1116", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:1117", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:1118", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:1119", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:1120", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:1121", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:1122", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:1123", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:1124", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:1125", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:1126", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:1127", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:1128", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:1129", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("mul:1130", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("mul:1131", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1132", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1133", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1134", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1135", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1136", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1137", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1138", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1139", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1140", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1141", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 0}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1142", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 0}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1143", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1144", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1145", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 0}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1146", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 0}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1147", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1148", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1149", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 1}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1150", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 1}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1151", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1152", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1153", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 1}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1154", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 1}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1155", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1156", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1157", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1158", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1159", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1160", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1161", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1162", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1163", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1164", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1165", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1166", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1167", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1168", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1169", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1170", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1171", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1172", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1173", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1174", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1175", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1176", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1177", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1178", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1179", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1180", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1181", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1182", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1183", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1184", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1185", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1186", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1187", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1188", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1189", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1190", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1191", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1192", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1193", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1194", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1195", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1196", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1197", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1198", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1199", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1200", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1201", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1202", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1203", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1204", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1205", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1206", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1207", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1208", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1209", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1210", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1211", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1212", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1213", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1214", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1215", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("mul:1216", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1217", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("mul:1218", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1219", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1220", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 0}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1221", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1222", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 0}, {wa.F64, 0}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1223", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0})
	})
	t.Run("div:1224", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 1}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1225", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1226", func(t *testing.T) { x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 0}, {wa.F64, 1}}, arg{wa.F64, 0}) })
	t.Run("div:1227", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0})
	})
	t.Run("div:1228", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1229", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 0}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1230", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 0}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0})
	})
	t.Run("div:1231", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0})
	})
	t.Run("div:1232", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1233", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 0}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1234", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 0}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0})
	})
	t.Run("div:1235", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0})
	})
	t.Run("div:1236", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1237", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 0}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1238", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 0}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0})
	})
	t.Run("div:1239", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0})
	})
	t.Run("div:1240", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1241", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 0}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1242", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 0}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0})
	})
	t.Run("div:1243", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0})
	})
	t.Run("div:1244", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1245", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 0}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1246", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 0}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0})
	})
	t.Run("div:1247", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0})
	})
	t.Run("div:1248", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1249", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 0}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1250", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 0}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0})
	})
	t.Run("div:1251", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1252", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1253", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1254", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1255", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 0}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1256", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 0}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1257", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 0}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1258", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 0}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1259", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1260", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 0}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1261", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 1}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1262", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 1}, {wa.F64, 0}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1263", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("div:1264", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 1}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("div:1265", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 1}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("div:1266", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 1}, {wa.F64, 1}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("div:1267", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 4372995238176751616})
	})
	t.Run("div:1268", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4503599627370496}}, arg{wa.F64, 13596367275031527424})
	})
	t.Run("div:1269", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 1}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 13596367275031527424})
	})
	t.Run("div:1270", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 1}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4372995238176751616})
	})
	t.Run("div:1271", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 2})
	})
	t.Run("div:1272", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 9223372036854775810})
	})
	t.Run("div:1273", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 1}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 9223372036854775810})
	})
	t.Run("div:1274", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 1}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 2})
	})
	t.Run("div:1275", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 1})
	})
	t.Run("div:1276", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("div:1277", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 1}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("div:1278", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 1}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 1})
	})
	t.Run("div:1279", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0})
	})
	t.Run("div:1280", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1281", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 1}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1282", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 1}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0})
	})
	t.Run("div:1283", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0})
	})
	t.Run("div:1284", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1285", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 1}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1286", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 1}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0})
	})
	t.Run("div:1287", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0})
	})
	t.Run("div:1288", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1289", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 1}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1290", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 1}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0})
	})
	t.Run("div:1291", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1292", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1293", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1294", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1295", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 1}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1296", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 1}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1297", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 1}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1298", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 1}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1299", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1300", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 0}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1301", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1302", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4503599627370496}, {wa.F64, 0}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1303", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 4841369599423283200})
	})
	t.Run("div:1304", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 1}}, arg{wa.F64, 14064741636278059008})
	})
	t.Run("div:1305", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 14064741636278059008})
	})
	t.Run("div:1306", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4503599627370496}, {wa.F64, 1}}, arg{wa.F64, 4841369599423283200})
	})
	t.Run("div:1307", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("div:1308", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4503599627370496}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("div:1309", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("div:1310", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("div:1311", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 9007199254740992})
	})
	t.Run("div:1312", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 9232379236109516800})
	})
	t.Run("div:1313", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 9232379236109516800})
	})
	t.Run("div:1314", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 9007199254740992})
	})
	t.Run("div:1315", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("div:1316", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("div:1317", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("div:1318", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("div:1319", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 716770142402832})
	})
	t.Run("div:1320", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 9224088806997178640})
	})
	t.Run("div:1321", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 9224088806997178640})
	})
	t.Run("div:1322", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 716770142402832})
	})
	t.Run("div:1323", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0})
	})
	t.Run("div:1324", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1325", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1326", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0})
	})
	t.Run("div:1327", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0})
	})
	t.Run("div:1328", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1329", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1330", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0})
	})
	t.Run("div:1331", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1332", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1333", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1334", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1335", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1336", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1337", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1338", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1339", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1340", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 0}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1341", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1342", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 0}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1343", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1344", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 1}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1345", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1346", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 1}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1347", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9205357638345293824})
	})
	t.Run("div:1348", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4503599627370496}}, arg{wa.F64, 18428729675200069632})
	})
	t.Run("div:1349", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 18428729675200069632})
	})
	t.Run("div:1350", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9205357638345293824})
	})
	t.Run("div:1351", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("div:1352", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("div:1353", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("div:1354", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("div:1355", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("div:1356", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("div:1357", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("div:1358", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("div:1359", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 4590398581802387587})
	})
	t.Run("div:1360", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 13813770618657163395})
	})
	t.Run("div:1361", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13813770618657163395})
	})
	t.Run("div:1362", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4590398581802387587})
	})
	t.Run("div:1363", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 562949953421312})
	})
	t.Run("div:1364", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9223934986808197120})
	})
	t.Run("div:1365", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9223934986808197120})
	})
	t.Run("div:1366", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 562949953421312})
	})
	t.Run("div:1367", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0})
	})
	t.Run("div:1368", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1369", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1370", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0})
	})
	t.Run("div:1371", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1372", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1373", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1374", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1375", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1376", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1377", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1378", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1379", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1380", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 0}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1381", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1382", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 0}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1383", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1384", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 1}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1385", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1386", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 1}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1387", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9209861237972664320})
	})
	t.Run("div:1388", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4503599627370496}}, arg{wa.F64, 18433233274827440128})
	})
	t.Run("div:1389", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 18433233274827440128})
	})
	t.Run("div:1390", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9209861237972664320})
	})
	t.Run("div:1391", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 4611686018427387904})
	})
	t.Run("div:1392", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 13835058055282163712})
	})
	t.Run("div:1393", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13835058055282163712})
	})
	t.Run("div:1394", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4611686018427387904})
	})
	t.Run("div:1395", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("div:1396", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("div:1397", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("div:1398", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("div:1399", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 4594902181429758083})
	})
	t.Run("div:1400", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 13818274218284533891})
	})
	t.Run("div:1401", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13818274218284533891})
	})
	t.Run("div:1402", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4594902181429758083})
	})
	t.Run("div:1403", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 1125899906842624})
	})
	t.Run("div:1404", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9224497936761618432})
	})
	t.Run("div:1405", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9224497936761618432})
	})
	t.Run("div:1406", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 1125899906842624})
	})
	t.Run("div:1407", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0})
	})
	t.Run("div:1408", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1409", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1410", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0})
	})
	t.Run("div:1411", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1412", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1413", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1414", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1415", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1416", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1417", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1418", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1419", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1420", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 0}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1421", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1422", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 0}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1423", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1424", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 1}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1425", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1426", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 1}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1427", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1428", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4503599627370496}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1429", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1430", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1431", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 4623263855806786840})
	})
	t.Run("div:1432", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 13846635892661562648})
	})
	t.Run("div:1433", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13846635892661562648})
	})
	t.Run("div:1434", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4623263855806786840})
	})
	t.Run("div:1435", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("div:1436", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("div:1437", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("div:1438", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("div:1439", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("div:1440", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("div:1441", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("div:1442", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("div:1443", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 7074237752028441})
	})
	t.Run("div:1444", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9230446274606804249})
	})
	t.Run("div:1445", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9230446274606804249})
	})
	t.Run("div:1446", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 7074237752028441})
	})
	t.Run("div:1447", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0})
	})
	t.Run("div:1448", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1449", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1450", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0})
	})
	t.Run("div:1451", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1452", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1453", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1454", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1455", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1456", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1457", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1458", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1459", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1460", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 0}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1461", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1462", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 0}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1463", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1464", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 1}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1465", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1466", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 1}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1467", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1468", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4503599627370496}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1469", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1470", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1471", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1472", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1473", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1474", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1475", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("div:1476", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("div:1477", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("div:1478", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("div:1479", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 9206588199857145986})
	})
	t.Run("div:1480", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 18429960236711921794})
	})
	t.Run("div:1481", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 18429960236711921794})
	})
	t.Run("div:1482", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 9206588199857145986})
	})
	t.Run("div:1483", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("div:1484", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("div:1485", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("div:1486", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("div:1487", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0})
	})
	t.Run("div:1488", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1489", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("div:1490", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0})
	})
	t.Run("div:1491", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1492", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1493", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1494", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1495", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1496", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1497", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1498", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1499", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1500", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 0}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1501", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1502", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 0}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1503", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1504", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 1}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1505", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1506", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 1}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1507", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1508", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4503599627370496}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1509", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1510", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1511", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1512", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1513", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1514", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1515", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1516", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1517", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1518", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1519", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1520", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1521", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1522", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1523", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1524", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1525", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("div:1526", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("div:1527", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1528", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1529", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1530", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1531", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1532", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1533", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1534", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1535", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1536", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1537", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1538", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1539", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1540", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1541", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 0}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1542", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 0}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1543", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1544", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1545", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 0}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1546", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 0}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1547", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1548", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1549", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 1}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1550", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 1}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1551", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1552", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1553", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 1}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1554", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 1}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1555", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1556", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1557", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1558", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1559", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1560", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1561", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1562", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1563", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1564", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1565", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1566", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1567", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1568", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1569", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1570", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1571", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1572", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1573", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1574", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1575", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1576", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1577", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1578", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1579", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1580", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1581", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1582", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1583", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1584", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1585", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1586", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1587", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1588", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1589", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1590", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1591", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1592", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1593", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1594", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1595", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1596", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1597", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1598", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1599", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1600", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1601", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1602", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1603", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1604", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1605", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1606", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1607", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1608", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1609", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1610", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1611", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1612", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1613", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1614", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1615", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("div:1616", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1617", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("div:1618", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1619", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("min:1620", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 0}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("min:1621", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("min:1622", func(t *testing.T) { x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 0}, {wa.F64, 0}}, arg{wa.F64, 0}) })
	t.Run("min:1623", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("min:1624", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 1}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("min:1625", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("min:1626", func(t *testing.T) { x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 0}, {wa.F64, 1}}, arg{wa.F64, 0}) })
	t.Run("min:1627", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("min:1628", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("min:1629", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 0}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("min:1630", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 0}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0})
	})
	t.Run("min:1631", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("min:1632", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("min:1633", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 0}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("min:1634", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 0}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0})
	})
	t.Run("min:1635", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("min:1636", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("min:1637", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 0}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("min:1638", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 0}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0})
	})
	t.Run("min:1639", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("min:1640", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("min:1641", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 0}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("min:1642", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 0}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0})
	})
	t.Run("min:1643", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1644", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("min:1645", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 0}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1646", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 0}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0})
	})
	t.Run("min:1647", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1648", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("min:1649", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 0}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1650", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 0}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0})
	})
	t.Run("min:1651", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1652", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1653", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1654", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1655", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 0}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1656", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 0}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1657", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 0}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1658", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 0}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1659", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("min:1660", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 0}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("min:1661", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 1}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("min:1662", func(t *testing.T) { x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 1}, {wa.F64, 0}}, arg{wa.F64, 0}) })
	t.Run("min:1663", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("min:1664", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 1}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("min:1665", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 1}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("min:1666", func(t *testing.T) { x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 1}, {wa.F64, 1}}, arg{wa.F64, 1}) })
	t.Run("min:1667", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("min:1668", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("min:1669", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 1}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("min:1670", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 1}, {wa.F64, 4503599627370496}}, arg{wa.F64, 1})
	})
	t.Run("min:1671", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("min:1672", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("min:1673", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 1}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("min:1674", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 1}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 1})
	})
	t.Run("min:1675", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("min:1676", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("min:1677", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 1}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("min:1678", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 1}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 1})
	})
	t.Run("min:1679", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("min:1680", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("min:1681", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 1}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("min:1682", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 1}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 1})
	})
	t.Run("min:1683", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1684", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("min:1685", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 1}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1686", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 1}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 1})
	})
	t.Run("min:1687", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1688", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("min:1689", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 1}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1690", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 1}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 1})
	})
	t.Run("min:1691", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1692", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1693", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1694", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1695", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 1}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1696", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 1}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1697", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 1}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1698", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 1}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1699", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("min:1700", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 0}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("min:1701", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("min:1702", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4503599627370496}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("min:1703", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("min:1704", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 1}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("min:1705", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("min:1706", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4503599627370496}, {wa.F64, 1}}, arg{wa.F64, 1})
	})
	t.Run("min:1707", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("min:1708", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("min:1709", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("min:1710", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("min:1711", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("min:1712", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("min:1713", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("min:1714", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("min:1715", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("min:1716", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("min:1717", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("min:1718", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("min:1719", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("min:1720", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("min:1721", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("min:1722", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("min:1723", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1724", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("min:1725", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1726", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("min:1727", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1728", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("min:1729", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1730", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("min:1731", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1732", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1733", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1734", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1735", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1736", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1737", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1738", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1739", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("min:1740", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 0}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("min:1741", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("min:1742", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("min:1743", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("min:1744", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 1}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("min:1745", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("min:1746", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 1}}, arg{wa.F64, 1})
	})
	t.Run("min:1747", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("min:1748", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4503599627370496}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("min:1749", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("min:1750", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("min:1751", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("min:1752", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("min:1753", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("min:1754", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("min:1755", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("min:1756", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("min:1757", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("min:1758", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("min:1759", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("min:1760", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("min:1761", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("min:1762", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("min:1763", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1764", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("min:1765", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1766", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("min:1767", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1768", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("min:1769", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1770", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("min:1771", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1772", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1773", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1774", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1775", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1776", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1777", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1778", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1779", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("min:1780", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 0}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("min:1781", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("min:1782", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("min:1783", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("min:1784", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 1}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("min:1785", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("min:1786", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 1}}, arg{wa.F64, 1})
	})
	t.Run("min:1787", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("min:1788", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4503599627370496}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("min:1789", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("min:1790", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("min:1791", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("min:1792", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("min:1793", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("min:1794", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("min:1795", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("min:1796", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("min:1797", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("min:1798", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("min:1799", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("min:1800", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("min:1801", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("min:1802", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("min:1803", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1804", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("min:1805", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1806", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("min:1807", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1808", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("min:1809", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1810", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("min:1811", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1812", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1813", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1814", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1815", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1816", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1817", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1818", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1819", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("min:1820", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 0}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("min:1821", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("min:1822", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("min:1823", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("min:1824", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 1}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("min:1825", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("min:1826", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 1}}, arg{wa.F64, 1})
	})
	t.Run("min:1827", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("min:1828", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4503599627370496}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("min:1829", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("min:1830", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("min:1831", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("min:1832", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("min:1833", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("min:1834", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("min:1835", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("min:1836", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("min:1837", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("min:1838", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("min:1839", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("min:1840", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("min:1841", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("min:1842", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("min:1843", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1844", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("min:1845", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1846", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("min:1847", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1848", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("min:1849", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1850", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("min:1851", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1852", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1853", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1854", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1855", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1856", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1857", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1858", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1859", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1860", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 0}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1861", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("min:1862", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("min:1863", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1864", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 1}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1865", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("min:1866", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 1}}, arg{wa.F64, 1})
	})
	t.Run("min:1867", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1868", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4503599627370496}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1869", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("min:1870", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("min:1871", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1872", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1873", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("min:1874", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("min:1875", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1876", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1877", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("min:1878", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("min:1879", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1880", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1881", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("min:1882", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("min:1883", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1884", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1885", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1886", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("min:1887", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1888", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1889", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1890", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("min:1891", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1892", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1893", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1894", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1895", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1896", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1897", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1898", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1899", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1900", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 0}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1901", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("min:1902", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("min:1903", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1904", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 1}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1905", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("min:1906", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 1}}, arg{wa.F64, 1})
	})
	t.Run("min:1907", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1908", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4503599627370496}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1909", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("min:1910", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("min:1911", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1912", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1913", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("min:1914", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("min:1915", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1916", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1917", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("min:1918", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("min:1919", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1920", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1921", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("min:1922", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("min:1923", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1924", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1925", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("min:1926", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("min:1927", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1928", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1929", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("min:1930", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("min:1931", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1932", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1933", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1934", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1935", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1936", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1937", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1938", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1939", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1940", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1941", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 0}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1942", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 0}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1943", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1944", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1945", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 0}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1946", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 0}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1947", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1948", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1949", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 1}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1950", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 1}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1951", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1952", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1953", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 1}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1954", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 1}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1955", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1956", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1957", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1958", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1959", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1960", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1961", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1962", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1963", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1964", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1965", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1966", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1967", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1968", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1969", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1970", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1971", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1972", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1973", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1974", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1975", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1976", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1977", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1978", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1979", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1980", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1981", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1982", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1983", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1984", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1985", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1986", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1987", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1988", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1989", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1990", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1991", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1992", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1993", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1994", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1995", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1996", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1997", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:1998", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:1999", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:2000", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:2001", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:2002", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:2003", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:2004", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:2005", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:2006", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:2007", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:2008", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:2009", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:2010", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:2011", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:2012", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:2013", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:2014", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:2015", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("min:2016", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:2017", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("min:2018", func(t *testing.T) {
		x0.assertReturnInvoke(t, "min", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2019", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("max:2020", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("max:2021", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0})
	})
	t.Run("max:2022", func(t *testing.T) { x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 0}, {wa.F64, 0}}, arg{wa.F64, 0}) })
	t.Run("max:2023", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("max:2024", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 1}}, arg{wa.F64, 1})
	})
	t.Run("max:2025", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0})
	})
	t.Run("max:2026", func(t *testing.T) { x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 0}, {wa.F64, 1}}, arg{wa.F64, 1}) })
	t.Run("max:2027", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("max:2028", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("max:2029", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 0}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0})
	})
	t.Run("max:2030", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 0}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("max:2031", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("max:2032", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("max:2033", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 0}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0})
	})
	t.Run("max:2034", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 0}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("max:2035", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("max:2036", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("max:2037", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 0}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0})
	})
	t.Run("max:2038", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 0}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("max:2039", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("max:2040", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("max:2041", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 0}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0})
	})
	t.Run("max:2042", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 0}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("max:2043", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("max:2044", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2045", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 0}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0})
	})
	t.Run("max:2046", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 0}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2047", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("max:2048", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2049", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 0}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0})
	})
	t.Run("max:2050", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 0}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2051", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2052", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2053", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2054", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2055", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 0}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2056", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 0}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2057", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 0}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2058", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 0}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2059", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("max:2060", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("max:2061", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 1}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 1})
	})
	t.Run("max:2062", func(t *testing.T) { x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 1}, {wa.F64, 0}}, arg{wa.F64, 1}) })
	t.Run("max:2063", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("max:2064", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 1}}, arg{wa.F64, 1})
	})
	t.Run("max:2065", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 1}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 1})
	})
	t.Run("max:2066", func(t *testing.T) { x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 1}, {wa.F64, 1}}, arg{wa.F64, 1}) })
	t.Run("max:2067", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("max:2068", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("max:2069", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 1}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 1})
	})
	t.Run("max:2070", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 1}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("max:2071", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("max:2072", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("max:2073", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 1}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 1})
	})
	t.Run("max:2074", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 1}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("max:2075", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("max:2076", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("max:2077", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 1}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 1})
	})
	t.Run("max:2078", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 1}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("max:2079", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("max:2080", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("max:2081", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 1}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 1})
	})
	t.Run("max:2082", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 1}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("max:2083", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("max:2084", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2085", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 1}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 1})
	})
	t.Run("max:2086", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 1}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2087", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("max:2088", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2089", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 1}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 1})
	})
	t.Run("max:2090", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 1}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2091", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2092", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2093", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2094", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2095", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 1}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2096", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 1}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2097", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 1}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2098", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 1}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2099", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("max:2100", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("max:2101", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("max:2102", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4503599627370496}, {wa.F64, 0}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("max:2103", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("max:2104", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 1}}, arg{wa.F64, 1})
	})
	t.Run("max:2105", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("max:2106", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4503599627370496}, {wa.F64, 1}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("max:2107", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("max:2108", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("max:2109", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("max:2110", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("max:2111", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("max:2112", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("max:2113", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("max:2114", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("max:2115", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("max:2116", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("max:2117", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("max:2118", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("max:2119", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("max:2120", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("max:2121", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("max:2122", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("max:2123", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("max:2124", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2125", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("max:2126", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2127", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("max:2128", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2129", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("max:2130", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2131", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2132", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2133", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2134", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2135", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2136", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2137", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2138", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2139", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("max:2140", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("max:2141", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("max:2142", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 0}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("max:2143", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("max:2144", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 1}}, arg{wa.F64, 1})
	})
	t.Run("max:2145", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("max:2146", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 1}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("max:2147", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("max:2148", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("max:2149", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("max:2150", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("max:2151", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("max:2152", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("max:2153", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("max:2154", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("max:2155", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("max:2156", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("max:2157", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("max:2158", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("max:2159", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("max:2160", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("max:2161", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("max:2162", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("max:2163", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("max:2164", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2165", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("max:2166", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2167", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("max:2168", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2169", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("max:2170", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2171", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2172", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2173", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2174", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2175", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2176", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2177", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2178", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2179", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("max:2180", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("max:2181", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("max:2182", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 0}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("max:2183", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("max:2184", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 1}}, arg{wa.F64, 1})
	})
	t.Run("max:2185", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("max:2186", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 1}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("max:2187", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("max:2188", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("max:2189", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("max:2190", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("max:2191", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("max:2192", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("max:2193", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("max:2194", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("max:2195", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("max:2196", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("max:2197", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("max:2198", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("max:2199", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("max:2200", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("max:2201", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("max:2202", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("max:2203", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("max:2204", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2205", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("max:2206", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2207", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("max:2208", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2209", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("max:2210", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2211", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2212", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2213", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2214", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2215", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2216", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2217", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2218", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2219", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("max:2220", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("max:2221", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("max:2222", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 0}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("max:2223", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("max:2224", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 1}}, arg{wa.F64, 1})
	})
	t.Run("max:2225", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("max:2226", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 1}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("max:2227", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("max:2228", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("max:2229", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("max:2230", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("max:2231", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("max:2232", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("max:2233", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("max:2234", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("max:2235", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("max:2236", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("max:2237", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("max:2238", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("max:2239", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("max:2240", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("max:2241", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("max:2242", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("max:2243", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("max:2244", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2245", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("max:2246", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2247", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("max:2248", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2249", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("max:2250", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2251", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2252", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2253", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2254", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2255", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2256", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2257", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2258", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2259", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("max:2260", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("max:2261", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2262", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 0}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2263", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("max:2264", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 1}}, arg{wa.F64, 1})
	})
	t.Run("max:2265", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2266", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 1}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2267", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("max:2268", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("max:2269", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2270", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2271", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("max:2272", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("max:2273", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2274", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2275", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("max:2276", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("max:2277", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2278", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2279", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("max:2280", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("max:2281", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2282", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2283", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("max:2284", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2285", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2286", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2287", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("max:2288", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2289", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2290", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2291", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2292", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2293", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2294", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2295", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2296", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2297", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2298", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2299", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("max:2300", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("max:2301", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2302", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 0}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2303", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("max:2304", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 1}}, arg{wa.F64, 1})
	})
	t.Run("max:2305", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2306", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 1}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2307", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("max:2308", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("max:2309", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2310", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2311", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("max:2312", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("max:2313", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2314", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2315", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("max:2316", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("max:2317", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2318", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2319", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("max:2320", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("max:2321", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2322", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2323", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("max:2324", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("max:2325", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2326", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2327", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("max:2328", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2329", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2330", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("max:2331", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2332", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2333", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2334", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2335", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2336", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2337", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2338", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2339", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2340", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2341", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 0}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2342", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 0}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2343", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2344", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2345", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 0}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2346", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 0}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2347", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2348", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2349", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 1}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2350", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 1}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2351", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2352", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2353", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 1}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2354", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 1}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2355", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2356", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2357", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2358", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2359", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2360", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2361", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2362", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2363", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2364", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2365", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2366", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2367", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2368", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2369", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2370", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2371", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2372", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2373", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2374", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2375", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2376", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2377", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2378", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2379", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2380", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2381", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2382", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2383", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2384", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2385", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2386", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2387", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2388", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2389", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2390", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2391", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2392", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2393", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2394", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2395", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2396", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2397", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2398", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2399", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2400", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2401", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2402", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2403", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2404", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2405", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2406", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2407", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2408", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2409", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2410", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2411", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2412", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2413", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2414", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2415", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("max:2416", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2417", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("max:2418", func(t *testing.T) {
		x0.assertReturnInvoke(t, "max", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sqrt:2419", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("sqrt:2420", func(t *testing.T) { x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F64, 0}}, arg{wa.F64, 0}) })
	t.Run("sqrt:2421", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F64, 9223372036854775809}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sqrt:2422", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F64, 1}}, arg{wa.F64, 2188749418902061056})
	})
	t.Run("sqrt:2423", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F64, 9227875636482146304}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sqrt:2424", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F64, 4503599627370496}}, arg{wa.F64, 2305843009213693952})
	})
	t.Run("sqrt:2425", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F64, 13826050856027422720}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sqrt:2426", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F64, 4602678819172646912}}, arg{wa.F64, 4604544271217802189})
	})
	t.Run("sqrt:2427", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F64, 13830554455654793216}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sqrt:2428", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("sqrt:2429", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F64, 13842132293034192152}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sqrt:2430", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F64, 4618760256179416344}}, arg{wa.F64, 4612826843881809669})
	})
	t.Run("sqrt:2431", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F64, 18442240474082181119}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sqrt:2432", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F64, 9218868437227405311}}, arg{wa.F64, 6913025428013711359})
	})
	t.Run("sqrt:2433", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sqrt:2434", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("sqrt:2435", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sqrt:2436", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("sqrt:2437", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("sqrt:2438", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sqrt", []arg{{wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("floor:2439", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("floor:2440", func(t *testing.T) { x0.assertReturnInvoke(t, "floor", []arg{{wa.F64, 0}}, arg{wa.F64, 0}) })
	t.Run("floor:2441", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F64, 9223372036854775809}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("floor:2442", func(t *testing.T) { x0.assertReturnInvoke(t, "floor", []arg{{wa.F64, 1}}, arg{wa.F64, 0}) })
	t.Run("floor:2443", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F64, 9227875636482146304}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("floor:2444", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F64, 4503599627370496}}, arg{wa.F64, 0})
	})
	t.Run("floor:2445", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F64, 13826050856027422720}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("floor:2446", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F64, 4602678819172646912}}, arg{wa.F64, 0})
	})
	t.Run("floor:2447", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("floor:2448", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("floor:2449", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F64, 13842132293034192152}}, arg{wa.F64, 13842939354630062080})
	})
	t.Run("floor:2450", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F64, 4618760256179416344}}, arg{wa.F64, 4618441417868443648})
	})
	t.Run("floor:2451", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("floor:2452", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("floor:2453", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("floor:2454", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("floor:2455", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("floor:2456", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("floor:2457", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("floor:2458", func(t *testing.T) {
		x0.assertReturnInvoke(t, "floor", []arg{{wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("ceil:2459", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("ceil:2460", func(t *testing.T) { x0.assertReturnInvoke(t, "ceil", []arg{{wa.F64, 0}}, arg{wa.F64, 0}) })
	t.Run("ceil:2461", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("ceil:2462", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F64, 1}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("ceil:2463", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F64, 9227875636482146304}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("ceil:2464", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F64, 4503599627370496}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("ceil:2465", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F64, 13826050856027422720}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("ceil:2466", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F64, 4602678819172646912}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("ceil:2467", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("ceil:2468", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("ceil:2469", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F64, 13842132293034192152}}, arg{wa.F64, 13841813454723219456})
	})
	t.Run("ceil:2470", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F64, 4618760256179416344}}, arg{wa.F64, 4619567317775286272})
	})
	t.Run("ceil:2471", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("ceil:2472", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("ceil:2473", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("ceil:2474", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("ceil:2475", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("ceil:2476", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("ceil:2477", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("ceil:2478", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ceil", []arg{{wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("trunc:2479", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("trunc:2480", func(t *testing.T) { x0.assertReturnInvoke(t, "trunc", []arg{{wa.F64, 0}}, arg{wa.F64, 0}) })
	t.Run("trunc:2481", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("trunc:2482", func(t *testing.T) { x0.assertReturnInvoke(t, "trunc", []arg{{wa.F64, 1}}, arg{wa.F64, 0}) })
	t.Run("trunc:2483", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F64, 9227875636482146304}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("trunc:2484", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F64, 4503599627370496}}, arg{wa.F64, 0})
	})
	t.Run("trunc:2485", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F64, 13826050856027422720}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("trunc:2486", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F64, 4602678819172646912}}, arg{wa.F64, 0})
	})
	t.Run("trunc:2487", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("trunc:2488", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("trunc:2489", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F64, 13842132293034192152}}, arg{wa.F64, 13841813454723219456})
	})
	t.Run("trunc:2490", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F64, 4618760256179416344}}, arg{wa.F64, 4618441417868443648})
	})
	t.Run("trunc:2491", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("trunc:2492", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("trunc:2493", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("trunc:2494", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("trunc:2495", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("trunc:2496", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("trunc:2497", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("trunc:2498", func(t *testing.T) {
		x0.assertReturnInvoke(t, "trunc", []arg{{wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("nearest:2499", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("nearest:2500", func(t *testing.T) { x0.assertReturnInvoke(t, "nearest", []arg{{wa.F64, 0}}, arg{wa.F64, 0}) })
	t.Run("nearest:2501", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("nearest:2502", func(t *testing.T) { x0.assertReturnInvoke(t, "nearest", []arg{{wa.F64, 1}}, arg{wa.F64, 0}) })
	t.Run("nearest:2503", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F64, 9227875636482146304}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("nearest:2504", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F64, 4503599627370496}}, arg{wa.F64, 0})
	})
	t.Run("nearest:2505", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F64, 13826050856027422720}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("nearest:2506", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F64, 4602678819172646912}}, arg{wa.F64, 0})
	})
	t.Run("nearest:2507", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("nearest:2508", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("nearest:2509", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F64, 13842132293034192152}}, arg{wa.F64, 13841813454723219456})
	})
	t.Run("nearest:2510", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F64, 4618760256179416344}}, arg{wa.F64, 4618441417868443648})
	})
	t.Run("nearest:2511", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("nearest:2512", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("nearest:2513", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("nearest:2514", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("nearest:2515", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F64, 18444492273895866368}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("nearest:2516", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F64, 18443366373989023744}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("nearest:2517", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("nearest:2518", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nearest", []arg{{wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	t.Run("assert_invalid:2523", func(t *testing.T) { assertInvalidSpec(t, "f64.1.wasm", "type mismatch") })
	t.Run("assert_invalid:2524", func(t *testing.T) { assertInvalidSpec(t, "f64.2.wasm", "type mismatch") })
	t.Run("assert_invalid:2525", func(t *testing.T) { assertInvalidSpec(t, "f64.3.wasm", "type mismatch") })
	t.Run("assert_invalid:2526", func(t *testing.T) { assertInvalidSpec(t, "f64.4.wasm", "type mismatch") })
	t.Run("assert_invalid:2527", func(t *testing.T) { assertInvalidSpec(t, "f64.5.wasm", "type mismatch") })
	t.Run("assert_invalid:2528", func(t *testing.T) { assertInvalidSpec(t, "f64.6.wasm", "type mismatch") })
	t.Run("assert_invalid:2529", func(t *testing.T) { assertInvalidSpec(t, "f64.7.wasm", "type mismatch") })
	t.Run("assert_invalid:2530", func(t *testing.T) { assertInvalidSpec(t, "f64.8.wasm", "type mismatch") })
	t.Run("assert_invalid:2531", func(t *testing.T) { assertInvalidSpec(t, "f64.9.wasm", "type mismatch") })
	t.Run("assert_invalid:2532", func(t *testing.T) { assertInvalidSpec(t, "f64.10.wasm", "type mismatch") })
	t.Run("assert_invalid:2533", func(t *testing.T) { assertInvalidSpec(t, "f64.11.wasm", "type mismatch") })
	t.Run("assert_malformed:2537", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:2541", func(t *testing.T) { t.Skip("text format not supported") })
}

func Test_f64_bitwise(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "f64_bitwise.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("copysign:10", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("copysign:11", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("copysign:12", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("copysign:13", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 0}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("copysign:14", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("copysign:15", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 1}}, arg{wa.F64, 0})
	})
	t.Run("copysign:16", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("copysign:17", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 0}, {wa.F64, 1}}, arg{wa.F64, 0})
	})
	t.Run("copysign:18", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("copysign:19", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0})
	})
	t.Run("copysign:20", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 0}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("copysign:21", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 0}, {wa.F64, 4503599627370496}}, arg{wa.F64, 0})
	})
	t.Run("copysign:22", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("copysign:23", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0})
	})
	t.Run("copysign:24", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 0}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("copysign:25", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 0}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 0})
	})
	t.Run("copysign:26", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("copysign:27", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0})
	})
	t.Run("copysign:28", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 0}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("copysign:29", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 0}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0})
	})
	t.Run("copysign:30", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("copysign:31", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0})
	})
	t.Run("copysign:32", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 0}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("copysign:33", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 0}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 0})
	})
	t.Run("copysign:34", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("copysign:35", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0})
	})
	t.Run("copysign:36", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 0}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("copysign:37", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 0}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0})
	})
	t.Run("copysign:38", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("copysign:39", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0})
	})
	t.Run("copysign:40", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 0}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("copysign:41", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 0}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 0})
	})
	t.Run("copysign:42", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("copysign:43", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0})
	})
	t.Run("copysign:44", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 0}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("copysign:45", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 0}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 0})
	})
	t.Run("copysign:46", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("copysign:47", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 0}}, arg{wa.F64, 1})
	})
	t.Run("copysign:48", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 1}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("copysign:49", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 1}, {wa.F64, 0}}, arg{wa.F64, 1})
	})
	t.Run("copysign:50", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("copysign:51", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 1}}, arg{wa.F64, 1})
	})
	t.Run("copysign:52", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 1}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("copysign:53", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 1}, {wa.F64, 1}}, arg{wa.F64, 1})
	})
	t.Run("copysign:54", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("copysign:55", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4503599627370496}}, arg{wa.F64, 1})
	})
	t.Run("copysign:56", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 1}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("copysign:57", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 1}, {wa.F64, 4503599627370496}}, arg{wa.F64, 1})
	})
	t.Run("copysign:58", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("copysign:59", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 1})
	})
	t.Run("copysign:60", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 1}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("copysign:61", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 1}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 1})
	})
	t.Run("copysign:62", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("copysign:63", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 1})
	})
	t.Run("copysign:64", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 1}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("copysign:65", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 1}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 1})
	})
	t.Run("copysign:66", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("copysign:67", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 1})
	})
	t.Run("copysign:68", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 1}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("copysign:69", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 1}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 1})
	})
	t.Run("copysign:70", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("copysign:71", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 1})
	})
	t.Run("copysign:72", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 1}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("copysign:73", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 1}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 1})
	})
	t.Run("copysign:74", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("copysign:75", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 1})
	})
	t.Run("copysign:76", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 1}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("copysign:77", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 1}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 1})
	})
	t.Run("copysign:78", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("copysign:79", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 1})
	})
	t.Run("copysign:80", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 1}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("copysign:81", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 1}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 1})
	})
	t.Run("copysign:82", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("copysign:83", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 0}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("copysign:84", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("copysign:85", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4503599627370496}, {wa.F64, 0}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("copysign:86", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("copysign:87", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 1}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("copysign:88", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("copysign:89", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4503599627370496}, {wa.F64, 1}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("copysign:90", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("copysign:91", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("copysign:92", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("copysign:93", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("copysign:94", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("copysign:95", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("copysign:96", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("copysign:97", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("copysign:98", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("copysign:99", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("copysign:100", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("copysign:101", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("copysign:102", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("copysign:103", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("copysign:104", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("copysign:105", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("copysign:106", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("copysign:107", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("copysign:108", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("copysign:109", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("copysign:110", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("copysign:111", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("copysign:112", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("copysign:113", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("copysign:114", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("copysign:115", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("copysign:116", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("copysign:117", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("copysign:118", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("copysign:119", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 0}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("copysign:120", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("copysign:121", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 0}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("copysign:122", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("copysign:123", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 1}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("copysign:124", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("copysign:125", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 1}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("copysign:126", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("copysign:127", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("copysign:128", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("copysign:129", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("copysign:130", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("copysign:131", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("copysign:132", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("copysign:133", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("copysign:134", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("copysign:135", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("copysign:136", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("copysign:137", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("copysign:138", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("copysign:139", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("copysign:140", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("copysign:141", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("copysign:142", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("copysign:143", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("copysign:144", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("copysign:145", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("copysign:146", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("copysign:147", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("copysign:148", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("copysign:149", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("copysign:150", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("copysign:151", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("copysign:152", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("copysign:153", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("copysign:154", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("copysign:155", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 0}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("copysign:156", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("copysign:157", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 0}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("copysign:158", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("copysign:159", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 1}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("copysign:160", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("copysign:161", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 1}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("copysign:162", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("copysign:163", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("copysign:164", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("copysign:165", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("copysign:166", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("copysign:167", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("copysign:168", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("copysign:169", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("copysign:170", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("copysign:171", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("copysign:172", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("copysign:173", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("copysign:174", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("copysign:175", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("copysign:176", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("copysign:177", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("copysign:178", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("copysign:179", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("copysign:180", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("copysign:181", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("copysign:182", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("copysign:183", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("copysign:184", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("copysign:185", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("copysign:186", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("copysign:187", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("copysign:188", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("copysign:189", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("copysign:190", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("copysign:191", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 0}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("copysign:192", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("copysign:193", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 0}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("copysign:194", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("copysign:195", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 1}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("copysign:196", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("copysign:197", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 1}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("copysign:198", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("copysign:199", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("copysign:200", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("copysign:201", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("copysign:202", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("copysign:203", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("copysign:204", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("copysign:205", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("copysign:206", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("copysign:207", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("copysign:208", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("copysign:209", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("copysign:210", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("copysign:211", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("copysign:212", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("copysign:213", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("copysign:214", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("copysign:215", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("copysign:216", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("copysign:217", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("copysign:218", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("copysign:219", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("copysign:220", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("copysign:221", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("copysign:222", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("copysign:223", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("copysign:224", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("copysign:225", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("copysign:226", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("copysign:227", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 0}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("copysign:228", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("copysign:229", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 0}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("copysign:230", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("copysign:231", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 1}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("copysign:232", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("copysign:233", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 1}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("copysign:234", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("copysign:235", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("copysign:236", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("copysign:237", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("copysign:238", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("copysign:239", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("copysign:240", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("copysign:241", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("copysign:242", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("copysign:243", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("copysign:244", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("copysign:245", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("copysign:246", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("copysign:247", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("copysign:248", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("copysign:249", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("copysign:250", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("copysign:251", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("copysign:252", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("copysign:253", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("copysign:254", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("copysign:255", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("copysign:256", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("copysign:257", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("copysign:258", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("copysign:259", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("copysign:260", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("copysign:261", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("copysign:262", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("copysign:263", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 0}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("copysign:264", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("copysign:265", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 0}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("copysign:266", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("copysign:267", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 1}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("copysign:268", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("copysign:269", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 1}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("copysign:270", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("copysign:271", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("copysign:272", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("copysign:273", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("copysign:274", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("copysign:275", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("copysign:276", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("copysign:277", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("copysign:278", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("copysign:279", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("copysign:280", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("copysign:281", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("copysign:282", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("copysign:283", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("copysign:284", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("copysign:285", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("copysign:286", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("copysign:287", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("copysign:288", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("copysign:289", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("copysign:290", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("copysign:291", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("copysign:292", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("copysign:293", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("copysign:294", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("copysign:295", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("copysign:296", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("copysign:297", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("copysign:298", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 18444492273895866368})
	})
	t.Run("copysign:299", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 0}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("copysign:300", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 18444492273895866368})
	})
	t.Run("copysign:301", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 0}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("copysign:302", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 18444492273895866368})
	})
	t.Run("copysign:303", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 1}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("copysign:304", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9223372036854775809}}, arg{wa.F64, 18444492273895866368})
	})
	t.Run("copysign:305", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 1}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("copysign:306", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 18444492273895866368})
	})
	t.Run("copysign:307", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("copysign:308", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9227875636482146304}}, arg{wa.F64, 18444492273895866368})
	})
	t.Run("copysign:309", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4503599627370496}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("copysign:310", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 18444492273895866368})
	})
	t.Run("copysign:311", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("copysign:312", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13826050856027422720}}, arg{wa.F64, 18444492273895866368})
	})
	t.Run("copysign:313", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("copysign:314", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 18444492273895866368})
	})
	t.Run("copysign:315", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("copysign:316", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 18444492273895866368})
	})
	t.Run("copysign:317", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("copysign:318", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 18444492273895866368})
	})
	t.Run("copysign:319", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("copysign:320", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13842132293034192152}}, arg{wa.F64, 18444492273895866368})
	})
	t.Run("copysign:321", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4618760256179416344}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("copysign:322", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18444492273895866368})
	})
	t.Run("copysign:323", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("copysign:324", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18442240474082181119}}, arg{wa.F64, 18444492273895866368})
	})
	t.Run("copysign:325", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("copysign:326", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18444492273895866368})
	})
	t.Run("copysign:327", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("copysign:328", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18442240474082181120}}, arg{wa.F64, 18444492273895866368})
	})
	t.Run("copysign:329", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9218868437227405312}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("copysign:330", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 18444492273895866368})
	})
	t.Run("copysign:331", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("copysign:332", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 18444492273895866368})
	})
	t.Run("copysign:333", func(t *testing.T) {
		x0.assertReturnInvoke(t, "copysign", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("abs:334", func(t *testing.T) {
		x0.assertReturnInvoke(t, "abs", []arg{{wa.F64, 9223372036854775808}}, arg{wa.F64, 0})
	})
	t.Run("abs:335", func(t *testing.T) { x0.assertReturnInvoke(t, "abs", []arg{{wa.F64, 0}}, arg{wa.F64, 0}) })
	t.Run("abs:336", func(t *testing.T) {
		x0.assertReturnInvoke(t, "abs", []arg{{wa.F64, 9223372036854775809}}, arg{wa.F64, 1})
	})
	t.Run("abs:337", func(t *testing.T) { x0.assertReturnInvoke(t, "abs", []arg{{wa.F64, 1}}, arg{wa.F64, 1}) })
	t.Run("abs:338", func(t *testing.T) {
		x0.assertReturnInvoke(t, "abs", []arg{{wa.F64, 9227875636482146304}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("abs:339", func(t *testing.T) {
		x0.assertReturnInvoke(t, "abs", []arg{{wa.F64, 4503599627370496}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("abs:340", func(t *testing.T) {
		x0.assertReturnInvoke(t, "abs", []arg{{wa.F64, 13826050856027422720}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("abs:341", func(t *testing.T) {
		x0.assertReturnInvoke(t, "abs", []arg{{wa.F64, 4602678819172646912}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("abs:342", func(t *testing.T) {
		x0.assertReturnInvoke(t, "abs", []arg{{wa.F64, 13830554455654793216}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("abs:343", func(t *testing.T) {
		x0.assertReturnInvoke(t, "abs", []arg{{wa.F64, 4607182418800017408}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("abs:344", func(t *testing.T) {
		x0.assertReturnInvoke(t, "abs", []arg{{wa.F64, 13842132293034192152}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("abs:345", func(t *testing.T) {
		x0.assertReturnInvoke(t, "abs", []arg{{wa.F64, 4618760256179416344}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("abs:346", func(t *testing.T) {
		x0.assertReturnInvoke(t, "abs", []arg{{wa.F64, 18442240474082181119}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("abs:347", func(t *testing.T) {
		x0.assertReturnInvoke(t, "abs", []arg{{wa.F64, 9218868437227405311}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("abs:348", func(t *testing.T) {
		x0.assertReturnInvoke(t, "abs", []arg{{wa.F64, 18442240474082181120}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("abs:349", func(t *testing.T) {
		x0.assertReturnInvoke(t, "abs", []arg{{wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("abs:350", func(t *testing.T) {
		x0.assertReturnInvoke(t, "abs", []arg{{wa.F64, 18444492273895866368}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("abs:351", func(t *testing.T) {
		x0.assertReturnInvoke(t, "abs", []arg{{wa.F64, 9221120237041090560}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("neg:352", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F64, 9223372036854775808}}, arg{wa.F64, 0})
	})
	t.Run("neg:353", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F64, 0}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("neg:354", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F64, 9223372036854775809}}, arg{wa.F64, 1})
	})
	t.Run("neg:355", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F64, 1}}, arg{wa.F64, 9223372036854775809})
	})
	t.Run("neg:356", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F64, 9227875636482146304}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("neg:357", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F64, 4503599627370496}}, arg{wa.F64, 9227875636482146304})
	})
	t.Run("neg:358", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F64, 13826050856027422720}}, arg{wa.F64, 4602678819172646912})
	})
	t.Run("neg:359", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F64, 4602678819172646912}}, arg{wa.F64, 13826050856027422720})
	})
	t.Run("neg:360", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F64, 13830554455654793216}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("neg:361", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F64, 4607182418800017408}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("neg:362", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F64, 13842132293034192152}}, arg{wa.F64, 4618760256179416344})
	})
	t.Run("neg:363", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F64, 4618760256179416344}}, arg{wa.F64, 13842132293034192152})
	})
	t.Run("neg:364", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F64, 18442240474082181119}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("neg:365", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F64, 9218868437227405311}}, arg{wa.F64, 18442240474082181119})
	})
	t.Run("neg:366", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F64, 18442240474082181120}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("neg:367", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F64, 9218868437227405312}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("neg:368", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F64, 18444492273895866368}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("neg:369", func(t *testing.T) {
		x0.assertReturnInvoke(t, "neg", []arg{{wa.F64, 9221120237041090560}}, arg{wa.F64, 18444492273895866368})
	})
	t.Run("assert_invalid:374", func(t *testing.T) { assertInvalidSpec(t, "f64_bitwise.1.wasm", "type mismatch") })
	t.Run("assert_invalid:375", func(t *testing.T) { assertInvalidSpec(t, "f64_bitwise.2.wasm", "type mismatch") })
	t.Run("assert_invalid:376", func(t *testing.T) { assertInvalidSpec(t, "f64_bitwise.3.wasm", "type mismatch") })
}

func Test_f64_cmp(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "f64_cmp.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("eq:13", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("eq:14", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("eq:15", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("eq:16", func(t *testing.T) { x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 0}, {wa.F64, 0}}, arg{wa.I32, 1}) })
	t.Run("eq:17", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("eq:18", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:19", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("eq:20", func(t *testing.T) { x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 0}, {wa.F64, 1}}, arg{wa.I32, 0}) })
	t.Run("eq:21", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("eq:22", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("eq:23", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 0}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("eq:24", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 0}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("eq:25", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("eq:26", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("eq:27", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 0}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("eq:28", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 0}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("eq:29", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("eq:30", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("eq:31", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 0}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("eq:32", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 0}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("eq:33", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("eq:34", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("eq:35", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 0}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("eq:36", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 0}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("eq:37", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("eq:38", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("eq:39", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 0}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("eq:40", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 0}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("eq:41", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("eq:42", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("eq:43", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 0}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("eq:44", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 0}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("eq:45", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("eq:46", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("eq:47", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("eq:48", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("eq:49", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 0}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("eq:50", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 0}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("eq:51", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 0}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("eq:52", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 0}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("eq:53", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("eq:54", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:55", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 1}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("eq:56", func(t *testing.T) { x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 1}, {wa.F64, 0}}, arg{wa.I32, 0}) })
	t.Run("eq:57", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("eq:58", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:59", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 1}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("eq:60", func(t *testing.T) { x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 1}, {wa.F64, 1}}, arg{wa.I32, 1}) })
	t.Run("eq:61", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("eq:62", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("eq:63", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 1}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("eq:64", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 1}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("eq:65", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("eq:66", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("eq:67", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 1}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("eq:68", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 1}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("eq:69", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("eq:70", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("eq:71", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 1}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("eq:72", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 1}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("eq:73", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("eq:74", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("eq:75", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 1}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("eq:76", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 1}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("eq:77", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("eq:78", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("eq:79", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 1}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("eq:80", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 1}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("eq:81", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("eq:82", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("eq:83", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 1}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("eq:84", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 1}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("eq:85", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("eq:86", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("eq:87", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("eq:88", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("eq:89", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 1}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("eq:90", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 1}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("eq:91", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 1}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("eq:92", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 1}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("eq:93", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("eq:94", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:95", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("eq:96", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4503599627370496}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:97", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("eq:98", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:99", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("eq:100", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4503599627370496}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:101", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("eq:102", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("eq:103", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("eq:104", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("eq:105", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("eq:106", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("eq:107", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("eq:108", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("eq:109", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("eq:110", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("eq:111", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("eq:112", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("eq:113", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("eq:114", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("eq:115", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("eq:116", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("eq:117", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("eq:118", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("eq:119", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("eq:120", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("eq:121", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("eq:122", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("eq:123", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("eq:124", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("eq:125", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("eq:126", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("eq:127", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("eq:128", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("eq:129", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("eq:130", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("eq:131", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("eq:132", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("eq:133", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("eq:134", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:135", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("eq:136", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:137", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("eq:138", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:139", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("eq:140", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:141", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("eq:142", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("eq:143", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("eq:144", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("eq:145", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("eq:146", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("eq:147", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("eq:148", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("eq:149", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("eq:150", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("eq:151", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("eq:152", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("eq:153", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("eq:154", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("eq:155", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("eq:156", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("eq:157", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("eq:158", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("eq:159", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("eq:160", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("eq:161", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("eq:162", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("eq:163", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("eq:164", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("eq:165", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("eq:166", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("eq:167", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("eq:168", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("eq:169", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("eq:170", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("eq:171", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("eq:172", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("eq:173", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("eq:174", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:175", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("eq:176", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:177", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("eq:178", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:179", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("eq:180", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:181", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("eq:182", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("eq:183", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("eq:184", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("eq:185", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("eq:186", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("eq:187", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("eq:188", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("eq:189", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("eq:190", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("eq:191", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("eq:192", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("eq:193", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("eq:194", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("eq:195", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("eq:196", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("eq:197", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("eq:198", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("eq:199", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("eq:200", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("eq:201", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("eq:202", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("eq:203", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("eq:204", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("eq:205", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("eq:206", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("eq:207", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("eq:208", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("eq:209", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("eq:210", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("eq:211", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("eq:212", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("eq:213", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("eq:214", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:215", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("eq:216", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:217", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("eq:218", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:219", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("eq:220", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:221", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("eq:222", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("eq:223", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("eq:224", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("eq:225", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("eq:226", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("eq:227", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("eq:228", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("eq:229", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("eq:230", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("eq:231", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("eq:232", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("eq:233", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("eq:234", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("eq:235", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("eq:236", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("eq:237", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("eq:238", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("eq:239", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("eq:240", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("eq:241", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("eq:242", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("eq:243", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("eq:244", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("eq:245", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("eq:246", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("eq:247", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("eq:248", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("eq:249", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("eq:250", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("eq:251", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("eq:252", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("eq:253", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("eq:254", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:255", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("eq:256", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:257", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("eq:258", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:259", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("eq:260", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:261", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("eq:262", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("eq:263", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("eq:264", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("eq:265", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("eq:266", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("eq:267", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("eq:268", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("eq:269", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("eq:270", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("eq:271", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("eq:272", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("eq:273", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("eq:274", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("eq:275", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("eq:276", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("eq:277", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("eq:278", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("eq:279", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("eq:280", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("eq:281", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("eq:282", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("eq:283", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("eq:284", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("eq:285", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("eq:286", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("eq:287", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("eq:288", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("eq:289", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("eq:290", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("eq:291", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("eq:292", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("eq:293", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("eq:294", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:295", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("eq:296", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:297", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("eq:298", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:299", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("eq:300", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:301", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("eq:302", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("eq:303", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("eq:304", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("eq:305", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("eq:306", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("eq:307", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("eq:308", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("eq:309", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("eq:310", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("eq:311", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("eq:312", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("eq:313", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("eq:314", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("eq:315", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("eq:316", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("eq:317", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("eq:318", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("eq:319", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("eq:320", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("eq:321", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("eq:322", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("eq:323", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("eq:324", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("eq:325", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("eq:326", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("eq:327", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("eq:328", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("eq:329", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("eq:330", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("eq:331", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("eq:332", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("eq:333", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("eq:334", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("eq:335", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:336", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:337", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("eq:338", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("eq:339", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:340", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:341", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("eq:342", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("eq:343", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:344", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:345", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("eq:346", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("eq:347", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:348", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:349", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("eq:350", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("eq:351", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("eq:352", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("eq:353", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("eq:354", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("eq:355", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("eq:356", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("eq:357", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("eq:358", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("eq:359", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("eq:360", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("eq:361", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("eq:362", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("eq:363", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("eq:364", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("eq:365", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("eq:366", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("eq:367", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("eq:368", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("eq:369", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("eq:370", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("eq:371", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("eq:372", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("eq:373", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("eq:374", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("eq:375", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("eq:376", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("eq:377", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("eq:378", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("eq:379", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("eq:380", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("eq:381", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("eq:382", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("eq:383", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("eq:384", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("eq:385", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("eq:386", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("eq:387", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("eq:388", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("eq:389", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("eq:390", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("eq:391", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("eq:392", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("eq:393", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("eq:394", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("eq:395", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("eq:396", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("eq:397", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("eq:398", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("eq:399", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("eq:400", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("eq:401", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("eq:402", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("eq:403", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("eq:404", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("eq:405", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("eq:406", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("eq:407", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("eq:408", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("eq:409", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("eq:410", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("eq:411", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("eq:412", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("ne:413", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("ne:414", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("ne:415", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("ne:416", func(t *testing.T) { x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 0}, {wa.F64, 0}}, arg{wa.I32, 0}) })
	t.Run("ne:417", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ne:418", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:419", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ne:420", func(t *testing.T) { x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 0}, {wa.F64, 1}}, arg{wa.I32, 1}) })
	t.Run("ne:421", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ne:422", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("ne:423", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 0}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ne:424", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 0}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("ne:425", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ne:426", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("ne:427", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 0}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ne:428", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 0}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("ne:429", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ne:430", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("ne:431", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 0}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ne:432", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 0}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("ne:433", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ne:434", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("ne:435", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 0}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ne:436", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 0}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("ne:437", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ne:438", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("ne:439", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 0}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ne:440", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 0}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("ne:441", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ne:442", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("ne:443", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 0}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ne:444", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 0}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("ne:445", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 1})
	})
	t.Run("ne:446", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 1})
	})
	t.Run("ne:447", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 1})
	})
	t.Run("ne:448", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 1})
	})
	t.Run("ne:449", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 0}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 1})
	})
	t.Run("ne:450", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 0}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 1})
	})
	t.Run("ne:451", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 0}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 1})
	})
	t.Run("ne:452", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 0}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 1})
	})
	t.Run("ne:453", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ne:454", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:455", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 1}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ne:456", func(t *testing.T) { x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 1}, {wa.F64, 0}}, arg{wa.I32, 1}) })
	t.Run("ne:457", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("ne:458", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:459", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 1}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ne:460", func(t *testing.T) { x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 1}, {wa.F64, 1}}, arg{wa.I32, 0}) })
	t.Run("ne:461", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ne:462", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("ne:463", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 1}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ne:464", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 1}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("ne:465", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ne:466", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("ne:467", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 1}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ne:468", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 1}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("ne:469", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ne:470", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("ne:471", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 1}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ne:472", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 1}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("ne:473", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ne:474", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("ne:475", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 1}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ne:476", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 1}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("ne:477", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ne:478", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("ne:479", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 1}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ne:480", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 1}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("ne:481", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ne:482", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("ne:483", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 1}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ne:484", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 1}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("ne:485", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 1})
	})
	t.Run("ne:486", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 1})
	})
	t.Run("ne:487", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 1})
	})
	t.Run("ne:488", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 1})
	})
	t.Run("ne:489", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 1}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 1})
	})
	t.Run("ne:490", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 1}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 1})
	})
	t.Run("ne:491", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 1}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 1})
	})
	t.Run("ne:492", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 1}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 1})
	})
	t.Run("ne:493", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ne:494", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:495", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ne:496", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4503599627370496}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:497", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ne:498", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:499", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ne:500", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4503599627370496}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:501", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("ne:502", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("ne:503", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ne:504", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("ne:505", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ne:506", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("ne:507", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ne:508", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("ne:509", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ne:510", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("ne:511", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ne:512", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("ne:513", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ne:514", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("ne:515", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ne:516", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("ne:517", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ne:518", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("ne:519", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ne:520", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("ne:521", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ne:522", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("ne:523", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ne:524", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("ne:525", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 1})
	})
	t.Run("ne:526", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 1})
	})
	t.Run("ne:527", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 1})
	})
	t.Run("ne:528", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 1})
	})
	t.Run("ne:529", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 1})
	})
	t.Run("ne:530", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 1})
	})
	t.Run("ne:531", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 1})
	})
	t.Run("ne:532", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 1})
	})
	t.Run("ne:533", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ne:534", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:535", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ne:536", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:537", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ne:538", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:539", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ne:540", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:541", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ne:542", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("ne:543", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ne:544", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("ne:545", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("ne:546", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("ne:547", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ne:548", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("ne:549", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ne:550", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("ne:551", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ne:552", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("ne:553", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ne:554", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("ne:555", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ne:556", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("ne:557", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ne:558", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("ne:559", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ne:560", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("ne:561", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ne:562", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("ne:563", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ne:564", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("ne:565", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 1})
	})
	t.Run("ne:566", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 1})
	})
	t.Run("ne:567", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 1})
	})
	t.Run("ne:568", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 1})
	})
	t.Run("ne:569", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 1})
	})
	t.Run("ne:570", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 1})
	})
	t.Run("ne:571", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 1})
	})
	t.Run("ne:572", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 1})
	})
	t.Run("ne:573", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ne:574", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:575", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ne:576", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:577", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ne:578", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:579", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ne:580", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:581", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ne:582", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("ne:583", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ne:584", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("ne:585", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ne:586", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("ne:587", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ne:588", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("ne:589", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("ne:590", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("ne:591", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ne:592", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("ne:593", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ne:594", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("ne:595", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ne:596", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("ne:597", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ne:598", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("ne:599", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ne:600", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("ne:601", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ne:602", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("ne:603", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ne:604", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("ne:605", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 1})
	})
	t.Run("ne:606", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 1})
	})
	t.Run("ne:607", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 1})
	})
	t.Run("ne:608", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 1})
	})
	t.Run("ne:609", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 1})
	})
	t.Run("ne:610", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 1})
	})
	t.Run("ne:611", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 1})
	})
	t.Run("ne:612", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 1})
	})
	t.Run("ne:613", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ne:614", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:615", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ne:616", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:617", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ne:618", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:619", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ne:620", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:621", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ne:622", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("ne:623", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ne:624", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("ne:625", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ne:626", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("ne:627", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ne:628", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("ne:629", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ne:630", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("ne:631", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ne:632", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("ne:633", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("ne:634", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("ne:635", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ne:636", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("ne:637", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ne:638", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("ne:639", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ne:640", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("ne:641", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ne:642", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("ne:643", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ne:644", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("ne:645", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 1})
	})
	t.Run("ne:646", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 1})
	})
	t.Run("ne:647", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 1})
	})
	t.Run("ne:648", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 1})
	})
	t.Run("ne:649", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 1})
	})
	t.Run("ne:650", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 1})
	})
	t.Run("ne:651", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 1})
	})
	t.Run("ne:652", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 1})
	})
	t.Run("ne:653", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ne:654", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:655", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ne:656", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:657", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ne:658", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:659", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ne:660", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:661", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ne:662", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("ne:663", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ne:664", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("ne:665", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ne:666", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("ne:667", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ne:668", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("ne:669", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ne:670", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("ne:671", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ne:672", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("ne:673", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ne:674", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("ne:675", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ne:676", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("ne:677", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("ne:678", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("ne:679", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ne:680", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("ne:681", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ne:682", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("ne:683", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ne:684", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("ne:685", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 1})
	})
	t.Run("ne:686", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 1})
	})
	t.Run("ne:687", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 1})
	})
	t.Run("ne:688", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 1})
	})
	t.Run("ne:689", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 1})
	})
	t.Run("ne:690", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 1})
	})
	t.Run("ne:691", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 1})
	})
	t.Run("ne:692", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 1})
	})
	t.Run("ne:693", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ne:694", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:695", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ne:696", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:697", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ne:698", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:699", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ne:700", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:701", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ne:702", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("ne:703", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ne:704", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("ne:705", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ne:706", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("ne:707", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ne:708", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("ne:709", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ne:710", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("ne:711", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ne:712", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("ne:713", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ne:714", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("ne:715", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ne:716", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("ne:717", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ne:718", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("ne:719", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ne:720", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("ne:721", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("ne:722", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("ne:723", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ne:724", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("ne:725", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 1})
	})
	t.Run("ne:726", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 1})
	})
	t.Run("ne:727", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 1})
	})
	t.Run("ne:728", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 1})
	})
	t.Run("ne:729", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 1})
	})
	t.Run("ne:730", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 1})
	})
	t.Run("ne:731", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 1})
	})
	t.Run("ne:732", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 1})
	})
	t.Run("ne:733", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ne:734", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ne:735", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:736", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:737", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ne:738", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ne:739", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:740", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:741", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ne:742", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ne:743", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:744", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:745", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ne:746", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ne:747", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:748", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:749", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ne:750", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ne:751", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("ne:752", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("ne:753", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ne:754", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ne:755", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("ne:756", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("ne:757", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ne:758", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ne:759", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("ne:760", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("ne:761", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ne:762", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ne:763", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("ne:764", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("ne:765", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ne:766", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ne:767", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("ne:768", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("ne:769", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ne:770", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ne:771", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("ne:772", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("ne:773", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ne:774", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ne:775", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("ne:776", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("ne:777", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ne:778", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ne:779", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("ne:780", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("ne:781", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ne:782", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ne:783", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("ne:784", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("ne:785", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ne:786", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ne:787", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("ne:788", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("ne:789", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ne:790", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ne:791", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("ne:792", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("ne:793", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ne:794", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ne:795", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("ne:796", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("ne:797", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 1})
	})
	t.Run("ne:798", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 1})
	})
	t.Run("ne:799", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 1})
	})
	t.Run("ne:800", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 1})
	})
	t.Run("ne:801", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 1})
	})
	t.Run("ne:802", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 1})
	})
	t.Run("ne:803", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 1})
	})
	t.Run("ne:804", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 1})
	})
	t.Run("ne:805", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 1})
	})
	t.Run("ne:806", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 1})
	})
	t.Run("ne:807", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 1})
	})
	t.Run("ne:808", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 1})
	})
	t.Run("ne:809", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 1})
	})
	t.Run("ne:810", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 1})
	})
	t.Run("ne:811", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 1})
	})
	t.Run("ne:812", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 1})
	})
	t.Run("lt:813", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("lt:814", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("lt:815", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("lt:816", func(t *testing.T) { x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 0}, {wa.F64, 0}}, arg{wa.I32, 0}) })
	t.Run("lt:817", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("lt:818", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("lt:819", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("lt:820", func(t *testing.T) { x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 0}, {wa.F64, 1}}, arg{wa.I32, 1}) })
	t.Run("lt:821", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("lt:822", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("lt:823", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 0}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("lt:824", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 0}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("lt:825", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("lt:826", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("lt:827", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 0}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("lt:828", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 0}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("lt:829", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("lt:830", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("lt:831", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 0}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("lt:832", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 0}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("lt:833", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("lt:834", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("lt:835", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 0}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("lt:836", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 0}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("lt:837", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("lt:838", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("lt:839", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 0}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("lt:840", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 0}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("lt:841", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("lt:842", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("lt:843", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 0}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("lt:844", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 0}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("lt:845", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("lt:846", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("lt:847", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("lt:848", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("lt:849", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 0}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("lt:850", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 0}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("lt:851", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 0}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("lt:852", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 0}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("lt:853", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("lt:854", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("lt:855", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 1}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("lt:856", func(t *testing.T) { x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 1}, {wa.F64, 0}}, arg{wa.I32, 0}) })
	t.Run("lt:857", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("lt:858", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("lt:859", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 1}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("lt:860", func(t *testing.T) { x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 1}, {wa.F64, 1}}, arg{wa.I32, 0}) })
	t.Run("lt:861", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("lt:862", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("lt:863", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 1}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("lt:864", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 1}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("lt:865", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("lt:866", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("lt:867", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 1}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("lt:868", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 1}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("lt:869", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("lt:870", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("lt:871", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 1}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("lt:872", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 1}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("lt:873", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("lt:874", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("lt:875", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 1}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("lt:876", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 1}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("lt:877", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("lt:878", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("lt:879", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 1}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("lt:880", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 1}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("lt:881", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("lt:882", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("lt:883", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 1}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("lt:884", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 1}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("lt:885", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("lt:886", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("lt:887", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("lt:888", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("lt:889", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 1}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("lt:890", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 1}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("lt:891", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 1}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("lt:892", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 1}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("lt:893", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("lt:894", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("lt:895", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("lt:896", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("lt:897", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("lt:898", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("lt:899", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("lt:900", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("lt:901", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("lt:902", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("lt:903", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("lt:904", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("lt:905", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("lt:906", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("lt:907", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("lt:908", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("lt:909", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("lt:910", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("lt:911", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("lt:912", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("lt:913", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("lt:914", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("lt:915", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("lt:916", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("lt:917", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("lt:918", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("lt:919", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("lt:920", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("lt:921", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("lt:922", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("lt:923", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("lt:924", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("lt:925", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("lt:926", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("lt:927", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("lt:928", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("lt:929", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("lt:930", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("lt:931", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("lt:932", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("lt:933", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("lt:934", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("lt:935", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("lt:936", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("lt:937", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("lt:938", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("lt:939", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("lt:940", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("lt:941", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("lt:942", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("lt:943", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("lt:944", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("lt:945", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("lt:946", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("lt:947", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("lt:948", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("lt:949", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("lt:950", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("lt:951", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("lt:952", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("lt:953", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("lt:954", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("lt:955", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("lt:956", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("lt:957", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("lt:958", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("lt:959", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("lt:960", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("lt:961", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("lt:962", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("lt:963", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("lt:964", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("lt:965", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("lt:966", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("lt:967", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("lt:968", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("lt:969", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("lt:970", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("lt:971", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("lt:972", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("lt:973", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("lt:974", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("lt:975", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("lt:976", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("lt:977", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("lt:978", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("lt:979", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("lt:980", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("lt:981", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("lt:982", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("lt:983", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("lt:984", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("lt:985", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("lt:986", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("lt:987", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("lt:988", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("lt:989", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("lt:990", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("lt:991", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("lt:992", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("lt:993", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("lt:994", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("lt:995", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("lt:996", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("lt:997", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("lt:998", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("lt:999", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("lt:1000", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("lt:1001", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("lt:1002", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("lt:1003", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("lt:1004", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("lt:1005", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("lt:1006", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("lt:1007", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("lt:1008", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("lt:1009", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("lt:1010", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("lt:1011", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("lt:1012", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("lt:1013", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("lt:1014", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("lt:1015", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("lt:1016", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("lt:1017", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("lt:1018", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("lt:1019", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("lt:1020", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("lt:1021", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("lt:1022", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("lt:1023", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("lt:1024", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("lt:1025", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("lt:1026", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("lt:1027", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("lt:1028", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("lt:1029", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("lt:1030", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("lt:1031", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("lt:1032", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("lt:1033", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("lt:1034", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("lt:1035", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("lt:1036", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("lt:1037", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("lt:1038", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("lt:1039", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("lt:1040", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("lt:1041", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("lt:1042", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("lt:1043", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("lt:1044", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("lt:1045", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("lt:1046", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("lt:1047", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("lt:1048", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("lt:1049", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("lt:1050", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("lt:1051", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("lt:1052", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("lt:1053", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("lt:1054", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("lt:1055", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("lt:1056", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("lt:1057", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("lt:1058", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("lt:1059", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("lt:1060", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("lt:1061", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("lt:1062", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("lt:1063", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("lt:1064", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("lt:1065", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("lt:1066", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("lt:1067", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("lt:1068", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("lt:1069", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("lt:1070", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("lt:1071", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("lt:1072", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("lt:1073", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("lt:1074", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("lt:1075", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("lt:1076", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("lt:1077", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("lt:1078", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("lt:1079", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("lt:1080", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("lt:1081", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("lt:1082", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("lt:1083", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("lt:1084", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("lt:1085", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("lt:1086", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("lt:1087", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("lt:1088", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("lt:1089", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("lt:1090", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("lt:1091", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("lt:1092", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("lt:1093", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("lt:1094", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("lt:1095", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("lt:1096", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("lt:1097", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("lt:1098", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("lt:1099", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("lt:1100", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("lt:1101", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("lt:1102", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("lt:1103", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("lt:1104", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("lt:1105", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("lt:1106", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("lt:1107", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("lt:1108", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("lt:1109", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("lt:1110", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("lt:1111", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("lt:1112", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("lt:1113", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("lt:1114", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("lt:1115", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("lt:1116", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("lt:1117", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("lt:1118", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("lt:1119", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("lt:1120", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("lt:1121", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("lt:1122", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("lt:1123", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("lt:1124", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("lt:1125", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("lt:1126", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("lt:1127", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("lt:1128", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("lt:1129", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("lt:1130", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("lt:1131", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("lt:1132", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("lt:1133", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("lt:1134", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("lt:1135", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("lt:1136", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("lt:1137", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("lt:1138", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("lt:1139", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("lt:1140", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("lt:1141", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("lt:1142", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("lt:1143", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("lt:1144", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("lt:1145", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("lt:1146", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("lt:1147", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("lt:1148", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("lt:1149", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("lt:1150", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("lt:1151", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("lt:1152", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("lt:1153", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("lt:1154", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("lt:1155", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("lt:1156", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("lt:1157", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("lt:1158", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("lt:1159", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("lt:1160", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("lt:1161", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("lt:1162", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("lt:1163", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("lt:1164", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("lt:1165", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("lt:1166", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("lt:1167", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("lt:1168", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("lt:1169", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("lt:1170", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("lt:1171", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("lt:1172", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("lt:1173", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("lt:1174", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("lt:1175", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("lt:1176", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("lt:1177", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("lt:1178", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("lt:1179", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("lt:1180", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("lt:1181", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("lt:1182", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("lt:1183", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("lt:1184", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("lt:1185", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("lt:1186", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("lt:1187", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("lt:1188", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("lt:1189", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("lt:1190", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("lt:1191", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("lt:1192", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("lt:1193", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("lt:1194", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("lt:1195", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("lt:1196", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("lt:1197", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("lt:1198", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("lt:1199", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("lt:1200", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("lt:1201", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("lt:1202", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("lt:1203", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("lt:1204", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("lt:1205", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("lt:1206", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("lt:1207", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("lt:1208", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("lt:1209", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("lt:1210", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("lt:1211", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("lt:1212", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("le:1213", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("le:1214", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("le:1215", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("le:1216", func(t *testing.T) { x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 0}, {wa.F64, 0}}, arg{wa.I32, 1}) })
	t.Run("le:1217", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("le:1218", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("le:1219", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("le:1220", func(t *testing.T) { x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 0}, {wa.F64, 1}}, arg{wa.I32, 1}) })
	t.Run("le:1221", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("le:1222", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("le:1223", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 0}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("le:1224", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 0}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("le:1225", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("le:1226", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("le:1227", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 0}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("le:1228", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 0}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("le:1229", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("le:1230", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("le:1231", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 0}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("le:1232", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 0}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("le:1233", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("le:1234", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("le:1235", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 0}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("le:1236", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 0}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("le:1237", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("le:1238", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("le:1239", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 0}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("le:1240", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 0}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("le:1241", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("le:1242", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("le:1243", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 0}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("le:1244", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 0}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("le:1245", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("le:1246", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("le:1247", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("le:1248", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("le:1249", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 0}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("le:1250", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 0}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("le:1251", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 0}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("le:1252", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 0}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("le:1253", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("le:1254", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("le:1255", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 1}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("le:1256", func(t *testing.T) { x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 1}, {wa.F64, 0}}, arg{wa.I32, 0}) })
	t.Run("le:1257", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("le:1258", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("le:1259", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 1}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("le:1260", func(t *testing.T) { x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 1}, {wa.F64, 1}}, arg{wa.I32, 1}) })
	t.Run("le:1261", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("le:1262", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("le:1263", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 1}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("le:1264", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 1}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("le:1265", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("le:1266", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("le:1267", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 1}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("le:1268", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 1}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("le:1269", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("le:1270", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("le:1271", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 1}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("le:1272", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 1}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("le:1273", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("le:1274", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("le:1275", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 1}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("le:1276", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 1}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("le:1277", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("le:1278", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("le:1279", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 1}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("le:1280", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 1}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("le:1281", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("le:1282", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("le:1283", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 1}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("le:1284", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 1}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("le:1285", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("le:1286", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("le:1287", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("le:1288", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("le:1289", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 1}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("le:1290", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 1}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("le:1291", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 1}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("le:1292", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 1}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("le:1293", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("le:1294", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("le:1295", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("le:1296", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4503599627370496}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("le:1297", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("le:1298", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("le:1299", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("le:1300", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4503599627370496}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("le:1301", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("le:1302", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("le:1303", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("le:1304", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("le:1305", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("le:1306", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("le:1307", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("le:1308", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("le:1309", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("le:1310", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("le:1311", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("le:1312", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("le:1313", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("le:1314", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("le:1315", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("le:1316", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("le:1317", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("le:1318", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("le:1319", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("le:1320", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("le:1321", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("le:1322", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("le:1323", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("le:1324", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("le:1325", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("le:1326", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("le:1327", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("le:1328", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("le:1329", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("le:1330", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("le:1331", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("le:1332", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("le:1333", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("le:1334", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("le:1335", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("le:1336", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("le:1337", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("le:1338", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("le:1339", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("le:1340", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("le:1341", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("le:1342", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("le:1343", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("le:1344", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("le:1345", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("le:1346", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("le:1347", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("le:1348", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("le:1349", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("le:1350", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("le:1351", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("le:1352", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("le:1353", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("le:1354", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("le:1355", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("le:1356", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("le:1357", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("le:1358", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("le:1359", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("le:1360", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("le:1361", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("le:1362", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("le:1363", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("le:1364", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("le:1365", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("le:1366", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("le:1367", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("le:1368", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("le:1369", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("le:1370", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("le:1371", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("le:1372", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("le:1373", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("le:1374", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("le:1375", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("le:1376", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("le:1377", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("le:1378", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("le:1379", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("le:1380", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("le:1381", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("le:1382", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("le:1383", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("le:1384", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("le:1385", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("le:1386", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("le:1387", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("le:1388", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("le:1389", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("le:1390", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("le:1391", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("le:1392", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("le:1393", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("le:1394", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("le:1395", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("le:1396", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("le:1397", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("le:1398", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("le:1399", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("le:1400", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("le:1401", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("le:1402", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("le:1403", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("le:1404", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("le:1405", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("le:1406", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("le:1407", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("le:1408", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("le:1409", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("le:1410", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("le:1411", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("le:1412", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("le:1413", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("le:1414", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("le:1415", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("le:1416", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("le:1417", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("le:1418", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("le:1419", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("le:1420", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("le:1421", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("le:1422", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("le:1423", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("le:1424", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("le:1425", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("le:1426", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("le:1427", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("le:1428", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("le:1429", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("le:1430", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("le:1431", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("le:1432", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("le:1433", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("le:1434", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("le:1435", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("le:1436", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("le:1437", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("le:1438", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("le:1439", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("le:1440", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("le:1441", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("le:1442", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("le:1443", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("le:1444", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("le:1445", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("le:1446", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("le:1447", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("le:1448", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("le:1449", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("le:1450", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("le:1451", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("le:1452", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("le:1453", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("le:1454", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("le:1455", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("le:1456", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("le:1457", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("le:1458", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("le:1459", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("le:1460", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("le:1461", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("le:1462", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("le:1463", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("le:1464", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("le:1465", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("le:1466", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("le:1467", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("le:1468", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("le:1469", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("le:1470", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("le:1471", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("le:1472", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("le:1473", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("le:1474", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("le:1475", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("le:1476", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("le:1477", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("le:1478", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("le:1479", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("le:1480", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("le:1481", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("le:1482", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("le:1483", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("le:1484", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("le:1485", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("le:1486", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("le:1487", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("le:1488", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("le:1489", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("le:1490", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("le:1491", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("le:1492", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("le:1493", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("le:1494", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("le:1495", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("le:1496", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("le:1497", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("le:1498", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("le:1499", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("le:1500", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("le:1501", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("le:1502", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("le:1503", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("le:1504", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("le:1505", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("le:1506", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("le:1507", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("le:1508", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("le:1509", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("le:1510", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("le:1511", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("le:1512", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("le:1513", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("le:1514", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("le:1515", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("le:1516", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("le:1517", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("le:1518", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("le:1519", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("le:1520", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("le:1521", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("le:1522", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("le:1523", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("le:1524", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("le:1525", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("le:1526", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("le:1527", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("le:1528", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("le:1529", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("le:1530", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("le:1531", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("le:1532", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("le:1533", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("le:1534", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("le:1535", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("le:1536", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("le:1537", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("le:1538", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("le:1539", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("le:1540", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("le:1541", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("le:1542", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("le:1543", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("le:1544", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("le:1545", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("le:1546", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("le:1547", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("le:1548", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("le:1549", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("le:1550", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("le:1551", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("le:1552", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("le:1553", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("le:1554", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("le:1555", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("le:1556", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("le:1557", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("le:1558", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("le:1559", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("le:1560", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("le:1561", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("le:1562", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("le:1563", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("le:1564", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("le:1565", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("le:1566", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("le:1567", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("le:1568", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("le:1569", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("le:1570", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("le:1571", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("le:1572", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("le:1573", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("le:1574", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("le:1575", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("le:1576", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("le:1577", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("le:1578", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("le:1579", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("le:1580", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("le:1581", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("le:1582", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("le:1583", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("le:1584", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("le:1585", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("le:1586", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("le:1587", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("le:1588", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("le:1589", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("le:1590", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("le:1591", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("le:1592", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("le:1593", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("le:1594", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("le:1595", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("le:1596", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("le:1597", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("le:1598", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("le:1599", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("le:1600", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("le:1601", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("le:1602", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("le:1603", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("le:1604", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("le:1605", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("le:1606", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("le:1607", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("le:1608", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("le:1609", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("le:1610", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("le:1611", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("le:1612", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("gt:1613", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("gt:1614", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("gt:1615", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("gt:1616", func(t *testing.T) { x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 0}, {wa.F64, 0}}, arg{wa.I32, 0}) })
	t.Run("gt:1617", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("gt:1618", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("gt:1619", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("gt:1620", func(t *testing.T) { x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 0}, {wa.F64, 1}}, arg{wa.I32, 0}) })
	t.Run("gt:1621", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("gt:1622", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("gt:1623", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 0}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("gt:1624", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 0}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("gt:1625", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("gt:1626", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("gt:1627", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 0}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("gt:1628", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 0}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("gt:1629", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("gt:1630", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("gt:1631", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 0}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("gt:1632", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 0}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("gt:1633", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("gt:1634", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1635", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 0}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("gt:1636", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 0}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1637", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("gt:1638", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("gt:1639", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 0}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("gt:1640", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 0}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("gt:1641", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("gt:1642", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("gt:1643", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 0}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("gt:1644", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 0}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("gt:1645", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("gt:1646", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("gt:1647", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("gt:1648", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("gt:1649", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 0}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("gt:1650", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 0}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("gt:1651", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 0}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("gt:1652", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 0}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("gt:1653", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("gt:1654", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("gt:1655", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 1}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("gt:1656", func(t *testing.T) { x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 1}, {wa.F64, 0}}, arg{wa.I32, 1}) })
	t.Run("gt:1657", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("gt:1658", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("gt:1659", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 1}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("gt:1660", func(t *testing.T) { x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 1}, {wa.F64, 1}}, arg{wa.I32, 0}) })
	t.Run("gt:1661", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("gt:1662", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("gt:1663", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 1}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("gt:1664", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 1}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("gt:1665", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("gt:1666", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("gt:1667", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 1}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("gt:1668", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 1}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("gt:1669", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("gt:1670", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("gt:1671", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 1}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("gt:1672", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 1}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("gt:1673", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("gt:1674", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1675", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 1}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("gt:1676", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 1}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1677", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("gt:1678", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("gt:1679", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 1}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("gt:1680", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 1}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("gt:1681", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("gt:1682", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("gt:1683", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 1}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("gt:1684", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 1}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("gt:1685", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("gt:1686", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("gt:1687", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("gt:1688", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("gt:1689", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 1}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("gt:1690", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 1}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("gt:1691", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 1}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("gt:1692", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 1}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("gt:1693", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("gt:1694", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("gt:1695", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("gt:1696", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("gt:1697", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("gt:1698", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("gt:1699", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("gt:1700", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("gt:1701", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("gt:1702", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("gt:1703", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("gt:1704", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("gt:1705", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("gt:1706", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("gt:1707", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("gt:1708", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("gt:1709", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("gt:1710", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("gt:1711", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("gt:1712", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("gt:1713", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("gt:1714", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1715", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("gt:1716", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1717", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("gt:1718", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("gt:1719", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("gt:1720", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("gt:1721", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("gt:1722", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("gt:1723", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("gt:1724", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("gt:1725", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("gt:1726", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("gt:1727", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("gt:1728", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("gt:1729", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("gt:1730", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("gt:1731", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("gt:1732", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("gt:1733", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("gt:1734", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("gt:1735", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("gt:1736", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("gt:1737", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("gt:1738", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("gt:1739", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("gt:1740", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("gt:1741", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("gt:1742", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("gt:1743", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("gt:1744", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("gt:1745", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("gt:1746", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("gt:1747", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("gt:1748", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("gt:1749", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("gt:1750", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("gt:1751", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("gt:1752", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("gt:1753", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("gt:1754", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1755", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("gt:1756", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1757", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("gt:1758", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("gt:1759", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("gt:1760", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("gt:1761", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("gt:1762", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("gt:1763", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("gt:1764", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("gt:1765", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("gt:1766", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("gt:1767", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("gt:1768", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("gt:1769", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("gt:1770", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("gt:1771", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("gt:1772", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("gt:1773", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("gt:1774", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("gt:1775", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("gt:1776", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("gt:1777", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("gt:1778", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("gt:1779", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("gt:1780", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("gt:1781", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("gt:1782", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("gt:1783", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("gt:1784", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("gt:1785", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("gt:1786", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("gt:1787", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("gt:1788", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("gt:1789", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("gt:1790", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("gt:1791", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("gt:1792", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("gt:1793", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("gt:1794", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1795", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("gt:1796", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1797", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("gt:1798", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("gt:1799", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("gt:1800", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("gt:1801", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("gt:1802", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("gt:1803", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("gt:1804", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("gt:1805", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("gt:1806", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("gt:1807", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("gt:1808", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("gt:1809", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("gt:1810", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("gt:1811", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("gt:1812", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("gt:1813", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("gt:1814", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("gt:1815", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("gt:1816", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("gt:1817", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("gt:1818", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("gt:1819", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("gt:1820", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("gt:1821", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("gt:1822", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("gt:1823", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("gt:1824", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("gt:1825", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("gt:1826", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("gt:1827", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("gt:1828", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("gt:1829", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("gt:1830", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("gt:1831", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("gt:1832", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("gt:1833", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("gt:1834", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1835", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("gt:1836", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1837", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("gt:1838", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("gt:1839", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("gt:1840", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("gt:1841", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("gt:1842", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("gt:1843", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("gt:1844", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("gt:1845", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("gt:1846", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("gt:1847", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("gt:1848", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("gt:1849", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("gt:1850", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("gt:1851", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("gt:1852", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("gt:1853", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("gt:1854", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("gt:1855", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("gt:1856", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("gt:1857", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("gt:1858", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("gt:1859", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("gt:1860", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("gt:1861", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("gt:1862", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("gt:1863", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("gt:1864", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("gt:1865", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("gt:1866", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("gt:1867", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("gt:1868", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("gt:1869", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("gt:1870", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("gt:1871", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("gt:1872", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("gt:1873", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("gt:1874", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1875", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("gt:1876", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("gt:1877", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("gt:1878", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("gt:1879", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("gt:1880", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("gt:1881", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("gt:1882", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("gt:1883", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("gt:1884", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("gt:1885", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("gt:1886", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("gt:1887", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("gt:1888", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("gt:1889", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("gt:1890", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("gt:1891", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("gt:1892", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("gt:1893", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("gt:1894", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("gt:1895", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("gt:1896", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("gt:1897", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("gt:1898", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("gt:1899", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("gt:1900", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("gt:1901", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("gt:1902", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("gt:1903", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("gt:1904", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("gt:1905", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("gt:1906", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("gt:1907", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("gt:1908", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("gt:1909", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("gt:1910", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("gt:1911", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("gt:1912", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("gt:1913", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("gt:1914", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1915", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("gt:1916", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("gt:1917", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("gt:1918", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("gt:1919", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("gt:1920", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("gt:1921", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("gt:1922", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("gt:1923", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("gt:1924", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("gt:1925", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("gt:1926", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("gt:1927", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("gt:1928", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("gt:1929", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("gt:1930", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("gt:1931", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("gt:1932", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("gt:1933", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("gt:1934", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("gt:1935", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("gt:1936", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("gt:1937", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("gt:1938", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("gt:1939", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("gt:1940", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("gt:1941", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("gt:1942", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("gt:1943", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("gt:1944", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("gt:1945", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("gt:1946", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("gt:1947", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("gt:1948", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("gt:1949", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("gt:1950", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("gt:1951", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("gt:1952", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("gt:1953", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("gt:1954", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("gt:1955", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("gt:1956", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("gt:1957", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("gt:1958", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("gt:1959", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("gt:1960", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("gt:1961", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("gt:1962", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("gt:1963", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("gt:1964", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("gt:1965", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("gt:1966", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("gt:1967", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("gt:1968", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("gt:1969", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("gt:1970", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("gt:1971", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("gt:1972", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("gt:1973", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("gt:1974", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("gt:1975", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1976", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1977", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("gt:1978", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("gt:1979", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1980", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("gt:1981", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("gt:1982", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("gt:1983", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("gt:1984", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("gt:1985", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("gt:1986", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("gt:1987", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("gt:1988", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("gt:1989", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("gt:1990", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("gt:1991", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("gt:1992", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("gt:1993", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("gt:1994", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("gt:1995", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("gt:1996", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("gt:1997", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("gt:1998", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("gt:1999", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("gt:2000", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("gt:2001", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("gt:2002", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("gt:2003", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("gt:2004", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("gt:2005", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("gt:2006", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("gt:2007", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("gt:2008", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("gt:2009", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("gt:2010", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("gt:2011", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("gt:2012", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("ge:2013", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ge:2014", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("ge:2015", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ge:2016", func(t *testing.T) { x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 0}, {wa.F64, 0}}, arg{wa.I32, 1}) })
	t.Run("ge:2017", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ge:2018", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("ge:2019", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ge:2020", func(t *testing.T) { x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 0}, {wa.F64, 1}}, arg{wa.I32, 0}) })
	t.Run("ge:2021", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ge:2022", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("ge:2023", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 0}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ge:2024", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 0}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("ge:2025", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ge:2026", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("ge:2027", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 0}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ge:2028", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 0}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("ge:2029", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ge:2030", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("ge:2031", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 0}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ge:2032", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 0}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("ge:2033", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ge:2034", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2035", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 0}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ge:2036", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 0}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2037", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ge:2038", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("ge:2039", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 0}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ge:2040", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 0}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("ge:2041", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ge:2042", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("ge:2043", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 0}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ge:2044", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 0}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("ge:2045", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("ge:2046", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("ge:2047", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("ge:2048", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("ge:2049", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 0}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("ge:2050", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 0}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("ge:2051", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 0}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("ge:2052", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 0}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("ge:2053", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("ge:2054", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("ge:2055", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 1}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ge:2056", func(t *testing.T) { x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 1}, {wa.F64, 0}}, arg{wa.I32, 1}) })
	t.Run("ge:2057", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ge:2058", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("ge:2059", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 1}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ge:2060", func(t *testing.T) { x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 1}, {wa.F64, 1}}, arg{wa.I32, 1}) })
	t.Run("ge:2061", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ge:2062", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("ge:2063", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 1}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ge:2064", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 1}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("ge:2065", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ge:2066", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("ge:2067", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 1}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ge:2068", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 1}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("ge:2069", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ge:2070", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("ge:2071", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 1}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ge:2072", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 1}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("ge:2073", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ge:2074", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2075", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 1}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ge:2076", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 1}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2077", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ge:2078", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("ge:2079", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 1}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ge:2080", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 1}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("ge:2081", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ge:2082", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("ge:2083", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 1}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ge:2084", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 1}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("ge:2085", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("ge:2086", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("ge:2087", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("ge:2088", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9223372036854775809}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("ge:2089", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 1}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("ge:2090", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 1}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("ge:2091", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 1}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("ge:2092", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 1}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("ge:2093", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("ge:2094", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("ge:2095", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ge:2096", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4503599627370496}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("ge:2097", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("ge:2098", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("ge:2099", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ge:2100", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4503599627370496}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("ge:2101", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ge:2102", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("ge:2103", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ge:2104", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("ge:2105", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ge:2106", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("ge:2107", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ge:2108", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("ge:2109", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ge:2110", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("ge:2111", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ge:2112", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("ge:2113", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ge:2114", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2115", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4503599627370496}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ge:2116", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2117", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ge:2118", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("ge:2119", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ge:2120", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("ge:2121", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ge:2122", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("ge:2123", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ge:2124", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("ge:2125", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("ge:2126", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("ge:2127", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("ge:2128", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9227875636482146304}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("ge:2129", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("ge:2130", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4503599627370496}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("ge:2131", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("ge:2132", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4503599627370496}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("ge:2133", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("ge:2134", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("ge:2135", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ge:2136", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("ge:2137", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("ge:2138", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("ge:2139", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ge:2140", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("ge:2141", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("ge:2142", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("ge:2143", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ge:2144", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("ge:2145", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ge:2146", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("ge:2147", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ge:2148", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("ge:2149", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ge:2150", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("ge:2151", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ge:2152", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("ge:2153", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ge:2154", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2155", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ge:2156", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2157", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ge:2158", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("ge:2159", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ge:2160", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("ge:2161", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ge:2162", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("ge:2163", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ge:2164", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("ge:2165", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("ge:2166", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("ge:2167", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("ge:2168", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13826050856027422720}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("ge:2169", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("ge:2170", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("ge:2171", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("ge:2172", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("ge:2173", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("ge:2174", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("ge:2175", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ge:2176", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("ge:2177", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("ge:2178", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("ge:2179", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ge:2180", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("ge:2181", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("ge:2182", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("ge:2183", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ge:2184", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("ge:2185", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("ge:2186", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("ge:2187", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ge:2188", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("ge:2189", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ge:2190", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("ge:2191", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ge:2192", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("ge:2193", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ge:2194", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2195", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ge:2196", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2197", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ge:2198", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("ge:2199", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ge:2200", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("ge:2201", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ge:2202", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("ge:2203", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ge:2204", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("ge:2205", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("ge:2206", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("ge:2207", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("ge:2208", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13830554455654793216}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("ge:2209", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("ge:2210", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("ge:2211", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("ge:2212", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("ge:2213", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("ge:2214", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("ge:2215", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ge:2216", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("ge:2217", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("ge:2218", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("ge:2219", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ge:2220", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("ge:2221", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("ge:2222", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("ge:2223", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ge:2224", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("ge:2225", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("ge:2226", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("ge:2227", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ge:2228", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("ge:2229", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("ge:2230", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("ge:2231", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ge:2232", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("ge:2233", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ge:2234", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2235", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ge:2236", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("ge:2237", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ge:2238", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("ge:2239", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ge:2240", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("ge:2241", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ge:2242", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("ge:2243", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ge:2244", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("ge:2245", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("ge:2246", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("ge:2247", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("ge:2248", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 13842132293034192152}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("ge:2249", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("ge:2250", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("ge:2251", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("ge:2252", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 4618760256179416344}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("ge:2253", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("ge:2254", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("ge:2255", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ge:2256", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("ge:2257", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("ge:2258", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("ge:2259", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ge:2260", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("ge:2261", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("ge:2262", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("ge:2263", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ge:2264", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("ge:2265", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("ge:2266", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("ge:2267", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ge:2268", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("ge:2269", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("ge:2270", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("ge:2271", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ge:2272", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("ge:2273", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("ge:2274", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2275", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ge:2276", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("ge:2277", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ge:2278", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("ge:2279", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ge:2280", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("ge:2281", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ge:2282", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("ge:2283", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ge:2284", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("ge:2285", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("ge:2286", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("ge:2287", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("ge:2288", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181119}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("ge:2289", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("ge:2290", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("ge:2291", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("ge:2292", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("ge:2293", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("ge:2294", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("ge:2295", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ge:2296", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("ge:2297", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("ge:2298", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("ge:2299", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 1})
	})
	t.Run("ge:2300", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 1}}, arg{wa.I32, 1})
	})
	t.Run("ge:2301", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("ge:2302", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("ge:2303", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 1})
	})
	t.Run("ge:2304", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4503599627370496}}, arg{wa.I32, 1})
	})
	t.Run("ge:2305", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("ge:2306", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("ge:2307", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 1})
	})
	t.Run("ge:2308", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 1})
	})
	t.Run("ge:2309", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("ge:2310", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("ge:2311", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 1})
	})
	t.Run("ge:2312", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("ge:2313", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("ge:2314", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2315", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 1})
	})
	t.Run("ge:2316", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 1})
	})
	t.Run("ge:2317", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("ge:2318", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("ge:2319", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 1})
	})
	t.Run("ge:2320", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 1})
	})
	t.Run("ge:2321", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ge:2322", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("ge:2323", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 1})
	})
	t.Run("ge:2324", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 1})
	})
	t.Run("ge:2325", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("ge:2326", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("ge:2327", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("ge:2328", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("ge:2329", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("ge:2330", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("ge:2331", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("ge:2332", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("ge:2333", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("ge:2334", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("ge:2335", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("ge:2336", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("ge:2337", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("ge:2338", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("ge:2339", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("ge:2340", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 0}}, arg{wa.I32, 0})
	})
	t.Run("ge:2341", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("ge:2342", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("ge:2343", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("ge:2344", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("ge:2345", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("ge:2346", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9223372036854775809}}, arg{wa.I32, 0})
	})
	t.Run("ge:2347", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("ge:2348", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 1}}, arg{wa.I32, 0})
	})
	t.Run("ge:2349", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("ge:2350", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("ge:2351", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("ge:2352", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("ge:2353", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("ge:2354", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9227875636482146304}}, arg{wa.I32, 0})
	})
	t.Run("ge:2355", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("ge:2356", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4503599627370496}}, arg{wa.I32, 0})
	})
	t.Run("ge:2357", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("ge:2358", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("ge:2359", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("ge:2360", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("ge:2361", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("ge:2362", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13826050856027422720}}, arg{wa.I32, 0})
	})
	t.Run("ge:2363", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("ge:2364", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4602678819172646912}}, arg{wa.I32, 0})
	})
	t.Run("ge:2365", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("ge:2366", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("ge:2367", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("ge:2368", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("ge:2369", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("ge:2370", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13830554455654793216}}, arg{wa.I32, 0})
	})
	t.Run("ge:2371", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("ge:2372", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("ge:2373", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("ge:2374", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("ge:2375", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2376", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2377", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("ge:2378", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 13842132293034192152}}, arg{wa.I32, 0})
	})
	t.Run("ge:2379", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2380", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 4618760256179416344}}, arg{wa.I32, 0})
	})
	t.Run("ge:2381", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("ge:2382", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("ge:2383", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("ge:2384", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("ge:2385", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("ge:2386", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18442240474082181119}}, arg{wa.I32, 0})
	})
	t.Run("ge:2387", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("ge:2388", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9218868437227405311}}, arg{wa.I32, 0})
	})
	t.Run("ge:2389", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("ge:2390", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("ge:2391", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("ge:2392", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("ge:2393", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("ge:2394", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18442240474082181120}}, arg{wa.I32, 0})
	})
	t.Run("ge:2395", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("ge:2396", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	t.Run("ge:2397", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("ge:2398", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("ge:2399", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("ge:2400", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("ge:2401", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("ge:2402", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("ge:2403", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18444492273895866368}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("ge:2404", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 18443366373989023744}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("ge:2405", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("ge:2406", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18444492273895866368}}, arg{wa.I32, 0})
	})
	t.Run("ge:2407", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("ge:2408", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 18443366373989023744}}, arg{wa.I32, 0})
	})
	t.Run("ge:2409", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("ge:2410", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("ge:2411", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("ge:2412", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge", []arg{{wa.F64, 9219994337134247936}, {wa.F64, 9219994337134247936}}, arg{wa.I32, 0})
	})
	t.Run("assert_invalid:2417", func(t *testing.T) { assertInvalidSpec(t, "f64_cmp.1.wasm", "type mismatch") })
	t.Run("assert_invalid:2418", func(t *testing.T) { assertInvalidSpec(t, "f64_cmp.2.wasm", "type mismatch") })
	t.Run("assert_invalid:2419", func(t *testing.T) { assertInvalidSpec(t, "f64_cmp.3.wasm", "type mismatch") })
	t.Run("assert_invalid:2420", func(t *testing.T) { assertInvalidSpec(t, "f64_cmp.4.wasm", "type mismatch") })
	t.Run("assert_invalid:2421", func(t *testing.T) { assertInvalidSpec(t, "f64_cmp.5.wasm", "type mismatch") })
	t.Run("assert_invalid:2422", func(t *testing.T) { assertInvalidSpec(t, "f64_cmp.6.wasm", "type mismatch") })
}

func Test_fac(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "fac.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("fac-rec:102", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fac-rec", []arg{{wa.I64, 25}}, arg{wa.I64, 7034535277573963776})
	})
	t.Run("fac-iter:103", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fac-iter", []arg{{wa.I64, 25}}, arg{wa.I64, 7034535277573963776})
	})
	t.Run("fac-rec-named:104", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fac-rec-named", []arg{{wa.I64, 25}}, arg{wa.I64, 7034535277573963776})
	})
	t.Run("fac-iter-named:105", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fac-iter-named", []arg{{wa.I64, 25}}, arg{wa.I64, 7034535277573963776})
	})
	t.Run("fac-opt:106", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fac-opt", []arg{{wa.I64, 25}}, arg{wa.I64, 7034535277573963776})
	})
	t.Run("fac-ssa:107", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fac-ssa", []arg{{wa.I64, 25}}, arg{wa.I64, 7034535277573963776})
	})
	t.Run("fac-rec:109", func(t *testing.T) {
		x0.assertExhaustion(t, "fac-rec", []arg{{wa.I64, 1073741824}}, arg{Type: wa.I64}, "call stack exhausted")
	})
}

func Test_float_exprs(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "float_exprs.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("f64.no_contraction:11", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.no_contraction", []arg{{wa.F64, 13369472591878845359}, {wa.F64, 7598224971858294334}, {wa.F64, 7009968021366006149}}, arg{wa.F64, 16360919150252594323})
	})
	t.Run("f64.no_contraction:12", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.no_contraction", []arg{{wa.F64, 4845207016438394692}, {wa.F64, 3163224970157846858}, {wa.F64, 3251145870828527841}}, arg{wa.F64, 3401457070760597396})
	})
	t.Run("f64.no_contraction:13", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.no_contraction", []arg{{wa.F64, 11159707324127586240}, {wa.F64, 7011538096610110295}, {wa.F64, 4140382893275160737}}, arg{wa.F64, 13564076370790560102})
	})
	t.Run("f64.no_contraction:14", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.no_contraction", []arg{{wa.F64, 4300281701552927458}, {wa.F64, 13379479906516703876}, {wa.F64, 3629658278272971302}}, arg{wa.F64, 13072631228492738408})
	})
	t.Run("f64.no_contraction:15", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.no_contraction", []arg{{wa.F64, 9554523352352050493}, {wa.F64, 18042841594766434431}, {wa.F64, 4368037109959396445}}, arg{wa.F64, 4544162191519938727})
	})
	x1 := instantiateSpecTest(t, "1", "float_exprs.1.wasm")
	t.Cleanup(func() { x1.close(t) })
	t.Run("f32.no_fma:26", func(t *testing.T) {
		x1.assertReturnInvoke(t, "f32.no_fma", []arg{{wa.F32, 2111029761}, {wa.F32, 879215268}, {wa.F32, 1967953261}}, arg{wa.F32, 1968345878})
	})
	t.Run("f32.no_fma:27", func(t *testing.T) {
		x1.assertReturnInvoke(t, "f32.no_fma", []arg{{wa.F32, 838240978}, {wa.F32, 2796592697}, {wa.F32, 329493464}}, arg{wa.F32, 2569667420})
	})
	t.Run("f32.no_fma:28", func(t *testing.T) {
		x1.assertReturnInvoke(t, "f32.no_fma", []arg{{wa.F32, 1381446097}, {wa.F32, 962187981}, {wa.F32, 1155576972}}, arg{wa.F32, 1278680110})
	})
	t.Run("f32.no_fma:29", func(t *testing.T) {
		x1.assertReturnInvoke(t, "f32.no_fma", []arg{{wa.F32, 999635965}, {wa.F32, 3403528619}, {wa.F32, 3222888213}}, arg{wa.F32, 3338748778})
	})
	t.Run("f32.no_fma:30", func(t *testing.T) {
		x1.assertReturnInvoke(t, "f32.no_fma", []arg{{wa.F32, 2123679707}, {wa.F32, 2625733638}, {wa.F32, 3500197619}}, arg{wa.F32, 3684076259})
	})
	t.Run("f64.no_fma:31", func(t *testing.T) {
		x1.assertReturnInvoke(t, "f64.no_fma", []arg{{wa.F64, 7118716943724900052}, {wa.F64, 6546073043412611735}, {wa.F64, 18275705786238687882}}, arg{wa.F64, 9054581441422375136})
	})
	t.Run("f64.no_fma:32", func(t *testing.T) {
		x1.assertReturnInvoke(t, "f64.no_fma", []arg{{wa.F64, 7984371788751700236}, {wa.F64, 4021745400549737956}, {wa.F64, 7188568268293775252}}, arg{wa.F64, 7398962198428541884})
	})
	t.Run("f64.no_fma:33", func(t *testing.T) {
		x1.assertReturnInvoke(t, "f64.no_fma", []arg{{wa.F64, 1362668175782178275}, {wa.F64, 18385570095786966502}, {wa.F64, 5677031731722859914}}, arg{wa.F64, 15141616602947129037})
	})
	t.Run("f64.no_fma:34", func(t *testing.T) {
		x1.assertReturnInvoke(t, "f64.no_fma", []arg{{wa.F64, 12093403956019835987}, {wa.F64, 15826077508588652458}, {wa.F64, 4856562394320338043}}, arg{wa.F64, 4867219230351674394})
	})
	t.Run("f64.no_fma:35", func(t *testing.T) {
		x1.assertReturnInvoke(t, "f64.no_fma", []arg{{wa.F64, 4843589256781277081}, {wa.F64, 7695653093478086834}, {wa.F64, 16938438850771988744}}, arg{wa.F64, 7932313162666085329})
	})
	x2 := instantiateSpecTest(t, "2", "float_exprs.2.wasm")
	t.Cleanup(func() { x2.close(t) })
	t.Run("f32.no_fold_add_zero:47", func(t *testing.T) {
		x2.assertReturnInvoke(t, "f32.no_fold_add_zero", []arg{{wa.F32, 2147483648}}, arg{wa.F32, 0})
	})
	t.Run("f64.no_fold_add_zero:48", func(t *testing.T) {
		x2.assertReturnInvoke(t, "f64.no_fold_add_zero", []arg{{wa.F64, 9223372036854775808}}, arg{wa.F64, 0})
	})
	t.Run("f32.no_fold_add_zero:49", func(t *testing.T) {
		x2.assertReturnInvoke(t, "f32.no_fold_add_zero", []arg{{wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("f64.no_fold_add_zero:50", func(t *testing.T) {
		x2.assertReturnInvoke(t, "f64.no_fold_add_zero", []arg{{wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	x3 := instantiateSpecTest(t, "3", "float_exprs.3.wasm")
	t.Cleanup(func() { x3.close(t) })
	t.Run("f32.no_fold_zero_sub:61", func(t *testing.T) {
		x3.assertReturnInvoke(t, "f32.no_fold_zero_sub", []arg{{wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("f64.no_fold_zero_sub:62", func(t *testing.T) {
		x3.assertReturnInvoke(t, "f64.no_fold_zero_sub", []arg{{wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("f32.no_fold_zero_sub:63", func(t *testing.T) {
		x3.assertReturnInvoke(t, "f32.no_fold_zero_sub", []arg{{wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("f64.no_fold_zero_sub:64", func(t *testing.T) {
		x3.assertReturnInvoke(t, "f64.no_fold_zero_sub", []arg{{wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	x4 := instantiateSpecTest(t, "4", "float_exprs.4.wasm")
	t.Cleanup(func() { x4.close(t) })
	t.Run("f32.no_fold_sub_zero:75", func(t *testing.T) {
		x4.assertReturnInvoke(t, "f32.no_fold_sub_zero", []arg{{wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("f64.no_fold_sub_zero:76", func(t *testing.T) {
		x4.assertReturnInvoke(t, "f64.no_fold_sub_zero", []arg{{wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	x5 := instantiateSpecTest(t, "5", "float_exprs.5.wasm")
	t.Cleanup(func() { x5.close(t) })
	t.Run("f32.no_fold_mul_zero:87", func(t *testing.T) {
		x5.assertReturnInvoke(t, "f32.no_fold_mul_zero", []arg{{wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("f32.no_fold_mul_zero:88", func(t *testing.T) {
		x5.assertReturnInvoke(t, "f32.no_fold_mul_zero", []arg{{wa.F32, 3212836864}}, arg{wa.F32, 2147483648})
	})
	t.Run("f32.no_fold_mul_zero:89", func(t *testing.T) {
		x5.assertReturnInvoke(t, "f32.no_fold_mul_zero", []arg{{wa.F32, 3221225472}}, arg{wa.F32, 2147483648})
	})
	t.Run("f32.no_fold_mul_zero:90", func(t *testing.T) {
		x5.assertReturnInvoke(t, "f32.no_fold_mul_zero", []arg{{wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("f64.no_fold_mul_zero:91", func(t *testing.T) {
		x5.assertReturnInvoke(t, "f64.no_fold_mul_zero", []arg{{wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("f64.no_fold_mul_zero:92", func(t *testing.T) {
		x5.assertReturnInvoke(t, "f64.no_fold_mul_zero", []arg{{wa.F64, 13830554455654793216}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("f64.no_fold_mul_zero:93", func(t *testing.T) {
		x5.assertReturnInvoke(t, "f64.no_fold_mul_zero", []arg{{wa.F64, 13835058055282163712}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("f64.no_fold_mul_zero:94", func(t *testing.T) {
		x5.assertReturnInvoke(t, "f64.no_fold_mul_zero", []arg{{wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	x6 := instantiateSpecTest(t, "6", "float_exprs.6.wasm")
	t.Cleanup(func() { x6.close(t) })
	t.Run("f32.no_fold_mul_one:106", func(t *testing.T) {
		x6.assertReturnInvoke(t, "f32.no_fold_mul_one", []arg{{wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("f64.no_fold_mul_one:107", func(t *testing.T) {
		x6.assertReturnInvoke(t, "f64.no_fold_mul_one", []arg{{wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	x7 := instantiateSpecTest(t, "7", "float_exprs.7.wasm")
	t.Cleanup(func() { x7.close(t) })
	t.Run("f32.no_fold_zero_div:118", func(t *testing.T) {
		x7.assertReturnInvoke(t, "f32.no_fold_zero_div", []arg{{wa.F32, 0}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("f32.no_fold_zero_div:119", func(t *testing.T) {
		x7.assertReturnInvoke(t, "f32.no_fold_zero_div", []arg{{wa.F32, 2147483648}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("f32.no_fold_zero_div:120", func(t *testing.T) {
		x7.assertReturnInvoke(t, "f32.no_fold_zero_div", []arg{{wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("f32.no_fold_zero_div:121", func(t *testing.T) {
		x7.assertReturnInvoke(t, "f32.no_fold_zero_div", []arg{{wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("f64.no_fold_zero_div:122", func(t *testing.T) {
		x7.assertReturnInvoke(t, "f64.no_fold_zero_div", []arg{{wa.F64, 0}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("f64.no_fold_zero_div:123", func(t *testing.T) {
		x7.assertReturnInvoke(t, "f64.no_fold_zero_div", []arg{{wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("f64.no_fold_zero_div:124", func(t *testing.T) {
		x7.assertReturnInvoke(t, "f64.no_fold_zero_div", []arg{{wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("f64.no_fold_zero_div:125", func(t *testing.T) {
		x7.assertReturnInvoke(t, "f64.no_fold_zero_div", []arg{{wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	x8 := instantiateSpecTest(t, "8", "float_exprs.8.wasm")
	t.Cleanup(func() { x8.close(t) })
	t.Run("f32.no_fold_div_one:136", func(t *testing.T) {
		x8.assertReturnInvoke(t, "f32.no_fold_div_one", []arg{{wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("f64.no_fold_div_one:137", func(t *testing.T) {
		x8.assertReturnInvoke(t, "f64.no_fold_div_one", []arg{{wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	x9 := instantiateSpecTest(t, "9", "float_exprs.9.wasm")
	t.Cleanup(func() { x9.close(t) })
	t.Run("f32.no_fold_div_neg1:148", func(t *testing.T) {
		x9.assertReturnInvoke(t, "f32.no_fold_div_neg1", []arg{{wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("f64.no_fold_div_neg1:149", func(t *testing.T) {
		x9.assertReturnInvoke(t, "f64.no_fold_div_neg1", []arg{{wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	x10 := instantiateSpecTest(t, "10", "float_exprs.10.wasm")
	t.Cleanup(func() { x10.close(t) })
	t.Run("f32.no_fold_neg0_sub:160", func(t *testing.T) {
		x10.assertReturnInvoke(t, "f32.no_fold_neg0_sub", []arg{{wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("f64.no_fold_neg0_sub:161", func(t *testing.T) {
		x10.assertReturnInvoke(t, "f64.no_fold_neg0_sub", []arg{{wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	x11 := instantiateSpecTest(t, "11", "float_exprs.11.wasm")
	t.Cleanup(func() { x11.close(t) })
	t.Run("f32.no_fold_neg1_mul:172", func(t *testing.T) {
		x11.assertReturnInvoke(t, "f32.no_fold_neg1_mul", []arg{{wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("f64.no_fold_neg1_mul:173", func(t *testing.T) {
		x11.assertReturnInvoke(t, "f64.no_fold_neg1_mul", []arg{{wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	x12 := instantiateSpecTest(t, "12", "float_exprs.12.wasm")
	t.Cleanup(func() { x12.close(t) })
	t.Run("f32.no_fold_eq_self:184", func(t *testing.T) {
		x12.assertReturnInvoke(t, "f32.no_fold_eq_self", []arg{{wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("f64.no_fold_eq_self:185", func(t *testing.T) {
		x12.assertReturnInvoke(t, "f64.no_fold_eq_self", []arg{{wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	x13 := instantiateSpecTest(t, "13", "float_exprs.13.wasm")
	t.Cleanup(func() { x13.close(t) })
	t.Run("f32.no_fold_ne_self:196", func(t *testing.T) {
		x13.assertReturnInvoke(t, "f32.no_fold_ne_self", []arg{{wa.F32, 2143289344}}, arg{wa.I32, 1})
	})
	t.Run("f64.no_fold_ne_self:197", func(t *testing.T) {
		x13.assertReturnInvoke(t, "f64.no_fold_ne_self", []arg{{wa.F64, 9221120237041090560}}, arg{wa.I32, 1})
	})
	x14 := instantiateSpecTest(t, "14", "float_exprs.14.wasm")
	t.Cleanup(func() { x14.close(t) })
	t.Run("f32.no_fold_sub_self:208", func(t *testing.T) {
		x14.assertReturnInvoke(t, "f32.no_fold_sub_self", []arg{{wa.F32, 2139095040}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("f32.no_fold_sub_self:209", func(t *testing.T) {
		x14.assertReturnInvoke(t, "f32.no_fold_sub_self", []arg{{wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("f64.no_fold_sub_self:210", func(t *testing.T) {
		x14.assertReturnInvoke(t, "f64.no_fold_sub_self", []arg{{wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("f64.no_fold_sub_self:211", func(t *testing.T) {
		x14.assertReturnInvoke(t, "f64.no_fold_sub_self", []arg{{wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	x15 := instantiateSpecTest(t, "15", "float_exprs.15.wasm")
	t.Cleanup(func() { x15.close(t) })
	t.Run("f32.no_fold_div_self:222", func(t *testing.T) {
		x15.assertReturnInvoke(t, "f32.no_fold_div_self", []arg{{wa.F32, 2139095040}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("f32.no_fold_div_self:223", func(t *testing.T) {
		x15.assertReturnInvoke(t, "f32.no_fold_div_self", []arg{{wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("f32.no_fold_div_self:224", func(t *testing.T) {
		x15.assertReturnInvoke(t, "f32.no_fold_div_self", []arg{{wa.F32, 0}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("f32.no_fold_div_self:225", func(t *testing.T) {
		x15.assertReturnInvoke(t, "f32.no_fold_div_self", []arg{{wa.F32, 2147483648}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("f64.no_fold_div_self:226", func(t *testing.T) {
		x15.assertReturnInvoke(t, "f64.no_fold_div_self", []arg{{wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("f64.no_fold_div_self:227", func(t *testing.T) {
		x15.assertReturnInvoke(t, "f64.no_fold_div_self", []arg{{wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("f64.no_fold_div_self:228", func(t *testing.T) {
		x15.assertReturnInvoke(t, "f64.no_fold_div_self", []arg{{wa.F64, 0}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("f64.no_fold_div_self:229", func(t *testing.T) {
		x15.assertReturnInvoke(t, "f64.no_fold_div_self", []arg{{wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ff8000000000000})
	})
	x16 := instantiateSpecTest(t, "16", "float_exprs.16.wasm")
	t.Cleanup(func() { x16.close(t) })
	t.Run("f32.no_fold_div_3:240", func(t *testing.T) {
		x16.assertReturnInvoke(t, "f32.no_fold_div_3", []arg{{wa.F32, 3634023955}}, arg{wa.F32, 3620628505})
	})
	t.Run("f32.no_fold_div_3:241", func(t *testing.T) {
		x16.assertReturnInvoke(t, "f32.no_fold_div_3", []arg{{wa.F32, 4000459555}}, arg{wa.F32, 3986780695})
	})
	t.Run("f32.no_fold_div_3:242", func(t *testing.T) {
		x16.assertReturnInvoke(t, "f32.no_fold_div_3", []arg{{wa.F32, 2517965963}}, arg{wa.F32, 2504446137})
	})
	t.Run("f32.no_fold_div_3:243", func(t *testing.T) {
		x16.assertReturnInvoke(t, "f32.no_fold_div_3", []arg{{wa.F32, 2173683100}}, arg{wa.F32, 2160046629})
	})
	t.Run("f32.no_fold_div_3:244", func(t *testing.T) {
		x16.assertReturnInvoke(t, "f32.no_fold_div_3", []arg{{wa.F32, 2750097330}}, arg{wa.F32, 2736571681})
	})
	t.Run("f64.no_fold_div_3:245", func(t *testing.T) {
		x16.assertReturnInvoke(t, "f64.no_fold_div_3", []arg{{wa.F64, 16679796490173820099}}, arg{wa.F64, 16672802667330368301})
	})
	t.Run("f64.no_fold_div_3:246", func(t *testing.T) {
		x16.assertReturnInvoke(t, "f64.no_fold_div_3", []arg{{wa.F64, 13081777497422760306}}, arg{wa.F64, 13074664638073319671})
	})
	t.Run("f64.no_fold_div_3:247", func(t *testing.T) {
		x16.assertReturnInvoke(t, "f64.no_fold_div_3", []arg{{wa.F64, 674365394458900388}}, arg{wa.F64, 667250911628840899})
	})
	t.Run("f64.no_fold_div_3:248", func(t *testing.T) {
		x16.assertReturnInvoke(t, "f64.no_fold_div_3", []arg{{wa.F64, 18365700772251870524}}, arg{wa.F64, 18358201936817915643})
	})
	t.Run("f64.no_fold_div_3:249", func(t *testing.T) {
		x16.assertReturnInvoke(t, "f64.no_fold_div_3", []arg{{wa.F64, 6476267216527259981}}, arg{wa.F64, 6468791534604471399})
	})
	x17 := instantiateSpecTest(t, "17", "float_exprs.17.wasm")
	t.Cleanup(func() { x17.close(t) })
	t.Run("f32.no_factor:260", func(t *testing.T) {
		x17.assertReturnInvoke(t, "f32.no_factor", []arg{{wa.F32, 3550941609}, {wa.F32, 3628209942}, {wa.F32, 1568101121}}, arg{wa.F32, 4131116008})
	})
	t.Run("f32.no_factor:261", func(t *testing.T) {
		x17.assertReturnInvoke(t, "f32.no_factor", []arg{{wa.F32, 3168433147}, {wa.F32, 1028017286}, {wa.F32, 3141035521}}, arg{wa.F32, 3095417249})
	})
	t.Run("f32.no_factor:262", func(t *testing.T) {
		x17.assertReturnInvoke(t, "f32.no_factor", []arg{{wa.F32, 2869115159}, {wa.F32, 536308199}, {wa.F32, 2100177580}}, arg{wa.F32, 3904015703})
	})
	t.Run("f32.no_factor:263", func(t *testing.T) {
		x17.assertReturnInvoke(t, "f32.no_factor", []arg{{wa.F32, 2684117842}, {wa.F32, 369386499}, {wa.F32, 2061166438}}, arg{wa.F32, 3679965352})
	})
	t.Run("f32.no_factor:264", func(t *testing.T) {
		x17.assertReturnInvoke(t, "f32.no_factor", []arg{{wa.F32, 2510116111}, {wa.F32, 476277495}, {wa.F32, 1237750930}}, arg{wa.F32, 649094375})
	})
	t.Run("f64.no_factor:265", func(t *testing.T) {
		x17.assertReturnInvoke(t, "f64.no_factor", []arg{{wa.F64, 2698691837980592503}, {wa.F64, 2529920934327896545}, {wa.F64, 12819783413251458936}}, arg{wa.F64, 10911876679403600666})
	})
	t.Run("f64.no_factor:266", func(t *testing.T) {
		x17.assertReturnInvoke(t, "f64.no_factor", []arg{{wa.F64, 1626864102540432200}, {wa.F64, 9287829620889669687}, {wa.F64, 9524500187773169472}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_factor:267", func(t *testing.T) {
		x17.assertReturnInvoke(t, "f64.no_factor", []arg{{wa.F64, 12326480769054961745}, {wa.F64, 12563546453737163926}, {wa.F64, 15990519985875741037}}, arg{wa.F64, 5500432744005058080})
	})
	t.Run("f64.no_factor:268", func(t *testing.T) {
		x17.assertReturnInvoke(t, "f64.no_factor", []arg{{wa.F64, 12532477544855171977}, {wa.F64, 3439526350000314825}, {wa.F64, 12694541248380731909}}, arg{wa.F64, 11527035460272583044})
	})
	t.Run("f64.no_factor:269", func(t *testing.T) {
		x17.assertReturnInvoke(t, "f64.no_factor", []arg{{wa.F64, 1871759566187673434}, {wa.F64, 2002968319587025494}, {wa.F64, 16033202089880281080}}, arg{wa.F64, 13429277897969282899})
	})
	x18 := instantiateSpecTest(t, "18", "float_exprs.18.wasm")
	t.Cleanup(func() { x18.close(t) })
	t.Run("f32.no_distribute:280", func(t *testing.T) {
		x18.assertReturnInvoke(t, "f32.no_distribute", []arg{{wa.F32, 3550941609}, {wa.F32, 3628209942}, {wa.F32, 1568101121}}, arg{wa.F32, 4131116009})
	})
	t.Run("f32.no_distribute:281", func(t *testing.T) {
		x18.assertReturnInvoke(t, "f32.no_distribute", []arg{{wa.F32, 3168433147}, {wa.F32, 1028017286}, {wa.F32, 3141035521}}, arg{wa.F32, 3095417248})
	})
	t.Run("f32.no_distribute:282", func(t *testing.T) {
		x18.assertReturnInvoke(t, "f32.no_distribute", []arg{{wa.F32, 2869115159}, {wa.F32, 536308199}, {wa.F32, 2100177580}}, arg{wa.F32, 3904015704})
	})
	t.Run("f32.no_distribute:283", func(t *testing.T) {
		x18.assertReturnInvoke(t, "f32.no_distribute", []arg{{wa.F32, 2684117842}, {wa.F32, 369386499}, {wa.F32, 2061166438}}, arg{wa.F32, 3679965351})
	})
	t.Run("f32.no_distribute:284", func(t *testing.T) {
		x18.assertReturnInvoke(t, "f32.no_distribute", []arg{{wa.F32, 2510116111}, {wa.F32, 476277495}, {wa.F32, 1237750930}}, arg{wa.F32, 649094374})
	})
	t.Run("f64.no_distribute:285", func(t *testing.T) {
		x18.assertReturnInvoke(t, "f64.no_distribute", []arg{{wa.F64, 2698691837980592503}, {wa.F64, 2529920934327896545}, {wa.F64, 12819783413251458936}}, arg{wa.F64, 10911876679403600667})
	})
	t.Run("f64.no_distribute:286", func(t *testing.T) {
		x18.assertReturnInvoke(t, "f64.no_distribute", []arg{{wa.F64, 1626864102540432200}, {wa.F64, 9287829620889669687}, {wa.F64, 9524500187773169472}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("f64.no_distribute:287", func(t *testing.T) {
		x18.assertReturnInvoke(t, "f64.no_distribute", []arg{{wa.F64, 12326480769054961745}, {wa.F64, 12563546453737163926}, {wa.F64, 15990519985875741037}}, arg{wa.F64, 5500432744005058079})
	})
	t.Run("f64.no_distribute:288", func(t *testing.T) {
		x18.assertReturnInvoke(t, "f64.no_distribute", []arg{{wa.F64, 12532477544855171977}, {wa.F64, 3439526350000314825}, {wa.F64, 12694541248380731909}}, arg{wa.F64, 11527035460272583043})
	})
	t.Run("f64.no_distribute:289", func(t *testing.T) {
		x18.assertReturnInvoke(t, "f64.no_distribute", []arg{{wa.F64, 1871759566187673434}, {wa.F64, 2002968319587025494}, {wa.F64, 16033202089880281080}}, arg{wa.F64, 13429277897969282898})
	})
	x19 := instantiateSpecTest(t, "19", "float_exprs.19.wasm")
	t.Cleanup(func() { x19.close(t) })
	t.Run("f32.no_regroup_div_mul:300", func(t *testing.T) {
		x19.assertReturnInvoke(t, "f32.no_regroup_div_mul", []arg{{wa.F32, 2249624147}, {wa.F32, 2678828342}, {wa.F32, 95319815}}, arg{wa.F32, 538190437})
	})
	t.Run("f32.no_regroup_div_mul:301", func(t *testing.T) {
		x19.assertReturnInvoke(t, "f32.no_regroup_div_mul", []arg{{wa.F32, 3978470300}, {wa.F32, 2253997363}, {wa.F32, 3824852100}}, arg{wa.F32, 2147483648})
	})
	t.Run("f32.no_regroup_div_mul:302", func(t *testing.T) {
		x19.assertReturnInvoke(t, "f32.no_regroup_div_mul", []arg{{wa.F32, 3350590135}, {wa.F32, 3042588643}, {wa.F32, 2186448635}}, arg{wa.F32, 4206661932})
	})
	t.Run("f32.no_regroup_div_mul:303", func(t *testing.T) {
		x19.assertReturnInvoke(t, "f32.no_regroup_div_mul", []arg{{wa.F32, 2430706172}, {wa.F32, 1685220483}, {wa.F32, 1642018044}}, arg{wa.F32, 2473922297})
	})
	t.Run("f32.no_regroup_div_mul:304", func(t *testing.T) {
		x19.assertReturnInvoke(t, "f32.no_regroup_div_mul", []arg{{wa.F32, 2011387707}, {wa.F32, 1274956446}, {wa.F32, 3811596788}}, arg{wa.F32, 3768838261})
	})
	t.Run("f64.no_regroup_div_mul:305", func(t *testing.T) {
		x19.assertReturnInvoke(t, "f64.no_regroup_div_mul", []arg{{wa.F64, 2703215631877943472}, {wa.F64, 13295603997208052007}, {wa.F64, 1719211436532588593}}, arg{wa.F64, 14279677686886620461})
	})
	t.Run("f64.no_regroup_div_mul:306", func(t *testing.T) {
		x19.assertReturnInvoke(t, "f64.no_regroup_div_mul", []arg{{wa.F64, 6126139291059848917}, {wa.F64, 2596039250849921421}, {wa.F64, 17423258659719899654}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("f64.no_regroup_div_mul:307", func(t *testing.T) {
		x19.assertReturnInvoke(t, "f64.no_regroup_div_mul", []arg{{wa.F64, 2451868557331674239}, {wa.F64, 8672326445062988097}, {wa.F64, 2593279393835739385}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("f64.no_regroup_div_mul:308", func(t *testing.T) {
		x19.assertReturnInvoke(t, "f64.no_regroup_div_mul", []arg{{wa.F64, 15994259208199847538}, {wa.F64, 16584156163346075677}, {wa.F64, 17596923907238870430}}, arg{wa.F64, 14981548491626301009})
	})
	t.Run("f64.no_regroup_div_mul:309", func(t *testing.T) {
		x19.assertReturnInvoke(t, "f64.no_regroup_div_mul", []arg{{wa.F64, 1912002771029783751}, {wa.F64, 655387110450354003}, {wa.F64, 10060746190138762841}}, arg{wa.F64, 10953754119023888080})
	})
	x20 := instantiateSpecTest(t, "20", "float_exprs.20.wasm")
	t.Cleanup(func() { x20.close(t) })
	t.Run("f32.no_regroup_mul_div:320", func(t *testing.T) {
		x20.assertReturnInvoke(t, "f32.no_regroup_mul_div", []arg{{wa.F32, 2249624147}, {wa.F32, 2678828342}, {wa.F32, 95319815}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_regroup_mul_div:321", func(t *testing.T) {
		x20.assertReturnInvoke(t, "f32.no_regroup_mul_div", []arg{{wa.F32, 3978470300}, {wa.F32, 2253997363}, {wa.F32, 3824852100}}, arg{wa.F32, 2408382580})
	})
	t.Run("f32.no_regroup_mul_div:322", func(t *testing.T) {
		x20.assertReturnInvoke(t, "f32.no_regroup_mul_div", []arg{{wa.F32, 3350590135}, {wa.F32, 3042588643}, {wa.F32, 2186448635}}, arg{wa.F32, 4206661933})
	})
	t.Run("f32.no_regroup_mul_div:323", func(t *testing.T) {
		x20.assertReturnInvoke(t, "f32.no_regroup_mul_div", []arg{{wa.F32, 2430706172}, {wa.F32, 1685220483}, {wa.F32, 1642018044}}, arg{wa.F32, 2473922298})
	})
	t.Run("f32.no_regroup_mul_div:324", func(t *testing.T) {
		x20.assertReturnInvoke(t, "f32.no_regroup_mul_div", []arg{{wa.F32, 2011387707}, {wa.F32, 1274956446}, {wa.F32, 3811596788}}, arg{wa.F32, 4286578688})
	})
	t.Run("f64.no_regroup_mul_div:325", func(t *testing.T) {
		x20.assertReturnInvoke(t, "f64.no_regroup_mul_div", []arg{{wa.F64, 2703215631877943472}, {wa.F64, 13295603997208052007}, {wa.F64, 1719211436532588593}}, arg{wa.F64, 14279677686886620462})
	})
	t.Run("f64.no_regroup_mul_div:326", func(t *testing.T) {
		x20.assertReturnInvoke(t, "f64.no_regroup_mul_div", []arg{{wa.F64, 6126139291059848917}, {wa.F64, 2596039250849921421}, {wa.F64, 17423258659719899654}}, arg{wa.F64, 9746029336072872080})
	})
	t.Run("f64.no_regroup_mul_div:327", func(t *testing.T) {
		x20.assertReturnInvoke(t, "f64.no_regroup_mul_div", []arg{{wa.F64, 2451868557331674239}, {wa.F64, 8672326445062988097}, {wa.F64, 2593279393835739385}}, arg{wa.F64, 8531093589128288889})
	})
	t.Run("f64.no_regroup_mul_div:328", func(t *testing.T) {
		x20.assertReturnInvoke(t, "f64.no_regroup_mul_div", []arg{{wa.F64, 15994259208199847538}, {wa.F64, 16584156163346075677}, {wa.F64, 17596923907238870430}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("f64.no_regroup_mul_div:329", func(t *testing.T) {
		x20.assertReturnInvoke(t, "f64.no_regroup_mul_div", []arg{{wa.F64, 1912002771029783751}, {wa.F64, 655387110450354003}, {wa.F64, 10060746190138762841}}, arg{wa.F64, 9223372036854775808})
	})
	x21 := instantiateSpecTest(t, "21", "float_exprs.21.wasm")
	t.Cleanup(func() { x21.close(t) })
	t.Run("f32.no_reassociate_add:340", func(t *testing.T) {
		x21.assertReturnInvoke(t, "f32.no_reassociate_add", []arg{{wa.F32, 3585064686}, {wa.F32, 1354934024}, {wa.F32, 3612934982}, {wa.F32, 3557837641}}, arg{wa.F32, 3614520891})
	})
	t.Run("f32.no_reassociate_add:341", func(t *testing.T) {
		x21.assertReturnInvoke(t, "f32.no_reassociate_add", []arg{{wa.F32, 997006780}, {wa.F32, 3156314493}, {wa.F32, 1031916275}, {wa.F32, 3157700435}}, arg{wa.F32, 1027365261})
	})
	t.Run("f32.no_reassociate_add:342", func(t *testing.T) {
		x21.assertReturnInvoke(t, "f32.no_reassociate_add", []arg{{wa.F32, 3506363549}, {wa.F32, 3562765939}, {wa.F32, 1440782572}, {wa.F32, 1388583643}}, arg{wa.F32, 1439168977})
	})
	t.Run("f32.no_reassociate_add:343", func(t *testing.T) {
		x21.assertReturnInvoke(t, "f32.no_reassociate_add", []arg{{wa.F32, 1460378878}, {wa.F32, 1481791683}, {wa.F32, 3506843934}, {wa.F32, 1493913729}}, arg{wa.F32, 1497931771})
	})
	t.Run("f32.no_reassociate_add:344", func(t *testing.T) {
		x21.assertReturnInvoke(t, "f32.no_reassociate_add", []arg{{wa.F32, 1975099005}, {wa.F32, 4120668550}, {wa.F32, 1947708458}, {wa.F32, 4008073260}}, arg{wa.F32, 1958779787})
	})
	t.Run("f64.no_reassociate_add:345", func(t *testing.T) {
		x21.assertReturnInvoke(t, "f64.no_reassociate_add", []arg{{wa.F64, 17619937326421449126}, {wa.F64, 8424880666975634327}, {wa.F64, 8461713040394112626}, {wa.F64, 17692076622886930107}}, arg{wa.F64, 17689770886425413754})
	})
	t.Run("f64.no_reassociate_add:346", func(t *testing.T) {
		x21.assertReturnInvoke(t, "f64.no_reassociate_add", []arg{{wa.F64, 2161744272815763681}, {wa.F64, 2160815018984030177}, {wa.F64, 11389452991481170854}, {wa.F64, 11158554735757873927}}, arg{wa.F64, 11367213592018398582})
	})
	t.Run("f64.no_reassociate_add:347", func(t *testing.T) {
		x21.assertReturnInvoke(t, "f64.no_reassociate_add", []arg{{wa.F64, 15816220208145029204}, {wa.F64, 6443786499090728432}, {wa.F64, 15798639273395365185}, {wa.F64, 6395820899158300605}}, arg{wa.F64, 15816713260997571051})
	})
	t.Run("f64.no_reassociate_add:348", func(t *testing.T) {
		x21.assertReturnInvoke(t, "f64.no_reassociate_add", []arg{{wa.F64, 12406188505172681730}, {wa.F64, 3227622722685619614}, {wa.F64, 12653209142287077985}, {wa.F64, 3439058911346459774}}, arg{wa.F64, 3437283564188778523})
	})
	t.Run("f64.no_reassociate_add:349", func(t *testing.T) {
		x21.assertReturnInvoke(t, "f64.no_reassociate_add", []arg{{wa.F64, 16720963389015391005}, {wa.F64, 16597092572968550980}, {wa.F64, 7518944085377596897}, {wa.F64, 16733407756820198530}}, arg{wa.F64, 7516931113564586278})
	})
	x22 := instantiateSpecTest(t, "22", "float_exprs.22.wasm")
	t.Cleanup(func() { x22.close(t) })
	t.Run("f32.no_reassociate_mul:360", func(t *testing.T) {
		x22.assertReturnInvoke(t, "f32.no_reassociate_mul", []arg{{wa.F32, 97158612}, {wa.F32, 796388711}, {wa.F32, 4071607776}, {wa.F32, 603464324}}, arg{wa.F32, 2373950135})
	})
	t.Run("f32.no_reassociate_mul:361", func(t *testing.T) {
		x22.assertReturnInvoke(t, "f32.no_reassociate_mul", []arg{{wa.F32, 598526039}, {wa.F32, 4072603010}, {wa.F32, 2166864805}, {wa.F32, 3802968051}}, arg{wa.F32, 3152274558})
	})
	t.Run("f32.no_reassociate_mul:362", func(t *testing.T) {
		x22.assertReturnInvoke(t, "f32.no_reassociate_mul", []arg{{wa.F32, 666201298}, {wa.F32, 3678968917}, {wa.F32, 2879732647}, {wa.F32, 1703934016}}, arg{wa.F32, 1439591542})
	})
	t.Run("f32.no_reassociate_mul:363", func(t *testing.T) {
		x22.assertReturnInvoke(t, "f32.no_reassociate_mul", []arg{{wa.F32, 191948150}, {wa.F32, 1717012201}, {wa.F32, 3682645872}, {wa.F32, 3713382507}}, arg{wa.F32, 1814709127})
	})
	t.Run("f32.no_reassociate_mul:364", func(t *testing.T) {
		x22.assertReturnInvoke(t, "f32.no_reassociate_mul", []arg{{wa.F32, 2384301792}, {wa.F32, 656878874}, {wa.F32, 3239861549}, {wa.F32, 1564466295}}, arg{wa.F32, 355327948})
	})
	t.Run("f64.no_reassociate_mul:365", func(t *testing.T) {
		x22.assertReturnInvoke(t, "f64.no_reassociate_mul", []arg{{wa.F64, 10830726381612138752}, {wa.F64, 18293529276079591087}, {wa.F64, 12137662286027993114}, {wa.F64, 16821646709291069775}}, arg{wa.F64, 7368793799369880819})
	})
	t.Run("f64.no_reassociate_mul:366", func(t *testing.T) {
		x22.assertReturnInvoke(t, "f64.no_reassociate_mul", []arg{{wa.F64, 6653164799371160764}, {wa.F64, 2285295038358358170}, {wa.F64, 9783304669150272403}, {wa.F64, 16266005085991502709}}, arg{wa.F64, 2720645287366687760})
	})
	t.Run("f64.no_reassociate_mul:367", func(t *testing.T) {
		x22.assertReturnInvoke(t, "f64.no_reassociate_mul", []arg{{wa.F64, 2352911459797566465}, {wa.F64, 17379873157362463143}, {wa.F64, 1179129869275935356}, {wa.F64, 14228398113747850351}}, arg{wa.F64, 2873103656912958703})
	})
	t.Run("f64.no_reassociate_mul:368", func(t *testing.T) {
		x22.assertReturnInvoke(t, "f64.no_reassociate_mul", []arg{{wa.F64, 7724499817746503804}, {wa.F64, 2704005046640722176}, {wa.F64, 5612860422806321751}, {wa.F64, 13727818095548724091}}, arg{wa.F64, 15948568678460814092})
	})
	t.Run("f64.no_reassociate_mul:369", func(t *testing.T) {
		x22.assertReturnInvoke(t, "f64.no_reassociate_mul", []arg{{wa.F64, 3553622953022765407}, {wa.F64, 1044040287824900408}, {wa.F64, 17112762794520509437}, {wa.F64, 11134095486440145773}}, arg{wa.F64, 576919682754813073})
	})
	x23 := instantiateSpecTest(t, "23", "float_exprs.23.wasm")
	t.Cleanup(func() { x23.close(t) })
	t.Run("f32.no_fold_div_0:380", func(t *testing.T) {
		x23.assertReturnInvoke(t, "f32.no_fold_div_0", []arg{{wa.F32, 1065353216}}, arg{wa.F32, 2139095040})
	})
	t.Run("f32.no_fold_div_0:381", func(t *testing.T) {
		x23.assertReturnInvoke(t, "f32.no_fold_div_0", []arg{{wa.F32, 3212836864}}, arg{wa.F32, 4286578688})
	})
	t.Run("f32.no_fold_div_0:382", func(t *testing.T) {
		x23.assertReturnInvoke(t, "f32.no_fold_div_0", []arg{{wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("f32.no_fold_div_0:383", func(t *testing.T) {
		x23.assertReturnInvoke(t, "f32.no_fold_div_0", []arg{{wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("f32.no_fold_div_0:384", func(t *testing.T) {
		x23.assertReturnInvoke(t, "f32.no_fold_div_0", []arg{{wa.F32, 0}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("f32.no_fold_div_0:385", func(t *testing.T) {
		x23.assertReturnInvoke(t, "f32.no_fold_div_0", []arg{{wa.F32, 2147483648}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("f32.no_fold_div_0:386", func(t *testing.T) {
		x23.assertReturnInvoke(t, "f32.no_fold_div_0", []arg{{wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("f32.no_fold_div_0:387", func(t *testing.T) {
		x23.assertReturnInvoke(t, "f32.no_fold_div_0", []arg{{wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("f64.no_fold_div_0:388", func(t *testing.T) {
		x23.assertReturnInvoke(t, "f64.no_fold_div_0", []arg{{wa.F64, 4607182418800017408}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("f64.no_fold_div_0:389", func(t *testing.T) {
		x23.assertReturnInvoke(t, "f64.no_fold_div_0", []arg{{wa.F64, 13830554455654793216}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("f64.no_fold_div_0:390", func(t *testing.T) {
		x23.assertReturnInvoke(t, "f64.no_fold_div_0", []arg{{wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("f64.no_fold_div_0:391", func(t *testing.T) {
		x23.assertReturnInvoke(t, "f64.no_fold_div_0", []arg{{wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("f64.no_fold_div_0:392", func(t *testing.T) {
		x23.assertReturnInvoke(t, "f64.no_fold_div_0", []arg{{wa.F64, 0}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("f64.no_fold_div_0:393", func(t *testing.T) {
		x23.assertReturnInvoke(t, "f64.no_fold_div_0", []arg{{wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("f64.no_fold_div_0:394", func(t *testing.T) {
		x23.assertReturnInvoke(t, "f64.no_fold_div_0", []arg{{wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("f64.no_fold_div_0:395", func(t *testing.T) {
		x23.assertReturnInvoke(t, "f64.no_fold_div_0", []arg{{wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	x24 := instantiateSpecTest(t, "24", "float_exprs.24.wasm")
	t.Cleanup(func() { x24.close(t) })
	t.Run("f32.no_fold_div_neg0:406", func(t *testing.T) {
		x24.assertReturnInvoke(t, "f32.no_fold_div_neg0", []arg{{wa.F32, 1065353216}}, arg{wa.F32, 4286578688})
	})
	t.Run("f32.no_fold_div_neg0:407", func(t *testing.T) {
		x24.assertReturnInvoke(t, "f32.no_fold_div_neg0", []arg{{wa.F32, 3212836864}}, arg{wa.F32, 2139095040})
	})
	t.Run("f32.no_fold_div_neg0:408", func(t *testing.T) {
		x24.assertReturnInvoke(t, "f32.no_fold_div_neg0", []arg{{wa.F32, 2139095040}}, arg{wa.F32, 4286578688})
	})
	t.Run("f32.no_fold_div_neg0:409", func(t *testing.T) {
		x24.assertReturnInvoke(t, "f32.no_fold_div_neg0", []arg{{wa.F32, 4286578688}}, arg{wa.F32, 2139095040})
	})
	t.Run("f32.no_fold_div_neg0:410", func(t *testing.T) {
		x24.assertReturnInvoke(t, "f32.no_fold_div_neg0", []arg{{wa.F32, 0}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("f32.no_fold_div_neg0:411", func(t *testing.T) {
		x24.assertReturnInvoke(t, "f32.no_fold_div_neg0", []arg{{wa.F32, 2147483648}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("f32.no_fold_div_neg0:412", func(t *testing.T) {
		x24.assertReturnInvoke(t, "f32.no_fold_div_neg0", []arg{{wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("f32.no_fold_div_neg0:413", func(t *testing.T) {
		x24.assertReturnInvoke(t, "f32.no_fold_div_neg0", []arg{{wa.F32, 2143289344}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("f64.no_fold_div_neg0:414", func(t *testing.T) {
		x24.assertReturnInvoke(t, "f64.no_fold_div_neg0", []arg{{wa.F64, 4607182418800017408}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("f64.no_fold_div_neg0:415", func(t *testing.T) {
		x24.assertReturnInvoke(t, "f64.no_fold_div_neg0", []arg{{wa.F64, 13830554455654793216}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("f64.no_fold_div_neg0:416", func(t *testing.T) {
		x24.assertReturnInvoke(t, "f64.no_fold_div_neg0", []arg{{wa.F64, 9218868437227405312}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("f64.no_fold_div_neg0:417", func(t *testing.T) {
		x24.assertReturnInvoke(t, "f64.no_fold_div_neg0", []arg{{wa.F64, 18442240474082181120}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("f64.no_fold_div_neg0:418", func(t *testing.T) {
		x24.assertReturnInvoke(t, "f64.no_fold_div_neg0", []arg{{wa.F64, 0}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("f64.no_fold_div_neg0:419", func(t *testing.T) {
		x24.assertReturnInvoke(t, "f64.no_fold_div_neg0", []arg{{wa.F64, 9223372036854775808}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("f64.no_fold_div_neg0:420", func(t *testing.T) {
		x24.assertReturnInvoke(t, "f64.no_fold_div_neg0", []arg{{wa.F64, 9221120237041090560}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("f64.no_fold_div_neg0:421", func(t *testing.T) {
		x24.assertReturnInvoke(t, "f64.no_fold_div_neg0", []arg{{wa.F64, 9219994337134247936}}, arg{wa.F64, 0x7ffc000000000000})
	})
	x25 := instantiateSpecTest(t, "25", "float_exprs.25.wasm")
	t.Cleanup(func() { x25.close(t) })
	t.Run("f32.no_fold_to_hypot:434", func(t *testing.T) {
		x25.assertReturnInvoke(t, "f32.no_fold_to_hypot", []arg{{wa.F32, 392264092}, {wa.F32, 497028527}}, arg{wa.F32, 497028710})
	})
	t.Run("f32.no_fold_to_hypot:435", func(t *testing.T) {
		x25.assertReturnInvoke(t, "f32.no_fold_to_hypot", []arg{{wa.F32, 2623653512}, {wa.F32, 2317012712}}, arg{wa.F32, 476165425})
	})
	t.Run("f32.no_fold_to_hypot:436", func(t *testing.T) {
		x25.assertReturnInvoke(t, "f32.no_fold_to_hypot", []arg{{wa.F32, 2261577829}, {wa.F32, 2641790518}}, arg{wa.F32, 494307108})
	})
	t.Run("f32.no_fold_to_hypot:437", func(t *testing.T) {
		x25.assertReturnInvoke(t, "f32.no_fold_to_hypot", []arg{{wa.F32, 3255678581}, {wa.F32, 1210720351}}, arg{wa.F32, 1210720352})
	})
	t.Run("f32.no_fold_to_hypot:438", func(t *testing.T) {
		x25.assertReturnInvoke(t, "f32.no_fold_to_hypot", []arg{{wa.F32, 432505039}, {wa.F32, 2618036612}}, arg{wa.F32, 470544734})
	})
	t.Run("f64.no_fold_to_hypot:439", func(t *testing.T) {
		x25.assertReturnInvoke(t, "f64.no_fold_to_hypot", []arg{{wa.F64, 1743351192697472785}, {wa.F64, 2202602366606243153}}, arg{wa.F64, 2202599296765198670})
	})
	t.Run("f64.no_fold_to_hypot:440", func(t *testing.T) {
		x25.assertReturnInvoke(t, "f64.no_fold_to_hypot", []arg{{wa.F64, 6389333765198869657}, {wa.F64, 15677343373020056630}}, arg{wa.F64, 6453971336171062178})
	})
	t.Run("f64.no_fold_to_hypot:441", func(t *testing.T) {
		x25.assertReturnInvoke(t, "f64.no_fold_to_hypot", []arg{{wa.F64, 2195337108264055819}, {wa.F64, 10384237061545402288}}, arg{wa.F64, 2195504818343116800})
	})
	t.Run("f64.no_fold_to_hypot:442", func(t *testing.T) {
		x25.assertReturnInvoke(t, "f64.no_fold_to_hypot", []arg{{wa.F64, 11486582223361829725}, {wa.F64, 1308532122426122043}}, arg{wa.F64, 2263210186506929210})
	})
	t.Run("f64.no_fold_to_hypot:443", func(t *testing.T) {
		x25.assertReturnInvoke(t, "f64.no_fold_to_hypot", []arg{{wa.F64, 1591440107418864392}, {wa.F64, 11515806374387309036}}, arg{wa.F64, 2292434337532533215})
	})
	x26 := instantiateSpecTest(t, "26", "float_exprs.26.wasm")
	t.Cleanup(func() { x26.close(t) })
	t.Run("f32.no_approximate_reciprocal:452", func(t *testing.T) {
		x26.assertReturnInvoke(t, "f32.no_approximate_reciprocal", []arg{{wa.F32, 3130294363}}, arg{wa.F32, 3294406762})
	})
	t.Run("f32.no_approximate_reciprocal:453", func(t *testing.T) {
		x26.assertReturnInvoke(t, "f32.no_approximate_reciprocal", []arg{{wa.F32, 2138280080}}, arg{wa.F32, 2204223})
	})
	t.Run("f32.no_approximate_reciprocal:454", func(t *testing.T) {
		x26.assertReturnInvoke(t, "f32.no_approximate_reciprocal", []arg{{wa.F32, 2434880051}}, arg{wa.F32, 3989512051})
	})
	t.Run("f32.no_approximate_reciprocal:455", func(t *testing.T) {
		x26.assertReturnInvoke(t, "f32.no_approximate_reciprocal", []arg{{wa.F32, 1705936409}}, arg{wa.F32, 423346609})
	})
	t.Run("f32.no_approximate_reciprocal:456", func(t *testing.T) {
		x26.assertReturnInvoke(t, "f32.no_approximate_reciprocal", []arg{{wa.F32, 2528120561}}, arg{wa.F32, 3896123071})
	})
	x27 := instantiateSpecTest(t, "27", "float_exprs.27.wasm")
	t.Cleanup(func() { x27.close(t) })
	t.Run("f32.no_approximate_reciprocal_sqrt:467", func(t *testing.T) {
		x27.assertReturnInvoke(t, "f32.no_approximate_reciprocal_sqrt", []arg{{wa.F32, 708147349}}, arg{wa.F32, 1243088746})
	})
	t.Run("f32.no_approximate_reciprocal_sqrt:468", func(t *testing.T) {
		x27.assertReturnInvoke(t, "f32.no_approximate_reciprocal_sqrt", []arg{{wa.F32, 1005852643}}, arg{wa.F32, 1094279611})
	})
	t.Run("f32.no_approximate_reciprocal_sqrt:469", func(t *testing.T) {
		x27.assertReturnInvoke(t, "f32.no_approximate_reciprocal_sqrt", []arg{{wa.F32, 517799246}}, arg{wa.F32, 1338168541})
	})
	t.Run("f32.no_approximate_reciprocal_sqrt:470", func(t *testing.T) {
		x27.assertReturnInvoke(t, "f32.no_approximate_reciprocal_sqrt", []arg{{wa.F32, 704281251}}, arg{wa.F32, 1245118689})
	})
	t.Run("f32.no_approximate_reciprocal_sqrt:471", func(t *testing.T) {
		x27.assertReturnInvoke(t, "f32.no_approximate_reciprocal_sqrt", []arg{{wa.F32, 347001813}}, arg{wa.F32, 1423641701})
	})
	t.Run("f64.no_fuse_reciprocal_sqrt:473", func(t *testing.T) {
		x27.assertReturnInvoke(t, "f64.no_fuse_reciprocal_sqrt", []arg{{wa.F64, 8611259114887405475}}, arg{wa.F64, 2604695339663988000})
	})
	t.Run("f64.no_fuse_reciprocal_sqrt:474", func(t *testing.T) {
		x27.assertReturnInvoke(t, "f64.no_fuse_reciprocal_sqrt", []arg{{wa.F64, 6008428610859539631}}, arg{wa.F64, 3906084647186679832})
	})
	t.Run("f64.no_fuse_reciprocal_sqrt:475", func(t *testing.T) {
		x27.assertReturnInvoke(t, "f64.no_fuse_reciprocal_sqrt", []arg{{wa.F64, 5077495674931581012}}, arg{wa.F64, 4371518865190387497})
	})
	t.Run("f64.no_fuse_reciprocal_sqrt:476", func(t *testing.T) {
		x27.assertReturnInvoke(t, "f64.no_fuse_reciprocal_sqrt", []arg{{wa.F64, 7616219057857077123}}, arg{wa.F64, 3102407657946187309})
	})
	t.Run("f64.no_fuse_reciprocal_sqrt:477", func(t *testing.T) {
		x27.assertReturnInvoke(t, "f64.no_fuse_reciprocal_sqrt", []arg{{wa.F64, 5267858027841559467}}, arg{wa.F64, 4276321761661248681})
	})
	x28 := instantiateSpecTest(t, "28", "float_exprs.28.wasm")
	t.Cleanup(func() { x28.close(t) })
	t.Run("f32.no_approximate_sqrt_reciprocal:486", func(t *testing.T) {
		x28.assertReturnInvoke(t, "f32.no_approximate_sqrt_reciprocal", []arg{{wa.F32, 1574069443}}, arg{wa.F32, 810003811})
	})
	t.Run("f32.no_approximate_sqrt_reciprocal:487", func(t *testing.T) {
		x28.assertReturnInvoke(t, "f32.no_approximate_sqrt_reciprocal", []arg{{wa.F32, 992487567}}, arg{wa.F32, 1100869283})
	})
	t.Run("f32.no_approximate_sqrt_reciprocal:488", func(t *testing.T) {
		x28.assertReturnInvoke(t, "f32.no_approximate_sqrt_reciprocal", []arg{{wa.F32, 1644769121}}, arg{wa.F32, 774822585})
	})
	t.Run("f32.no_approximate_sqrt_reciprocal:489", func(t *testing.T) {
		x28.assertReturnInvoke(t, "f32.no_approximate_sqrt_reciprocal", []arg{{wa.F32, 1180509736}}, arg{wa.F32, 1007269771})
	})
	t.Run("f32.no_approximate_sqrt_reciprocal:490", func(t *testing.T) {
		x28.assertReturnInvoke(t, "f32.no_approximate_sqrt_reciprocal", []arg{{wa.F32, 1940205041}}, arg{wa.F32, 627137240})
	})
	x29 := instantiateSpecTest(t, "29", "float_exprs.29.wasm")
	t.Cleanup(func() { x29.close(t) })
	t.Run("i32.no_fold_f32_s:505", func(t *testing.T) {
		x29.assertReturnInvoke(t, "i32.no_fold_f32_s", []arg{{wa.I32, 16777216}}, arg{wa.I32, 16777216})
	})
	t.Run("i32.no_fold_f32_s:506", func(t *testing.T) {
		x29.assertReturnInvoke(t, "i32.no_fold_f32_s", []arg{{wa.I32, 16777217}}, arg{wa.I32, 16777216})
	})
	t.Run("i32.no_fold_f32_s:507", func(t *testing.T) {
		x29.assertReturnInvoke(t, "i32.no_fold_f32_s", []arg{{wa.I32, 4026531856}}, arg{wa.I32, 4026531856})
	})
	t.Run("i32.no_fold_f32_u:509", func(t *testing.T) {
		x29.assertReturnInvoke(t, "i32.no_fold_f32_u", []arg{{wa.I32, 16777216}}, arg{wa.I32, 16777216})
	})
	t.Run("i32.no_fold_f32_u:510", func(t *testing.T) {
		x29.assertReturnInvoke(t, "i32.no_fold_f32_u", []arg{{wa.I32, 16777217}}, arg{wa.I32, 16777216})
	})
	t.Run("i32.no_fold_f32_u:511", func(t *testing.T) {
		x29.assertReturnInvoke(t, "i32.no_fold_f32_u", []arg{{wa.I32, 4026531856}}, arg{wa.I32, 4026531840})
	})
	t.Run("i64.no_fold_f64_s:513", func(t *testing.T) {
		x29.assertReturnInvoke(t, "i64.no_fold_f64_s", []arg{{wa.I64, 9007199254740992}}, arg{wa.I64, 9007199254740992})
	})
	t.Run("i64.no_fold_f64_s:514", func(t *testing.T) {
		x29.assertReturnInvoke(t, "i64.no_fold_f64_s", []arg{{wa.I64, 9007199254740993}}, arg{wa.I64, 9007199254740992})
	})
	t.Run("i64.no_fold_f64_s:515", func(t *testing.T) {
		x29.assertReturnInvoke(t, "i64.no_fold_f64_s", []arg{{wa.I64, 17293822569102705664}}, arg{wa.I64, 17293822569102705664})
	})
	t.Run("i64.no_fold_f64_u:517", func(t *testing.T) {
		x29.assertReturnInvoke(t, "i64.no_fold_f64_u", []arg{{wa.I64, 9007199254740992}}, arg{wa.I64, 9007199254740992})
	})
	t.Run("i64.no_fold_f64_u:518", func(t *testing.T) {
		x29.assertReturnInvoke(t, "i64.no_fold_f64_u", []arg{{wa.I64, 9007199254740993}}, arg{wa.I64, 9007199254740992})
	})
	t.Run("i64.no_fold_f64_u:519", func(t *testing.T) {
		x29.assertReturnInvoke(t, "i64.no_fold_f64_u", []arg{{wa.I64, 17293822569102705664}}, arg{wa.I64, 17293822569102704640})
	})
	x30 := instantiateSpecTest(t, "30", "float_exprs.30.wasm")
	t.Cleanup(func() { x30.close(t) })
	t.Run("f32.no_fold_add_sub:530", func(t *testing.T) {
		x30.assertReturnInvoke(t, "f32.no_fold_add_sub", []arg{{wa.F32, 677030386}, {wa.F32, 2998136214}}, arg{wa.F32, 677380096})
	})
	t.Run("f32.no_fold_add_sub:531", func(t *testing.T) {
		x30.assertReturnInvoke(t, "f32.no_fold_add_sub", []arg{{wa.F32, 3025420904}, {wa.F32, 913921807}}, arg{wa.F32, 3025420912})
	})
	t.Run("f32.no_fold_add_sub:532", func(t *testing.T) {
		x30.assertReturnInvoke(t, "f32.no_fold_add_sub", []arg{{wa.F32, 3908960888}, {wa.F32, 4063404061}}, arg{wa.F32, 3909091328})
	})
	t.Run("f32.no_fold_add_sub:533", func(t *testing.T) {
		x30.assertReturnInvoke(t, "f32.no_fold_add_sub", []arg{{wa.F32, 415467473}, {wa.F32, 602055819}}, arg{wa.F32, 415236096})
	})
	t.Run("f32.no_fold_add_sub:534", func(t *testing.T) {
		x30.assertReturnInvoke(t, "f32.no_fold_add_sub", []arg{{wa.F32, 2307650739}, {wa.F32, 2511328013}}, arg{wa.F32, 2315255808})
	})
	t.Run("f64.no_fold_add_sub:536", func(t *testing.T) {
		x30.assertReturnInvoke(t, "f64.no_fold_add_sub", []arg{{wa.F64, 9894695622864460712}, {wa.F64, 747900745977727688}}, arg{wa.F64, 9894695622864404480})
	})
	t.Run("f64.no_fold_add_sub:537", func(t *testing.T) {
		x30.assertReturnInvoke(t, "f64.no_fold_add_sub", []arg{{wa.F64, 2152218683357821298}, {wa.F64, 2238360073507307376}}, arg{wa.F64, 2152218683357790208})
	})
	t.Run("f64.no_fold_add_sub:538", func(t *testing.T) {
		x30.assertReturnInvoke(t, "f64.no_fold_add_sub", []arg{{wa.F64, 13697521605206502242}, {wa.F64, 13818850255013161909}}, arg{wa.F64, 13697521605247238144})
	})
	t.Run("f64.no_fold_add_sub:539", func(t *testing.T) {
		x30.assertReturnInvoke(t, "f64.no_fold_add_sub", []arg{{wa.F64, 12298280617237492384}, {wa.F64, 3233965342858558382}}, arg{wa.F64, 12298280617463775232})
	})
	t.Run("f64.no_fold_add_sub:540", func(t *testing.T) {
		x30.assertReturnInvoke(t, "f64.no_fold_add_sub", []arg{{wa.F64, 11043298296128683688}, {wa.F64, 11182857345495207592}}, arg{wa.F64, 11043298296775835648})
	})
	x31 := instantiateSpecTest(t, "31", "float_exprs.31.wasm")
	t.Cleanup(func() { x31.close(t) })
	t.Run("f32.no_fold_sub_add:551", func(t *testing.T) {
		x31.assertReturnInvoke(t, "f32.no_fold_sub_add", []arg{{wa.F32, 3291029084}, {wa.F32, 1137280182}}, arg{wa.F32, 3291029085})
	})
	t.Run("f32.no_fold_sub_add:552", func(t *testing.T) {
		x31.assertReturnInvoke(t, "f32.no_fold_sub_add", []arg{{wa.F32, 2287045896}, {wa.F32, 272248696}}, arg{wa.F32, 2287075328})
	})
	t.Run("f32.no_fold_sub_add:553", func(t *testing.T) {
		x31.assertReturnInvoke(t, "f32.no_fold_sub_add", []arg{{wa.F32, 1285466516}, {wa.F32, 1361849144}}, arg{wa.F32, 1285466624})
	})
	t.Run("f32.no_fold_sub_add:554", func(t *testing.T) {
		x31.assertReturnInvoke(t, "f32.no_fold_sub_add", []arg{{wa.F32, 740009747}, {wa.F32, 2989707904}}, arg{wa.F32, 740007936})
	})
	t.Run("f32.no_fold_sub_add:555", func(t *testing.T) {
		x31.assertReturnInvoke(t, "f32.no_fold_sub_add", []arg{{wa.F32, 1041827798}, {wa.F32, 3335914317}}, arg{wa.F32, 1041891328})
	})
	t.Run("f64.no_fold_sub_add:557", func(t *testing.T) {
		x31.assertReturnInvoke(t, "f64.no_fold_sub_add", []arg{{wa.F64, 5758126085282503565}, {wa.F64, 14997141603873875659}}, arg{wa.F64, 5758126085282503568})
	})
	t.Run("f64.no_fold_sub_add:558", func(t *testing.T) {
		x31.assertReturnInvoke(t, "f64.no_fold_sub_add", []arg{{wa.F64, 1609380455481879691}, {wa.F64, 1695875689930159213}}, arg{wa.F64, 1609380455482130432})
	})
	t.Run("f64.no_fold_sub_add:559", func(t *testing.T) {
		x31.assertReturnInvoke(t, "f64.no_fold_sub_add", []arg{{wa.F64, 5738179408840599949}, {wa.F64, 15186085143903012996}}, arg{wa.F64, 5738148875223433216})
	})
	t.Run("f64.no_fold_sub_add:560", func(t *testing.T) {
		x31.assertReturnInvoke(t, "f64.no_fold_sub_add", []arg{{wa.F64, 4492841470376833908}, {wa.F64, 13773869588765591068}}, arg{wa.F64, 4492841470376837120})
	})
	t.Run("f64.no_fold_sub_add:561", func(t *testing.T) {
		x31.assertReturnInvoke(t, "f64.no_fold_sub_add", []arg{{wa.F64, 2955729038738127538}, {wa.F64, 12208627806665035010}}, arg{wa.F64, 2955729038738127552})
	})
	x32 := instantiateSpecTest(t, "32", "float_exprs.32.wasm")
	t.Cleanup(func() { x32.close(t) })
	t.Run("f32.no_fold_mul_div:572", func(t *testing.T) {
		x32.assertReturnInvoke(t, "f32.no_fold_mul_div", []arg{{wa.F32, 3672556237}, {wa.F32, 674649243}}, arg{wa.F32, 3672556236})
	})
	t.Run("f32.no_fold_mul_div:573", func(t *testing.T) {
		x32.assertReturnInvoke(t, "f32.no_fold_mul_div", []arg{{wa.F32, 2995104604}, {wa.F32, 178524966}}, arg{wa.F32, 2995104594})
	})
	t.Run("f32.no_fold_mul_div:574", func(t *testing.T) {
		x32.assertReturnInvoke(t, "f32.no_fold_mul_div", []arg{{wa.F32, 2817764014}, {wa.F32, 3620253920}}, arg{wa.F32, 2817764013})
	})
	t.Run("f32.no_fold_mul_div:575", func(t *testing.T) {
		x32.assertReturnInvoke(t, "f32.no_fold_mul_div", []arg{{wa.F32, 1507152519}, {wa.F32, 3723483599}}, arg{wa.F32, 1507152518})
	})
	t.Run("f32.no_fold_mul_div:576", func(t *testing.T) {
		x32.assertReturnInvoke(t, "f32.no_fold_mul_div", []arg{{wa.F32, 2442510077}, {wa.F32, 2906531411}}, arg{wa.F32, 2442510079})
	})
	t.Run("f64.no_fold_mul_div:578", func(t *testing.T) {
		x32.assertReturnInvoke(t, "f64.no_fold_mul_div", []arg{{wa.F64, 10062123074470382106}, {wa.F64, 12910565991996555404}}, arg{wa.F64, 10062123074470422078})
	})
	t.Run("f64.no_fold_mul_div:579", func(t *testing.T) {
		x32.assertReturnInvoke(t, "f64.no_fold_mul_div", []arg{{wa.F64, 6340937764684870564}, {wa.F64, 7244253720027059594}}, arg{wa.F64, 6340937764684870565})
	})
	t.Run("f64.no_fold_mul_div:580", func(t *testing.T) {
		x32.assertReturnInvoke(t, "f64.no_fold_mul_div", []arg{{wa.F64, 14905228263410157971}, {wa.F64, 11346251643264732732}}, arg{wa.F64, 14905228263410157970})
	})
	t.Run("f64.no_fold_mul_div:581", func(t *testing.T) {
		x32.assertReturnInvoke(t, "f64.no_fold_mul_div", []arg{{wa.F64, 3862352046163709780}, {wa.F64, 531112307488385734}}, arg{wa.F64, 3862079437827029803})
	})
	t.Run("f64.no_fold_mul_div:582", func(t *testing.T) {
		x32.assertReturnInvoke(t, "f64.no_fold_mul_div", []arg{{wa.F64, 16807035693954817236}, {wa.F64, 12360222454864961326}}, arg{wa.F64, 16807035693954817237})
	})
	x33 := instantiateSpecTest(t, "33", "float_exprs.33.wasm")
	t.Cleanup(func() { x33.close(t) })
	t.Run("f32.no_fold_div_mul:593", func(t *testing.T) {
		x33.assertReturnInvoke(t, "f32.no_fold_div_mul", []arg{{wa.F32, 3538825650}, {wa.F32, 1315641462}}, arg{wa.F32, 3538825649})
	})
	t.Run("f32.no_fold_div_mul:594", func(t *testing.T) {
		x33.assertReturnInvoke(t, "f32.no_fold_div_mul", []arg{{wa.F32, 2777664539}, {wa.F32, 3062588018}}, arg{wa.F32, 2777664540})
	})
	t.Run("f32.no_fold_div_mul:595", func(t *testing.T) {
		x33.assertReturnInvoke(t, "f32.no_fold_div_mul", []arg{{wa.F32, 14863254}, {wa.F32, 3278582479}}, arg{wa.F32, 14863367})
	})
	t.Run("f32.no_fold_div_mul:596", func(t *testing.T) {
		x33.assertReturnInvoke(t, "f32.no_fold_div_mul", []arg{{wa.F32, 2593594703}, {wa.F32, 3709508810}}, arg{wa.F32, 2593594656})
	})
	t.Run("f32.no_fold_div_mul:597", func(t *testing.T) {
		x33.assertReturnInvoke(t, "f32.no_fold_div_mul", []arg{{wa.F32, 250394049}, {wa.F32, 1296755844}}, arg{wa.F32, 250394050})
	})
	t.Run("f64.no_fold_div_mul:599", func(t *testing.T) {
		x33.assertReturnInvoke(t, "f64.no_fold_div_mul", []arg{{wa.F64, 665690489208775809}, {wa.F64, 14660005164454413124}}, arg{wa.F64, 665690577722002880})
	})
	t.Run("f64.no_fold_div_mul:600", func(t *testing.T) {
		x33.assertReturnInvoke(t, "f64.no_fold_div_mul", []arg{{wa.F64, 10617267697387344269}, {wa.F64, 4370684778829606254}}, arg{wa.F64, 10617267697387344270})
	})
	t.Run("f64.no_fold_div_mul:601", func(t *testing.T) {
		x33.assertReturnInvoke(t, "f64.no_fold_div_mul", []arg{{wa.F64, 13179336828827425934}, {wa.F64, 6536345148565138764}}, arg{wa.F64, 13179336828827425933})
	})
	t.Run("f64.no_fold_div_mul:602", func(t *testing.T) {
		x33.assertReturnInvoke(t, "f64.no_fold_div_mul", []arg{{wa.F64, 12582623625647949669}, {wa.F64, 15106746174896642041}}, arg{wa.F64, 12582623625647949668})
	})
	t.Run("f64.no_fold_div_mul:603", func(t *testing.T) {
		x33.assertReturnInvoke(t, "f64.no_fold_div_mul", []arg{{wa.F64, 16624217782795067216}, {wa.F64, 9062205521150975866}}, arg{wa.F64, 16624217782795067215})
	})
	x34 := instantiateSpecTest(t, "34", "float_exprs.34.wasm")
	t.Cleanup(func() { x34.close(t) })
	t.Run("f32.no_fold_div2_mul2:614", func(t *testing.T) {
		x34.assertReturnInvoke(t, "f32.no_fold_div2_mul2", []arg{{wa.F32, 16777215}}, arg{wa.F32, 16777216})
	})
	t.Run("f64.no_fold_div2_mul2:615", func(t *testing.T) {
		x34.assertReturnInvoke(t, "f64.no_fold_div2_mul2", []arg{{wa.F64, 9007199254740991}}, arg{wa.F64, 9007199254740992})
	})
	x35 := instantiateSpecTest(t, "35", "float_exprs.35.wasm")
	t.Cleanup(func() { x35.close(t) })
	t.Run("no_fold_demote_promote:624", func(t *testing.T) {
		x35.assertReturnInvoke(t, "no_fold_demote_promote", []arg{{wa.F64, 13235495337234861917}}, arg{wa.F64, 13235495326728585216})
	})
	t.Run("no_fold_demote_promote:625", func(t *testing.T) {
		x35.assertReturnInvoke(t, "no_fold_demote_promote", []arg{{wa.F64, 13448204151038380655}}, arg{wa.F64, 13448204151146151936})
	})
	t.Run("no_fold_demote_promote:626", func(t *testing.T) {
		x35.assertReturnInvoke(t, "no_fold_demote_promote", []arg{{wa.F64, 5090364081358261697}}, arg{wa.F64, 5090364081378951168})
	})
	t.Run("no_fold_demote_promote:627", func(t *testing.T) {
		x35.assertReturnInvoke(t, "no_fold_demote_promote", []arg{{wa.F64, 13436295269174285872}}, arg{wa.F64, 13436295269301878784})
	})
	t.Run("no_fold_demote_promote:628", func(t *testing.T) {
		x35.assertReturnInvoke(t, "no_fold_demote_promote", []arg{{wa.F64, 5076240020598306430}}, arg{wa.F64, 5076240020759642112})
	})
	x36 := instantiateSpecTest(t, "36", "float_exprs.36.wasm")
	t.Cleanup(func() { x36.close(t) })
	t.Run("no_fold_promote_demote:638", func(t *testing.T) {
		x36.assertReturnInvoke(t, "no_fold_promote_demote", []arg{{wa.F32, 2141192192}}, arg{wa.F32, 0x7fc00000})
	})
	t.Run("no_fold_promote_demote:639", func(t *testing.T) {
		x36.assertReturnInvoke(t, "no_fold_promote_demote", []arg{{wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("no_fold_promote_demote:640", func(t *testing.T) {
		x36.assertReturnInvoke(t, "no_fold_promote_demote", []arg{{wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("no_fold_promote_demote:641", func(t *testing.T) {
		x36.assertReturnInvoke(t, "no_fold_promote_demote", []arg{{wa.F32, 1}}, arg{wa.F32, 1})
	})
	t.Run("no_fold_promote_demote:642", func(t *testing.T) {
		x36.assertReturnInvoke(t, "no_fold_promote_demote", []arg{{wa.F32, 2147483649}}, arg{wa.F32, 2147483649})
	})
	t.Run("no_fold_promote_demote:643", func(t *testing.T) {
		x36.assertReturnInvoke(t, "no_fold_promote_demote", []arg{{wa.F32, 8388607}}, arg{wa.F32, 8388607})
	})
	t.Run("no_fold_promote_demote:644", func(t *testing.T) {
		x36.assertReturnInvoke(t, "no_fold_promote_demote", []arg{{wa.F32, 2155872255}}, arg{wa.F32, 2155872255})
	})
	t.Run("no_fold_promote_demote:645", func(t *testing.T) {
		x36.assertReturnInvoke(t, "no_fold_promote_demote", []arg{{wa.F32, 8388608}}, arg{wa.F32, 8388608})
	})
	t.Run("no_fold_promote_demote:646", func(t *testing.T) {
		x36.assertReturnInvoke(t, "no_fold_promote_demote", []arg{{wa.F32, 2155872256}}, arg{wa.F32, 2155872256})
	})
	t.Run("no_fold_promote_demote:647", func(t *testing.T) {
		x36.assertReturnInvoke(t, "no_fold_promote_demote", []arg{{wa.F32, 2139095039}}, arg{wa.F32, 2139095039})
	})
	t.Run("no_fold_promote_demote:648", func(t *testing.T) {
		x36.assertReturnInvoke(t, "no_fold_promote_demote", []arg{{wa.F32, 4286578687}}, arg{wa.F32, 4286578687})
	})
	t.Run("no_fold_promote_demote:649", func(t *testing.T) {
		x36.assertReturnInvoke(t, "no_fold_promote_demote", []arg{{wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("no_fold_promote_demote:650", func(t *testing.T) {
		x36.assertReturnInvoke(t, "no_fold_promote_demote", []arg{{wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	x37 := instantiateSpecTest(t, "37", "float_exprs.37.wasm")
	t.Cleanup(func() { x37.close(t) })
	t.Run("no_demote_mixed_add:661", func(t *testing.T) {
		x37.assertReturnInvoke(t, "no_demote_mixed_add", []arg{{wa.F64, 4183652368636204281}, {wa.F32, 69183310}}, arg{wa.F32, 276467023})
	})
	t.Run("no_demote_mixed_add:662", func(t *testing.T) {
		x37.assertReturnInvoke(t, "no_demote_mixed_add", []arg{{wa.F64, 4773927428111915216}, {wa.F32, 1387972204}}, arg{wa.F32, 1392270651})
	})
	t.Run("no_demote_mixed_add:663", func(t *testing.T) {
		x37.assertReturnInvoke(t, "no_demote_mixed_add", []arg{{wa.F64, 4072985553596038423}, {wa.F32, 2202918851}}, arg{wa.F32, 66813087})
	})
	t.Run("no_demote_mixed_add:664", func(t *testing.T) {
		x37.assertReturnInvoke(t, "no_demote_mixed_add", []arg{{wa.F64, 13740716732336801211}, {wa.F32, 822392741}}, arg{wa.F32, 3045484077})
	})
	t.Run("no_demote_mixed_add:665", func(t *testing.T) {
		x37.assertReturnInvoke(t, "no_demote_mixed_add", []arg{{wa.F64, 13742514716462174325}, {wa.F32, 2870112826}}, arg{wa.F32, 3048850075})
	})
	t.Run("no_demote_mixed_add_commuted:667", func(t *testing.T) {
		x37.assertReturnInvoke(t, "no_demote_mixed_add_commuted", []arg{{wa.F32, 69183310}, {wa.F64, 4183652368636204281}}, arg{wa.F32, 276467023})
	})
	t.Run("no_demote_mixed_add_commuted:668", func(t *testing.T) {
		x37.assertReturnInvoke(t, "no_demote_mixed_add_commuted", []arg{{wa.F32, 1387972204}, {wa.F64, 4773927428111915216}}, arg{wa.F32, 1392270651})
	})
	t.Run("no_demote_mixed_add_commuted:669", func(t *testing.T) {
		x37.assertReturnInvoke(t, "no_demote_mixed_add_commuted", []arg{{wa.F32, 2202918851}, {wa.F64, 4072985553596038423}}, arg{wa.F32, 66813087})
	})
	t.Run("no_demote_mixed_add_commuted:670", func(t *testing.T) {
		x37.assertReturnInvoke(t, "no_demote_mixed_add_commuted", []arg{{wa.F32, 822392741}, {wa.F64, 13740716732336801211}}, arg{wa.F32, 3045484077})
	})
	t.Run("no_demote_mixed_add_commuted:671", func(t *testing.T) {
		x37.assertReturnInvoke(t, "no_demote_mixed_add_commuted", []arg{{wa.F32, 2870112826}, {wa.F64, 13742514716462174325}}, arg{wa.F32, 3048850075})
	})
	x38 := instantiateSpecTest(t, "38", "float_exprs.38.wasm")
	t.Cleanup(func() { x38.close(t) })
	t.Run("no_demote_mixed_sub:680", func(t *testing.T) {
		x38.assertReturnInvoke(t, "no_demote_mixed_sub", []arg{{wa.F64, 4979303437048015281}, {wa.F32, 1583535740}}, arg{wa.F32, 1758482618})
	})
	t.Run("no_demote_mixed_sub:681", func(t *testing.T) {
		x38.assertReturnInvoke(t, "no_demote_mixed_sub", []arg{{wa.F64, 13967600632962086462}, {wa.F32, 1214924370}}, arg{wa.F32, 3468107136})
	})
	t.Run("no_demote_mixed_sub:682", func(t *testing.T) {
		x38.assertReturnInvoke(t, "no_demote_mixed_sub", []arg{{wa.F64, 13860263758943608426}, {wa.F32, 969848030}}, arg{wa.F32, 3268174805})
	})
	t.Run("no_demote_mixed_sub:683", func(t *testing.T) {
		x38.assertReturnInvoke(t, "no_demote_mixed_sub", []arg{{wa.F64, 4364064588997139903}, {wa.F32, 472962692}}, arg{wa.F32, 612510881})
	})
	t.Run("no_demote_mixed_sub:684", func(t *testing.T) {
		x38.assertReturnInvoke(t, "no_demote_mixed_sub", []arg{{wa.F64, 4673175763235896759}, {wa.F32, 1198952676}}, arg{wa.F32, 3339501185})
	})
	x39 := instantiateSpecTest(t, "39", "float_exprs.39.wasm")
	t.Cleanup(func() { x39.close(t) })
	t.Run("f32.i32.no_fold_trunc_s_convert_s:723", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f32.i32.no_fold_trunc_s_convert_s", []arg{{wa.F32, 1069547520}}, arg{wa.F32, 1065353216})
	})
	t.Run("f32.i32.no_fold_trunc_s_convert_s:724", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f32.i32.no_fold_trunc_s_convert_s", []arg{{wa.F32, 3217031168}}, arg{wa.F32, 3212836864})
	})
	t.Run("f32.i32.no_fold_trunc_u_convert_s:725", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f32.i32.no_fold_trunc_u_convert_s", []arg{{wa.F32, 1069547520}}, arg{wa.F32, 1065353216})
	})
	t.Run("f32.i32.no_fold_trunc_u_convert_s:726", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f32.i32.no_fold_trunc_u_convert_s", []arg{{wa.F32, 3204448256}}, arg{wa.F32, 0})
	})
	t.Run("f32.i32.no_fold_trunc_s_convert_u:727", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f32.i32.no_fold_trunc_s_convert_u", []arg{{wa.F32, 1069547520}}, arg{wa.F32, 1065353216})
	})
	t.Run("f32.i32.no_fold_trunc_s_convert_u:728", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f32.i32.no_fold_trunc_s_convert_u", []arg{{wa.F32, 3217031168}}, arg{wa.F32, 1333788672})
	})
	t.Run("f32.i32.no_fold_trunc_u_convert_u:729", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f32.i32.no_fold_trunc_u_convert_u", []arg{{wa.F32, 1069547520}}, arg{wa.F32, 1065353216})
	})
	t.Run("f32.i32.no_fold_trunc_u_convert_u:730", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f32.i32.no_fold_trunc_u_convert_u", []arg{{wa.F32, 3204448256}}, arg{wa.F32, 0})
	})
	t.Run("f64.i32.no_fold_trunc_s_convert_s:732", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f64.i32.no_fold_trunc_s_convert_s", []arg{{wa.F64, 4609434218613702656}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("f64.i32.no_fold_trunc_s_convert_s:733", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f64.i32.no_fold_trunc_s_convert_s", []arg{{wa.F64, 13832806255468478464}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("f64.i32.no_fold_trunc_u_convert_s:734", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f64.i32.no_fold_trunc_u_convert_s", []arg{{wa.F64, 4609434218613702656}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("f64.i32.no_fold_trunc_u_convert_s:735", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f64.i32.no_fold_trunc_u_convert_s", []arg{{wa.F64, 13826050856027422720}}, arg{wa.F64, 0})
	})
	t.Run("f64.i32.no_fold_trunc_s_convert_u:736", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f64.i32.no_fold_trunc_s_convert_u", []arg{{wa.F64, 4609434218613702656}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("f64.i32.no_fold_trunc_s_convert_u:737", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f64.i32.no_fold_trunc_s_convert_u", []arg{{wa.F64, 13832806255468478464}}, arg{wa.F64, 4751297606873776128})
	})
	t.Run("f64.i32.no_fold_trunc_u_convert_u:738", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f64.i32.no_fold_trunc_u_convert_u", []arg{{wa.F64, 4609434218613702656}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("f64.i32.no_fold_trunc_u_convert_u:739", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f64.i32.no_fold_trunc_u_convert_u", []arg{{wa.F64, 13826050856027422720}}, arg{wa.F64, 0})
	})
	t.Run("f32.i64.no_fold_trunc_s_convert_s:741", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f32.i64.no_fold_trunc_s_convert_s", []arg{{wa.F32, 1069547520}}, arg{wa.F32, 1065353216})
	})
	t.Run("f32.i64.no_fold_trunc_s_convert_s:742", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f32.i64.no_fold_trunc_s_convert_s", []arg{{wa.F32, 3217031168}}, arg{wa.F32, 3212836864})
	})
	t.Run("f32.i64.no_fold_trunc_u_convert_s:743", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f32.i64.no_fold_trunc_u_convert_s", []arg{{wa.F32, 1069547520}}, arg{wa.F32, 1065353216})
	})
	t.Run("f32.i64.no_fold_trunc_u_convert_s:744", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f32.i64.no_fold_trunc_u_convert_s", []arg{{wa.F32, 3204448256}}, arg{wa.F32, 0})
	})
	t.Run("f32.i64.no_fold_trunc_s_convert_u:745", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f32.i64.no_fold_trunc_s_convert_u", []arg{{wa.F32, 1069547520}}, arg{wa.F32, 1065353216})
	})
	t.Run("f32.i64.no_fold_trunc_s_convert_u:746", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f32.i64.no_fold_trunc_s_convert_u", []arg{{wa.F32, 3217031168}}, arg{wa.F32, 1602224128})
	})
	t.Run("f32.i64.no_fold_trunc_u_convert_u:747", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f32.i64.no_fold_trunc_u_convert_u", []arg{{wa.F32, 1069547520}}, arg{wa.F32, 1065353216})
	})
	t.Run("f32.i64.no_fold_trunc_u_convert_u:748", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f32.i64.no_fold_trunc_u_convert_u", []arg{{wa.F32, 3204448256}}, arg{wa.F32, 0})
	})
	t.Run("f64.i64.no_fold_trunc_s_convert_s:750", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f64.i64.no_fold_trunc_s_convert_s", []arg{{wa.F64, 4609434218613702656}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("f64.i64.no_fold_trunc_s_convert_s:751", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f64.i64.no_fold_trunc_s_convert_s", []arg{{wa.F64, 13832806255468478464}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("f64.i64.no_fold_trunc_u_convert_s:752", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f64.i64.no_fold_trunc_u_convert_s", []arg{{wa.F64, 4609434218613702656}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("f64.i64.no_fold_trunc_u_convert_s:753", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f64.i64.no_fold_trunc_u_convert_s", []arg{{wa.F64, 13826050856027422720}}, arg{wa.F64, 0})
	})
	t.Run("f64.i64.no_fold_trunc_s_convert_u:754", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f64.i64.no_fold_trunc_s_convert_u", []arg{{wa.F64, 4609434218613702656}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("f64.i64.no_fold_trunc_s_convert_u:755", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f64.i64.no_fold_trunc_s_convert_u", []arg{{wa.F64, 13832806255468478464}}, arg{wa.F64, 4895412794951729152})
	})
	t.Run("f64.i64.no_fold_trunc_u_convert_u:756", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f64.i64.no_fold_trunc_u_convert_u", []arg{{wa.F64, 4609434218613702656}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("f64.i64.no_fold_trunc_u_convert_u:757", func(t *testing.T) {
		x39.assertReturnInvoke(t, "f64.i64.no_fold_trunc_u_convert_u", []arg{{wa.F64, 13826050856027422720}}, arg{wa.F64, 0})
	})
	x40 := instantiateSpecTest(t, "40", "float_exprs.40.wasm")
	t.Cleanup(func() { x40.close(t) })
	t.Run("init:784", func(t *testing.T) { x40.invoke(t, "init", []arg{{wa.I32, 0}, {wa.F32, 1097963930}}) })
	t.Run("init:785", func(t *testing.T) { x40.invoke(t, "init", []arg{{wa.I32, 4}, {wa.F32, 1098068787}}) })
	t.Run("init:786", func(t *testing.T) { x40.invoke(t, "init", []arg{{wa.I32, 8}, {wa.F32, 1098173645}}) })
	t.Run("init:787", func(t *testing.T) { x40.invoke(t, "init", []arg{{wa.I32, 12}, {wa.F32, 1098278502}}) })
	t.Run("check:788", func(t *testing.T) { x40.assertReturnInvoke(t, "check", []arg{{wa.I32, 0}}, arg{wa.F32, 1097963930}) })
	t.Run("check:789", func(t *testing.T) { x40.assertReturnInvoke(t, "check", []arg{{wa.I32, 4}}, arg{wa.F32, 1098068787}) })
	t.Run("check:790", func(t *testing.T) { x40.assertReturnInvoke(t, "check", []arg{{wa.I32, 8}}, arg{wa.F32, 1098173645}) })
	t.Run("check:791", func(t *testing.T) { x40.assertReturnInvoke(t, "check", []arg{{wa.I32, 12}}, arg{wa.F32, 1098278502}) })
	t.Run("run:792", func(t *testing.T) { x40.invoke(t, "run", []arg{{wa.I32, 16}, {wa.F32, 1077936128}}) })
	t.Run("check:793", func(t *testing.T) { x40.assertReturnInvoke(t, "check", []arg{{wa.I32, 0}}, arg{wa.F32, 1084297489}) })
	t.Run("check:794", func(t *testing.T) { x40.assertReturnInvoke(t, "check", []arg{{wa.I32, 4}}, arg{wa.F32, 1084367394}) })
	t.Run("check:795", func(t *testing.T) { x40.assertReturnInvoke(t, "check", []arg{{wa.I32, 8}}, arg{wa.F32, 1084437299}) })
	t.Run("check:796", func(t *testing.T) { x40.assertReturnInvoke(t, "check", []arg{{wa.I32, 12}}, arg{wa.F32, 1084507204}) })
	x41 := instantiateSpecTest(t, "41", "float_exprs.41.wasm")
	t.Cleanup(func() { x41.close(t) })
	t.Run("init:819", func(t *testing.T) { x41.invoke(t, "init", []arg{{wa.I32, 0}, {wa.F64, 4624690162351420211}}) })
	t.Run("init:820", func(t *testing.T) { x41.invoke(t, "init", []arg{{wa.I32, 8}, {wa.F64, 4624746457346762342}}) })
	t.Run("init:821", func(t *testing.T) { x41.invoke(t, "init", []arg{{wa.I32, 16}, {wa.F64, 4624802752342104474}}) })
	t.Run("init:822", func(t *testing.T) { x41.invoke(t, "init", []arg{{wa.I32, 24}, {wa.F64, 4624859047337446605}}) })
	t.Run("check:823", func(t *testing.T) {
		x41.assertReturnInvoke(t, "check", []arg{{wa.I32, 0}}, arg{wa.F64, 4624690162351420211})
	})
	t.Run("check:824", func(t *testing.T) {
		x41.assertReturnInvoke(t, "check", []arg{{wa.I32, 8}}, arg{wa.F64, 4624746457346762342})
	})
	t.Run("check:825", func(t *testing.T) {
		x41.assertReturnInvoke(t, "check", []arg{{wa.I32, 16}}, arg{wa.F64, 4624802752342104474})
	})
	t.Run("check:826", func(t *testing.T) {
		x41.assertReturnInvoke(t, "check", []arg{{wa.I32, 24}}, arg{wa.F64, 4624859047337446605})
	})
	t.Run("run:827", func(t *testing.T) { x41.invoke(t, "run", []arg{{wa.I32, 32}, {wa.F64, 4613937818241073152}}) })
	t.Run("check:828", func(t *testing.T) {
		x41.assertReturnInvoke(t, "check", []arg{{wa.I32, 0}}, arg{wa.F64, 4617353047958495778})
	})
	t.Run("check:829", func(t *testing.T) {
		x41.assertReturnInvoke(t, "check", []arg{{wa.I32, 8}}, arg{wa.F64, 4617390577955390532})
	})
	t.Run("check:830", func(t *testing.T) {
		x41.assertReturnInvoke(t, "check", []arg{{wa.I32, 16}}, arg{wa.F64, 4617428107952285287})
	})
	t.Run("check:831", func(t *testing.T) {
		x41.assertReturnInvoke(t, "check", []arg{{wa.I32, 24}}, arg{wa.F64, 4617465637949180041})
	})
	x42 := instantiateSpecTest(t, "42", "float_exprs.42.wasm")
	t.Cleanup(func() { x42.close(t) })
	t.Run("f32.ult:847", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f32.ult", []arg{{wa.F32, 1077936128}, {wa.F32, 1073741824}}, arg{wa.I32, 0})
	})
	t.Run("f32.ult:848", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f32.ult", []arg{{wa.F32, 1073741824}, {wa.F32, 1073741824}}, arg{wa.I32, 0})
	})
	t.Run("f32.ult:849", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f32.ult", []arg{{wa.F32, 1073741824}, {wa.F32, 1077936128}}, arg{wa.I32, 1})
	})
	t.Run("f32.ult:850", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f32.ult", []arg{{wa.F32, 1073741824}, {wa.F32, 2143289344}}, arg{wa.I32, 1})
	})
	t.Run("f32.ule:851", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f32.ule", []arg{{wa.F32, 1077936128}, {wa.F32, 1073741824}}, arg{wa.I32, 0})
	})
	t.Run("f32.ule:852", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f32.ule", []arg{{wa.F32, 1073741824}, {wa.F32, 1073741824}}, arg{wa.I32, 1})
	})
	t.Run("f32.ule:853", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f32.ule", []arg{{wa.F32, 1073741824}, {wa.F32, 1077936128}}, arg{wa.I32, 1})
	})
	t.Run("f32.ule:854", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f32.ule", []arg{{wa.F32, 1073741824}, {wa.F32, 2143289344}}, arg{wa.I32, 1})
	})
	t.Run("f32.ugt:855", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f32.ugt", []arg{{wa.F32, 1077936128}, {wa.F32, 1073741824}}, arg{wa.I32, 1})
	})
	t.Run("f32.ugt:856", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f32.ugt", []arg{{wa.F32, 1073741824}, {wa.F32, 1073741824}}, arg{wa.I32, 0})
	})
	t.Run("f32.ugt:857", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f32.ugt", []arg{{wa.F32, 1073741824}, {wa.F32, 1077936128}}, arg{wa.I32, 0})
	})
	t.Run("f32.ugt:858", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f32.ugt", []arg{{wa.F32, 1073741824}, {wa.F32, 2143289344}}, arg{wa.I32, 1})
	})
	t.Run("f32.uge:859", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f32.uge", []arg{{wa.F32, 1077936128}, {wa.F32, 1073741824}}, arg{wa.I32, 1})
	})
	t.Run("f32.uge:860", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f32.uge", []arg{{wa.F32, 1073741824}, {wa.F32, 1073741824}}, arg{wa.I32, 1})
	})
	t.Run("f32.uge:861", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f32.uge", []arg{{wa.F32, 1073741824}, {wa.F32, 1077936128}}, arg{wa.I32, 0})
	})
	t.Run("f32.uge:862", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f32.uge", []arg{{wa.F32, 1073741824}, {wa.F32, 2143289344}}, arg{wa.I32, 1})
	})
	t.Run("f64.ult:863", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f64.ult", []arg{{wa.F64, 4613937818241073152}, {wa.F64, 4611686018427387904}}, arg{wa.I32, 0})
	})
	t.Run("f64.ult:864", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f64.ult", []arg{{wa.F64, 4611686018427387904}, {wa.F64, 4611686018427387904}}, arg{wa.I32, 0})
	})
	t.Run("f64.ult:865", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f64.ult", []arg{{wa.F64, 4611686018427387904}, {wa.F64, 4613937818241073152}}, arg{wa.I32, 1})
	})
	t.Run("f64.ult:866", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f64.ult", []arg{{wa.F64, 4611686018427387904}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 1})
	})
	t.Run("f64.ule:867", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f64.ule", []arg{{wa.F64, 4613937818241073152}, {wa.F64, 4611686018427387904}}, arg{wa.I32, 0})
	})
	t.Run("f64.ule:868", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f64.ule", []arg{{wa.F64, 4611686018427387904}, {wa.F64, 4611686018427387904}}, arg{wa.I32, 1})
	})
	t.Run("f64.ule:869", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f64.ule", []arg{{wa.F64, 4611686018427387904}, {wa.F64, 4613937818241073152}}, arg{wa.I32, 1})
	})
	t.Run("f64.ule:870", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f64.ule", []arg{{wa.F64, 4611686018427387904}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 1})
	})
	t.Run("f64.ugt:871", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f64.ugt", []arg{{wa.F64, 4613937818241073152}, {wa.F64, 4611686018427387904}}, arg{wa.I32, 1})
	})
	t.Run("f64.ugt:872", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f64.ugt", []arg{{wa.F64, 4611686018427387904}, {wa.F64, 4611686018427387904}}, arg{wa.I32, 0})
	})
	t.Run("f64.ugt:873", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f64.ugt", []arg{{wa.F64, 4611686018427387904}, {wa.F64, 4613937818241073152}}, arg{wa.I32, 0})
	})
	t.Run("f64.ugt:874", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f64.ugt", []arg{{wa.F64, 4611686018427387904}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 1})
	})
	t.Run("f64.uge:875", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f64.uge", []arg{{wa.F64, 4613937818241073152}, {wa.F64, 4611686018427387904}}, arg{wa.I32, 1})
	})
	t.Run("f64.uge:876", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f64.uge", []arg{{wa.F64, 4611686018427387904}, {wa.F64, 4611686018427387904}}, arg{wa.I32, 1})
	})
	t.Run("f64.uge:877", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f64.uge", []arg{{wa.F64, 4611686018427387904}, {wa.F64, 4613937818241073152}}, arg{wa.I32, 0})
	})
	t.Run("f64.uge:878", func(t *testing.T) {
		x42.assertReturnInvoke(t, "f64.uge", []arg{{wa.F64, 4611686018427387904}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 1})
	})
	x43 := instantiateSpecTest(t, "43", "float_exprs.43.wasm")
	t.Cleanup(func() { x43.close(t) })
	t.Run("f32.no_fold_lt_select:894", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f32.no_fold_lt_select", []arg{{wa.F32, 0}, {wa.F32, 2143289344}}, arg{wa.F32, 2143289344})
	})
	t.Run("f32.no_fold_lt_select:895", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f32.no_fold_lt_select", []arg{{wa.F32, 2143289344}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_lt_select:896", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f32.no_fold_lt_select", []arg{{wa.F32, 0}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("f32.no_fold_lt_select:897", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f32.no_fold_lt_select", []arg{{wa.F32, 2147483648}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_le_select:898", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f32.no_fold_le_select", []arg{{wa.F32, 0}, {wa.F32, 2143289344}}, arg{wa.F32, 2143289344})
	})
	t.Run("f32.no_fold_le_select:899", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f32.no_fold_le_select", []arg{{wa.F32, 2143289344}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_le_select:900", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f32.no_fold_le_select", []arg{{wa.F32, 0}, {wa.F32, 2147483648}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_le_select:901", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f32.no_fold_le_select", []arg{{wa.F32, 2147483648}, {wa.F32, 0}}, arg{wa.F32, 2147483648})
	})
	t.Run("f32.no_fold_gt_select:902", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f32.no_fold_gt_select", []arg{{wa.F32, 0}, {wa.F32, 2143289344}}, arg{wa.F32, 2143289344})
	})
	t.Run("f32.no_fold_gt_select:903", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f32.no_fold_gt_select", []arg{{wa.F32, 2143289344}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_gt_select:904", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f32.no_fold_gt_select", []arg{{wa.F32, 0}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("f32.no_fold_gt_select:905", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f32.no_fold_gt_select", []arg{{wa.F32, 2147483648}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_ge_select:906", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f32.no_fold_ge_select", []arg{{wa.F32, 0}, {wa.F32, 2143289344}}, arg{wa.F32, 2143289344})
	})
	t.Run("f32.no_fold_ge_select:907", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f32.no_fold_ge_select", []arg{{wa.F32, 2143289344}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_ge_select:908", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f32.no_fold_ge_select", []arg{{wa.F32, 0}, {wa.F32, 2147483648}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_ge_select:909", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f32.no_fold_ge_select", []arg{{wa.F32, 2147483648}, {wa.F32, 0}}, arg{wa.F32, 2147483648})
	})
	t.Run("f64.no_fold_lt_select:910", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f64.no_fold_lt_select", []arg{{wa.F64, 0}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("f64.no_fold_lt_select:911", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f64.no_fold_lt_select", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_lt_select:912", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f64.no_fold_lt_select", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("f64.no_fold_lt_select:913", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f64.no_fold_lt_select", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_le_select:914", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f64.no_fold_le_select", []arg{{wa.F64, 0}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("f64.no_fold_le_select:915", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f64.no_fold_le_select", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_le_select:916", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f64.no_fold_le_select", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_le_select:917", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f64.no_fold_le_select", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 0}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("f64.no_fold_gt_select:918", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f64.no_fold_gt_select", []arg{{wa.F64, 0}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("f64.no_fold_gt_select:919", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f64.no_fold_gt_select", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_gt_select:920", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f64.no_fold_gt_select", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("f64.no_fold_gt_select:921", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f64.no_fold_gt_select", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_ge_select:922", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f64.no_fold_ge_select", []arg{{wa.F64, 0}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("f64.no_fold_ge_select:923", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f64.no_fold_ge_select", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_ge_select:924", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f64.no_fold_ge_select", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_ge_select:925", func(t *testing.T) {
		x43.assertReturnInvoke(t, "f64.no_fold_ge_select", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 0}}, arg{wa.F64, 9223372036854775808})
	})
	x44 := instantiateSpecTest(t, "44", "float_exprs.44.wasm")
	t.Cleanup(func() { x44.close(t) })
	t.Run("f32.no_fold_lt_if:973", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f32.no_fold_lt_if", []arg{{wa.F32, 0}, {wa.F32, 2143289344}}, arg{wa.F32, 2143289344})
	})
	t.Run("f32.no_fold_lt_if:974", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f32.no_fold_lt_if", []arg{{wa.F32, 2143289344}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_lt_if:975", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f32.no_fold_lt_if", []arg{{wa.F32, 0}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("f32.no_fold_lt_if:976", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f32.no_fold_lt_if", []arg{{wa.F32, 2147483648}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_le_if:977", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f32.no_fold_le_if", []arg{{wa.F32, 0}, {wa.F32, 2143289344}}, arg{wa.F32, 2143289344})
	})
	t.Run("f32.no_fold_le_if:978", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f32.no_fold_le_if", []arg{{wa.F32, 2143289344}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_le_if:979", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f32.no_fold_le_if", []arg{{wa.F32, 0}, {wa.F32, 2147483648}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_le_if:980", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f32.no_fold_le_if", []arg{{wa.F32, 2147483648}, {wa.F32, 0}}, arg{wa.F32, 2147483648})
	})
	t.Run("f32.no_fold_gt_if:981", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f32.no_fold_gt_if", []arg{{wa.F32, 0}, {wa.F32, 2143289344}}, arg{wa.F32, 2143289344})
	})
	t.Run("f32.no_fold_gt_if:982", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f32.no_fold_gt_if", []arg{{wa.F32, 2143289344}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_gt_if:983", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f32.no_fold_gt_if", []arg{{wa.F32, 0}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("f32.no_fold_gt_if:984", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f32.no_fold_gt_if", []arg{{wa.F32, 2147483648}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_ge_if:985", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f32.no_fold_ge_if", []arg{{wa.F32, 0}, {wa.F32, 2143289344}}, arg{wa.F32, 2143289344})
	})
	t.Run("f32.no_fold_ge_if:986", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f32.no_fold_ge_if", []arg{{wa.F32, 2143289344}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_ge_if:987", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f32.no_fold_ge_if", []arg{{wa.F32, 0}, {wa.F32, 2147483648}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_ge_if:988", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f32.no_fold_ge_if", []arg{{wa.F32, 2147483648}, {wa.F32, 0}}, arg{wa.F32, 2147483648})
	})
	t.Run("f64.no_fold_lt_if:989", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f64.no_fold_lt_if", []arg{{wa.F64, 0}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("f64.no_fold_lt_if:990", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f64.no_fold_lt_if", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_lt_if:991", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f64.no_fold_lt_if", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("f64.no_fold_lt_if:992", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f64.no_fold_lt_if", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_le_if:993", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f64.no_fold_le_if", []arg{{wa.F64, 0}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("f64.no_fold_le_if:994", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f64.no_fold_le_if", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_le_if:995", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f64.no_fold_le_if", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_le_if:996", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f64.no_fold_le_if", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 0}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("f64.no_fold_gt_if:997", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f64.no_fold_gt_if", []arg{{wa.F64, 0}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("f64.no_fold_gt_if:998", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f64.no_fold_gt_if", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_gt_if:999", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f64.no_fold_gt_if", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("f64.no_fold_gt_if:1000", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f64.no_fold_gt_if", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_ge_if:1001", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f64.no_fold_ge_if", []arg{{wa.F64, 0}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("f64.no_fold_ge_if:1002", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f64.no_fold_ge_if", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_ge_if:1003", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f64.no_fold_ge_if", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_ge_if:1004", func(t *testing.T) {
		x44.assertReturnInvoke(t, "f64.no_fold_ge_if", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 0}}, arg{wa.F64, 9223372036854775808})
	})
	x45 := instantiateSpecTest(t, "45", "float_exprs.45.wasm")
	t.Cleanup(func() { x45.close(t) })
	t.Run("f32.no_fold_lt_select_to_abs:1020", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f32.no_fold_lt_select_to_abs", []arg{{wa.F32, 2141192192}}, arg{wa.F32, 2141192192})
	})
	t.Run("f32.no_fold_lt_select_to_abs:1021", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f32.no_fold_lt_select_to_abs", []arg{{wa.F32, 4290772992}}, arg{wa.F32, 4290772992})
	})
	t.Run("f32.no_fold_lt_select_to_abs:1022", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f32.no_fold_lt_select_to_abs", []arg{{wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_lt_select_to_abs:1023", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f32.no_fold_lt_select_to_abs", []arg{{wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("f32.no_fold_le_select_to_abs:1024", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f32.no_fold_le_select_to_abs", []arg{{wa.F32, 2141192192}}, arg{wa.F32, 2141192192})
	})
	t.Run("f32.no_fold_le_select_to_abs:1025", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f32.no_fold_le_select_to_abs", []arg{{wa.F32, 4290772992}}, arg{wa.F32, 4290772992})
	})
	t.Run("f32.no_fold_le_select_to_abs:1026", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f32.no_fold_le_select_to_abs", []arg{{wa.F32, 0}}, arg{wa.F32, 2147483648})
	})
	t.Run("f32.no_fold_le_select_to_abs:1027", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f32.no_fold_le_select_to_abs", []arg{{wa.F32, 2147483648}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_gt_select_to_abs:1028", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f32.no_fold_gt_select_to_abs", []arg{{wa.F32, 2141192192}}, arg{wa.F32, 4288675840})
	})
	t.Run("f32.no_fold_gt_select_to_abs:1029", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f32.no_fold_gt_select_to_abs", []arg{{wa.F32, 4290772992}}, arg{wa.F32, 2143289344})
	})
	t.Run("f32.no_fold_gt_select_to_abs:1030", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f32.no_fold_gt_select_to_abs", []arg{{wa.F32, 0}}, arg{wa.F32, 2147483648})
	})
	t.Run("f32.no_fold_gt_select_to_abs:1031", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f32.no_fold_gt_select_to_abs", []arg{{wa.F32, 2147483648}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_ge_select_to_abs:1032", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f32.no_fold_ge_select_to_abs", []arg{{wa.F32, 2141192192}}, arg{wa.F32, 4288675840})
	})
	t.Run("f32.no_fold_ge_select_to_abs:1033", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f32.no_fold_ge_select_to_abs", []arg{{wa.F32, 4290772992}}, arg{wa.F32, 2143289344})
	})
	t.Run("f32.no_fold_ge_select_to_abs:1034", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f32.no_fold_ge_select_to_abs", []arg{{wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_ge_select_to_abs:1035", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f32.no_fold_ge_select_to_abs", []arg{{wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("f64.no_fold_lt_select_to_abs:1036", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f64.no_fold_lt_select_to_abs", []arg{{wa.F64, 9219994337134247936}}, arg{wa.F64, 9219994337134247936})
	})
	t.Run("f64.no_fold_lt_select_to_abs:1037", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f64.no_fold_lt_select_to_abs", []arg{{wa.F64, 18444492273895866368}}, arg{wa.F64, 18444492273895866368})
	})
	t.Run("f64.no_fold_lt_select_to_abs:1038", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f64.no_fold_lt_select_to_abs", []arg{{wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_lt_select_to_abs:1039", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f64.no_fold_lt_select_to_abs", []arg{{wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("f64.no_fold_le_select_to_abs:1040", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f64.no_fold_le_select_to_abs", []arg{{wa.F64, 9219994337134247936}}, arg{wa.F64, 9219994337134247936})
	})
	t.Run("f64.no_fold_le_select_to_abs:1041", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f64.no_fold_le_select_to_abs", []arg{{wa.F64, 18444492273895866368}}, arg{wa.F64, 18444492273895866368})
	})
	t.Run("f64.no_fold_le_select_to_abs:1042", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f64.no_fold_le_select_to_abs", []arg{{wa.F64, 0}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("f64.no_fold_le_select_to_abs:1043", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f64.no_fold_le_select_to_abs", []arg{{wa.F64, 9223372036854775808}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_gt_select_to_abs:1044", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f64.no_fold_gt_select_to_abs", []arg{{wa.F64, 9219994337134247936}}, arg{wa.F64, 18443366373989023744})
	})
	t.Run("f64.no_fold_gt_select_to_abs:1045", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f64.no_fold_gt_select_to_abs", []arg{{wa.F64, 18444492273895866368}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("f64.no_fold_gt_select_to_abs:1046", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f64.no_fold_gt_select_to_abs", []arg{{wa.F64, 0}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("f64.no_fold_gt_select_to_abs:1047", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f64.no_fold_gt_select_to_abs", []arg{{wa.F64, 9223372036854775808}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_ge_select_to_abs:1048", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f64.no_fold_ge_select_to_abs", []arg{{wa.F64, 9219994337134247936}}, arg{wa.F64, 18443366373989023744})
	})
	t.Run("f64.no_fold_ge_select_to_abs:1049", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f64.no_fold_ge_select_to_abs", []arg{{wa.F64, 18444492273895866368}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("f64.no_fold_ge_select_to_abs:1050", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f64.no_fold_ge_select_to_abs", []arg{{wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_ge_select_to_abs:1051", func(t *testing.T) {
		x45.assertReturnInvoke(t, "f64.no_fold_ge_select_to_abs", []arg{{wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	x46 := instantiateSpecTest(t, "46", "float_exprs.46.wasm")
	t.Cleanup(func() { x46.close(t) })
	t.Run("f32.no_fold_lt_if_to_abs:1099", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f32.no_fold_lt_if_to_abs", []arg{{wa.F32, 2141192192}}, arg{wa.F32, 2141192192})
	})
	t.Run("f32.no_fold_lt_if_to_abs:1100", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f32.no_fold_lt_if_to_abs", []arg{{wa.F32, 4290772992}}, arg{wa.F32, 4290772992})
	})
	t.Run("f32.no_fold_lt_if_to_abs:1101", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f32.no_fold_lt_if_to_abs", []arg{{wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_lt_if_to_abs:1102", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f32.no_fold_lt_if_to_abs", []arg{{wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("f32.no_fold_le_if_to_abs:1103", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f32.no_fold_le_if_to_abs", []arg{{wa.F32, 2141192192}}, arg{wa.F32, 2141192192})
	})
	t.Run("f32.no_fold_le_if_to_abs:1104", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f32.no_fold_le_if_to_abs", []arg{{wa.F32, 4290772992}}, arg{wa.F32, 4290772992})
	})
	t.Run("f32.no_fold_le_if_to_abs:1105", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f32.no_fold_le_if_to_abs", []arg{{wa.F32, 0}}, arg{wa.F32, 2147483648})
	})
	t.Run("f32.no_fold_le_if_to_abs:1106", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f32.no_fold_le_if_to_abs", []arg{{wa.F32, 2147483648}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_gt_if_to_abs:1107", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f32.no_fold_gt_if_to_abs", []arg{{wa.F32, 2141192192}}, arg{wa.F32, 4288675840})
	})
	t.Run("f32.no_fold_gt_if_to_abs:1108", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f32.no_fold_gt_if_to_abs", []arg{{wa.F32, 4290772992}}, arg{wa.F32, 2143289344})
	})
	t.Run("f32.no_fold_gt_if_to_abs:1109", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f32.no_fold_gt_if_to_abs", []arg{{wa.F32, 0}}, arg{wa.F32, 2147483648})
	})
	t.Run("f32.no_fold_gt_if_to_abs:1110", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f32.no_fold_gt_if_to_abs", []arg{{wa.F32, 2147483648}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_ge_if_to_abs:1111", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f32.no_fold_ge_if_to_abs", []arg{{wa.F32, 2141192192}}, arg{wa.F32, 4288675840})
	})
	t.Run("f32.no_fold_ge_if_to_abs:1112", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f32.no_fold_ge_if_to_abs", []arg{{wa.F32, 4290772992}}, arg{wa.F32, 2143289344})
	})
	t.Run("f32.no_fold_ge_if_to_abs:1113", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f32.no_fold_ge_if_to_abs", []arg{{wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_ge_if_to_abs:1114", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f32.no_fold_ge_if_to_abs", []arg{{wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("f64.no_fold_lt_if_to_abs:1115", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f64.no_fold_lt_if_to_abs", []arg{{wa.F64, 9219994337134247936}}, arg{wa.F64, 9219994337134247936})
	})
	t.Run("f64.no_fold_lt_if_to_abs:1116", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f64.no_fold_lt_if_to_abs", []arg{{wa.F64, 18444492273895866368}}, arg{wa.F64, 18444492273895866368})
	})
	t.Run("f64.no_fold_lt_if_to_abs:1117", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f64.no_fold_lt_if_to_abs", []arg{{wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_lt_if_to_abs:1118", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f64.no_fold_lt_if_to_abs", []arg{{wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("f64.no_fold_le_if_to_abs:1119", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f64.no_fold_le_if_to_abs", []arg{{wa.F64, 9219994337134247936}}, arg{wa.F64, 9219994337134247936})
	})
	t.Run("f64.no_fold_le_if_to_abs:1120", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f64.no_fold_le_if_to_abs", []arg{{wa.F64, 18444492273895866368}}, arg{wa.F64, 18444492273895866368})
	})
	t.Run("f64.no_fold_le_if_to_abs:1121", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f64.no_fold_le_if_to_abs", []arg{{wa.F64, 0}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("f64.no_fold_le_if_to_abs:1122", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f64.no_fold_le_if_to_abs", []arg{{wa.F64, 9223372036854775808}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_gt_if_to_abs:1123", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f64.no_fold_gt_if_to_abs", []arg{{wa.F64, 9219994337134247936}}, arg{wa.F64, 18443366373989023744})
	})
	t.Run("f64.no_fold_gt_if_to_abs:1124", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f64.no_fold_gt_if_to_abs", []arg{{wa.F64, 18444492273895866368}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("f64.no_fold_gt_if_to_abs:1125", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f64.no_fold_gt_if_to_abs", []arg{{wa.F64, 0}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("f64.no_fold_gt_if_to_abs:1126", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f64.no_fold_gt_if_to_abs", []arg{{wa.F64, 9223372036854775808}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_ge_if_to_abs:1127", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f64.no_fold_ge_if_to_abs", []arg{{wa.F64, 9219994337134247936}}, arg{wa.F64, 18443366373989023744})
	})
	t.Run("f64.no_fold_ge_if_to_abs:1128", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f64.no_fold_ge_if_to_abs", []arg{{wa.F64, 18444492273895866368}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("f64.no_fold_ge_if_to_abs:1129", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f64.no_fold_ge_if_to_abs", []arg{{wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_ge_if_to_abs:1130", func(t *testing.T) {
		x46.assertReturnInvoke(t, "f64.no_fold_ge_if_to_abs", []arg{{wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	x47 := instantiateSpecTest(t, "47", "float_exprs.47.wasm")
	t.Cleanup(func() { x47.close(t) })
	t.Run("f32.incorrect_correction:1144", func(t *testing.T) { x47.assertReturnInvoke(t, "f32.incorrect_correction", nil, arg{wa.F32, 872415232}) })
	t.Run("f64.incorrect_correction:1145", func(t *testing.T) {
		x47.assertReturnInvoke(t, "f64.incorrect_correction", nil, arg{wa.F64, 13596367275031527424})
	})
	x48 := instantiateSpecTest(t, "48", "float_exprs.48.wasm")
	t.Cleanup(func() { x48.close(t) })
	t.Run("calculate:1167", func(t *testing.T) { x48.assertReturnInvoke(t, "calculate", nil, arg{wa.F32, 3286857379}) })
	x49 := instantiateSpecTest(t, "49", "float_exprs.49.wasm")
	t.Cleanup(func() { x49.close(t) })
	t.Run("calculate:1186", func(t *testing.T) { x49.assertReturnInvoke(t, "calculate", nil, arg{wa.F64, 13870293918930799763}) })
	x50 := instantiateSpecTest(t, "50", "float_exprs.50.wasm")
	t.Cleanup(func() { x50.close(t) })
	t.Run("llvm_pr26746:1197", func(t *testing.T) {
		x50.assertReturnInvoke(t, "llvm_pr26746", []arg{{wa.F32, 2147483648}}, arg{wa.F32, 0})
	})
	x51 := instantiateSpecTest(t, "51", "float_exprs.51.wasm")
	t.Cleanup(func() { x51.close(t) })
	t.Run("llvm_pr27153:1208", func(t *testing.T) {
		x51.assertReturnInvoke(t, "llvm_pr27153", []arg{{wa.I32, 33554434}}, arg{wa.F32, 1270874112})
	})
	x52 := instantiateSpecTest(t, "52", "float_exprs.52.wasm")
	t.Cleanup(func() { x52.close(t) })
	t.Run("llvm_pr27036:1220", func(t *testing.T) {
		x52.assertReturnInvoke(t, "llvm_pr27036", []arg{{wa.I32, 4269932491}, {wa.I32, 14942208}}, arg{wa.F32, 3407478836})
	})
	x53 := instantiateSpecTest(t, "53", "float_exprs.53.wasm")
	t.Cleanup(func() { x53.close(t) })
	t.Run("thepast0:1244", func(t *testing.T) {
		x53.assertReturnInvoke(t, "thepast0", []arg{{wa.F64, 9007199254740992}, {wa.F64, 4607182418800017407}, {wa.F64, 4611686018427387904}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 9007199254740991})
	})
	t.Run("thepast1:1245", func(t *testing.T) {
		x53.assertReturnInvoke(t, "thepast1", []arg{{wa.F64, 4363988038922010624}, {wa.F64, 4607182418800017407}, {wa.F64, 4363988038922010624}}, arg{wa.F64, 13348669295526150144})
	})
	t.Run("thepast2:1246", func(t *testing.T) {
		x53.assertReturnInvoke(t, "thepast2", []arg{{wa.F32, 16777216}, {wa.F32, 1056964608}, {wa.F32, 1065353216}}, arg{wa.F32, 8388608})
	})
	x54 := instantiateSpecTest(t, "54", "float_exprs.54.wasm")
	t.Cleanup(func() { x54.close(t) })
	t.Run("inverse:1257", func(t *testing.T) {
		x54.assertReturnInvoke(t, "inverse", []arg{{wa.F32, 1119879168}}, arg{wa.F32, 1009429163})
	})
	x55 := instantiateSpecTest(t, "55", "float_exprs.55.wasm")
	t.Cleanup(func() { x55.close(t) })
	t.Run("f32_sqrt_minus_2:1272", func(t *testing.T) {
		x55.assertReturnInvoke(t, "f32_sqrt_minus_2", []arg{{wa.F32, 1082130432}}, arg{wa.F32, 0})
	})
	t.Run("f64_sqrt_minus_2:1273", func(t *testing.T) {
		x55.assertReturnInvoke(t, "f64_sqrt_minus_2", []arg{{wa.F64, 4616189618054758400}}, arg{wa.F64, 0})
	})
	x56 := instantiateSpecTest(t, "56", "float_exprs.56.wasm")
	t.Cleanup(func() { x56.close(t) })
	t.Run("f32.no_fold_recip_recip:1285", func(t *testing.T) {
		x56.assertReturnInvoke(t, "f32.no_fold_recip_recip", []arg{{wa.F32, 3765723020}}, arg{wa.F32, 3765723019})
	})
	t.Run("f32.no_fold_recip_recip:1286", func(t *testing.T) {
		x56.assertReturnInvoke(t, "f32.no_fold_recip_recip", []arg{{wa.F32, 426844452}}, arg{wa.F32, 426844451})
	})
	t.Run("f32.no_fold_recip_recip:1287", func(t *testing.T) {
		x56.assertReturnInvoke(t, "f32.no_fold_recip_recip", []arg{{wa.F32, 535132276}}, arg{wa.F32, 535132277})
	})
	t.Run("f32.no_fold_recip_recip:1288", func(t *testing.T) {
		x56.assertReturnInvoke(t, "f32.no_fold_recip_recip", []arg{{wa.F32, 3253941441}}, arg{wa.F32, 3253941442})
	})
	t.Run("f32.no_fold_recip_recip:1289", func(t *testing.T) {
		x56.assertReturnInvoke(t, "f32.no_fold_recip_recip", []arg{{wa.F32, 1660734603}}, arg{wa.F32, 1660734602})
	})
	t.Run("f32.no_fold_recip_recip:1291", func(t *testing.T) {
		x56.assertReturnInvoke(t, "f32.no_fold_recip_recip", []arg{{wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("f32.no_fold_recip_recip:1292", func(t *testing.T) {
		x56.assertReturnInvoke(t, "f32.no_fold_recip_recip", []arg{{wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_recip_recip:1293", func(t *testing.T) {
		x56.assertReturnInvoke(t, "f32.no_fold_recip_recip", []arg{{wa.F32, 4286578688}}, arg{wa.F32, 4286578688})
	})
	t.Run("f32.no_fold_recip_recip:1294", func(t *testing.T) {
		x56.assertReturnInvoke(t, "f32.no_fold_recip_recip", []arg{{wa.F32, 2139095040}}, arg{wa.F32, 2139095040})
	})
	t.Run("f64.no_fold_recip_recip:1296", func(t *testing.T) {
		x56.assertReturnInvoke(t, "f64.no_fold_recip_recip", []arg{{wa.F64, 14500888369201570768}}, arg{wa.F64, 14500888369201570769})
	})
	t.Run("f64.no_fold_recip_recip:1297", func(t *testing.T) {
		x56.assertReturnInvoke(t, "f64.no_fold_recip_recip", []arg{{wa.F64, 14132092565459057123}}, arg{wa.F64, 14132092565459057122})
	})
	t.Run("f64.no_fold_recip_recip:1298", func(t *testing.T) {
		x56.assertReturnInvoke(t, "f64.no_fold_recip_recip", []arg{{wa.F64, 5359183527603521526}}, arg{wa.F64, 5359183527603521525})
	})
	t.Run("f64.no_fold_recip_recip:1299", func(t *testing.T) {
		x56.assertReturnInvoke(t, "f64.no_fold_recip_recip", []arg{{wa.F64, 1521566147669375634}}, arg{wa.F64, 1521566147669375633})
	})
	t.Run("f64.no_fold_recip_recip:1300", func(t *testing.T) {
		x56.assertReturnInvoke(t, "f64.no_fold_recip_recip", []arg{{wa.F64, 8671785631545870379}}, arg{wa.F64, 8671785631545870378})
	})
	t.Run("f64.no_fold_recip_recip:1302", func(t *testing.T) {
		x56.assertReturnInvoke(t, "f64.no_fold_recip_recip", []arg{{wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("f64.no_fold_recip_recip:1303", func(t *testing.T) {
		x56.assertReturnInvoke(t, "f64.no_fold_recip_recip", []arg{{wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_recip_recip:1304", func(t *testing.T) {
		x56.assertReturnInvoke(t, "f64.no_fold_recip_recip", []arg{{wa.F64, 18442240474082181120}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("f64.no_fold_recip_recip:1305", func(t *testing.T) {
		x56.assertReturnInvoke(t, "f64.no_fold_recip_recip", []arg{{wa.F64, 9218868437227405312}}, arg{wa.F64, 9218868437227405312})
	})
	x57 := instantiateSpecTest(t, "57", "float_exprs.57.wasm")
	t.Cleanup(func() { x57.close(t) })
	t.Run("f32.no_algebraic_factoring:1319", func(t *testing.T) {
		x57.assertReturnInvoke(t, "f32.no_algebraic_factoring", []arg{{wa.F32, 2759308231}, {wa.F32, 618704988}}, arg{wa.F32, 2315864577})
	})
	t.Run("f32.no_algebraic_factoring:1320", func(t *testing.T) {
		x57.assertReturnInvoke(t, "f32.no_algebraic_factoring", []arg{{wa.F32, 3415653214}, {wa.F32, 1274676302}}, arg{wa.F32, 3625675853})
	})
	t.Run("f32.no_algebraic_factoring:1321", func(t *testing.T) {
		x57.assertReturnInvoke(t, "f32.no_algebraic_factoring", []arg{{wa.F32, 1446924633}, {wa.F32, 3607373982}}, arg{wa.F32, 4000155759})
	})
	t.Run("f32.no_algebraic_factoring:1322", func(t *testing.T) {
		x57.assertReturnInvoke(t, "f32.no_algebraic_factoring", []arg{{wa.F32, 1212067608}, {wa.F32, 3278094810}}, arg{wa.F32, 1359874131})
	})
	t.Run("f32.no_algebraic_factoring:1323", func(t *testing.T) {
		x57.assertReturnInvoke(t, "f32.no_algebraic_factoring", []arg{{wa.F32, 3278732464}, {wa.F32, 3379389272}}, arg{wa.F32, 3546030359})
	})
	t.Run("f64.no_algebraic_factoring:1325", func(t *testing.T) {
		x57.assertReturnInvoke(t, "f64.no_algebraic_factoring", []arg{{wa.F64, 2467435761933928117}, {wa.F64, 2526113756828458004}}, arg{wa.F64, 9668435399096543331})
	})
	t.Run("f64.no_algebraic_factoring:1326", func(t *testing.T) {
		x57.assertReturnInvoke(t, "f64.no_algebraic_factoring", []arg{{wa.F64, 2911983657790464931}, {wa.F64, 2814431682419759911}}, arg{wa.F64, 1217162942843921803})
	})
	t.Run("f64.no_algebraic_factoring:1327", func(t *testing.T) {
		x57.assertReturnInvoke(t, "f64.no_algebraic_factoring", []arg{{wa.F64, 12131637044948792058}, {wa.F64, 12170782965730311956}}, arg{wa.F64, 10511676135434922533})
	})
	t.Run("f64.no_algebraic_factoring:1328", func(t *testing.T) {
		x57.assertReturnInvoke(t, "f64.no_algebraic_factoring", []arg{{wa.F64, 14639789466354372633}, {wa.F64, 5456963169336729236}}, arg{wa.F64, 15530333405173431543})
	})
	t.Run("f64.no_algebraic_factoring:1329", func(t *testing.T) {
		x57.assertReturnInvoke(t, "f64.no_algebraic_factoring", []arg{{wa.F64, 5121779675912507154}, {wa.F64, 14237286623175920791}}, arg{wa.F64, 5636689734063865714})
	})
	x58 := instantiateSpecTest(t, "58", "float_exprs.58.wasm")
	t.Cleanup(func() { x58.close(t) })
	t.Run("f32.no_algebraic_factoring:1343", func(t *testing.T) {
		x58.assertReturnInvoke(t, "f32.no_algebraic_factoring", []arg{{wa.F32, 684135946}, {wa.F32, 744319693}}, arg{wa.F32, 2571075368})
	})
	t.Run("f32.no_algebraic_factoring:1344", func(t *testing.T) {
		x58.assertReturnInvoke(t, "f32.no_algebraic_factoring", []arg{{wa.F32, 3560929481}, {wa.F32, 3496840229}}, arg{wa.F32, 1762604185})
	})
	t.Run("f32.no_algebraic_factoring:1345", func(t *testing.T) {
		x58.assertReturnInvoke(t, "f32.no_algebraic_factoring", []arg{{wa.F32, 968841772}, {wa.F32, 3106497100}}, arg{wa.F32, 870712803})
	})
	t.Run("f32.no_algebraic_factoring:1346", func(t *testing.T) {
		x58.assertReturnInvoke(t, "f32.no_algebraic_factoring", []arg{{wa.F32, 697514723}, {wa.F32, 2834753933}}, arg{wa.F32, 327914662})
	})
	t.Run("f32.no_algebraic_factoring:1347", func(t *testing.T) {
		x58.assertReturnInvoke(t, "f32.no_algebraic_factoring", []arg{{wa.F32, 1498230729}, {wa.F32, 3650453580}}, arg{wa.F32, 4080583891})
	})
	t.Run("f64.no_algebraic_factoring:1349", func(t *testing.T) {
		x58.assertReturnInvoke(t, "f64.no_algebraic_factoring", []arg{{wa.F64, 6212515167506370409}, {wa.F64, 15348474890798978273}}, arg{wa.F64, 7818515589337550196})
	})
	t.Run("f64.no_algebraic_factoring:1350", func(t *testing.T) {
		x58.assertReturnInvoke(t, "f64.no_algebraic_factoring", []arg{{wa.F64, 15222970140370015722}, {wa.F64, 15325207139996136125}}, arg{wa.F64, 16819892485880140289})
	})
	t.Run("f64.no_algebraic_factoring:1351", func(t *testing.T) {
		x58.assertReturnInvoke(t, "f64.no_algebraic_factoring", []arg{{wa.F64, 4797439202963874050}, {wa.F64, 14009643534571442918}}, arg{wa.F64, 4987747999326390045})
	})
	t.Run("f64.no_algebraic_factoring:1352", func(t *testing.T) {
		x58.assertReturnInvoke(t, "f64.no_algebraic_factoring", []arg{{wa.F64, 14653559129294038194}, {wa.F64, 14581996260169223461}}, arg{wa.F64, 6253339631158964222})
	})
	t.Run("f64.no_algebraic_factoring:1353", func(t *testing.T) {
		x58.assertReturnInvoke(t, "f64.no_algebraic_factoring", []arg{{wa.F64, 12768321634751930140}, {wa.F64, 12767602092732820937}}, arg{wa.F64, 2473652960990319032})
	})
	x59 := instantiateSpecTest(t, "59", "float_exprs.59.wasm")
	t.Cleanup(func() { x59.close(t) })
	t.Run("f32.simple_x4_sum:1391", func(t *testing.T) {
		x59.assertReturnInvoke(t, "f32.simple_x4_sum", []arg{{wa.I32, 0}, {wa.I32, 16}, {wa.I32, 32}}, arg{})
	})
	t.Run("f32.load:1392", func(t *testing.T) { x59.assertReturnInvoke(t, "f32.load", []arg{{wa.I32, 32}}, arg{wa.F32, 2}) })
	t.Run("f32.load:1393", func(t *testing.T) { x59.assertReturnInvoke(t, "f32.load", []arg{{wa.I32, 36}}, arg{wa.F32, 0}) })
	t.Run("f32.load:1394", func(t *testing.T) { x59.assertReturnInvoke(t, "f32.load", []arg{{wa.I32, 40}}, arg{wa.F32, 1}) })
	t.Run("f32.load:1395", func(t *testing.T) {
		x59.assertReturnInvoke(t, "f32.load", []arg{{wa.I32, 44}}, arg{wa.F32, 2147483649})
	})
	x60 := instantiateSpecTest(t, "60", "float_exprs.60.wasm")
	t.Cleanup(func() { x60.close(t) })
	t.Run("f64.simple_x4_sum:1430", func(t *testing.T) {
		x60.assertReturnInvoke(t, "f64.simple_x4_sum", []arg{{wa.I32, 0}, {wa.I32, 32}, {wa.I32, 64}}, arg{})
	})
	t.Run("f64.load:1431", func(t *testing.T) { x60.assertReturnInvoke(t, "f64.load", []arg{{wa.I32, 64}}, arg{wa.F64, 2}) })
	t.Run("f64.load:1432", func(t *testing.T) { x60.assertReturnInvoke(t, "f64.load", []arg{{wa.I32, 72}}, arg{wa.F64, 0}) })
	t.Run("f64.load:1433", func(t *testing.T) { x60.assertReturnInvoke(t, "f64.load", []arg{{wa.I32, 80}}, arg{wa.F64, 1}) })
	t.Run("f64.load:1434", func(t *testing.T) {
		x60.assertReturnInvoke(t, "f64.load", []arg{{wa.I32, 88}}, arg{wa.F64, 9223372036854775809})
	})
	x61 := instantiateSpecTest(t, "61", "float_exprs.61.wasm")
	t.Cleanup(func() { x61.close(t) })
	t.Run("f32.kahan_sum:1530", func(t *testing.T) {
		x61.assertReturnInvoke(t, "f32.kahan_sum", []arg{{wa.I32, 0}, {wa.I32, 256}}, arg{wa.F32, 4085779725})
	})
	t.Run("f32.plain_sum:1531", func(t *testing.T) {
		x61.assertReturnInvoke(t, "f32.plain_sum", []arg{{wa.I32, 0}, {wa.I32, 256}}, arg{wa.F32, 4082113053})
	})
	x62 := instantiateSpecTest(t, "62", "float_exprs.62.wasm")
	t.Cleanup(func() { x62.close(t) })
	t.Run("f64.kahan_sum:1581", func(t *testing.T) {
		x62.assertReturnInvoke(t, "f64.kahan_sum", []arg{{wa.I32, 0}, {wa.I32, 256}}, arg{wa.F64, 9105671289202277512})
	})
	t.Run("f64.plain_sum:1582", func(t *testing.T) {
		x62.assertReturnInvoke(t, "f64.plain_sum", []arg{{wa.I32, 0}, {wa.I32, 256}}, arg{wa.F64, 9105671289202539655})
	})
	x63 := instantiateSpecTest(t, "63", "float_exprs.63.wasm")
	t.Cleanup(func() { x63.close(t) })
	t.Run("f32.no_fold_neg_sub:1594", func(t *testing.T) {
		x63.assertReturnInvoke(t, "f32.no_fold_neg_sub", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("f32.no_fold_neg_sub:1595", func(t *testing.T) {
		x63.assertReturnInvoke(t, "f32.no_fold_neg_sub", []arg{{wa.F32, 0}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("f32.no_fold_neg_sub:1596", func(t *testing.T) {
		x63.assertReturnInvoke(t, "f32.no_fold_neg_sub", []arg{{wa.F32, 2147483648}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_neg_sub:1597", func(t *testing.T) {
		x63.assertReturnInvoke(t, "f32.no_fold_neg_sub", []arg{{wa.F32, 0}, {wa.F32, 0}}, arg{wa.F32, 2147483648})
	})
	t.Run("f64.no_fold_neg_sub:1599", func(t *testing.T) {
		x63.assertReturnInvoke(t, "f64.no_fold_neg_sub", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("f64.no_fold_neg_sub:1600", func(t *testing.T) {
		x63.assertReturnInvoke(t, "f64.no_fold_neg_sub", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("f64.no_fold_neg_sub:1601", func(t *testing.T) {
		x63.assertReturnInvoke(t, "f64.no_fold_neg_sub", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_neg_sub:1602", func(t *testing.T) {
		x63.assertReturnInvoke(t, "f64.no_fold_neg_sub", []arg{{wa.F64, 0}, {wa.F64, 0}}, arg{wa.F64, 9223372036854775808})
	})
	x64 := instantiateSpecTest(t, "64", "float_exprs.64.wasm")
	t.Cleanup(func() { x64.close(t) })
	t.Run("f32.no_fold_neg_add:1614", func(t *testing.T) {
		x64.assertReturnInvoke(t, "f32.no_fold_neg_add", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483648}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_neg_add:1615", func(t *testing.T) {
		x64.assertReturnInvoke(t, "f32.no_fold_neg_add", []arg{{wa.F32, 0}, {wa.F32, 2147483648}}, arg{wa.F32, 2147483648})
	})
	t.Run("f32.no_fold_neg_add:1616", func(t *testing.T) {
		x64.assertReturnInvoke(t, "f32.no_fold_neg_add", []arg{{wa.F32, 2147483648}, {wa.F32, 0}}, arg{wa.F32, 2147483648})
	})
	t.Run("f32.no_fold_neg_add:1617", func(t *testing.T) {
		x64.assertReturnInvoke(t, "f32.no_fold_neg_add", []arg{{wa.F32, 0}, {wa.F32, 0}}, arg{wa.F32, 2147483648})
	})
	t.Run("f64.no_fold_neg_add:1619", func(t *testing.T) {
		x64.assertReturnInvoke(t, "f64.no_fold_neg_add", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_neg_add:1620", func(t *testing.T) {
		x64.assertReturnInvoke(t, "f64.no_fold_neg_add", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("f64.no_fold_neg_add:1621", func(t *testing.T) {
		x64.assertReturnInvoke(t, "f64.no_fold_neg_add", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 0}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("f64.no_fold_neg_add:1622", func(t *testing.T) {
		x64.assertReturnInvoke(t, "f64.no_fold_neg_add", []arg{{wa.F64, 0}, {wa.F64, 0}}, arg{wa.F64, 9223372036854775808})
	})
	x65 := instantiateSpecTest(t, "65", "float_exprs.65.wasm")
	t.Cleanup(func() { x65.close(t) })
	t.Run("f32.no_fold_add_neg_neg:1634", func(t *testing.T) {
		x65.assertReturnInvoke(t, "f32.no_fold_add_neg_neg", []arg{{wa.F32, 2147483648}, {wa.F32, 2147483648}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_add_neg_neg:1635", func(t *testing.T) {
		x65.assertReturnInvoke(t, "f32.no_fold_add_neg_neg", []arg{{wa.F32, 0}, {wa.F32, 2147483648}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_add_neg_neg:1636", func(t *testing.T) {
		x65.assertReturnInvoke(t, "f32.no_fold_add_neg_neg", []arg{{wa.F32, 2147483648}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_add_neg_neg:1637", func(t *testing.T) {
		x65.assertReturnInvoke(t, "f32.no_fold_add_neg_neg", []arg{{wa.F32, 0}, {wa.F32, 0}}, arg{wa.F32, 2147483648})
	})
	t.Run("f64.no_fold_add_neg_neg:1639", func(t *testing.T) {
		x65.assertReturnInvoke(t, "f64.no_fold_add_neg_neg", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_add_neg_neg:1640", func(t *testing.T) {
		x65.assertReturnInvoke(t, "f64.no_fold_add_neg_neg", []arg{{wa.F64, 0}, {wa.F64, 9223372036854775808}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_add_neg_neg:1641", func(t *testing.T) {
		x65.assertReturnInvoke(t, "f64.no_fold_add_neg_neg", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_add_neg_neg:1642", func(t *testing.T) {
		x65.assertReturnInvoke(t, "f64.no_fold_add_neg_neg", []arg{{wa.F64, 0}, {wa.F64, 0}}, arg{wa.F64, 9223372036854775808})
	})
	x66 := instantiateSpecTest(t, "66", "float_exprs.66.wasm")
	t.Cleanup(func() { x66.close(t) })
	t.Run("f32.no_fold_add_neg:1654", func(t *testing.T) {
		x66.assertReturnInvoke(t, "f32.no_fold_add_neg", []arg{{wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_add_neg:1655", func(t *testing.T) {
		x66.assertReturnInvoke(t, "f32.no_fold_add_neg", []arg{{wa.F32, 2147483648}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_add_neg:1656", func(t *testing.T) {
		x66.assertReturnInvoke(t, "f32.no_fold_add_neg", []arg{{wa.F32, 2139095040}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("f32.no_fold_add_neg:1657", func(t *testing.T) {
		x66.assertReturnInvoke(t, "f32.no_fold_add_neg", []arg{{wa.F32, 4286578688}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("f64.no_fold_add_neg:1659", func(t *testing.T) {
		x66.assertReturnInvoke(t, "f64.no_fold_add_neg", []arg{{wa.F64, 0}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_add_neg:1660", func(t *testing.T) {
		x66.assertReturnInvoke(t, "f64.no_fold_add_neg", []arg{{wa.F64, 9223372036854775808}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_add_neg:1661", func(t *testing.T) {
		x66.assertReturnInvoke(t, "f64.no_fold_add_neg", []arg{{wa.F64, 9218868437227405312}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("f64.no_fold_add_neg:1662", func(t *testing.T) {
		x66.assertReturnInvoke(t, "f64.no_fold_add_neg", []arg{{wa.F64, 18442240474082181120}}, arg{wa.F64, 0x7ff8000000000000})
	})
	x67 := instantiateSpecTest(t, "67", "float_exprs.67.wasm")
	t.Cleanup(func() { x67.close(t) })
	t.Run("f32.no_fold_6x_via_add:1680", func(t *testing.T) {
		x67.assertReturnInvoke(t, "f32.no_fold_6x_via_add", []arg{{wa.F32, 4046243078}}, arg{wa.F32, 4068578245})
	})
	t.Run("f32.no_fold_6x_via_add:1681", func(t *testing.T) {
		x67.assertReturnInvoke(t, "f32.no_fold_6x_via_add", []arg{{wa.F32, 2573857750}}, arg{wa.F32, 2595190497})
	})
	t.Run("f32.no_fold_6x_via_add:1682", func(t *testing.T) {
		x67.assertReturnInvoke(t, "f32.no_fold_6x_via_add", []arg{{wa.F32, 419462401}}, arg{wa.F32, 440449921})
	})
	t.Run("f32.no_fold_6x_via_add:1683", func(t *testing.T) {
		x67.assertReturnInvoke(t, "f32.no_fold_6x_via_add", []arg{{wa.F32, 2955475482}}, arg{wa.F32, 2977789734})
	})
	t.Run("f32.no_fold_6x_via_add:1684", func(t *testing.T) {
		x67.assertReturnInvoke(t, "f32.no_fold_6x_via_add", []arg{{wa.F32, 3883931973}}, arg{wa.F32, 3904906727})
	})
	t.Run("f64.no_fold_6x_via_add:1686", func(t *testing.T) {
		x67.assertReturnInvoke(t, "f64.no_fold_6x_via_add", []arg{{wa.F64, 14137662215323058150}}, arg{wa.F64, 14149352706895019994})
	})
	t.Run("f64.no_fold_6x_via_add:1687", func(t *testing.T) {
		x67.assertReturnInvoke(t, "f64.no_fold_6x_via_add", []arg{{wa.F64, 11424134044545165748}}, arg{wa.F64, 11435767596137037638})
	})
	t.Run("f64.no_fold_6x_via_add:1688", func(t *testing.T) {
		x67.assertReturnInvoke(t, "f64.no_fold_6x_via_add", []arg{{wa.F64, 15055410132664937138}}, arg{wa.F64, 15066699987142021125})
	})
	t.Run("f64.no_fold_6x_via_add:1689", func(t *testing.T) {
		x67.assertReturnInvoke(t, "f64.no_fold_6x_via_add", []arg{{wa.F64, 7991451501228919438}}, arg{wa.F64, 8003319959635773419})
	})
	t.Run("f64.no_fold_6x_via_add:1690", func(t *testing.T) {
		x67.assertReturnInvoke(t, "f64.no_fold_6x_via_add", []arg{{wa.F64, 14886926859367497770}}, arg{wa.F64, 14898679235615764511})
	})
	x68 := instantiateSpecTest(t, "68", "float_exprs.68.wasm")
	t.Cleanup(func() { x68.close(t) })
	t.Run("f32.no_fold_div_div:1703", func(t *testing.T) {
		x68.assertReturnInvoke(t, "f32.no_fold_div_div", []arg{{wa.F32, 3875242260}, {wa.F32, 3086869257}, {wa.F32, 3301317576}}, arg{wa.F32, 3911440926})
	})
	t.Run("f32.no_fold_div_div:1704", func(t *testing.T) {
		x68.assertReturnInvoke(t, "f32.no_fold_div_div", []arg{{wa.F32, 485052055}, {wa.F32, 1996083391}, {wa.F32, 2276616712}}, arg{wa.F32, 2147483648})
	})
	t.Run("f32.no_fold_div_div:1705", func(t *testing.T) {
		x68.assertReturnInvoke(t, "f32.no_fold_div_div", []arg{{wa.F32, 1430470604}, {wa.F32, 186144382}, {wa.F32, 1953564780}}, arg{wa.F32, 2139095040})
	})
	t.Run("f32.no_fold_div_div:1706", func(t *testing.T) {
		x68.assertReturnInvoke(t, "f32.no_fold_div_div", []arg{{wa.F32, 3101818893}, {wa.F32, 4258133430}, {wa.F32, 2855958950}}, arg{wa.F32, 2411777082})
	})
	t.Run("f32.no_fold_div_div:1707", func(t *testing.T) {
		x68.assertReturnInvoke(t, "f32.no_fold_div_div", []arg{{wa.F32, 1458407223}, {wa.F32, 1537931089}, {wa.F32, 4260989344}}, arg{wa.F32, 2147507000})
	})
	t.Run("f64.no_fold_div_div:1709", func(t *testing.T) {
		x68.assertReturnInvoke(t, "f64.no_fold_div_div", []arg{{wa.F64, 6128077243319875447}, {wa.F64, 7240092044185667120}, {wa.F64, 10312472494987686942}}, arg{wa.F64, 16236150182064455170})
	})
	t.Run("f64.no_fold_div_div:1710", func(t *testing.T) {
		x68.assertReturnInvoke(t, "f64.no_fold_div_div", []arg{{wa.F64, 17395933367696573535}, {wa.F64, 4478922858584402707}, {wa.F64, 6032094754408482817}}, arg{wa.F64, 16098470347548634769})
	})
	t.Run("f64.no_fold_div_div:1711", func(t *testing.T) {
		x68.assertReturnInvoke(t, "f64.no_fold_div_div", []arg{{wa.F64, 13843263185226986279}, {wa.F64, 17796742619038211051}, {wa.F64, 5375701731263473827}}, arg{wa.F64, 44472927})
	})
	t.Run("f64.no_fold_div_div:1712", func(t *testing.T) {
		x68.assertReturnInvoke(t, "f64.no_fold_div_div", []arg{{wa.F64, 17547288444310957340}, {wa.F64, 911654786857739111}, {wa.F64, 8937284546802896640}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("f64.no_fold_div_div:1713", func(t *testing.T) {
		x68.assertReturnInvoke(t, "f64.no_fold_div_div", []arg{{wa.F64, 9835707468114203513}, {wa.F64, 1924400690116523912}, {wa.F64, 13208934041167870811}}, arg{wa.F64, 3916014548332337260})
	})
	x69 := instantiateSpecTest(t, "69", "float_exprs.69.wasm")
	t.Cleanup(func() { x69.close(t) })
	t.Run("f32.no_fold_mul_divs:1727", func(t *testing.T) {
		x69.assertReturnInvoke(t, "f32.no_fold_mul_divs", []arg{{wa.F32, 2304917983}, {wa.F32, 301403678}, {wa.F32, 331350955}, {wa.F32, 3251297465}}, arg{wa.F32, 148760966})
	})
	t.Run("f32.no_fold_mul_divs:1728", func(t *testing.T) {
		x69.assertReturnInvoke(t, "f32.no_fold_mul_divs", []arg{{wa.F32, 4068974897}, {wa.F32, 1276265036}, {wa.F32, 930821438}, {wa.F32, 1044692964}}, arg{wa.F32, 3742862674})
	})
	t.Run("f32.no_fold_mul_divs:1729", func(t *testing.T) {
		x69.assertReturnInvoke(t, "f32.no_fold_mul_divs", []arg{{wa.F32, 3496980369}, {wa.F32, 3548280607}, {wa.F32, 3461305482}, {wa.F32, 3298174616}}, arg{wa.F32, 1176926862})
	})
	t.Run("f32.no_fold_mul_divs:1730", func(t *testing.T) {
		x69.assertReturnInvoke(t, "f32.no_fold_mul_divs", []arg{{wa.F32, 4135236702}, {wa.F32, 787270424}, {wa.F32, 932959293}, {wa.F32, 1724950821}}, arg{wa.F32, 4286578688})
	})
	t.Run("f32.no_fold_mul_divs:1731", func(t *testing.T) {
		x69.assertReturnInvoke(t, "f32.no_fold_mul_divs", []arg{{wa.F32, 622783177}, {wa.F32, 2677642769}, {wa.F32, 307759154}, {wa.F32, 768171421}}, arg{wa.F32, 2844661464})
	})
	t.Run("f64.no_fold_mul_divs:1733", func(t *testing.T) {
		x69.assertReturnInvoke(t, "f64.no_fold_mul_divs", []arg{{wa.F64, 10143060558527560466}, {wa.F64, 11745059379675007839}, {wa.F64, 16295837305232663584}, {wa.F64, 5444961058358534642}}, arg{wa.F64, 13856326607560224491})
	})
	t.Run("f64.no_fold_mul_divs:1734", func(t *testing.T) {
		x69.assertReturnInvoke(t, "f64.no_fold_mul_divs", []arg{{wa.F64, 14349445329289351080}, {wa.F64, 468238185841254727}, {wa.F64, 15463559257629249878}, {wa.F64, 15937497686185055572}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("f64.no_fold_mul_divs:1735", func(t *testing.T) {
		x69.assertReturnInvoke(t, "f64.no_fold_mul_divs", []arg{{wa.F64, 15220380342429201729}, {wa.F64, 14697937818549468616}, {wa.F64, 13203624158275174657}, {wa.F64, 17131104131485469546}}, arg{wa.F64, 1202126128702318245})
	})
	t.Run("f64.no_fold_mul_divs:1736", func(t *testing.T) {
		x69.assertReturnInvoke(t, "f64.no_fold_mul_divs", []arg{{wa.F64, 14414969397981384765}, {wa.F64, 12269327994486371199}, {wa.F64, 298707625567048656}, {wa.F64, 5613107161545919917}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_mul_divs:1737", func(t *testing.T) {
		x69.assertReturnInvoke(t, "f64.no_fold_mul_divs", []arg{{wa.F64, 4529089342618677929}, {wa.F64, 3361245300043094097}, {wa.F64, 1815899012046749567}, {wa.F64, 15418396504351552390}}, arg{wa.F64, 10619033301585441215})
	})
	x70 := instantiateSpecTest(t, "70", "float_exprs.70.wasm")
	t.Cleanup(func() { x70.close(t) })
	t.Run("f32.no_fold_add_divs:1749", func(t *testing.T) {
		x70.assertReturnInvoke(t, "f32.no_fold_add_divs", []arg{{wa.F32, 1136439096}, {wa.F32, 3173274359}, {wa.F32, 4274852390}}, arg{wa.F32, 2221638875})
	})
	t.Run("f32.no_fold_add_divs:1750", func(t *testing.T) {
		x70.assertReturnInvoke(t, "f32.no_fold_add_divs", []arg{{wa.F32, 2690073844}, {wa.F32, 2809448479}, {wa.F32, 3608905030}}, arg{wa.F32, 264862203})
	})
	t.Run("f32.no_fold_add_divs:1751", func(t *testing.T) {
		x70.assertReturnInvoke(t, "f32.no_fold_add_divs", []arg{{wa.F32, 2830184964}, {wa.F32, 530019033}, {wa.F32, 3623253973}}, arg{wa.F32, 272108594})
	})
	t.Run("f32.no_fold_add_divs:1752", func(t *testing.T) {
		x70.assertReturnInvoke(t, "f32.no_fold_add_divs", []arg{{wa.F32, 2365787800}, {wa.F32, 245111369}, {wa.F32, 3952003433}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_add_divs:1753", func(t *testing.T) {
		x70.assertReturnInvoke(t, "f32.no_fold_add_divs", []arg{{wa.F32, 982471119}, {wa.F32, 1045692415}, {wa.F32, 37216954}}, arg{wa.F32, 2073319791})
	})
	t.Run("f64.no_fold_add_divs:1755", func(t *testing.T) {
		x70.assertReturnInvoke(t, "f64.no_fold_add_divs", []arg{{wa.F64, 15770585325769044278}, {wa.F64, 6564157675451289455}, {wa.F64, 8712254759989822359}}, arg{wa.F64, 2458462832069881218})
	})
	t.Run("f64.no_fold_add_divs:1756", func(t *testing.T) {
		x70.assertReturnInvoke(t, "f64.no_fold_add_divs", []arg{{wa.F64, 14069844870254671283}, {wa.F64, 4634122757084803708}, {wa.F64, 9524897388132352235}}, arg{wa.F64, 9152039358940941283})
	})
	t.Run("f64.no_fold_add_divs:1757", func(t *testing.T) {
		x70.assertReturnInvoke(t, "f64.no_fold_add_divs", []arg{{wa.F64, 9479648703296052622}, {wa.F64, 214573661502224386}, {wa.F64, 6877551490107761946}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_add_divs:1758", func(t *testing.T) {
		x70.assertReturnInvoke(t, "f64.no_fold_add_divs", []arg{{wa.F64, 6019502660029506228}, {wa.F64, 15316513033818836241}, {wa.F64, 4039967192182502935}}, arg{wa.F64, 15883525310425977300})
	})
	t.Run("f64.no_fold_add_divs:1759", func(t *testing.T) {
		x70.assertReturnInvoke(t, "f64.no_fold_add_divs", []arg{{wa.F64, 10555667216821129841}, {wa.F64, 1207418919037494573}, {wa.F64, 4296330408727545598}}, arg{wa.F64, 10866511466898347555})
	})
	x71 := instantiateSpecTest(t, "71", "float_exprs.71.wasm")
	t.Cleanup(func() { x71.close(t) })
	t.Run("f32.no_fold_sqrt_square:1771", func(t *testing.T) {
		x71.assertReturnInvoke(t, "f32.no_fold_sqrt_square", []arg{{wa.F32, 2662226315}}, arg{wa.F32, 514742673})
	})
	t.Run("f32.no_fold_sqrt_square:1772", func(t *testing.T) {
		x71.assertReturnInvoke(t, "f32.no_fold_sqrt_square", []arg{{wa.F32, 2606267634}}, arg{wa.F32, 458819801})
	})
	t.Run("f32.no_fold_sqrt_square:1773", func(t *testing.T) {
		x71.assertReturnInvoke(t, "f32.no_fold_sqrt_square", []arg{{wa.F32, 2624528574}}, arg{wa.F32, 477049564})
	})
	t.Run("f32.no_fold_sqrt_square:1774", func(t *testing.T) {
		x71.assertReturnInvoke(t, "f32.no_fold_sqrt_square", []arg{{wa.F32, 347235385}}, arg{wa.F32, 0})
	})
	t.Run("f32.no_fold_sqrt_square:1775", func(t *testing.T) {
		x71.assertReturnInvoke(t, "f32.no_fold_sqrt_square", []arg{{wa.F32, 1978715378}}, arg{wa.F32, 2139095040})
	})
	t.Run("f64.no_fold_sqrt_square:1777", func(t *testing.T) {
		x71.assertReturnInvoke(t, "f64.no_fold_sqrt_square", []arg{{wa.F64, 2225189009770021885}}, arg{wa.F64, 2225189011649283571})
	})
	t.Run("f64.no_fold_sqrt_square:1778", func(t *testing.T) {
		x71.assertReturnInvoke(t, "f64.no_fold_sqrt_square", []arg{{wa.F64, 11517048459773840771}}, arg{wa.F64, 2293676422919064961})
	})
	t.Run("f64.no_fold_sqrt_square:1779", func(t *testing.T) {
		x71.assertReturnInvoke(t, "f64.no_fold_sqrt_square", []arg{{wa.F64, 11484764485761855006}}, arg{wa.F64, 2261392448906973069})
	})
	t.Run("f64.no_fold_sqrt_square:1780", func(t *testing.T) {
		x71.assertReturnInvoke(t, "f64.no_fold_sqrt_square", []arg{{wa.F64, 11056484744549647728}}, arg{wa.F64, 0})
	})
	t.Run("f64.no_fold_sqrt_square:1781", func(t *testing.T) {
		x71.assertReturnInvoke(t, "f64.no_fold_sqrt_square", []arg{{wa.F64, 8465406758332488378}}, arg{wa.F64, 9218868437227405312})
	})
	x72 := instantiateSpecTest(t, "72", "float_exprs.72.wasm")
	t.Cleanup(func() { x72.close(t) })
	t.Run("f32.no_fold_mul_sqrts:1793", func(t *testing.T) {
		x72.assertReturnInvoke(t, "f32.no_fold_mul_sqrts", []arg{{wa.F32, 24047316}, {wa.F32, 2517821717}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("f32.no_fold_mul_sqrts:1794", func(t *testing.T) {
		x72.assertReturnInvoke(t, "f32.no_fold_mul_sqrts", []arg{{wa.F32, 295749258}, {wa.F32, 803416494}}, arg{wa.F32, 549395357})
	})
	t.Run("f32.no_fold_mul_sqrts:1795", func(t *testing.T) {
		x72.assertReturnInvoke(t, "f32.no_fold_mul_sqrts", []arg{{wa.F32, 329708528}, {wa.F32, 1120042892}}, arg{wa.F32, 724841268})
	})
	t.Run("f32.no_fold_mul_sqrts:1796", func(t *testing.T) {
		x72.assertReturnInvoke(t, "f32.no_fold_mul_sqrts", []arg{{wa.F32, 1916535951}, {wa.F32, 994115420}}, arg{wa.F32, 1455324620})
	})
	t.Run("f32.no_fold_mul_sqrts:1797", func(t *testing.T) {
		x72.assertReturnInvoke(t, "f32.no_fold_mul_sqrts", []arg{{wa.F32, 598482176}, {wa.F32, 990534933}}, arg{wa.F32, 794443079})
	})
	t.Run("f64.no_fold_mul_sqrts:1799", func(t *testing.T) {
		x72.assertReturnInvoke(t, "f64.no_fold_mul_sqrts", []arg{{wa.F64, 10974446854152441278}, {wa.F64, 13797896470155574122}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("f64.no_fold_mul_sqrts:1800", func(t *testing.T) {
		x72.assertReturnInvoke(t, "f64.no_fold_mul_sqrts", []arg{{wa.F64, 1712959863583927241}, {wa.F64, 2792003944717853898}}, arg{wa.F64, 2252469008297979510})
	})
	t.Run("f64.no_fold_mul_sqrts:1801", func(t *testing.T) {
		x72.assertReturnInvoke(t, "f64.no_fold_mul_sqrts", []arg{{wa.F64, 4208351758938831157}, {wa.F64, 497361189565243603}}, arg{wa.F64, 2352856462697312748})
	})
	t.Run("f64.no_fold_mul_sqrts:1802", func(t *testing.T) {
		x72.assertReturnInvoke(t, "f64.no_fold_mul_sqrts", []arg{{wa.F64, 2976792199849816182}, {wa.F64, 2030444188042608984}}, arg{wa.F64, 2503613111125550255})
	})
	t.Run("f64.no_fold_mul_sqrts:1803", func(t *testing.T) {
		x72.assertReturnInvoke(t, "f64.no_fold_mul_sqrts", []arg{{wa.F64, 4717634334691577101}, {wa.F64, 6919598687070693285}}, arg{wa.F64, 5818898567902921651})
	})
	x73 := instantiateSpecTest(t, "73", "float_exprs.73.wasm")
	t.Cleanup(func() { x73.close(t) })
	t.Run("f32.no_fold_div_sqrts:1815", func(t *testing.T) {
		x73.assertReturnInvoke(t, "f32.no_fold_div_sqrts", []arg{{wa.F32, 3428799709}, {wa.F32, 2733489079}}, arg{wa.F32, 0x7f800000})
	})
	t.Run("f32.no_fold_div_sqrts:1816", func(t *testing.T) {
		x73.assertReturnInvoke(t, "f32.no_fold_div_sqrts", []arg{{wa.F32, 1339867611}, {wa.F32, 1296568207}}, arg{wa.F32, 1086203643})
	})
	t.Run("f32.no_fold_div_sqrts:1817", func(t *testing.T) {
		x73.assertReturnInvoke(t, "f32.no_fold_div_sqrts", []arg{{wa.F32, 65679161}, {wa.F32, 1196795110}}, arg{wa.F32, 498959746})
	})
	t.Run("f32.no_fold_div_sqrts:1818", func(t *testing.T) {
		x73.assertReturnInvoke(t, "f32.no_fold_div_sqrts", []arg{{wa.F32, 1566143010}, {wa.F32, 816694667}}, arg{wa.F32, 1439333972})
	})
	t.Run("f32.no_fold_div_sqrts:1819", func(t *testing.T) {
		x73.assertReturnInvoke(t, "f32.no_fold_div_sqrts", []arg{{wa.F32, 130133331}, {wa.F32, 208189588}}, arg{wa.F32, 1025844032})
	})
	t.Run("f64.no_fold_div_sqrts:1821", func(t *testing.T) {
		x73.assertReturnInvoke(t, "f64.no_fold_div_sqrts", []arg{{wa.F64, 10629913473787695463}, {wa.F64, 12991130264919696663}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("f64.no_fold_div_sqrts:1822", func(t *testing.T) {
		x73.assertReturnInvoke(t, "f64.no_fold_div_sqrts", []arg{{wa.F64, 1966780663211935584}, {wa.F64, 7043916066229883379}}, arg{wa.F64, 2068364230648818889})
	})
	t.Run("f64.no_fold_div_sqrts:1823", func(t *testing.T) {
		x73.assertReturnInvoke(t, "f64.no_fold_div_sqrts", []arg{{wa.F64, 6965599900716272009}, {wa.F64, 4118781927977980600}}, arg{wa.F64, 6030491425828883991})
	})
	t.Run("f64.no_fold_div_sqrts:1824", func(t *testing.T) {
		x73.assertReturnInvoke(t, "f64.no_fold_div_sqrts", []arg{{wa.F64, 962551478168675351}, {wa.F64, 5918292176617055751}}, arg{wa.F64, 2129092583060403799})
	})
	t.Run("f64.no_fold_div_sqrts:1825", func(t *testing.T) {
		x73.assertReturnInvoke(t, "f64.no_fold_div_sqrts", []arg{{wa.F64, 1056821405580891413}, {wa.F64, 8865548665903786673}}, arg{wa.F64, 702724841785532050})
	})
	x74 := instantiateSpecTest(t, "74", "float_exprs.74.wasm")
	t.Cleanup(func() { x74.close(t) })
	t.Run("f32.no_fold_mul_sqrt_div:1837", func(t *testing.T) {
		x74.assertReturnInvoke(t, "f32.no_fold_mul_sqrt_div", []arg{{wa.F32, 3900330981}, {wa.F32, 1843416431}}, arg{wa.F32, 4286578688})
	})
	t.Run("f32.no_fold_mul_sqrt_div:1838", func(t *testing.T) {
		x74.assertReturnInvoke(t, "f32.no_fold_mul_sqrt_div", []arg{{wa.F32, 2210946958}, {wa.F32, 256302916}}, arg{wa.F32, 2147483648})
	})
	t.Run("f32.no_fold_mul_sqrt_div:1839", func(t *testing.T) {
		x74.assertReturnInvoke(t, "f32.no_fold_mul_sqrt_div", []arg{{wa.F32, 1312995444}, {wa.F32, 2371494}}, arg{wa.F32, 1849105549})
	})
	t.Run("f32.no_fold_mul_sqrt_div:1840", func(t *testing.T) {
		x74.assertReturnInvoke(t, "f32.no_fold_mul_sqrt_div", []arg{{wa.F32, 3576537897}, {wa.F32, 2010442638}}, arg{wa.F32, 3104219421})
	})
	t.Run("f32.no_fold_mul_sqrt_div:1841", func(t *testing.T) {
		x74.assertReturnInvoke(t, "f32.no_fold_mul_sqrt_div", []arg{{wa.F32, 3284697858}, {wa.F32, 1124488329}}, arg{wa.F32, 3255461622})
	})
	t.Run("f64.no_fold_mul_sqrt_div:1843", func(t *testing.T) {
		x74.assertReturnInvoke(t, "f64.no_fold_mul_sqrt_div", []arg{{wa.F64, 7751219282814906463}, {wa.F64, 8023732701704228537}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("f64.no_fold_mul_sqrt_div:1844", func(t *testing.T) {
		x74.assertReturnInvoke(t, "f64.no_fold_mul_sqrt_div", []arg{{wa.F64, 10108528314069607083}, {wa.F64, 1595930056995453707}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("f64.no_fold_mul_sqrt_div:1845", func(t *testing.T) {
		x74.assertReturnInvoke(t, "f64.no_fold_mul_sqrt_div", []arg{{wa.F64, 2695209648295623224}, {wa.F64, 7133480874314061811}}, arg{wa.F64, 1432338140829931582})
	})
	t.Run("f64.no_fold_mul_sqrt_div:1846", func(t *testing.T) {
		x74.assertReturnInvoke(t, "f64.no_fold_mul_sqrt_div", []arg{{wa.F64, 15416524255949334213}, {wa.F64, 2434442666062773630}}, arg{wa.F64, 16502590179898118478})
	})
	t.Run("f64.no_fold_mul_sqrt_div:1847", func(t *testing.T) {
		x74.assertReturnInvoke(t, "f64.no_fold_mul_sqrt_div", []arg{{wa.F64, 5076901024782455083}, {wa.F64, 8399438310541178654}}, arg{wa.F64, 3180744754328846996})
	})
	x75 := instantiateSpecTest(t, "75", "float_exprs.75.wasm")
	t.Cleanup(func() { x75.close(t) })
	t.Run("f32.no_flush_intermediate_subnormal:1860", func(t *testing.T) {
		x75.assertReturnInvoke(t, "f32.no_flush_intermediate_subnormal", []arg{{wa.F32, 8388608}, {wa.F32, 872415232}, {wa.F32, 1258291200}}, arg{wa.F32, 8388608})
	})
	t.Run("f64.no_flush_intermediate_subnormal:1861", func(t *testing.T) {
		x75.assertReturnInvoke(t, "f64.no_flush_intermediate_subnormal", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4372995238176751616}, {wa.F64, 4841369599423283200}}, arg{wa.F64, 4503599627370496})
	})
	x76 := instantiateSpecTest(t, "76", "float_exprs.76.wasm")
	t.Cleanup(func() { x76.close(t) })
	t.Run("f32.recoding_eq:1889", func(t *testing.T) {
		x76.assertReturnInvoke(t, "f32.recoding_eq", []arg{{wa.F32, 4286578688}, {wa.F32, 1077936128}}, arg{wa.I32, 1})
	})
	t.Run("f32.recoding_le:1890", func(t *testing.T) {
		x76.assertReturnInvoke(t, "f32.recoding_le", []arg{{wa.F32, 4286578688}, {wa.F32, 1077936128}}, arg{wa.I32, 1})
	})
	t.Run("f32.recoding_lt:1891", func(t *testing.T) {
		x76.assertReturnInvoke(t, "f32.recoding_lt", []arg{{wa.F32, 4286578688}, {wa.F32, 1077936128}}, arg{wa.I32, 0})
	})
	t.Run("f32.recoding_eq:1893", func(t *testing.T) {
		x76.assertReturnInvoke(t, "f32.recoding_eq", []arg{{wa.F32, 0}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("f32.recoding_le:1894", func(t *testing.T) {
		x76.assertReturnInvoke(t, "f32.recoding_le", []arg{{wa.F32, 0}, {wa.F32, 1065353216}}, arg{wa.I32, 1})
	})
	t.Run("f32.recoding_lt:1895", func(t *testing.T) {
		x76.assertReturnInvoke(t, "f32.recoding_lt", []arg{{wa.F32, 0}, {wa.F32, 1065353216}}, arg{wa.I32, 0})
	})
	t.Run("f64.recoding_eq:1897", func(t *testing.T) {
		x76.assertReturnInvoke(t, "f64.recoding_eq", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4613937818241073152}}, arg{wa.I32, 1})
	})
	t.Run("f64.recoding_le:1898", func(t *testing.T) {
		x76.assertReturnInvoke(t, "f64.recoding_le", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4613937818241073152}}, arg{wa.I32, 1})
	})
	t.Run("f64.recoding_lt:1899", func(t *testing.T) {
		x76.assertReturnInvoke(t, "f64.recoding_lt", []arg{{wa.F64, 18442240474082181120}, {wa.F64, 4613937818241073152}}, arg{wa.I32, 0})
	})
	t.Run("f64.recoding_eq:1901", func(t *testing.T) {
		x76.assertReturnInvoke(t, "f64.recoding_eq", []arg{{wa.F64, 0}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("f64.recoding_le:1902", func(t *testing.T) {
		x76.assertReturnInvoke(t, "f64.recoding_le", []arg{{wa.F64, 0}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 1})
	})
	t.Run("f64.recoding_lt:1903", func(t *testing.T) {
		x76.assertReturnInvoke(t, "f64.recoding_lt", []arg{{wa.F64, 0}, {wa.F64, 4607182418800017408}}, arg{wa.I32, 0})
	})
	t.Run("recoding_demote:1905", func(t *testing.T) {
		x76.assertReturnInvoke(t, "recoding_demote", []arg{{wa.F64, 4014054135371399168}, {wa.F32, 1150853120}}, arg{wa.F32, 46548238})
	})
	x77 := instantiateSpecTest(t, "77", "float_exprs.77.wasm")
	t.Cleanup(func() { x77.close(t) })
	t.Run("f32.no_extended_precision_div:1918", func(t *testing.T) {
		x77.assertReturnInvoke(t, "f32.no_extended_precision_div", []arg{{wa.F32, 1077936128}, {wa.F32, 1088421888}, {wa.F32, 1054567863}}, arg{wa.I32, 1})
	})
	t.Run("f64.no_extended_precision_div:1919", func(t *testing.T) {
		x77.assertReturnInvoke(t, "f64.no_extended_precision_div", []arg{{wa.F64, 4613937818241073152}, {wa.F64, 4619567317775286272}, {wa.F64, 4601392076421969627}}, arg{wa.I32, 1})
	})
	x78 := instantiateSpecTest(t, "78", "float_exprs.78.wasm")
	t.Cleanup(func() { x78.close(t) })
	t.Run("f32.no_distribute_exact:1934", func(t *testing.T) {
		x78.assertReturnInvoke(t, "f32.no_distribute_exact", []arg{{wa.F32, 2147483648}}, arg{wa.F32, 0})
	})
	t.Run("f64.no_distribute_exact:1935", func(t *testing.T) {
		x78.assertReturnInvoke(t, "f64.no_distribute_exact", []arg{{wa.F64, 9223372036854775808}}, arg{wa.F64, 0})
	})
	x79 := instantiateSpecTest(t, "79", "float_exprs.79.wasm")
	t.Cleanup(func() { x79.close(t) })
	t.Run("f32.sqrt:1972", func(t *testing.T) {
		x79.assertReturnInvoke(t, "f32.sqrt", []arg{{wa.F32, 1073741824}}, arg{wa.F32, 1068827891})
	})
	t.Run("f32.xkcd_sqrt_2:1973", func(t *testing.T) {
		x79.assertReturnInvoke(t, "f32.xkcd_sqrt_2", []arg{{wa.F32, 1077936128}, {wa.F32, 1084227584}, {wa.F32, 1078530011}, {wa.F32, 1088421888}}, arg{wa.F32, 1068827946})
	})
	t.Run("f32.sqrt:1974", func(t *testing.T) {
		x79.assertReturnInvoke(t, "f32.sqrt", []arg{{wa.F32, 1077936128}}, arg{wa.F32, 1071494103})
	})
	t.Run("f32.xkcd_sqrt_3:1975", func(t *testing.T) {
		x79.assertReturnInvoke(t, "f32.xkcd_sqrt_3", []arg{{wa.F32, 1073741824}, {wa.F32, 1076754516}, {wa.F32, 1078530011}}, arg{wa.F32, 1071481194})
	})
	t.Run("f32.sqrt:1976", func(t *testing.T) {
		x79.assertReturnInvoke(t, "f32.sqrt", []arg{{wa.F32, 1084227584}}, arg{wa.F32, 1074731965})
	})
	t.Run("f32.xkcd_sqrt_5:1977", func(t *testing.T) {
		x79.assertReturnInvoke(t, "f32.xkcd_sqrt_5", []arg{{wa.F32, 1073741824}, {wa.F32, 1076754516}, {wa.F32, 1077936128}}, arg{wa.F32, 1074730668})
	})
	t.Run("f32.xkcd_better_sqrt_5:1978", func(t *testing.T) {
		x79.assertReturnInvoke(t, "f32.xkcd_better_sqrt_5", []arg{{wa.F32, 1095761920}, {wa.F32, 1082130432}, {wa.F32, 1078530011}, {wa.F32, 1103101952}}, arg{wa.F32, 1074731965})
	})
	t.Run("f64.sqrt:1980", func(t *testing.T) {
		x79.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 4611686018427387904}}, arg{wa.F64, 4609047870845172685})
	})
	t.Run("f64.xkcd_sqrt_2:1981", func(t *testing.T) {
		x79.assertReturnInvoke(t, "f64.xkcd_sqrt_2", []arg{{wa.F64, 4613937818241073152}, {wa.F64, 4617315517961601024}, {wa.F64, 4614256656552045848}, {wa.F64, 4619567317775286272}}, arg{wa.F64, 4609047900099118431})
	})
	t.Run("f64.sqrt:1982", func(t *testing.T) {
		x79.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 4613937818241073152}}, arg{wa.F64, 4610479282544200874})
	})
	t.Run("f64.xkcd_sqrt_3:1983", func(t *testing.T) {
		x79.assertReturnInvoke(t, "f64.xkcd_sqrt_3", []arg{{wa.F64, 4611686018427387904}, {wa.F64, 4613303445314885481}, {wa.F64, 4614256656552045848}}, arg{wa.F64, 4610472352185749397})
	})
	t.Run("f64.sqrt:1984", func(t *testing.T) {
		x79.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 4617315517961601024}}, arg{wa.F64, 4612217596255138984})
	})
	t.Run("f64.xkcd_sqrt_5:1985", func(t *testing.T) {
		x79.assertReturnInvoke(t, "f64.xkcd_sqrt_5", []arg{{wa.F64, 4611686018427387904}, {wa.F64, 4613303445314885481}, {wa.F64, 4613937818241073152}}, arg{wa.F64, 4612216900234722254})
	})
	t.Run("f64.xkcd_better_sqrt_5:1986", func(t *testing.T) {
		x79.assertReturnInvoke(t, "f64.xkcd_better_sqrt_5", []arg{{wa.F64, 4623507967449235456}, {wa.F64, 4616189618054758400}, {wa.F64, 4614256656552045848}, {wa.F64, 4627448617123184640}}, arg{wa.F64, 4612217595876713891})
	})
	x80 := instantiateSpecTest(t, "80", "float_exprs.80.wasm")
	t.Cleanup(func() { x80.close(t) })
	t.Run("f32.compute_radix:2069", func(t *testing.T) {
		x80.assertReturnInvoke(t, "f32.compute_radix", []arg{{wa.F32, 1065353216}, {wa.F32, 1065353216}}, arg{wa.F32, 1073741824})
	})
	t.Run("f64.compute_radix:2070", func(t *testing.T) {
		x80.assertReturnInvoke(t, "f64.compute_radix", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4611686018427387904})
	})
	x81 := instantiateSpecTest(t, "81", "float_exprs.81.wasm")
	t.Cleanup(func() { x81.close(t) })
	t.Run("f32.no_fold_sub1_mul_add:2083", func(t *testing.T) {
		x81.assertReturnInvoke(t, "f32.no_fold_sub1_mul_add", []arg{{wa.F32, 796917760}, {wa.F32, 1065353216}}, arg{wa.F32, 0})
	})
	t.Run("f64.no_fold_sub1_mul_add:2084", func(t *testing.T) {
		x81.assertReturnInvoke(t, "f64.no_fold_sub1_mul_add", []arg{{wa.F64, 4318952042648305664}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0})
	})
	x82 := instantiateSpecTest(t, "82", "float_exprs.82.wasm")
	t.Cleanup(func() { x82.close(t) })
	t.Run("f32.no_fold_add_le_monotonicity:2103", func(t *testing.T) {
		x82.assertReturnInvoke(t, "f32.no_fold_add_le_monotonicity", []arg{{wa.F32, 0}, {wa.F32, 0}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("f32.no_fold_add_le_monotonicity:2104", func(t *testing.T) {
		x82.assertReturnInvoke(t, "f32.no_fold_add_le_monotonicity", []arg{{wa.F32, 2139095040}, {wa.F32, 4286578688}, {wa.F32, 2139095040}}, arg{wa.I32, 0})
	})
	t.Run("f64.no_fold_add_le_monotonicity:2105", func(t *testing.T) {
		x82.assertReturnInvoke(t, "f64.no_fold_add_le_monotonicity", []arg{{wa.F64, 0}, {wa.F64, 0}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("f64.no_fold_add_le_monotonicity:2106", func(t *testing.T) {
		x82.assertReturnInvoke(t, "f64.no_fold_add_le_monotonicity", []arg{{wa.F64, 9218868437227405312}, {wa.F64, 18442240474082181120}, {wa.F64, 9218868437227405312}}, arg{wa.I32, 0})
	})
	x83 := instantiateSpecTest(t, "83", "float_exprs.83.wasm")
	t.Cleanup(func() { x83.close(t) })
	t.Run("f32.not_lt:2136", func(t *testing.T) {
		x83.assertReturnInvoke(t, "f32.not_lt", []arg{{wa.F32, 2143289344}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("f32.not_le:2137", func(t *testing.T) {
		x83.assertReturnInvoke(t, "f32.not_le", []arg{{wa.F32, 2143289344}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("f32.not_gt:2138", func(t *testing.T) {
		x83.assertReturnInvoke(t, "f32.not_gt", []arg{{wa.F32, 2143289344}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("f32.not_ge:2139", func(t *testing.T) {
		x83.assertReturnInvoke(t, "f32.not_ge", []arg{{wa.F32, 2143289344}, {wa.F32, 0}}, arg{wa.I32, 1})
	})
	t.Run("f64.not_lt:2140", func(t *testing.T) {
		x83.assertReturnInvoke(t, "f64.not_lt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("f64.not_le:2141", func(t *testing.T) {
		x83.assertReturnInvoke(t, "f64.not_le", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("f64.not_gt:2142", func(t *testing.T) {
		x83.assertReturnInvoke(t, "f64.not_gt", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	t.Run("f64.not_ge:2143", func(t *testing.T) {
		x83.assertReturnInvoke(t, "f64.not_ge", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 0}}, arg{wa.I32, 1})
	})
	x84 := instantiateSpecTest(t, "84", "float_exprs.84.wasm")
	t.Cleanup(func() { x84.close(t) })
	t.Run("f32.epsilon:2157", func(t *testing.T) { x84.assertReturnInvoke(t, "f32.epsilon", nil, arg{wa.F32, 3019898880}) })
	t.Run("f64.epsilon:2158", func(t *testing.T) { x84.assertReturnInvoke(t, "f64.epsilon", nil, arg{wa.F64, 4372995238176751616}) })
	x85 := instantiateSpecTest(t, "85", "float_exprs.85.wasm")
	t.Cleanup(func() { x85.close(t) })
	t.Run("f32.epsilon:2212", func(t *testing.T) { x85.assertReturnInvoke(t, "f32.epsilon", nil, arg{wa.F32, 872415232}) })
	t.Run("f64.epsilon:2213", func(t *testing.T) { x85.assertReturnInvoke(t, "f64.epsilon", nil, arg{wa.F64, 4372995238176751616}) })
	x86 := instantiateSpecTest(t, "86", "float_exprs.86.wasm")
	t.Cleanup(func() { x86.close(t) })
	t.Run("f32.no_trichotomy_lt:2238", func(t *testing.T) {
		x86.assertReturnInvoke(t, "f32.no_trichotomy_lt", []arg{{wa.F32, 0}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("f32.no_trichotomy_le:2239", func(t *testing.T) {
		x86.assertReturnInvoke(t, "f32.no_trichotomy_le", []arg{{wa.F32, 0}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("f32.no_trichotomy_gt:2240", func(t *testing.T) {
		x86.assertReturnInvoke(t, "f32.no_trichotomy_gt", []arg{{wa.F32, 0}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("f32.no_trichotomy_ge:2241", func(t *testing.T) {
		x86.assertReturnInvoke(t, "f32.no_trichotomy_ge", []arg{{wa.F32, 0}, {wa.F32, 2143289344}}, arg{wa.I32, 0})
	})
	t.Run("f64.no_trichotomy_lt:2242", func(t *testing.T) {
		x86.assertReturnInvoke(t, "f64.no_trichotomy_lt", []arg{{wa.F64, 0}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("f64.no_trichotomy_le:2243", func(t *testing.T) {
		x86.assertReturnInvoke(t, "f64.no_trichotomy_le", []arg{{wa.F64, 0}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("f64.no_trichotomy_gt:2244", func(t *testing.T) {
		x86.assertReturnInvoke(t, "f64.no_trichotomy_gt", []arg{{wa.F64, 0}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	t.Run("f64.no_trichotomy_ge:2245", func(t *testing.T) {
		x86.assertReturnInvoke(t, "f64.no_trichotomy_ge", []arg{{wa.F64, 0}, {wa.F64, 9221120237041090560}}, arg{wa.I32, 0})
	})
	x87 := instantiateSpecTest(t, "87", "float_exprs.87.wasm")
	t.Cleanup(func() { x87.close(t) })
	t.Run("f32.arithmetic_nan_bitpattern:2329", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f32.arithmetic_nan_bitpattern", []arg{{wa.I32, 2139107856}, {wa.I32, 2139107856}}, arg{wa.I32, 2143289344})
	})
	t.Run("f32.canonical_nan_bitpattern:2330", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f32.canonical_nan_bitpattern", []arg{{wa.I32, 0}, {wa.I32, 0}}, arg{wa.I32, 2143289344})
	})
	t.Run("f32.canonical_nan_bitpattern:2331", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f32.canonical_nan_bitpattern", []arg{{wa.I32, 2143289344}, {wa.I32, 2143289344}}, arg{wa.I32, 2143289344})
	})
	t.Run("f32.canonical_nan_bitpattern:2332", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f32.canonical_nan_bitpattern", []arg{{wa.I32, 4290772992}, {wa.I32, 2143289344}}, arg{wa.I32, 2143289344})
	})
	t.Run("f32.canonical_nan_bitpattern:2333", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f32.canonical_nan_bitpattern", []arg{{wa.I32, 2143289344}, {wa.I32, 4290772992}}, arg{wa.I32, 2143289344})
	})
	t.Run("f32.canonical_nan_bitpattern:2334", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f32.canonical_nan_bitpattern", []arg{{wa.I32, 4290772992}, {wa.I32, 4290772992}}, arg{wa.I32, 2143289344})
	})
	t.Run("f32.nonarithmetic_nan_bitpattern:2335", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f32.nonarithmetic_nan_bitpattern", []arg{{wa.I32, 2143302160}}, arg{wa.I32, 4290785808})
	})
	t.Run("f32.nonarithmetic_nan_bitpattern:2336", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f32.nonarithmetic_nan_bitpattern", []arg{{wa.I32, 4290785808}}, arg{wa.I32, 2143302160})
	})
	t.Run("f32.nonarithmetic_nan_bitpattern:2337", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f32.nonarithmetic_nan_bitpattern", []arg{{wa.I32, 2139107856}}, arg{wa.I32, 4286591504})
	})
	t.Run("f32.nonarithmetic_nan_bitpattern:2338", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f32.nonarithmetic_nan_bitpattern", []arg{{wa.I32, 4286591504}}, arg{wa.I32, 2139107856})
	})
	t.Run("f64.arithmetic_nan_bitpattern:2339", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f64.arithmetic_nan_bitpattern", []arg{{wa.I64, 9218868437227418128}, {wa.I64, 9218868437227418128}}, arg{wa.I64, 9221120237041090560})
	})
	t.Run("f64.canonical_nan_bitpattern:2340", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f64.canonical_nan_bitpattern", []arg{{wa.I64, 0}, {wa.I64, 0}}, arg{wa.I64, 9221120237041090560})
	})
	t.Run("f64.canonical_nan_bitpattern:2341", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f64.canonical_nan_bitpattern", []arg{{wa.I64, 9221120237041090560}, {wa.I64, 9221120237041090560}}, arg{wa.I64, 9221120237041090560})
	})
	t.Run("f64.canonical_nan_bitpattern:2342", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f64.canonical_nan_bitpattern", []arg{{wa.I64, 18444492273895866368}, {wa.I64, 9221120237041090560}}, arg{wa.I64, 9221120237041090560})
	})
	t.Run("f64.canonical_nan_bitpattern:2343", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f64.canonical_nan_bitpattern", []arg{{wa.I64, 9221120237041090560}, {wa.I64, 18444492273895866368}}, arg{wa.I64, 9221120237041090560})
	})
	t.Run("f64.canonical_nan_bitpattern:2344", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f64.canonical_nan_bitpattern", []arg{{wa.I64, 18444492273895866368}, {wa.I64, 18444492273895866368}}, arg{wa.I64, 9221120237041090560})
	})
	t.Run("f64.nonarithmetic_nan_bitpattern:2345", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f64.nonarithmetic_nan_bitpattern", []arg{{wa.I64, 9221120237041103376}}, arg{wa.I64, 18444492273895879184})
	})
	t.Run("f64.nonarithmetic_nan_bitpattern:2346", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f64.nonarithmetic_nan_bitpattern", []arg{{wa.I64, 18444492273895879184}}, arg{wa.I64, 9221120237041103376})
	})
	t.Run("f64.nonarithmetic_nan_bitpattern:2347", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f64.nonarithmetic_nan_bitpattern", []arg{{wa.I64, 9218868437227418128}}, arg{wa.I64, 18442240474082193936})
	})
	t.Run("f64.nonarithmetic_nan_bitpattern:2348", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f64.nonarithmetic_nan_bitpattern", []arg{{wa.I64, 18442240474082193936}}, arg{wa.I64, 9218868437227418128})
	})
	t.Run("f32.no_fold_sub_zero:2349", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f32.no_fold_sub_zero", []arg{{wa.I32, 2141192192}}, arg{wa.I32, 2143289344})
	})
	t.Run("f32.no_fold_neg0_sub:2350", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f32.no_fold_neg0_sub", []arg{{wa.I32, 2141192192}}, arg{wa.I32, 2143289344})
	})
	t.Run("f32.no_fold_mul_one:2351", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f32.no_fold_mul_one", []arg{{wa.I32, 2141192192}}, arg{wa.I32, 2143289344})
	})
	t.Run("f32.no_fold_neg1_mul:2352", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f32.no_fold_neg1_mul", []arg{{wa.I32, 2141192192}}, arg{wa.I32, 2143289344})
	})
	t.Run("f32.no_fold_div_one:2353", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f32.no_fold_div_one", []arg{{wa.I32, 2141192192}}, arg{wa.I32, 2143289344})
	})
	t.Run("f32.no_fold_div_neg1:2354", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f32.no_fold_div_neg1", []arg{{wa.I32, 2141192192}}, arg{wa.I32, 2143289344})
	})
	t.Run("f64.no_fold_sub_zero:2355", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f64.no_fold_sub_zero", []arg{{wa.I64, 9219994337134247936}}, arg{wa.I64, 9221120237041090560})
	})
	t.Run("f64.no_fold_neg0_sub:2356", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f64.no_fold_neg0_sub", []arg{{wa.I64, 9219994337134247936}}, arg{wa.I64, 9221120237041090560})
	})
	t.Run("f64.no_fold_mul_one:2357", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f64.no_fold_mul_one", []arg{{wa.I64, 9219994337134247936}}, arg{wa.I64, 9221120237041090560})
	})
	t.Run("f64.no_fold_neg1_mul:2358", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f64.no_fold_neg1_mul", []arg{{wa.I64, 9219994337134247936}}, arg{wa.I64, 9221120237041090560})
	})
	t.Run("f64.no_fold_div_one:2359", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f64.no_fold_div_one", []arg{{wa.I64, 9219994337134247936}}, arg{wa.I64, 9221120237041090560})
	})
	t.Run("f64.no_fold_div_neg1:2360", func(t *testing.T) {
		x87.assertReturnInvoke(t, "f64.no_fold_div_neg1", []arg{{wa.I64, 9219994337134247936}}, arg{wa.I64, 9221120237041090560})
	})
	t.Run("no_fold_promote_demote:2361", func(t *testing.T) {
		x87.assertReturnInvoke(t, "no_fold_promote_demote", []arg{{wa.I32, 2141192192}}, arg{wa.I32, 2143289344})
	})
	x88 := instantiateSpecTest(t, "88", "float_exprs.88.wasm")
	t.Cleanup(func() { x88.close(t) })
	t.Run("dot_product_example:2389", func(t *testing.T) {
		x88.assertReturnInvoke(t, "dot_product_example", []arg{{wa.F64, 4719355144821538816}, {wa.F64, 4607182418800017408}, {wa.F64, 13830554455654793216}, {wa.F64, 4725141118604279808}, {wa.F64, 4720637518976909312}, {wa.F64, 4607182418800017408}, {wa.F64, 13830554455654793216}, {wa.F64, 13938223582048944128}}, arg{wa.F64, 4611686018427387904})
	})
	t.Run("with_binary_sum_collapse:2393", func(t *testing.T) {
		x88.assertReturnInvoke(t, "with_binary_sum_collapse", []arg{{wa.F64, 4719355144821538816}, {wa.F64, 4607182418800017408}, {wa.F64, 13830554455654793216}, {wa.F64, 4725141118604279808}, {wa.F64, 4720637518976909312}, {wa.F64, 4607182418800017408}, {wa.F64, 13830554455654793216}, {wa.F64, 13938223582048944128}}, arg{wa.F64, 4611686018427387904})
	})
	x89 := instantiateSpecTest(t, "89", "float_exprs.89.wasm")
	t.Cleanup(func() { x89.close(t) })
	t.Run("f32.contract2fma:2411", func(t *testing.T) {
		x89.assertReturnInvoke(t, "f32.contract2fma", []arg{{wa.F32, 1065353216}, {wa.F32, 1065353216}}, arg{wa.F32, 0})
	})
	t.Run("f32.contract2fma:2412", func(t *testing.T) {
		x89.assertReturnInvoke(t, "f32.contract2fma", []arg{{wa.F32, 1066192077}, {wa.F32, 1066192077}}, arg{wa.F32, 0})
	})
	t.Run("f32.contract2fma:2413", func(t *testing.T) {
		x89.assertReturnInvoke(t, "f32.contract2fma", []arg{{wa.F32, 1067030937}, {wa.F32, 1067030937}}, arg{wa.F32, 0})
	})
	t.Run("f64.contract2fma:2414", func(t *testing.T) {
		x89.assertReturnInvoke(t, "f64.contract2fma", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 0})
	})
	t.Run("f64.contract2fma:2415", func(t *testing.T) {
		x89.assertReturnInvoke(t, "f64.contract2fma", []arg{{wa.F64, 4607632778762754458}, {wa.F64, 4607632778762754458}}, arg{wa.F64, 0})
	})
	t.Run("f64.contract2fma:2416", func(t *testing.T) {
		x89.assertReturnInvoke(t, "f64.contract2fma", []arg{{wa.F64, 4608083138725491507}, {wa.F64, 4608083138725491507}}, arg{wa.F64, 0})
	})
	x90 := instantiateSpecTest(t, "90", "float_exprs.90.wasm")
	t.Cleanup(func() { x90.close(t) })
	t.Run("f32.division_by_small_number:2430", func(t *testing.T) {
		x90.assertReturnInvoke(t, "f32.division_by_small_number", []arg{{wa.F32, 1289068416}, {wa.F32, 1203982336}, {wa.F32, 980151802}}, arg{wa.F32, 1230570368})
	})
	t.Run("f64.division_by_small_number:2431", func(t *testing.T) {
		x90.assertReturnInvoke(t, "f64.division_by_small_number", []arg{{wa.F64, 4727288602252279808}, {wa.F64, 4681608360884174848}, {wa.F64, 4561440258104740754}}, arg{wa.F64, 4695882709507797376})
	})
	x91 := instantiateSpecTest(t, "91", "float_exprs.91.wasm")
	t.Cleanup(func() { x91.close(t) })
	t.Run("f32.golden_ratio:2443", func(t *testing.T) {
		x91.assertReturnInvoke(t, "f32.golden_ratio", []arg{{wa.F32, 1056964608}, {wa.F32, 1065353216}, {wa.F32, 1084227584}}, arg{wa.F32, 1070537661})
	})
	t.Run("f64.golden_ratio:2444", func(t *testing.T) {
		x91.assertReturnInvoke(t, "f64.golden_ratio", []arg{{wa.F64, 4602678819172646912}, {wa.F64, 4607182418800017408}, {wa.F64, 4617315517961601024}}, arg{wa.F64, 4609965796441453736})
	})
	x92 := instantiateSpecTest(t, "92", "float_exprs.92.wasm")
	t.Cleanup(func() { x92.close(t) })
	t.Run("f32.silver_means:2462", func(t *testing.T) {
		x92.assertReturnInvoke(t, "f32.silver_means", []arg{{wa.F32, 0}}, arg{wa.F32, 1065353216})
	})
	t.Run("f32.silver_means:2463", func(t *testing.T) {
		x92.assertReturnInvoke(t, "f32.silver_means", []arg{{wa.F32, 1065353216}}, arg{wa.F32, 1070537661})
	})
	t.Run("f32.silver_means:2464", func(t *testing.T) {
		x92.assertReturnInvoke(t, "f32.silver_means", []arg{{wa.F32, 1073741824}}, arg{wa.F32, 1075479162})
	})
	t.Run("f32.silver_means:2465", func(t *testing.T) {
		x92.assertReturnInvoke(t, "f32.silver_means", []arg{{wa.F32, 1077936128}}, arg{wa.F32, 1079206061})
	})
	t.Run("f32.silver_means:2466", func(t *testing.T) {
		x92.assertReturnInvoke(t, "f32.silver_means", []arg{{wa.F32, 1082130432}}, arg{wa.F32, 1082625502})
	})
	t.Run("f32.silver_means:2467", func(t *testing.T) {
		x92.assertReturnInvoke(t, "f32.silver_means", []arg{{wa.F32, 1084227584}}, arg{wa.F32, 1084631458})
	})
	t.Run("f64.silver_means:2468", func(t *testing.T) {
		x92.assertReturnInvoke(t, "f64.silver_means", []arg{{wa.F64, 0}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("f64.silver_means:2469", func(t *testing.T) {
		x92.assertReturnInvoke(t, "f64.silver_means", []arg{{wa.F64, 4607182418800017408}}, arg{wa.F64, 4609965796441453736})
	})
	t.Run("f64.silver_means:2470", func(t *testing.T) {
		x92.assertReturnInvoke(t, "f64.silver_means", []arg{{wa.F64, 4611686018427387904}}, arg{wa.F64, 4612618744449965542})
	})
	t.Run("f64.silver_means:2471", func(t *testing.T) {
		x92.assertReturnInvoke(t, "f64.silver_means", []arg{{wa.F64, 4613937818241073152}}, arg{wa.F64, 4614619608365706490})
	})
	t.Run("f64.silver_means:2472", func(t *testing.T) {
		x92.assertReturnInvoke(t, "f64.silver_means", []arg{{wa.F64, 4616189618054758400}}, arg{wa.F64, 4616455406968633940})
	})
	t.Run("f64.silver_means:2473", func(t *testing.T) {
		x92.assertReturnInvoke(t, "f64.silver_means", []arg{{wa.F64, 4617315517961601024}}, arg{wa.F64, 4617532346471836922})
	})
	x93 := instantiateSpecTest(t, "93", "float_exprs.93.wasm")
	t.Cleanup(func() { x93.close(t) })
	t.Run("point_four:2483", func(t *testing.T) {
		x93.assertReturnInvoke(t, "point_four", []arg{{wa.F64, 4616189618054758400}, {wa.F64, 4621819117588971520}}, arg{wa.I32, 0})
	})
	x94 := instantiateSpecTest(t, "94", "float_exprs.94.wasm")
	t.Cleanup(func() { x94.close(t) })
	t.Run("tau:2553", func(t *testing.T) {
		x94.assertReturnInvoke(t, "tau", []arg{{wa.I32, 10}}, arg{wa.F64, 4618760256179416340})
	})
	t.Run("tau:2554", func(t *testing.T) {
		x94.assertReturnInvoke(t, "tau", []arg{{wa.I32, 11}}, arg{wa.F64, 4618760256179416344})
	})
	x95 := instantiateSpecTest(t, "95", "float_exprs.95.wasm")
	t.Cleanup(func() { x95.close(t) })
	t.Run("f32.no_fold_conditional_inc:2569", func(t *testing.T) {
		x95.assertReturnInvoke(t, "f32.no_fold_conditional_inc", []arg{{wa.F32, 2147483648}, {wa.F32, 3212836864}}, arg{wa.F32, 2147483648})
	})
	t.Run("f64.no_fold_conditional_inc:2570", func(t *testing.T) {
		x95.assertReturnInvoke(t, "f64.no_fold_conditional_inc", []arg{{wa.F64, 9223372036854775808}, {wa.F64, 13830554455654793216}}, arg{wa.F64, 9223372036854775808})
	})
}

func Test_float_literals(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "float_literals.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("f32.nan:105", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.nan", nil, arg{wa.I32, 2143289344}) })
	t.Run("f32.positive_nan:106", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.positive_nan", nil, arg{wa.I32, 2143289344}) })
	t.Run("f32.negative_nan:107", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.negative_nan", nil, arg{wa.I32, 4290772992}) })
	t.Run("f32.plain_nan:108", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.plain_nan", nil, arg{wa.I32, 2143289344}) })
	t.Run("f32.informally_known_as_plain_snan:109", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.informally_known_as_plain_snan", nil, arg{wa.I32, 2141192192})
	})
	t.Run("f32.all_ones_nan:110", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.all_ones_nan", nil, arg{wa.I32, 4294967295}) })
	t.Run("f32.misc_nan:111", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.misc_nan", nil, arg{wa.I32, 2139169605}) })
	t.Run("f32.misc_positive_nan:112", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.misc_positive_nan", nil, arg{wa.I32, 2142257232}) })
	t.Run("f32.misc_negative_nan:113", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.misc_negative_nan", nil, arg{wa.I32, 4289379550}) })
	t.Run("f32.infinity:114", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.infinity", nil, arg{wa.I32, 2139095040}) })
	t.Run("f32.positive_infinity:115", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.positive_infinity", nil, arg{wa.I32, 2139095040}) })
	t.Run("f32.negative_infinity:116", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.negative_infinity", nil, arg{wa.I32, 4286578688}) })
	t.Run("f32.zero:117", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.zero", nil, arg{wa.I32, 0}) })
	t.Run("f32.positive_zero:118", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.positive_zero", nil, arg{wa.I32, 0}) })
	t.Run("f32.negative_zero:119", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.negative_zero", nil, arg{wa.I32, 2147483648}) })
	t.Run("f32.misc:120", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.misc", nil, arg{wa.I32, 1086918619}) })
	t.Run("f32.min_positive:121", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.min_positive", nil, arg{wa.I32, 1}) })
	t.Run("f32.min_normal:122", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.min_normal", nil, arg{wa.I32, 8388608}) })
	t.Run("f32.max_subnormal:123", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.max_subnormal", nil, arg{wa.I32, 8388607}) })
	t.Run("f32.max_finite:124", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.max_finite", nil, arg{wa.I32, 2139095039}) })
	t.Run("f32.trailing_dot:125", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.trailing_dot", nil, arg{wa.I32, 1149239296}) })
	t.Run("f32_dec.zero:126", func(t *testing.T) { x0.assertReturnInvoke(t, "f32_dec.zero", nil, arg{wa.I32, 0}) })
	t.Run("f32_dec.positive_zero:127", func(t *testing.T) { x0.assertReturnInvoke(t, "f32_dec.positive_zero", nil, arg{wa.I32, 0}) })
	t.Run("f32_dec.negative_zero:128", func(t *testing.T) { x0.assertReturnInvoke(t, "f32_dec.negative_zero", nil, arg{wa.I32, 2147483648}) })
	t.Run("f32_dec.misc:129", func(t *testing.T) { x0.assertReturnInvoke(t, "f32_dec.misc", nil, arg{wa.I32, 1086918619}) })
	t.Run("f32_dec.min_positive:130", func(t *testing.T) { x0.assertReturnInvoke(t, "f32_dec.min_positive", nil, arg{wa.I32, 1}) })
	t.Run("f32_dec.min_normal:131", func(t *testing.T) { x0.assertReturnInvoke(t, "f32_dec.min_normal", nil, arg{wa.I32, 8388608}) })
	t.Run("f32_dec.max_subnormal:132", func(t *testing.T) { x0.assertReturnInvoke(t, "f32_dec.max_subnormal", nil, arg{wa.I32, 8388607}) })
	t.Run("f32_dec.max_finite:133", func(t *testing.T) { x0.assertReturnInvoke(t, "f32_dec.max_finite", nil, arg{wa.I32, 2139095039}) })
	t.Run("f32_dec.trailing_dot:134", func(t *testing.T) { x0.assertReturnInvoke(t, "f32_dec.trailing_dot", nil, arg{wa.I32, 1343554297}) })
	t.Run("f32_dec.root_beer_float:135", func(t *testing.T) { x0.assertReturnInvoke(t, "f32_dec.root_beer_float", nil, arg{wa.I32, 1065353217}) })
	t.Run("f64.nan:137", func(t *testing.T) { x0.assertReturnInvoke(t, "f64.nan", nil, arg{wa.I64, 9221120237041090560}) })
	t.Run("f64.positive_nan:138", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.positive_nan", nil, arg{wa.I64, 9221120237041090560})
	})
	t.Run("f64.negative_nan:139", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.negative_nan", nil, arg{wa.I64, 18444492273895866368})
	})
	t.Run("f64.plain_nan:140", func(t *testing.T) { x0.assertReturnInvoke(t, "f64.plain_nan", nil, arg{wa.I64, 9221120237041090560}) })
	t.Run("f64.informally_known_as_plain_snan:141", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.informally_known_as_plain_snan", nil, arg{wa.I64, 9219994337134247936})
	})
	t.Run("f64.all_ones_nan:142", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.all_ones_nan", nil, arg{wa.I64, 18446744073709551615})
	})
	t.Run("f64.misc_nan:143", func(t *testing.T) { x0.assertReturnInvoke(t, "f64.misc_nan", nil, arg{wa.I64, 9218888453225749180}) })
	t.Run("f64.misc_positive_nan:144", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.misc_positive_nan", nil, arg{wa.I64, 9219717281780008969})
	})
	t.Run("f64.misc_negative_nan:145", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.misc_negative_nan", nil, arg{wa.I64, 18442992325002076997})
	})
	t.Run("f64.infinity:146", func(t *testing.T) { x0.assertReturnInvoke(t, "f64.infinity", nil, arg{wa.I64, 9218868437227405312}) })
	t.Run("f64.positive_infinity:147", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.positive_infinity", nil, arg{wa.I64, 9218868437227405312})
	})
	t.Run("f64.negative_infinity:148", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.negative_infinity", nil, arg{wa.I64, 18442240474082181120})
	})
	t.Run("f64.zero:149", func(t *testing.T) { x0.assertReturnInvoke(t, "f64.zero", nil, arg{wa.I64, 0}) })
	t.Run("f64.positive_zero:150", func(t *testing.T) { x0.assertReturnInvoke(t, "f64.positive_zero", nil, arg{wa.I64, 0}) })
	t.Run("f64.negative_zero:151", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.negative_zero", nil, arg{wa.I64, 9223372036854775808})
	})
	t.Run("f64.misc:152", func(t *testing.T) { x0.assertReturnInvoke(t, "f64.misc", nil, arg{wa.I64, 4618760256179416344}) })
	t.Run("f64.min_positive:153", func(t *testing.T) { x0.assertReturnInvoke(t, "f64.min_positive", nil, arg{wa.I64, 1}) })
	t.Run("f64.min_normal:154", func(t *testing.T) { x0.assertReturnInvoke(t, "f64.min_normal", nil, arg{wa.I64, 4503599627370496}) })
	t.Run("f64.max_subnormal:155", func(t *testing.T) { x0.assertReturnInvoke(t, "f64.max_subnormal", nil, arg{wa.I64, 4503599627370495}) })
	t.Run("f64.max_finite:156", func(t *testing.T) { x0.assertReturnInvoke(t, "f64.max_finite", nil, arg{wa.I64, 9218868437227405311}) })
	t.Run("f64.trailing_dot:157", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.trailing_dot", nil, arg{wa.I64, 5057542381537067008})
	})
	t.Run("f64_dec.zero:158", func(t *testing.T) { x0.assertReturnInvoke(t, "f64_dec.zero", nil, arg{wa.I64, 0}) })
	t.Run("f64_dec.positive_zero:159", func(t *testing.T) { x0.assertReturnInvoke(t, "f64_dec.positive_zero", nil, arg{wa.I64, 0}) })
	t.Run("f64_dec.negative_zero:160", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64_dec.negative_zero", nil, arg{wa.I64, 9223372036854775808})
	})
	t.Run("f64_dec.misc:161", func(t *testing.T) { x0.assertReturnInvoke(t, "f64_dec.misc", nil, arg{wa.I64, 4618760256179416344}) })
	t.Run("f64_dec.min_positive:162", func(t *testing.T) { x0.assertReturnInvoke(t, "f64_dec.min_positive", nil, arg{wa.I64, 1}) })
	t.Run("f64_dec.min_normal:163", func(t *testing.T) { x0.assertReturnInvoke(t, "f64_dec.min_normal", nil, arg{wa.I64, 4503599627370496}) })
	t.Run("f64_dec.max_subnormal:164", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64_dec.max_subnormal", nil, arg{wa.I64, 4503599627370495})
	})
	t.Run("f64_dec.max_finite:165", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64_dec.max_finite", nil, arg{wa.I64, 9218868437227405311})
	})
	t.Run("f64_dec.trailing_dot:166", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64_dec.trailing_dot", nil, arg{wa.I64, 6103021453049119613})
	})
	t.Run("f64_dec.root_beer_float:167", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64_dec.root_beer_float", nil, arg{wa.I64, 4607182419335945764})
	})
	t.Run("f32-dec-sep1:169", func(t *testing.T) { x0.assertReturnInvoke(t, "f32-dec-sep1", nil, arg{wa.F32, 1232348160}) })
	t.Run("f32-dec-sep2:170", func(t *testing.T) { x0.assertReturnInvoke(t, "f32-dec-sep2", nil, arg{wa.F32, 1148846080}) })
	t.Run("f32-dec-sep3:171", func(t *testing.T) { x0.assertReturnInvoke(t, "f32-dec-sep3", nil, arg{wa.F32, 1148897552}) })
	t.Run("f32-dec-sep4:172", func(t *testing.T) { x0.assertReturnInvoke(t, "f32-dec-sep4", nil, arg{wa.F32, 1482758550}) })
	t.Run("f32-dec-sep5:173", func(t *testing.T) { x0.assertReturnInvoke(t, "f32-dec-sep5", nil, arg{wa.F32, 1847438964}) })
	t.Run("f32-hex-sep1:174", func(t *testing.T) { x0.assertReturnInvoke(t, "f32-hex-sep1", nil, arg{wa.F32, 1294004234}) })
	t.Run("f32-hex-sep2:175", func(t *testing.T) { x0.assertReturnInvoke(t, "f32-hex-sep2", nil, arg{wa.F32, 1205143424}) })
	t.Run("f32-hex-sep3:176", func(t *testing.T) { x0.assertReturnInvoke(t, "f32-hex-sep3", nil, arg{wa.F32, 1193345009}) })
	t.Run("f32-hex-sep4:177", func(t *testing.T) { x0.assertReturnInvoke(t, "f32-hex-sep4", nil, arg{wa.F32, 1240465408}) })
	t.Run("f32-hex-sep5:178", func(t *testing.T) { x0.assertReturnInvoke(t, "f32-hex-sep5", nil, arg{wa.F32, 1437319208}) })
	t.Run("f64-dec-sep1:180", func(t *testing.T) { x0.assertReturnInvoke(t, "f64-dec-sep1", nil, arg{wa.F64, 4696837146684686336}) })
	t.Run("f64-dec-sep2:181", func(t *testing.T) { x0.assertReturnInvoke(t, "f64-dec-sep2", nil, arg{wa.F64, 4652007308841189376}) })
	t.Run("f64-dec-sep3:182", func(t *testing.T) { x0.assertReturnInvoke(t, "f64-dec-sep3", nil, arg{wa.F64, 4652034942576659200}) })
	t.Run("f64-dec-sep4:183", func(t *testing.T) { x0.assertReturnInvoke(t, "f64-dec-sep4", nil, arg{wa.F64, 2796837019126844485}) })
	t.Run("f64-dec-sep5:184", func(t *testing.T) { x0.assertReturnInvoke(t, "f64-dec-sep5", nil, arg{wa.F64, 5027061507362119324}) })
	t.Run("f64-hex-sep1:185", func(t *testing.T) { x0.assertReturnInvoke(t, "f64-hex-sep1", nil, arg{wa.F64, 4838519794133185330}) })
	t.Run("f64-hex-sep2:186", func(t *testing.T) { x0.assertReturnInvoke(t, "f64-hex-sep2", nil, arg{wa.F64, 4682231715257647104}) })
	t.Run("f64-hex-sep3:187", func(t *testing.T) { x0.assertReturnInvoke(t, "f64-hex-sep3", nil, arg{wa.F64, 4675897489574114112}) })
	t.Run("f64-hex-sep4:188", func(t *testing.T) { x0.assertReturnInvoke(t, "f64-hex-sep4", nil, arg{wa.F64, 4701195061021376512}) })
	t.Run("f64-hex-sep5:189", func(t *testing.T) { x0.assertReturnInvoke(t, "f64-hex-sep5", nil, arg{wa.F64, 4806880140420149248}) })
	x1 := instantiateSpecTest(t, "1", "float_literals.1.wasm")
	t.Cleanup(func() { x1.close(t) })
	t.Run("4294967249:201", func(t *testing.T) { x1.assertReturnInvoke(t, "4294967249", nil, arg{wa.F64, 4751297606777307136}) })
	t.Run("assert_malformed:204", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:208", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:212", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:216", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:220", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:224", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:228", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:232", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:236", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:240", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:244", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:248", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:252", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:256", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:260", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:264", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:268", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:272", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:276", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:280", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:284", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:288", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:292", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:296", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:300", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:304", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:308", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:312", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:316", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:320", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:324", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:328", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:332", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:336", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:340", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:344", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:348", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:352", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:357", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:361", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:365", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:369", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:373", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:377", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:381", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:385", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:389", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:393", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:397", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:401", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:405", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:409", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:413", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:417", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:421", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:425", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:429", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:433", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:437", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:441", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:445", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:449", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:453", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:457", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:461", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:465", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:469", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:473", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:477", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:481", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:485", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:489", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:493", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:497", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:501", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:505", func(t *testing.T) { t.Skip("text format not supported") })
}

func Test_float_memory(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "float_memory.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("i32.load:15", func(t *testing.T) { x0.assertReturnInvoke(t, "i32.load", nil, arg{wa.I32, 2141192192}) })
	t.Run("f32.load:16", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.load", nil, arg{wa.F32, 2141192192}) })
	t.Run("reset:17", func(t *testing.T) { x0.invoke(t, "reset", nil) })
	t.Run("i32.load:18", func(t *testing.T) { x0.assertReturnInvoke(t, "i32.load", nil, arg{wa.I32, 0}) })
	t.Run("f32.load:19", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.load", nil, arg{wa.F32, 0}) })
	t.Run("f32.store:20", func(t *testing.T) { x0.invoke(t, "f32.store", nil) })
	t.Run("i32.load:21", func(t *testing.T) { x0.assertReturnInvoke(t, "i32.load", nil, arg{wa.I32, 2141192192}) })
	t.Run("f32.load:22", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.load", nil, arg{wa.F32, 2141192192}) })
	t.Run("reset:23", func(t *testing.T) { x0.invoke(t, "reset", nil) })
	t.Run("i32.load:24", func(t *testing.T) { x0.assertReturnInvoke(t, "i32.load", nil, arg{wa.I32, 0}) })
	t.Run("f32.load:25", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.load", nil, arg{wa.F32, 0}) })
	t.Run("i32.store:26", func(t *testing.T) { x0.invoke(t, "i32.store", nil) })
	t.Run("i32.load:27", func(t *testing.T) { x0.assertReturnInvoke(t, "i32.load", nil, arg{wa.I32, 2141192192}) })
	t.Run("f32.load:28", func(t *testing.T) { x0.assertReturnInvoke(t, "f32.load", nil, arg{wa.F32, 2141192192}) })
	x1 := instantiateSpecTest(t, "1", "float_memory.1.wasm")
	t.Cleanup(func() { x1.close(t) })
	t.Run("i64.load:40", func(t *testing.T) { x1.assertReturnInvoke(t, "i64.load", nil, arg{wa.I64, 9219994337134247936}) })
	t.Run("f64.load:41", func(t *testing.T) { x1.assertReturnInvoke(t, "f64.load", nil, arg{wa.F64, 9219994337134247936}) })
	t.Run("reset:42", func(t *testing.T) { x1.invoke(t, "reset", nil) })
	t.Run("i64.load:43", func(t *testing.T) { x1.assertReturnInvoke(t, "i64.load", nil, arg{wa.I64, 0}) })
	t.Run("f64.load:44", func(t *testing.T) { x1.assertReturnInvoke(t, "f64.load", nil, arg{wa.F64, 0}) })
	t.Run("f64.store:45", func(t *testing.T) { x1.invoke(t, "f64.store", nil) })
	t.Run("i64.load:46", func(t *testing.T) { x1.assertReturnInvoke(t, "i64.load", nil, arg{wa.I64, 9219994337134247936}) })
	t.Run("f64.load:47", func(t *testing.T) { x1.assertReturnInvoke(t, "f64.load", nil, arg{wa.F64, 9219994337134247936}) })
	t.Run("reset:48", func(t *testing.T) { x1.invoke(t, "reset", nil) })
	t.Run("i64.load:49", func(t *testing.T) { x1.assertReturnInvoke(t, "i64.load", nil, arg{wa.I64, 0}) })
	t.Run("f64.load:50", func(t *testing.T) { x1.assertReturnInvoke(t, "f64.load", nil, arg{wa.F64, 0}) })
	t.Run("i64.store:51", func(t *testing.T) { x1.invoke(t, "i64.store", nil) })
	t.Run("i64.load:52", func(t *testing.T) { x1.assertReturnInvoke(t, "i64.load", nil, arg{wa.I64, 9219994337134247936}) })
	t.Run("f64.load:53", func(t *testing.T) { x1.assertReturnInvoke(t, "f64.load", nil, arg{wa.F64, 9219994337134247936}) })
	x2 := instantiateSpecTest(t, "2", "float_memory.2.wasm")
	t.Cleanup(func() { x2.close(t) })
	t.Run("i32.load:67", func(t *testing.T) { x2.assertReturnInvoke(t, "i32.load", nil, arg{wa.I32, 2141192192}) })
	t.Run("f32.load:68", func(t *testing.T) { x2.assertReturnInvoke(t, "f32.load", nil, arg{wa.F32, 2141192192}) })
	t.Run("reset:69", func(t *testing.T) { x2.invoke(t, "reset", nil) })
	t.Run("i32.load:70", func(t *testing.T) { x2.assertReturnInvoke(t, "i32.load", nil, arg{wa.I32, 0}) })
	t.Run("f32.load:71", func(t *testing.T) { x2.assertReturnInvoke(t, "f32.load", nil, arg{wa.F32, 0}) })
	t.Run("f32.store:72", func(t *testing.T) { x2.invoke(t, "f32.store", nil) })
	t.Run("i32.load:73", func(t *testing.T) { x2.assertReturnInvoke(t, "i32.load", nil, arg{wa.I32, 2141192192}) })
	t.Run("f32.load:74", func(t *testing.T) { x2.assertReturnInvoke(t, "f32.load", nil, arg{wa.F32, 2141192192}) })
	t.Run("reset:75", func(t *testing.T) { x2.invoke(t, "reset", nil) })
	t.Run("i32.load:76", func(t *testing.T) { x2.assertReturnInvoke(t, "i32.load", nil, arg{wa.I32, 0}) })
	t.Run("f32.load:77", func(t *testing.T) { x2.assertReturnInvoke(t, "f32.load", nil, arg{wa.F32, 0}) })
	t.Run("i32.store:78", func(t *testing.T) { x2.invoke(t, "i32.store", nil) })
	t.Run("i32.load:79", func(t *testing.T) { x2.assertReturnInvoke(t, "i32.load", nil, arg{wa.I32, 2141192192}) })
	t.Run("f32.load:80", func(t *testing.T) { x2.assertReturnInvoke(t, "f32.load", nil, arg{wa.F32, 2141192192}) })
	x3 := instantiateSpecTest(t, "3", "float_memory.3.wasm")
	t.Cleanup(func() { x3.close(t) })
	t.Run("i64.load:92", func(t *testing.T) { x3.assertReturnInvoke(t, "i64.load", nil, arg{wa.I64, 9219994337134247936}) })
	t.Run("f64.load:93", func(t *testing.T) { x3.assertReturnInvoke(t, "f64.load", nil, arg{wa.F64, 9219994337134247936}) })
	t.Run("reset:94", func(t *testing.T) { x3.invoke(t, "reset", nil) })
	t.Run("i64.load:95", func(t *testing.T) { x3.assertReturnInvoke(t, "i64.load", nil, arg{wa.I64, 0}) })
	t.Run("f64.load:96", func(t *testing.T) { x3.assertReturnInvoke(t, "f64.load", nil, arg{wa.F64, 0}) })
	t.Run("f64.store:97", func(t *testing.T) { x3.invoke(t, "f64.store", nil) })
	t.Run("i64.load:98", func(t *testing.T) { x3.assertReturnInvoke(t, "i64.load", nil, arg{wa.I64, 9219994337134247936}) })
	t.Run("f64.load:99", func(t *testing.T) { x3.assertReturnInvoke(t, "f64.load", nil, arg{wa.F64, 9219994337134247936}) })
	t.Run("reset:100", func(t *testing.T) { x3.invoke(t, "reset", nil) })
	t.Run("i64.load:101", func(t *testing.T) { x3.assertReturnInvoke(t, "i64.load", nil, arg{wa.I64, 0}) })
	t.Run("f64.load:102", func(t *testing.T) { x3.assertReturnInvoke(t, "f64.load", nil, arg{wa.F64, 0}) })
	t.Run("i64.store:103", func(t *testing.T) { x3.invoke(t, "i64.store", nil) })
	t.Run("i64.load:104", func(t *testing.T) { x3.assertReturnInvoke(t, "i64.load", nil, arg{wa.I64, 9219994337134247936}) })
	t.Run("f64.load:105", func(t *testing.T) { x3.assertReturnInvoke(t, "f64.load", nil, arg{wa.F64, 9219994337134247936}) })
	x4 := instantiateSpecTest(t, "4", "float_memory.4.wasm")
	t.Cleanup(func() { x4.close(t) })
	t.Run("i32.load:119", func(t *testing.T) { x4.assertReturnInvoke(t, "i32.load", nil, arg{wa.I32, 2144337921}) })
	t.Run("f32.load:120", func(t *testing.T) { x4.assertReturnInvoke(t, "f32.load", nil, arg{wa.F32, 2144337921}) })
	t.Run("reset:121", func(t *testing.T) { x4.invoke(t, "reset", nil) })
	t.Run("i32.load:122", func(t *testing.T) { x4.assertReturnInvoke(t, "i32.load", nil, arg{wa.I32, 0}) })
	t.Run("f32.load:123", func(t *testing.T) { x4.assertReturnInvoke(t, "f32.load", nil, arg{wa.F32, 0}) })
	t.Run("f32.store:124", func(t *testing.T) { x4.invoke(t, "f32.store", nil) })
	t.Run("i32.load:125", func(t *testing.T) { x4.assertReturnInvoke(t, "i32.load", nil, arg{wa.I32, 2144337921}) })
	t.Run("f32.load:126", func(t *testing.T) { x4.assertReturnInvoke(t, "f32.load", nil, arg{wa.F32, 2144337921}) })
	t.Run("reset:127", func(t *testing.T) { x4.invoke(t, "reset", nil) })
	t.Run("i32.load:128", func(t *testing.T) { x4.assertReturnInvoke(t, "i32.load", nil, arg{wa.I32, 0}) })
	t.Run("f32.load:129", func(t *testing.T) { x4.assertReturnInvoke(t, "f32.load", nil, arg{wa.F32, 0}) })
	t.Run("i32.store:130", func(t *testing.T) { x4.invoke(t, "i32.store", nil) })
	t.Run("i32.load:131", func(t *testing.T) { x4.assertReturnInvoke(t, "i32.load", nil, arg{wa.I32, 2144337921}) })
	t.Run("f32.load:132", func(t *testing.T) { x4.assertReturnInvoke(t, "f32.load", nil, arg{wa.F32, 2144337921}) })
	x5 := instantiateSpecTest(t, "5", "float_memory.5.wasm")
	t.Cleanup(func() { x5.close(t) })
	t.Run("i64.load:144", func(t *testing.T) { x5.assertReturnInvoke(t, "i64.load", nil, arg{wa.I64, 9222246136947933185}) })
	t.Run("f64.load:145", func(t *testing.T) { x5.assertReturnInvoke(t, "f64.load", nil, arg{wa.F64, 9222246136947933185}) })
	t.Run("reset:146", func(t *testing.T) { x5.invoke(t, "reset", nil) })
	t.Run("i64.load:147", func(t *testing.T) { x5.assertReturnInvoke(t, "i64.load", nil, arg{wa.I64, 0}) })
	t.Run("f64.load:148", func(t *testing.T) { x5.assertReturnInvoke(t, "f64.load", nil, arg{wa.F64, 0}) })
	t.Run("f64.store:149", func(t *testing.T) { x5.invoke(t, "f64.store", nil) })
	t.Run("i64.load:150", func(t *testing.T) { x5.assertReturnInvoke(t, "i64.load", nil, arg{wa.I64, 9222246136947933185}) })
	t.Run("f64.load:151", func(t *testing.T) { x5.assertReturnInvoke(t, "f64.load", nil, arg{wa.F64, 9222246136947933185}) })
	t.Run("reset:152", func(t *testing.T) { x5.invoke(t, "reset", nil) })
	t.Run("i64.load:153", func(t *testing.T) { x5.assertReturnInvoke(t, "i64.load", nil, arg{wa.I64, 0}) })
	t.Run("f64.load:154", func(t *testing.T) { x5.assertReturnInvoke(t, "f64.load", nil, arg{wa.F64, 0}) })
	t.Run("i64.store:155", func(t *testing.T) { x5.invoke(t, "i64.store", nil) })
	t.Run("i64.load:156", func(t *testing.T) { x5.assertReturnInvoke(t, "i64.load", nil, arg{wa.I64, 9222246136947933185}) })
	t.Run("f64.load:157", func(t *testing.T) { x5.assertReturnInvoke(t, "f64.load", nil, arg{wa.F64, 9222246136947933185}) })
}

func Test_float_misc(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "float_misc.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("f32.add:50", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 1066388847}, {wa.F32, 789036054}}, arg{wa.F32, 1066388847})
	})
	t.Run("f64.add:51", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 4607738418748954166}, {wa.F64, 4458835772027226175}}, arg{wa.F64, 4607738418749510135})
	})
	t.Run("f32.add:55", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 1065353216}, {wa.F32, 864026624}}, arg{wa.F32, 1065353216})
	})
	t.Run("f32.add:56", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 1065353216}, {wa.F32, 864026625}}, arg{wa.F32, 1065353217})
	})
	t.Run("f64.add:57", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4368491638549381120}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("f64.add:58", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4368491638549381121}}, arg{wa.F64, 4607182418800017409})
	})
	t.Run("f32.add:61", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 1}, {wa.F32, 8388607}}, arg{wa.F32, 8388608})
	})
	t.Run("f64.add:62", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 1}, {wa.F64, 4503599627370495}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("f32.add:67", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 1325400064}, {wa.F32, 1149241344}}, arg{wa.F32, 1325400068})
	})
	t.Run("f64.add:68", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 4890909195324358656}, {wa.F64, 4652219514585350144}}, arg{wa.F64, 4890909195324358657})
	})
	t.Run("f64.add:72", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 9290926031265333248}, {wa.F64, 5910}}, arg{wa.F64, 9290926031265333247})
	})
	t.Run("f64.add:75", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 4845873199050653696}, {wa.F64, 4607182463836013682}}, arg{wa.F64, 4845873199050653697})
	})
	t.Run("f64.add:78", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 4845873199050653697}, {wa.F64, 4607182281361063936}}, arg{wa.F64, 4845873199050653697})
	})
	t.Run("f32.add:81", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 1258291200}, {wa.F32, 1056964608}}, arg{wa.F32, 1258291200})
	})
	t.Run("f32.add:82", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 1258291201}, {wa.F32, 1056964608}}, arg{wa.F32, 1258291202})
	})
	t.Run("f64.add:83", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 4841369599423283200}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4841369599423283200})
	})
	t.Run("f64.add:84", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 4841369599423283201}, {wa.F64, 4602678819172646912}}, arg{wa.F64, 4841369599423283202})
	})
	t.Run("f32.add:87", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 4070355885}, {wa.F32, 238773414}}, arg{wa.F32, 4070355885})
	})
	t.Run("f32.add:88", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 1630930834}, {wa.F32, 3650472296}}, arg{wa.F32, 1630930534})
	})
	t.Run("f32.add:89", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 376639884}, {wa.F32, 24880479}}, arg{wa.F32, 376639884})
	})
	t.Run("f32.add:90", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 1393899754}, {wa.F32, 3680827526}}, arg{wa.F32, 3680827377})
	})
	t.Run("f32.add:91", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 947682203}, {wa.F32, 1958603311}}, arg{wa.F32, 1958603311})
	})
	t.Run("f64.add:92", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 2751474943031650218}, {wa.F64, 14953834855654151696}}, arg{wa.F64, 14953834855654151696})
	})
	t.Run("f64.add:93", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 14174076479053295281}, {wa.F64, 3779173703388472492}}, arg{wa.F64, 14174076479053295281})
	})
	t.Run("f64.add:94", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 3940735352412940081}, {wa.F64, 13776826739676942972}}, arg{wa.F64, 13776826739676942972})
	})
	t.Run("f64.add:95", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 6845567588107709194}, {wa.F64, 4904758653169279867}}, arg{wa.F64, 6845567588107709194})
	})
	t.Run("f64.add:96", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 6057047893039655554}, {wa.F64, 6381964069811498464}}, arg{wa.F64, 6381964069811498464})
	})
	t.Run("f32.add:99", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 1670249659}, {wa.F32, 3384781876}}, arg{wa.F32, 1670249659})
	})
	t.Run("f32.add:100", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 692047414}, {wa.F32, 2564611463}}, arg{wa.F32, 692047414})
	})
	t.Run("f32.add:101", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 2862180574}, {wa.F32, 2122049802}}, arg{wa.F32, 2122049802})
	})
	t.Run("f32.add:102", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 2848402951}, {wa.F32, 2325576998}}, arg{wa.F32, 2848402951})
	})
	t.Run("f32.add:103", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 982116028}, {wa.F32, 2317187467}}, arg{wa.F32, 982116028})
	})
	t.Run("f64.add:104", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 5417704807092288842}, {wa.F64, 11458115339210975423}}, arg{wa.F64, 5417704807092288842})
	})
	t.Run("f64.add:105", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 5306888566943064716}, {wa.F64, 13560253914302152139}}, arg{wa.F64, 5306888566943064716})
	})
	t.Run("f64.add:106", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 2791030278657170439}, {wa.F64, 9423751710011603955}}, arg{wa.F64, 2791030278657170439})
	})
	t.Run("f64.add:107", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 14493512931660601393}, {wa.F64, 14459238760182946131}}, arg{wa.F64, 14493541008051035082})
	})
	t.Run("f64.add:108", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 13847269089137787654}, {wa.F64, 5913400236268010570}}, arg{wa.F64, 5913400236268010570})
	})
	t.Run("f32.add:111", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 2231979500}, {wa.F32, 711174153}}, arg{wa.F32, 711174153})
	})
	t.Run("f32.add:112", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 3084976721}, {wa.F32, 843077785}}, arg{wa.F32, 3084970566})
	})
	t.Run("f32.add:113", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 3522127374}, {wa.F32, 157500525}}, arg{wa.F32, 3522127374})
	})
	t.Run("f32.add:114", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 78702389}, {wa.F32, 3468399689}}, arg{wa.F32, 3468399689})
	})
	t.Run("f32.add:115", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 2208228371}, {wa.F32, 1870536627}}, arg{wa.F32, 1870536627})
	})
	t.Run("f64.add:116", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 1111252809067936271}, {wa.F64, 18353849863141451174}}, arg{wa.F64, 18353849863141451174})
	})
	t.Run("f64.add:117", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 16156503866526998353}, {wa.F64, 16051628718393451642}}, arg{wa.F64, 16156503867159194550})
	})
	t.Run("f64.add:118", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 9478779231447112314}, {wa.F64, 3336259491488022866}}, arg{wa.F64, 3336259491488022866})
	})
	t.Run("f64.add:119", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 11541137186853127278}, {wa.F64, 735421354967021004}}, arg{wa.F64, 11541137186853127278})
	})
	t.Run("f64.add:120", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 18181384676953296798}, {wa.F64, 8211214354507491487}}, arg{wa.F64, 18181384676953296798})
	})
	t.Run("f64.add:123", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 17455847474217352892}, {wa.F64, 8328504330151758329}}, arg{wa.F64, 8328504328029232689})
	})
	t.Run("f64.add:124", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 8138029755241725240}, {wa.F64, 7967841770626914860}}, arg{wa.F64, 8138029755241745167})
	})
	t.Run("f64.add:125", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 16644741111433920314}, {wa.F64, 7647005019700459394}}, arg{wa.F64, 7647005019700459387})
	})
	t.Run("f64.add:126", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 6696851869641768443}, {wa.F64, 6935821972358342665}}, arg{wa.F64, 6935821972358342665})
	})
	t.Run("f64.add:127", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 127567346952002978}, {wa.F64, 273820416703444795}}, arg{wa.F64, 273820416704834831})
	})
	t.Run("f64.add:130", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 17221080860858566255}, {wa.F64, 18119355194379769652}}, arg{wa.F64, 18119355194379769652})
	})
	t.Run("f64.add:131", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 5479469458864399218}, {wa.F64, 15063363222154738502}}, arg{wa.F64, 15063363222154738502})
	})
	t.Run("f64.add:132", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 15191393426281101490}, {wa.F64, 2705322087145917275}}, arg{wa.F64, 15191393426281101490})
	})
	t.Run("f64.add:133", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 12404517211283155052}, {wa.F64, 15933096090325362723}}, arg{wa.F64, 15933096090325362723})
	})
	t.Run("f64.add:134", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 12941874353187635000}, {wa.F64, 149235811938438489}}, arg{wa.F64, 12941874353187635000})
	})
	t.Run("f32.add:137", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 2039859408}, {wa.F32, 2137384617}}, arg{wa.F32, 2137389410})
	})
	t.Run("f32.add:138", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 2135652809}, {wa.F32, 4113932278}}, arg{wa.F32, 2135652798})
	})
	t.Run("f32.add:139", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 2055837582}, {wa.F32, 4281461529}}, arg{wa.F32, 4281443917})
	})
	t.Run("f32.add:140", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 4220448050}, {wa.F32, 4286022000}}, arg{wa.F32, 4286095178})
	})
	t.Run("f32.add:141", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 4280642669}, {wa.F32, 4269109313}}, arg{wa.F32, 4284663933})
	})
	t.Run("f64.add:142", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 9214390167692528523}, {wa.F64, 9025765862177526868}}, arg{wa.F64, 9214390167692529673})
	})
	t.Run("f64.add:143", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 9218174330906182895}, {wa.F64, 9066655639269665468}}, arg{wa.F64, 9218174330906813073})
	})
	t.Run("f64.add:144", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 18440065048487386960}, {wa.F64, 9166530475417861020}}, arg{wa.F64, 18440062016830479601})
	})
	t.Run("f64.add:145", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 18341378616977760125}, {wa.F64, 9218376305633483958}}, arg{wa.F64, 9218376303911020838})
	})
	t.Run("f64.add:146", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 9214484525044672441}, {wa.F64, 18297568705700624757}}, arg{wa.F64, 9214484525042704878})
	})
	t.Run("f32.add:149", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 5932680}, {wa.F32, 623}}, arg{wa.F32, 5933303})
	})
	t.Run("f32.add:150", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 37}, {wa.F32, 2147483650}}, arg{wa.F32, 35})
	})
	t.Run("f32.add:151", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 2147483656}, {wa.F32, 3701056}}, arg{wa.F32, 3701048})
	})
	t.Run("f32.add:152", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 2147483668}, {wa.F32, 44113961}}, arg{wa.F32, 44113960})
	})
	t.Run("f32.add:153", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 453}, {wa.F32, 2147507390}}, arg{wa.F32, 2147506937})
	})
	t.Run("f64.add:154", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 5760669582171681}, {wa.F64, 9233067416817195210}}, arg{wa.F64, 9227994927942701939})
	})
	t.Run("f64.add:155", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 9301019945277718}, {wa.F64, 9236877899492518055}}, arg{wa.F64, 9231781722239704866})
	})
	t.Run("f64.add:156", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 9225260466475370890}, {wa.F64, 9229416573822848190}}, arg{wa.F64, 9231305003443443272})
	})
	t.Run("f64.add:157", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 16303139584665809}, {wa.F64, 9240639734747285230}}, arg{wa.F64, 9227230270086150260})
	})
	t.Run("f64.add:158", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 9232116546764732939}, {wa.F64, 5103597037406761}}, arg{wa.F64, 9227012949727326178})
	})
	t.Run("f32.add:162", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 2139095038}, {wa.F32, 1937768448}}, arg{wa.F32, 2139095039})
	})
	t.Run("f64.add:163", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 9218868437227405310}, {wa.F64, 8980177656976769024}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("f32.add:166", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 1073741824}, {wa.F32, 1073741824}}, arg{wa.F32, 1082130432})
	})
	t.Run("f64.add:167", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 4611686018427387904}, {wa.F64, 4611686018427387904}}, arg{wa.F64, 4616189618054758400})
	})
	t.Run("f32.add:170", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 2139095039}, {wa.F32, 1929379839}}, arg{wa.F32, 2139095039})
	})
	t.Run("f32.add:171", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.add", []arg{{wa.F32, 2139095039}, {wa.F32, 1929379840}}, arg{wa.F32, 2139095040})
	})
	t.Run("f64.add:172", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 8975674057349398527}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("f64.add:173", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.add", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 8975674057349398528}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("f32.sub:177", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 1199570944}, {wa.F32, 754974720}}, arg{wa.F32, 1199570944})
	})
	t.Run("f64.sub:178", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 4679240012837945344}, {wa.F64, 4440549232587309056}}, arg{wa.F64, 4679240012837945343})
	})
	t.Run("f32.sub:182", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 1065353216}, {wa.F32, 855638016}}, arg{wa.F32, 1065353216})
	})
	t.Run("f32.sub:183", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 1065353216}, {wa.F32, 855638017}}, arg{wa.F32, 1065353215})
	})
	t.Run("f64.sub:184", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4363988038922010624}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("f64.sub:185", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4363988038922010625}}, arg{wa.F64, 4607182418800017407})
	})
	t.Run("f32.sub:188", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 183964211}, {wa.F32, 4211807167}}, arg{wa.F32, 2064323519})
	})
	t.Run("f32.sub:189", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 4213323727}, {wa.F32, 3575761746}}, arg{wa.F32, 4213323727})
	})
	t.Run("f32.sub:190", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 1069169566}, {wa.F32, 2530290313}}, arg{wa.F32, 1069169566})
	})
	t.Run("f32.sub:191", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 88711906}, {wa.F32, 431212897}}, arg{wa.F32, 2578696545})
	})
	t.Run("f32.sub:192", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 919562194}, {wa.F32, 2319656354}}, arg{wa.F32, 919562194})
	})
	t.Run("f64.sub:193", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 12332465020357998661}, {wa.F64, 9766989582560416510}}, arg{wa.F64, 12332465020357998661})
	})
	t.Run("f64.sub:194", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 16318450733361321773}, {wa.F64, 13120762196173477233}}, arg{wa.F64, 16318450733361321773})
	})
	t.Run("f64.sub:195", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 2534186520144737456}, {wa.F64, 10065159679028096147}}, arg{wa.F64, 2534186520144737456})
	})
	t.Run("f64.sub:196", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 81253721542311597}, {wa.F64, 14524181566355681001}}, arg{wa.F64, 5300809529500905193})
	})
	t.Run("f64.sub:197", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 13189545483472981053}, {wa.F64, 11407195172005604952}}, arg{wa.F64, 13189545483472981053})
	})
	t.Run("f32.sub:200", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 4122014001}, {wa.F32, 4158487026}}, arg{wa.F32, 2010278623})
	})
	t.Run("f32.sub:201", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 4130431355}, {wa.F32, 1119299749}}, arg{wa.F32, 4130431355})
	})
	t.Run("f32.sub:202", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 2517909066}, {wa.F32, 864524238}}, arg{wa.F32, 3012007886})
	})
	t.Run("f32.sub:203", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 2573484334}, {wa.F32, 3114628459}}, arg{wa.F32, 967144811})
	})
	t.Run("f32.sub:204", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 4044667730}, {wa.F32, 576942556}}, arg{wa.F32, 4044667730})
	})
	t.Run("f64.sub:205", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 14742371419310964805}, {wa.F64, 17888404506408184249}}, arg{wa.F64, 8665032469553408441})
	})
	t.Run("f64.sub:206", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 2953146626865245854}, {wa.F64, 2577681730975527916}}, arg{wa.F64, 2953146626865245854})
	})
	t.Run("f64.sub:207", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 12932364735331397407}, {wa.F64, 2320782934320318207}}, arg{wa.F64, 12932364735331397407})
	})
	t.Run("f64.sub:208", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 9365060414983047910}, {wa.F64, 12353777816259046974}}, arg{wa.F64, 3130405779404271166})
	})
	t.Run("f64.sub:209", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 14336992446210099104}, {wa.F64, 5379485476305549444}}, arg{wa.F64, 14602857513160325252})
	})
	t.Run("f32.sub:212", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 1869943590}, {wa.F32, 943887556}}, arg{wa.F32, 1869943590})
	})
	t.Run("f32.sub:213", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 3372906046}, {wa.F32, 2919590399}}, arg{wa.F32, 3372906046})
	})
	t.Run("f32.sub:214", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 2912495853}, {wa.F32, 2745492671}}, arg{wa.F32, 2912495843})
	})
	t.Run("f32.sub:215", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 3096029999}, {wa.F32, 957859028}}, arg{wa.F32, 3109853804})
	})
	t.Run("f32.sub:216", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 2939165019}, {wa.F32, 2346559691}}, arg{wa.F32, 2939165019})
	})
	t.Run("f64.sub:217", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 13126685627069188368}, {wa.F64, 17084005755352353256}}, arg{wa.F64, 7860633718497577448})
	})
	t.Run("f64.sub:218", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 17250804263238954355}, {wa.F64, 17897322818375888829}}, arg{wa.F64, 8673950781521113021})
	})
	t.Run("f64.sub:219", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 1024624387795162319}, {wa.F64, 5422801516870904507}}, arg{wa.F64, 14646173553725680315})
	})
	t.Run("f64.sub:220", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 11250563508203208480}, {wa.F64, 2160870138446053709}}, arg{wa.F64, 11384242175310282886})
	})
	t.Run("f64.sub:221", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 11315355526970152728}, {wa.F64, 13767999508795332779}}, arg{wa.F64, 4544627471940556971})
	})
	t.Run("f64.sub:224", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 4259315722107263852}, {wa.F64, 4089445689175118070}}, arg{wa.F64, 4259315722107229795})
	})
	t.Run("f64.sub:225", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 188121565440651108}, {wa.F64, 62416789530785743}}, arg{wa.F64, 188121565409457039})
	})
	t.Run("f64.sub:226", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 3467770562990504390}, {wa.F64, 3710644584044210353}}, arg{wa.F64, 12934016620898986161})
	})
	t.Run("f64.sub:227", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 13655868372788825570}, {wa.F64, 13522732182992332383}}, arg{wa.F64, 13655868372781906121})
	})
	t.Run("f64.sub:228", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 4496158230847685281}, {wa.F64, 4595312328816348364}}, arg{wa.F64, 13818684364224065885})
	})
	t.Run("f64.sub:231", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 10165048318361601487}, {wa.F64, 10384658282813060399}}, arg{wa.F64, 1161286245958284573})
	})
	t.Run("f64.sub:232", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 13982858477006823824}, {wa.F64, 6264462250080870922}}, arg{wa.F64, 15487834286935646730})
	})
	t.Run("f64.sub:233", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 5124509539958121241}, {wa.F64, 1953255029772502995}}, arg{wa.F64, 5124509539958121241})
	})
	t.Run("f64.sub:234", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 2408125051325635052}, {wa.F64, 10707017964771367822}}, arg{wa.F64, 2408125051325635052})
	})
	t.Run("f64.sub:235", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 4352135458168599028}, {wa.F64, 1826599214642193119}}, arg{wa.F64, 4352135458168599028})
	})
	t.Run("f32.sub:239", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 1102651427}, {wa.F32, 1078530011}}, arg{wa.F32, 1101004328})
	})
	t.Run("f64.sub:240", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 4627206743602008890}, {wa.F64, 4614256656552045848}}, arg{wa.F64, 4626322463883005335})
	})
	t.Run("f32.sub:243", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 1245125372}, {wa.F32, 1245125368}}, arg{wa.F32, 1065353216})
	})
	t.Run("f32.sub:244", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 1240736760}, {wa.F32, 1240736728}}, arg{wa.F32, 1082130432})
	})
	t.Run("f32.sub:245", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 1240736760}, {wa.F32, 1240736712}}, arg{wa.F32, 1086324736})
	})
	t.Run("f32.sub:246", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 1220759616}, {wa.F32, 1220759584}}, arg{wa.F32, 1065353216})
	})
	t.Run("f32.sub:247", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 1220759616}, {wa.F32, 1220759552}}, arg{wa.F32, 1073741824})
	})
	t.Run("f64.sub:248", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 4838362400168542206}, {wa.F64, 4838362400168542204}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("f64.sub:249", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 4835858800541171708}, {wa.F64, 4835858800541171692}}, arg{wa.F64, 4616189618054758400})
	})
	t.Run("f64.sub:250", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 4835858800541171708}, {wa.F64, 4835858800541171684}}, arg{wa.F64, 4618441417868443648})
	})
	t.Run("f64.sub:251", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 4825251601286430752}, {wa.F64, 4825251601286430736}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("f64.sub:252", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 4825251601286430752}, {wa.F64, 4825251601286430720}}, arg{wa.F64, 4611686018427387904})
	})
	t.Run("f32.sub:255", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 8388608}, {wa.F32, 8388607}}, arg{wa.F32, 1})
	})
	t.Run("f64.sub:256", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4503599627370495}}, arg{wa.F64, 1})
	})
	t.Run("f32.sub:259", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 1065353217}, {wa.F32, 1065353215}}, arg{wa.F32, 876609536})
	})
	t.Run("f32.sub:260", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 1065353217}, {wa.F32, 1065353216}}, arg{wa.F32, 872415232})
	})
	t.Run("f32.sub:261", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 1065353216}, {wa.F32, 1065353215}}, arg{wa.F32, 864026624})
	})
	t.Run("f64.sub:262", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 4607182418800017409}, {wa.F64, 4607182418800017407}}, arg{wa.F64, 4375247037990436864})
	})
	t.Run("f64.sub:263", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 4607182418800017409}, {wa.F64, 4607182418800017408}}, arg{wa.F64, 4372995238176751616})
	})
	t.Run("f64.sub:264", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4607182418800017407}}, arg{wa.F64, 4368491638549381120})
	})
	t.Run("f32.sub:268", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 2139095039}, {wa.F32, 1929379839}}, arg{wa.F32, 2139095039})
	})
	t.Run("f32.sub:269", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sub", []arg{{wa.F32, 2139095039}, {wa.F32, 1929379840}}, arg{wa.F32, 2139095038})
	})
	t.Run("f64.sub:270", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 8975674057349398527}}, arg{wa.F64, 9218868437227405311})
	})
	t.Run("f64.sub:271", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sub", []arg{{wa.F64, 9218868437227405311}, {wa.F64, 8975674057349398528}}, arg{wa.F64, 9218868437227405310})
	})
	t.Run("f32.mul:274", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 1482907561}, {wa.F32, 1482907561}}, arg{wa.F32, 1900671689})
	})
	t.Run("f32.mul:275", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 1621981420}, {wa.F32, 1621981420}}, arg{wa.F32, 2139095040})
	})
	t.Run("f32.mul:276", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 1761892689}, {wa.F32, 1761892689}}, arg{wa.F32, 2139095040})
	})
	t.Run("f64.mul:277", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 4831355200913801216}, {wa.F64, 4831355200913801216}}, arg{wa.F64, 5055640609639927018})
	})
	t.Run("f64.mul:278", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 4906019910204099648}, {wa.F64, 4906019910204099648}}, arg{wa.F64, 5205425776111082661})
	})
	t.Run("f64.mul:279", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 4981134201117475473}, {wa.F64, 4981134201117475473}}, arg{wa.F64, 5355091182177117339})
	})
	t.Run("f32.mul:284", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 1323067183}, {wa.F32, 1351920719}}, arg{wa.F32, 1610612737})
	})
	t.Run("f64.mul:285", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 4745541551160033280}, {wa.F64, 4761032175258435584}}, arg{wa.F64, 4899916394579099649})
	})
	t.Run("f32.mul:289", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 1117401907}, {wa.F32, 1146388480}}, arg{wa.F32, 1199570688})
	})
	t.Run("f64.mul:290", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 4635125847112967782}, {wa.F64, 4650687894887858176}}, arg{wa.F64, 4679239875398991871})
	})
	t.Run("f32.mul:293", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 3725225879}, {wa.F32, 767181884}}, arg{wa.F32, 3427365876})
	})
	t.Run("f32.mul:294", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 4071298289}, {wa.F32, 2363594761}}, arg{wa.F32, 1075233538})
	})
	t.Run("f32.mul:295", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 3990403914}, {wa.F32, 2406636213}}, arg{wa.F32, 1036856791})
	})
	t.Run("f32.mul:296", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 3876262739}, {wa.F32, 2590162616}}, arg{wa.F32, 1106664791})
	})
	t.Run("f32.mul:297", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 1513973689}, {wa.F32, 1110852822}}, arg{wa.F32, 1560730283})
	})
	t.Run("f64.mul:298", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 15745248579468343268}, {wa.F64, 8867411559652116184}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("f64.mul:299", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 9393595877903301723}, {wa.F64, 12847704090045979814}}, arg{wa.F64, 0})
	})
	t.Run("f64.mul:300", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 7339743909496900438}, {wa.F64, 14312273837817528234}}, arg{wa.F64, 17044856006279008467})
	})
	t.Run("f64.mul:301", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 12422633289194844785}, {wa.F64, 7233496047441461849}}, arg{wa.F64, 15049217706304651865})
	})
	t.Run("f64.mul:302", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 8188526721198436258}, {wa.F64, 745378815681991665}}, arg{wa.F64, 4327221634240578200})
	})
	t.Run("f32.mul:305", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 2468326353}, {wa.F32, 3984723636}}, arg{wa.F32, 1092762840})
	})
	t.Run("f32.mul:306", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 1680245441}, {wa.F32, 1228341789}}, arg{wa.F32, 1844318640})
	})
	t.Run("f32.mul:307", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 2945969408}, {wa.F32, 3840981390}}, arg{wa.F32, 1427037263})
	})
	t.Run("f32.mul:308", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 1631446143}, {wa.F32, 3340593865}}, arg{wa.F32, 3907618991})
	})
	t.Run("f32.mul:309", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 1321841569}, {wa.F32, 3771977928}}, arg{wa.F32, 4029080461})
	})
	t.Run("f64.mul:310", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 10956034376207055635}, {wa.F64, 3195464683520095288}}, arg{wa.F64, 9544600684599159351})
	})
	t.Run("f64.mul:311", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 3366372084365197849}, {wa.F64, 10971437597834234015}}, arg{wa.F64, 9730951521726442211})
	})
	t.Run("f64.mul:312", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 15316253934569525376}, {wa.F64, 17593766689751523793}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("f64.mul:313", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 8873430008942894499}, {wa.F64, 2630310872370005737}}, arg{wa.F64, 6896620497836925834})
	})
	t.Run("f64.mul:314", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 6138390736122864607}, {wa.F64, 14591737303103877464}}, arg{wa.F64, 16122953269734234204})
	})
	t.Run("f32.mul:317", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 3603447621}, {wa.F32, 4012809012}}, arg{wa.F32, 2139095040})
	})
	t.Run("f32.mul:318", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 3192278970}, {wa.F32, 242309673}}, arg{wa.F32, 2369451750})
	})
	t.Run("f32.mul:319", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 3060150317}, {wa.F32, 1953896717}}, arg{wa.F32, 3948759250})
	})
	t.Run("f32.mul:320", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 3685735869}, {wa.F32, 265571119}}, arg{wa.F32, 2886850375})
	})
	t.Run("f32.mul:321", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 3355295625}, {wa.F32, 69023757}}, arg{wa.F32, 2359023110})
	})
	t.Run("f64.mul:322", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 11598370094301102699}, {wa.F64, 15783697741936198553}}, arg{wa.F64, 4328598597203697163})
	})
	t.Run("f64.mul:323", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 6760137556672200005}, {wa.F64, 10390971429121674926}}, arg{wa.F64, 12543987340819631453})
	})
	t.Run("f64.mul:324", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 14608361260346079328}, {wa.F64, 6227029768418337647}}, arg{wa.F64, 16228420234814429284})
	})
	t.Run("f64.mul:325", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 8069908676175581646}, {wa.F64, 15517844864458283108}}, arg{wa.F64, 18442240474082181120})
	})
	t.Run("f64.mul:326", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 4973816491418843402}, {wa.F64, 4922606816281832528}}, arg{wa.F64, 5289311430451755328})
	})
	t.Run("f64.mul:329", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 3075846375446710711}, {wa.F64, 2019524319895558702}}, arg{wa.F64, 488220554609224151})
	})
	t.Run("f64.mul:330", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 13792389967993824121}, {wa.F64, 7865224186729676301}}, arg{wa.F64, 17051039770050770421})
	})
	t.Run("f64.mul:331", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 15483491341737357200}, {wa.F64, 10898188329492193507}}, arg{wa.F64, 3327855557076626973})
	})
	t.Run("f64.mul:332", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 8100886621587996114}, {wa.F64, 4881220253517731398}}, arg{wa.F64, 8375006889399652877})
	})
	t.Run("f64.mul:333", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 12589892576446671178}, {wa.F64, 8646729507413822745}}, arg{wa.F64, 16629483498509877989})
	})
	t.Run("f64.mul:336", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 1913383041739811140}, {wa.F64, 2696786534754768330}}, arg{wa.F64, 3776602816350777})
	})
	t.Run("f64.mul:337", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 13576886274997223712}, {wa.F64, 9480836654241272360}}, arg{wa.F64, 4406081533924885})
	})
	t.Run("f64.mul:338", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 11636123185307544831}, {wa.F64, 11418839304735837198}}, arg{wa.F64, 2919536087652621})
	})
	t.Run("f64.mul:339", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 10357270161024523488}, {wa.F64, 3460198093814186274}}, arg{wa.F64, 9223701543089011575})
	})
	t.Run("f64.mul:340", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 11506848031881565957}, {wa.F64, 11547514064126512393}}, arg{wa.F64, 2474372522531115})
	})
	t.Run("f64.mul:343", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 8446730755803745435}, {wa.F64, 640105622936255012}}, arg{wa.F64, 4479981512316931443})
	})
	t.Run("f64.mul:344", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 4578331547514318947}, {wa.F64, 3937894457345907544}}, arg{wa.F64, 3909603143436010489})
	})
	t.Run("f64.mul:345", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 13839181621982597923}, {wa.F64, 4426983905639375259}}, arg{wa.F64, 13658985409477228135})
	})
	t.Run("f64.mul:346", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 2931365221683549507}, {wa.F64, 3687257801017498184}}, arg{wa.F64, 2011503789135851990})
	})
	t.Run("f64.mul:347", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 14180592859625794472}, {wa.F64, 3043918530412552819}}, arg{wa.F64, 12617399980269247921})
	})
	t.Run("f32.mul:350", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 436207616}, {wa.F32, 436207616}}, arg{wa.F32, 0})
	})
	t.Run("f32.mul:351", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 436207617}, {wa.F32, 436207617}}, arg{wa.F32, 1})
	})
	t.Run("f64.mul:352", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 2186111271319845836}, {wa.F64, 2186111271319845836}}, arg{wa.F64, 0})
	})
	t.Run("f64.mul:353", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 2186111271319845837}, {wa.F64, 2186111271319845837}}, arg{wa.F64, 1})
	})
	t.Run("f32.mul:356", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 1602224127}, {wa.F32, 1602224127}}, arg{wa.F32, 2139095038})
	})
	t.Run("f32.mul:357", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 1602224128}, {wa.F32, 1602224128}}, arg{wa.F32, 2139095040})
	})
	t.Run("f64.mul:358", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 6913025428013711359}, {wa.F64, 6913025428013711359}}, arg{wa.F64, 9218868437227405310})
	})
	t.Run("f64.mul:359", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 6913025428013711360}, {wa.F64, 6913025428013711360}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("f32.mul:362", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 1065353217}, {wa.F32, 1065353217}}, arg{wa.F32, 1065353218})
	})
	t.Run("f32.mul:363", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 1065353215}, {wa.F32, 1065353215}}, arg{wa.F32, 1065353214})
	})
	t.Run("f64.mul:364", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 4607182418800017409}, {wa.F64, 4607182418800017409}}, arg{wa.F64, 4607182418800017410})
	})
	t.Run("f64.mul:365", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 4607182418800017407}, {wa.F64, 4607182418800017407}}, arg{wa.F64, 4607182418800017406})
	})
	t.Run("f32.mul:368", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 1065353217}, {wa.F32, 1065353215}}, arg{wa.F32, 1065353216})
	})
	t.Run("f32.mul:369", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 1065353218}, {wa.F32, 1065353214}}, arg{wa.F32, 1065353217})
	})
	t.Run("f64.mul:370", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 4607182418800017409}, {wa.F64, 4607182418800017407}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("f64.mul:371", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 4607182418800017410}, {wa.F64, 4607182418800017406}}, arg{wa.F64, 4607182418800017409})
	})
	t.Run("f32.mul:375", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 8388608}, {wa.F32, 872415232}}, arg{wa.F32, 1})
	})
	t.Run("f64.mul:376", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.mul", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4372995238176751616}}, arg{wa.F64, 1})
	})
	t.Run("f32.mul:379", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.mul", []arg{{wa.F32, 3246392064}, {wa.F32, 212992}}, arg{wa.F32, 2150891832})
	})
	t.Run("f32.div:382", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 1066388847}, {wa.F32, 1120403456}}, arg{wa.F32, 1010307378})
	})
	t.Run("f32.div:383", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 1258294259}, {wa.F32, 1262485497}}, arg{wa.F32, 1059764896})
	})
	t.Run("f32.div:384", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 1199570944}, {wa.F32, 754974720}}, arg{wa.F32, 1509949440})
	})
	t.Run("f32.div:385", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 1072586677}, {wa.F32, 2139095039}}, arg{wa.F32, 3905517})
	})
	t.Run("f32.div:386", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 1082130432}, {wa.F32, 1077936128}}, arg{wa.F32, 1068149419})
	})
	t.Run("f64.div:387", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4607738418748954166}, {wa.F64, 4636737291354636288}}, arg{wa.F64, 4577629909238726725})
	})
	t.Run("f64.div:388", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4710766852517658624}, {wa.F64, 4713017006285127680}}, arg{wa.F64, 4604182212107680295})
	})
	t.Run("f64.div:389", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4679240012837945344}, {wa.F64, 4440549232587309056}}, arg{wa.F64, 4845873199050653696})
	})
	t.Run("f64.div:390", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4611065853604003840}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 2096758607839232})
	})
	t.Run("f64.div:391", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4616189618054758400}, {wa.F64, 4613937818241073152}}, arg{wa.F64, 4608683618675807573})
	})
	t.Run("f32.div:395", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 1249905654}, {wa.F32, 1245708284}}, arg{wa.F32, 1068153505})
	})
	t.Run("f64.div:396", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4706263254500900864}, {wa.F64, 4704009808640999424}}, arg{wa.F64, 4608685812450356035})
	})
	t.Run("f32.div:399", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 666187309}, {wa.F32, 2138899896}}, arg{wa.F32, 0})
	})
	t.Run("f32.div:400", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 338737113}, {wa.F32, 1637454009}}, arg{wa.F32, 0})
	})
	t.Run("f32.div:401", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 3351999420}, {wa.F32, 401966635}}, arg{wa.F32, 4015268357})
	})
	t.Run("f32.div:402", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 2582720800}, {wa.F32, 2197197239}}, arg{wa.F32, 1450863298})
	})
	t.Run("f32.div:403", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 3564182439}, {wa.F32, 397999726}}, arg{wa.F32, 4230402947})
	})
	t.Run("f64.div:404", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 5269602717919885505}, {wa.F64, 5615431061534361830}}, arg{wa.F64, 4261119458085367075})
	})
	t.Run("f64.div:405", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 1791703022234099881}, {wa.F64, 230587289790163684}}, arg{wa.F64, 6167818452243445017})
	})
	t.Run("f64.div:406", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 15176390632865983384}, {wa.F64, 7489729865403831125}}, arg{wa.F64, 12293662509603441500})
	})
	t.Run("f64.div:407", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 16945752639368638170}, {wa.F64, 5718505335991307775}}, arg{wa.F64, 15834399302320062011})
	})
	t.Run("f64.div:408", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 16263708435887736913}, {wa.F64, 6648866667391375614}}, arg{wa.F64, 14221856927329063502})
	})
	t.Run("f32.div:411", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 3798033061}, {wa.F32, 2491443361}}, arg{wa.F32, 2139095040})
	})
	t.Run("f32.div:412", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 686927199}, {wa.F32, 1440960248}}, arg{wa.F32, 310908762})
	})
	t.Run("f32.div:413", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 1067646869}, {wa.F32, 3960423338}}, arg{wa.F32, 2467406247})
	})
	t.Run("f32.div:414", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 642177221}, {wa.F32, 2685135}}, arg{wa.F32, 1713065419})
	})
	t.Run("f32.div:415", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 1824271560}, {wa.F32, 1797890210}}, arg{wa.F32, 1091436270})
	})
	t.Run("f64.div:416", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4278321332874065}, {wa.F64, 15464375907975098426}}, arg{wa.F64, 9223372036854775808})
	})
	t.Run("f64.div:417", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 9385779280320516508}, {wa.F64, 2195352144435258723}}, arg{wa.F64, 11796946241575527184})
	})
	t.Run("f64.div:418", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 12019785500442997560}, {wa.F64, 14033717547286793792}}, arg{wa.F64, 2592881844429368931})
	})
	t.Run("f64.div:419", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 14192622858179995755}, {wa.F64, 1048270709368415171}}, arg{wa.F64, 17751311910175316838})
	})
	t.Run("f64.div:420", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 14895971708944847415}, {wa.F64, 14082502105592202184}}, arg{wa.F64, 5420603229995464966})
	})
	t.Run("f32.div:423", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 1286756690}, {wa.F32, 74754985}}, arg{wa.F32, 2139095040})
	})
	t.Run("f32.div:424", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 3861505243}, {wa.F32, 1298875600}}, arg{wa.F32, 3627605330})
	})
	t.Run("f32.div:425", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 1387472197}, {wa.F32, 4021087697}}, arg{wa.F32, 2726599162})
	})
	t.Run("f32.div:426", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 4149014653}, {wa.F32, 3294714580}}, arg{wa.F32, 1919471347})
	})
	t.Run("f32.div:427", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 3987554477}, {wa.F32, 3327836421}}, arg{wa.F32, 1724563548})
	})
	t.Run("f64.div:428", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 10882983485852580843}, {wa.F64, 1499380901194126188}}, arg{wa.F64, 13990715555071506017})
	})
	t.Run("f64.div:429", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 17353632673902705731}, {wa.F64, 11343375610449883809}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("f64.div:430", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 10471640091267549911}, {wa.F64, 4317563730789156718}}, arg{wa.F64, 10760831595995331201})
	})
	t.Run("f64.div:431", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 15262578458239868670}, {wa.F64, 11184694400998603321}}, arg{wa.F64, 8684356686754640262})
	})
	t.Run("f64.div:432", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 5423766533942924987}, {wa.F64, 14797877595923399406}}, arg{wa.F64, 13679565210380085385})
	})
	t.Run("f64.div:435", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 16467910284400317286}, {wa.F64, 14710955777971283471}}, arg{wa.F64, 6363956244686200611})
	})
	t.Run("f64.div:436", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 16290965053652735591}, {wa.F64, 15317706837775392625}}, arg{wa.F64, 5580355845867636249})
	})
	t.Run("f64.div:437", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 5440366292977110369}, {wa.F64, 18177315027663270891}}, arg{wa.F64, 10316437533262127859})
	})
	t.Run("f64.div:438", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 5586144947709395659}, {wa.F64, 6532436425888624877}}, arg{wa.F64, 3660708720660625999})
	})
	t.Run("f64.div:439", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 17550005606375580620}, {wa.F64, 6180045224129992598}}, arg{wa.F64, 15976575755200563719})
	})
	t.Run("f64.div:442", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4611065853588275309}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 2096758603907099})
	})
	t.Run("f64.div:443", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 58005932411648970}, {wa.F64, 4662638783615926141}}, arg{wa.F64, 3222112482593593})
	})
	t.Run("f64.div:444", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 13185764271695251812}, {wa.F64, 17795032469661562376}}, arg{wa.F64, 1594123367530375})
	})
	t.Run("f64.div:445", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 12062544014359965409}, {wa.F64, 16674780236028867992}}, arg{wa.F64, 1036869663772871})
	})
	t.Run("f64.div:446", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 752499975442349235}, {wa.F64, 5356690663768240614}}, arg{wa.F64, 3442089173194313})
	})
	t.Run("f64.div:447", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 83041154348962762}, {wa.F64, 13934889252531101931}}, arg{wa.F64, 9223458798833500621})
	})
	t.Run("f32.div:450", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 1817629909}, {wa.F32, 1421132838}}, arg{wa.F32, 1461198615})
	})
	t.Run("f32.div:451", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 1824604388}, {wa.F32, 4105258014}}, arg{wa.F32, 3079375694})
	})
	t.Run("f32.div:452", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 1747858929}, {wa.F32, 1063784191}}, arg{wa.F32, 1749036825})
	})
	t.Run("f32.div:453", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 3378374953}, {wa.F32, 3497907368}}, arg{wa.F32, 945802923})
	})
	t.Run("f32.div:454", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 2861015275}, {wa.F32, 3684669151}}, arg{wa.F32, 240750700})
	})
	t.Run("f64.div:455", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4885037015672297625}, {wa.F64, 9954263091431620051}}, arg{wa.F64, 17984289216286432053})
	})
	t.Run("f64.div:456", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4022347395424227722}, {wa.F64, 11486191764643320419}}, arg{wa.F64, 15589554694846453438})
	})
	t.Run("f64.div:457", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 7623973190248181230}, {wa.F64, 7481900282945497881}}, arg{wa.F64, 4748664889769504925})
	})
	t.Run("f64.div:458", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 14650287530633645126}, {wa.F64, 8091500841285620267}}, arg{wa.F64, 11165393291297270552})
	})
	t.Run("f64.div:459", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 9910334119372230161}, {wa.F64, 10921408834055405722}}, arg{wa.F64, 3596021921286071170})
	})
	t.Run("f64.div:462", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4352764235752579571}, {wa.F64, 4610853254537913145}}, arg{wa.F64, 4348952422448611708})
	})
	t.Run("f64.div:463", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4148344307949876337}, {wa.F64, 13642564096968604240}}, arg{wa.F64, 13559333871418047670})
	})
	t.Run("f64.div:464", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4425554483259831683}, {wa.F64, 4103199251532205583}}, arg{wa.F64, 4929315895081747238})
	})
	t.Run("f64.div:465", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 5011653323436109419}, {wa.F64, 5044067306150920275}}, arg{wa.F64, 4574739988274663188})
	})
	t.Run("f64.div:466", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4558988817252519457}, {wa.F64, 14066629987516208597}}, arg{wa.F64, 13546063418479940250})
	})
	t.Run("f32.div:469", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 8388608}, {wa.F32, 8388607}}, arg{wa.F32, 1065353217})
	})
	t.Run("f32.div:470", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 8388607}, {wa.F32, 8388608}}, arg{wa.F32, 1065353214})
	})
	t.Run("f64.div:471", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4503599627370496}, {wa.F64, 4503599627370495}}, arg{wa.F64, 4607182418800017409})
	})
	t.Run("f64.div:472", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4503599627370495}, {wa.F64, 4503599627370496}}, arg{wa.F64, 4607182418800017406})
	})
	t.Run("f32.div:475", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 880803839}, {wa.F32, 2139095039}}, arg{wa.F32, 0})
	})
	t.Run("f32.div:476", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 880803840}, {wa.F32, 2139095039}}, arg{wa.F32, 1})
	})
	t.Run("f64.div:477", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4377498837804122111}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 0})
	})
	t.Run("f64.div:478", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4377498837804122112}, {wa.F64, 9218868437227405311}}, arg{wa.F64, 1})
	})
	t.Run("f32.div:481", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 1065353216}, {wa.F32, 2097152}}, arg{wa.F32, 2139095040})
	})
	t.Run("f32.div:482", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 1065353216}, {wa.F32, 2097153}}, arg{wa.F32, 2139095032})
	})
	t.Run("f64.div:483", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 1125899906842624}}, arg{wa.F64, 9218868437227405312})
	})
	t.Run("f64.div:484", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 1125899906842625}}, arg{wa.F64, 9218868437227405304})
	})
	t.Run("f32.div:487", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 1065353216}, {wa.F32, 2122317825}}, arg{wa.F32, 8388607})
	})
	t.Run("f32.div:488", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 1065353216}, {wa.F32, 2122317824}}, arg{wa.F32, 8388608})
	})
	t.Run("f64.div:489", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9209861237972664321}}, arg{wa.F64, 4503599627370495})
	})
	t.Run("f64.div:490", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 9209861237972664320}}, arg{wa.F64, 4503599627370496})
	})
	t.Run("f32.div:500", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 1065353216}, {wa.F32, 1077936128}}, arg{wa.F32, 1051372203})
	})
	t.Run("f32.div:501", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 1077936128}, {wa.F32, 1091567616}}, arg{wa.F32, 1051372203})
	})
	t.Run("f32.div:502", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 1091567616}, {wa.F32, 1104674816}}, arg{wa.F32, 1051372203})
	})
	t.Run("f64.div:503", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4613937818241073152}}, arg{wa.F64, 4599676419421066581})
	})
	t.Run("f64.div:504", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4613937818241073152}, {wa.F64, 4621256167635550208}}, arg{wa.F64, 4599676419421066581})
	})
	t.Run("f64.div:505", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4621256167635550208}, {wa.F64, 4628293042053316608}}, arg{wa.F64, 4599676419421066581})
	})
	t.Run("f32.div:508", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 1065353217}, {wa.F32, 1065353215}}, arg{wa.F32, 1065353218})
	})
	t.Run("f32.div:509", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 1065353215}, {wa.F32, 1065353217}}, arg{wa.F32, 1065353213})
	})
	t.Run("f32.div:510", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 1065353216}, {wa.F32, 1065353215}}, arg{wa.F32, 1065353217})
	})
	t.Run("f32.div:511", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.div", []arg{{wa.F32, 1065353216}, {wa.F32, 1065353217}}, arg{wa.F32, 1065353214})
	})
	t.Run("f64.div:512", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4607182418800017409}, {wa.F64, 4607182418800017407}}, arg{wa.F64, 4607182418800017410})
	})
	t.Run("f64.div:513", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4607182418800017407}, {wa.F64, 4607182418800017409}}, arg{wa.F64, 4607182418800017405})
	})
	t.Run("f64.div:514", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4607182418800017407}}, arg{wa.F64, 4607182418800017409})
	})
	t.Run("f64.div:515", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.div", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4607182418800017409}}, arg{wa.F64, 4607182418800017406})
	})
	t.Run("f32.sqrt:519", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sqrt", []arg{{wa.F32, 1126891520}}, arg{wa.F32, 1095842342})
	})
	t.Run("f32.sqrt:520", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sqrt", []arg{{wa.F32, 875341566}}, arg{wa.F32, 970079310})
	})
	t.Run("f64.sqrt:521", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 4640220544191430656}}, arg{wa.F64, 4623551143926461685})
	})
	t.Run("f64.sqrt:522", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 4505170691092029701}}, arg{wa.F64, 4556032630010904473})
	})
	t.Run("f64.sqrt:525", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 3868634135368364633}}, arg{wa.F64, 4237908228221851551})
	})
	t.Run("f64.sqrt:526", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 6130334638238385213}}, arg{wa.F64, 5368736472460186647})
	})
	t.Run("f64.sqrt:527", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 6420749722515481850}}, arg{wa.F64, 5513761933181195411})
	})
	t.Run("f64.sqrt:528", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 4441983858611369811}}, arg{wa.F64, 4524423892028972029})
	})
	t.Run("f64.sqrt:529", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 2943222801950574478}}, arg{wa.F64, 3775077603066051757})
	})
	t.Run("f64.sqrt:533", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 4607182418800017407}}, arg{wa.F64, 4607182418800017407})
	})
	t.Run("f32.sqrt:536", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sqrt", []arg{{wa.F32, 1040498738}}, arg{wa.F32, 1052268824})
	})
	t.Run("f32.sqrt:537", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sqrt", []arg{{wa.F32, 1911349112}}, arg{wa.F32, 1487806505})
	})
	t.Run("f32.sqrt:538", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sqrt", []arg{{wa.F32, 1033984731}}, arg{wa.F32, 1049605767})
	})
	t.Run("f32.sqrt:539", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sqrt", []arg{{wa.F32, 471548520}}, arg{wa.F32, 768040305})
	})
	t.Run("f32.sqrt:540", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sqrt", []arg{{wa.F32, 980180519}}, arg{wa.F32, 1022754037})
	})
	t.Run("f64.sqrt:541", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 447478826231748356}}, arg{wa.F64, 2527268346316778217})
	})
	t.Run("f64.sqrt:542", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 7882765141420635228}}, arg{wa.F64, 6244818117372907505})
	})
	t.Run("f64.sqrt:543", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 6345006020483303032}}, arg{wa.F64, 5476089630784211276})
	})
	t.Run("f64.sqrt:544", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 5080974719163899092}}, arg{wa.F64, 4843851732197030563})
	})
	t.Run("f64.sqrt:545", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 9108179429173493573}}, arg{wa.F64, 6857570252025178944})
	})
	t.Run("f32.sqrt:548", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sqrt", []arg{{wa.F32, 1293112087}}, arg{wa.F32, 1178743848})
	})
	t.Run("f32.sqrt:549", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sqrt", []arg{{wa.F32, 118173697}}, arg{wa.F32, 591184817})
	})
	t.Run("f32.sqrt:550", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sqrt", []arg{{wa.F32, 941555112}}, arg{wa.F32, 1003077404})
	})
	t.Run("f32.sqrt:551", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sqrt", []arg{{wa.F32, 60323222}}, arg{wa.F32, 562803203})
	})
	t.Run("f32.sqrt:552", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sqrt", []arg{{wa.F32, 40220718}}, arg{wa.F32, 552763653})
	})
	t.Run("f64.sqrt:553", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 7741365502393472048}}, arg{wa.F64, 6174272493021072850})
	})
	t.Run("f64.sqrt:554", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 1175297548666390979}}, arg{wa.F64, 2891239701856850373})
	})
	t.Run("f64.sqrt:555", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 4474969389470739153}}, arg{wa.F64, 4540897185465678583})
	})
	t.Run("f64.sqrt:556", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 3521792205891300764}}, arg{wa.F64, 4064104284248214854})
	})
	t.Run("f64.sqrt:557", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 8798159938601760820}}, arg{wa.F64, 6702520650372831162})
	})
	t.Run("f32.sqrt:560", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sqrt", []arg{{wa.F32, 2058533950}}, arg{wa.F32, 1561805138})
	})
	t.Run("f32.sqrt:561", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sqrt", []arg{{wa.F32, 1194962978}}, arg{wa.F32, 1129973536})
	})
	t.Run("f32.sqrt:562", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sqrt", []arg{{wa.F32, 1062209384}}, arg{wa.F32, 1063699830})
	})
	t.Run("f32.sqrt:563", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sqrt", []arg{{wa.F32, 339551808}}, arg{wa.F32, 702287090})
	})
	t.Run("f32.sqrt:564", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sqrt", []arg{{wa.F32, 279876202}}, arg{wa.F32, 672496559})
	})
	t.Run("f64.sqrt:565", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 7933654283200418420}}, arg{wa.F64, 6270248298536475417})
	})
	t.Run("f64.sqrt:566", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 2893298197477532149}}, arg{wa.F64, 3750137482611732493})
	})
	t.Run("f64.sqrt:567", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 8954101765007123282}}, arg{wa.F64, 6780419764181964566})
	})
	t.Run("f64.sqrt:568", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 4405641787023763989}}, arg{wa.F64, 4506213966714545194})
	})
	t.Run("f64.sqrt:569", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 2394824404681191749}}, arg{wa.F64, 3500764341454448999})
	})
	t.Run("f64.sqrt:572", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 9494538992465685200}}, arg{wa.F64, 0x7ff8000000000000})
	})
	t.Run("f64.sqrt:573", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 5074882158241187075}}, arg{wa.F64, 4841025724322244342})
	})
	t.Run("f64.sqrt:574", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 1187437724299488295}}, arg{wa.F64, 2897120674751402313})
	})
	t.Run("f64.sqrt:575", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 3368223178643061438}}, arg{wa.F64, 3987382964717611901})
	})
	t.Run("f64.sqrt:576", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 7161993531047854177}}, arg{wa.F64, 5884408968142469554})
	})
	t.Run("f32.sqrt:579", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sqrt", []arg{{wa.F32, 1065353217}}, arg{wa.F32, 1065353216})
	})
	t.Run("f32.sqrt:580", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sqrt", []arg{{wa.F32, 1065353218}}, arg{wa.F32, 1065353217})
	})
	t.Run("f64.sqrt:581", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 4607182418800017409}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("f64.sqrt:582", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 4607182418800017410}}, arg{wa.F64, 4607182418800017409})
	})
	t.Run("f32.sqrt:585", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sqrt", []arg{{wa.F32, 1065353214}}, arg{wa.F32, 1065353215})
	})
	t.Run("f32.sqrt:586", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.sqrt", []arg{{wa.F32, 1065353213}}, arg{wa.F32, 1065353214})
	})
	t.Run("f64.sqrt:587", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 4607182418800017406}}, arg{wa.F64, 4607182418800017407})
	})
	t.Run("f64.sqrt:588", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.sqrt", []arg{{wa.F64, 4607182418800017405}}, arg{wa.F64, 4607182418800017406})
	})
	t.Run("f32.abs:592", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.abs", []arg{{wa.F32, 2139156962}}, arg{wa.F32, 2139156962})
	})
	t.Run("f32.abs:593", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.abs", []arg{{wa.F32, 4286640610}}, arg{wa.F32, 2139156962})
	})
	t.Run("f64.abs:594", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.abs", []arg{{wa.F64, 9218868441285556843}}, arg{wa.F64, 9218868441285556843})
	})
	t.Run("f64.abs:595", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.abs", []arg{{wa.F64, 18442240478140332651}}, arg{wa.F64, 9218868441285556843})
	})
	t.Run("f32.neg:597", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.neg", []arg{{wa.F32, 2139156962}}, arg{wa.F32, 4286640610})
	})
	t.Run("f32.neg:598", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.neg", []arg{{wa.F32, 4286640610}}, arg{wa.F32, 2139156962})
	})
	t.Run("f64.neg:599", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.neg", []arg{{wa.F64, 9218868441285556843}}, arg{wa.F64, 18442240478140332651})
	})
	t.Run("f64.neg:600", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.neg", []arg{{wa.F64, 18442240478140332651}}, arg{wa.F64, 9218868441285556843})
	})
	t.Run("f32.copysign:602", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.copysign", []arg{{wa.F32, 2139156962}, {wa.F32, 2143289344}}, arg{wa.F32, 2139156962})
	})
	t.Run("f32.copysign:603", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.copysign", []arg{{wa.F32, 2139156962}, {wa.F32, 4290772992}}, arg{wa.F32, 4286640610})
	})
	t.Run("f32.copysign:604", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.copysign", []arg{{wa.F32, 4286640610}, {wa.F32, 2143289344}}, arg{wa.F32, 2139156962})
	})
	t.Run("f32.copysign:605", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.copysign", []arg{{wa.F32, 4286640610}, {wa.F32, 4290772992}}, arg{wa.F32, 4286640610})
	})
	t.Run("f64.copysign:606", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.copysign", []arg{{wa.F64, 9218868441285556843}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 9218868441285556843})
	})
	t.Run("f64.copysign:607", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.copysign", []arg{{wa.F64, 9218868441285556843}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 18442240478140332651})
	})
	t.Run("f64.copysign:608", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.copysign", []arg{{wa.F64, 18442240478140332651}, {wa.F64, 9221120237041090560}}, arg{wa.F64, 9218868441285556843})
	})
	t.Run("f64.copysign:609", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.copysign", []arg{{wa.F64, 18442240478140332651}, {wa.F64, 18444492273895866368}}, arg{wa.F64, 18442240478140332651})
	})
	t.Run("f32.ceil:612", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.ceil", []arg{{wa.F32, 1065353215}}, arg{wa.F32, 1065353216})
	})
	t.Run("f32.ceil:613", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.ceil", []arg{{wa.F32, 1065353217}}, arg{wa.F32, 1073741824})
	})
	t.Run("f64.ceil:614", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.ceil", []arg{{wa.F64, 4607182418800017407}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("f64.ceil:615", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.ceil", []arg{{wa.F64, 4607182418800017409}}, arg{wa.F64, 4611686018427387904})
	})
	t.Run("f32.ceil:618", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.ceil", []arg{{wa.F32, 1258291199}}, arg{wa.F32, 1258291200})
	})
	t.Run("f32.ceil:619", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.ceil", []arg{{wa.F32, 3405774847}}, arg{wa.F32, 3405774846})
	})
	t.Run("f64.ceil:620", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.ceil", []arg{{wa.F64, 4841369599423283199}}, arg{wa.F64, 4841369599423283200})
	})
	t.Run("f64.ceil:621", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.ceil", []arg{{wa.F64, 14064741636278059007}}, arg{wa.F64, 14064741636278059006})
	})
	t.Run("f32.ceil:625", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.ceil", []arg{{wa.F32, 1266679807}}, arg{wa.F32, 1266679807})
	})
	t.Run("f32.ceil:626", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.ceil", []arg{{wa.F32, 3414163455}}, arg{wa.F32, 3414163455})
	})
	t.Run("f64.ceil:627", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.ceil", []arg{{wa.F64, 4845873199050653695}}, arg{wa.F64, 4845873199050653695})
	})
	t.Run("f64.ceil:628", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.ceil", []arg{{wa.F64, 14069245235905429503}}, arg{wa.F64, 14069245235905429503})
	})
	t.Run("f32.floor:631", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.floor", []arg{{wa.F32, 3212836863}}, arg{wa.F32, 3212836864})
	})
	t.Run("f32.floor:632", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.floor", []arg{{wa.F32, 3212836865}}, arg{wa.F32, 3221225472})
	})
	t.Run("f64.floor:633", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.floor", []arg{{wa.F64, 13830554455654793215}}, arg{wa.F64, 13830554455654793216})
	})
	t.Run("f64.floor:634", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.floor", []arg{{wa.F64, 13830554455654793217}}, arg{wa.F64, 13835058055282163712})
	})
	t.Run("f32.floor:637", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.floor", []arg{{wa.F32, 3405774847}}, arg{wa.F32, 3405774848})
	})
	t.Run("f32.floor:638", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.floor", []arg{{wa.F32, 1258291199}}, arg{wa.F32, 1258291198})
	})
	t.Run("f64.floor:639", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.floor", []arg{{wa.F64, 14064741636278059007}}, arg{wa.F64, 14064741636278059008})
	})
	t.Run("f64.floor:640", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.floor", []arg{{wa.F64, 4841369599423283199}}, arg{wa.F64, 4841369599423283198})
	})
	t.Run("f32.floor:644", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.floor", []arg{{wa.F32, 1202524032}}, arg{wa.F32, 1202524032})
	})
	t.Run("f64.floor:645", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.floor", []arg{{wa.F64, 4680825439885721600}}, arg{wa.F64, 4680825439885721600})
	})
	t.Run("f32.trunc:648", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.trunc", []arg{{wa.F32, 3405774847}}, arg{wa.F32, 3405774846})
	})
	t.Run("f32.trunc:649", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.trunc", []arg{{wa.F32, 1258291199}}, arg{wa.F32, 1258291198})
	})
	t.Run("f64.trunc:650", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.trunc", []arg{{wa.F64, 14064741636278059007}}, arg{wa.F64, 14064741636278059006})
	})
	t.Run("f64.trunc:651", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.trunc", []arg{{wa.F64, 4841369599423283199}}, arg{wa.F64, 4841369599423283198})
	})
	t.Run("f32.nearest:656", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.nearest", []arg{{wa.F32, 1258291201}}, arg{wa.F32, 1258291201})
	})
	t.Run("f32.nearest:657", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.nearest", []arg{{wa.F32, 1258291202}}, arg{wa.F32, 1258291202})
	})
	t.Run("f32.nearest:658", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.nearest", []arg{{wa.F32, 1056964607}}, arg{wa.F32, 0})
	})
	t.Run("f32.nearest:659", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.nearest", []arg{{wa.F32, 1468006399}}, arg{wa.F32, 1468006399})
	})
	t.Run("f64.nearest:660", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.nearest", []arg{{wa.F64, 4841369599423283201}}, arg{wa.F64, 4841369599423283201})
	})
	t.Run("f64.nearest:661", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.nearest", []arg{{wa.F64, 4841369599423283202}}, arg{wa.F64, 4841369599423283202})
	})
	t.Run("f64.nearest:662", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.nearest", []arg{{wa.F64, 4602678819172646911}}, arg{wa.F64, 0})
	})
	t.Run("f64.nearest:663", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.nearest", []arg{{wa.F64, 5084563979301289983}}, arg{wa.F64, 5084563979301289983})
	})
	t.Run("f32.nearest:667", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.nearest", []arg{{wa.F32, 1083179008}}, arg{wa.F32, 1082130432})
	})
	t.Run("f32.nearest:668", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.nearest", []arg{{wa.F32, 3230662656}}, arg{wa.F32, 3229614080})
	})
	t.Run("f32.nearest:669", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.nearest", []arg{{wa.F32, 3227516928}}, arg{wa.F32, 3229614080})
	})
	t.Run("f64.nearest:670", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.nearest", []arg{{wa.F64, 4616752568008179712}}, arg{wa.F64, 4616189618054758400})
	})
	t.Run("f64.nearest:671", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.nearest", []arg{{wa.F64, 13840124604862955520}}, arg{wa.F64, 13839561654909534208})
	})
	t.Run("f64.nearest:672", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.nearest", []arg{{wa.F64, 13838435755002691584}}, arg{wa.F64, 13839561654909534208})
	})
	t.Run("f32.nearest:675", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.nearest", []arg{{wa.F32, 3405774847}}, arg{wa.F32, 3405774848})
	})
	t.Run("f32.nearest:676", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f32.nearest", []arg{{wa.F32, 1258291199}}, arg{wa.F32, 1258291200})
	})
	t.Run("f64.nearest:677", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.nearest", []arg{{wa.F64, 14064741636278059007}}, arg{wa.F64, 14064741636278059008})
	})
	t.Run("f64.nearest:678", func(t *testing.T) {
		x0.assertReturnInvoke(t, "f64.nearest", []arg{{wa.F64, 4841369599423283199}}, arg{wa.F64, 4841369599423283200})
	})
}

func Test_forward(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "forward.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("even:17", func(t *testing.T) { x0.assertReturnInvoke(t, "even", []arg{{wa.I32, 13}}, arg{wa.I32, 0}) })
	t.Run("even:18", func(t *testing.T) { x0.assertReturnInvoke(t, "even", []arg{{wa.I32, 20}}, arg{wa.I32, 1}) })
	t.Run("odd:19", func(t *testing.T) { x0.assertReturnInvoke(t, "odd", []arg{{wa.I32, 13}}, arg{wa.I32, 1}) })
	t.Run("odd:20", func(t *testing.T) { x0.assertReturnInvoke(t, "odd", []arg{{wa.I32, 20}}, arg{wa.I32, 0}) })
}

func Test_func(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "func.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("type-use-1:241", func(t *testing.T) { x0.assertReturnInvoke(t, "type-use-1", nil, arg{}) })
	t.Run("type-use-2:242", func(t *testing.T) { x0.assertReturnInvoke(t, "type-use-2", nil, arg{wa.I32, 0}) })
	t.Run("type-use-3:243", func(t *testing.T) { x0.assertReturnInvoke(t, "type-use-3", []arg{{wa.I32, 1}}, arg{}) })
	t.Run("type-use-4:245", func(t *testing.T) {
		x0.assertReturnInvoke(t, "type-use-4", []arg{{wa.I32, 1}, {wa.F64, 4607182418800017408}, {wa.I32, 1}}, arg{wa.I32, 0})
	})
	t.Run("type-use-5:248", func(t *testing.T) { x0.assertReturnInvoke(t, "type-use-5", nil, arg{wa.I32, 0}) })
	t.Run("type-use-6:249", func(t *testing.T) { x0.assertReturnInvoke(t, "type-use-6", []arg{{wa.I32, 1}}, arg{}) })
	t.Run("type-use-7:251", func(t *testing.T) {
		x0.assertReturnInvoke(t, "type-use-7", []arg{{wa.I32, 1}, {wa.F64, 4607182418800017408}, {wa.I32, 1}}, arg{wa.I32, 0})
	})
	t.Run("local-first-i32:255", func(t *testing.T) { x0.assertReturnInvoke(t, "local-first-i32", nil, arg{wa.I32, 0}) })
	t.Run("local-first-i64:256", func(t *testing.T) { x0.assertReturnInvoke(t, "local-first-i64", nil, arg{wa.I64, 0}) })
	t.Run("local-first-f32:257", func(t *testing.T) { x0.assertReturnInvoke(t, "local-first-f32", nil, arg{wa.F32, 0}) })
	t.Run("local-first-f64:258", func(t *testing.T) { x0.assertReturnInvoke(t, "local-first-f64", nil, arg{wa.F64, 0}) })
	t.Run("local-second-i32:259", func(t *testing.T) { x0.assertReturnInvoke(t, "local-second-i32", nil, arg{wa.I32, 0}) })
	t.Run("local-second-i64:260", func(t *testing.T) { x0.assertReturnInvoke(t, "local-second-i64", nil, arg{wa.I64, 0}) })
	t.Run("local-second-f32:261", func(t *testing.T) { x0.assertReturnInvoke(t, "local-second-f32", nil, arg{wa.F32, 0}) })
	t.Run("local-second-f64:262", func(t *testing.T) { x0.assertReturnInvoke(t, "local-second-f64", nil, arg{wa.F64, 0}) })
	t.Run("local-mixed:263", func(t *testing.T) { x0.assertReturnInvoke(t, "local-mixed", nil, arg{wa.F64, 0}) })
	t.Run("param-first-i32:266", func(t *testing.T) {
		x0.assertReturnInvoke(t, "param-first-i32", []arg{{wa.I32, 2}, {wa.I32, 3}}, arg{wa.I32, 2})
	})
	t.Run("param-first-i64:269", func(t *testing.T) {
		x0.assertReturnInvoke(t, "param-first-i64", []arg{{wa.I64, 2}, {wa.I64, 3}}, arg{wa.I64, 2})
	})
	t.Run("param-first-f32:272", func(t *testing.T) {
		x0.assertReturnInvoke(t, "param-first-f32", []arg{{wa.F32, 1073741824}, {wa.F32, 1077936128}}, arg{wa.F32, 1073741824})
	})
	t.Run("param-first-f64:275", func(t *testing.T) {
		x0.assertReturnInvoke(t, "param-first-f64", []arg{{wa.F64, 4611686018427387904}, {wa.F64, 4613937818241073152}}, arg{wa.F64, 4611686018427387904})
	})
	t.Run("param-second-i32:278", func(t *testing.T) {
		x0.assertReturnInvoke(t, "param-second-i32", []arg{{wa.I32, 2}, {wa.I32, 3}}, arg{wa.I32, 3})
	})
	t.Run("param-second-i64:281", func(t *testing.T) {
		x0.assertReturnInvoke(t, "param-second-i64", []arg{{wa.I64, 2}, {wa.I64, 3}}, arg{wa.I64, 3})
	})
	t.Run("param-second-f32:284", func(t *testing.T) {
		x0.assertReturnInvoke(t, "param-second-f32", []arg{{wa.F32, 1073741824}, {wa.F32, 1077936128}}, arg{wa.F32, 1077936128})
	})
	t.Run("param-second-f64:287", func(t *testing.T) {
		x0.assertReturnInvoke(t, "param-second-f64", []arg{{wa.F64, 4611686018427387904}, {wa.F64, 4613937818241073152}}, arg{wa.F64, 4613937818241073152})
	})
	t.Run("param-mixed:291", func(t *testing.T) {
		x0.assertReturnInvoke(t, "param-mixed", []arg{{wa.F32, 1065353216}, {wa.I32, 2}, {wa.I64, 3}, {wa.I32, 4}, {wa.F64, 4617878467915022336}, {wa.I32, 6}}, arg{wa.F64, 4617878467915022336})
	})
	t.Run("empty:298", func(t *testing.T) { x0.assertReturnInvoke(t, "empty", nil, arg{}) })
	t.Run("value-void:299", func(t *testing.T) { x0.assertReturnInvoke(t, "value-void", nil, arg{}) })
	t.Run("value-i32:300", func(t *testing.T) { x0.assertReturnInvoke(t, "value-i32", nil, arg{wa.I32, 77}) })
	t.Run("value-i64:301", func(t *testing.T) { x0.assertReturnInvoke(t, "value-i64", nil, arg{wa.I64, 7777}) })
	t.Run("value-f32:302", func(t *testing.T) { x0.assertReturnInvoke(t, "value-f32", nil, arg{wa.F32, 1117480550}) })
	t.Run("value-f64:303", func(t *testing.T) { x0.assertReturnInvoke(t, "value-f64", nil, arg{wa.F64, 4635172994171566817}) })
	t.Run("value-i32-f64:304", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("value-i32-i32-i32:305", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("value-block-void:308", func(t *testing.T) { x0.assertReturnInvoke(t, "value-block-void", nil, arg{}) })
	t.Run("value-block-i32:309", func(t *testing.T) { x0.assertReturnInvoke(t, "value-block-i32", nil, arg{wa.I32, 77}) })
	t.Run("value-block-i32-i64:310", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("return-empty:312", func(t *testing.T) { x0.assertReturnInvoke(t, "return-empty", nil, arg{}) })
	t.Run("return-i32:313", func(t *testing.T) { x0.assertReturnInvoke(t, "return-i32", nil, arg{wa.I32, 78}) })
	t.Run("return-i64:314", func(t *testing.T) { x0.assertReturnInvoke(t, "return-i64", nil, arg{wa.I64, 7878}) })
	t.Run("return-f32:315", func(t *testing.T) { x0.assertReturnInvoke(t, "return-f32", nil, arg{wa.F32, 1117611622}) })
	t.Run("return-f64:316", func(t *testing.T) { x0.assertReturnInvoke(t, "return-f64", nil, arg{wa.F64, 4635244066603186258}) })
	t.Run("return-i32-f64:317", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("return-i32-i32-i32:318", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("return-block-i32:321", func(t *testing.T) { x0.assertReturnInvoke(t, "return-block-i32", nil, arg{wa.I32, 77}) })
	t.Run("return-block-i32-i64:322", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("break-empty:324", func(t *testing.T) { x0.assertReturnInvoke(t, "break-empty", nil, arg{}) })
	t.Run("break-i32:325", func(t *testing.T) { x0.assertReturnInvoke(t, "break-i32", nil, arg{wa.I32, 79}) })
	t.Run("break-i64:326", func(t *testing.T) { x0.assertReturnInvoke(t, "break-i64", nil, arg{wa.I64, 7979}) })
	t.Run("break-f32:327", func(t *testing.T) { x0.assertReturnInvoke(t, "break-f32", nil, arg{wa.F32, 1117768909}) })
	t.Run("break-f64:328", func(t *testing.T) { x0.assertReturnInvoke(t, "break-f64", nil, arg{wa.F64, 4635315139034805699}) })
	t.Run("break-i32-f64:329", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("break-i32-i32-i32:330", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("break-block-i32:333", func(t *testing.T) { x0.assertReturnInvoke(t, "break-block-i32", nil, arg{wa.I32, 77}) })
	t.Run("break-block-i32-i64:334", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("break-br_if-empty:336", func(t *testing.T) { x0.assertReturnInvoke(t, "break-br_if-empty", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("break-br_if-empty:337", func(t *testing.T) { x0.assertReturnInvoke(t, "break-br_if-empty", []arg{{wa.I32, 2}}, arg{}) })
	t.Run("break-br_if-num:338", func(t *testing.T) { x0.assertReturnInvoke(t, "break-br_if-num", []arg{{wa.I32, 0}}, arg{wa.I32, 51}) })
	t.Run("break-br_if-num:339", func(t *testing.T) { x0.assertReturnInvoke(t, "break-br_if-num", []arg{{wa.I32, 1}}, arg{wa.I32, 50}) })
	t.Run("break-br_if-num-num:340", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("break-br_if-num-num:343", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("break-br_table-empty:347", func(t *testing.T) { x0.assertReturnInvoke(t, "break-br_table-empty", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("break-br_table-empty:348", func(t *testing.T) { x0.assertReturnInvoke(t, "break-br_table-empty", []arg{{wa.I32, 1}}, arg{}) })
	t.Run("break-br_table-empty:349", func(t *testing.T) { x0.assertReturnInvoke(t, "break-br_table-empty", []arg{{wa.I32, 5}}, arg{}) })
	t.Run("break-br_table-empty:350", func(t *testing.T) {
		x0.assertReturnInvoke(t, "break-br_table-empty", []arg{{wa.I32, 4294967295}}, arg{})
	})
	t.Run("break-br_table-num:351", func(t *testing.T) {
		x0.assertReturnInvoke(t, "break-br_table-num", []arg{{wa.I32, 0}}, arg{wa.I32, 50})
	})
	t.Run("break-br_table-num:352", func(t *testing.T) {
		x0.assertReturnInvoke(t, "break-br_table-num", []arg{{wa.I32, 1}}, arg{wa.I32, 50})
	})
	t.Run("break-br_table-num:353", func(t *testing.T) {
		x0.assertReturnInvoke(t, "break-br_table-num", []arg{{wa.I32, 10}}, arg{wa.I32, 50})
	})
	t.Run("break-br_table-num:354", func(t *testing.T) {
		x0.assertReturnInvoke(t, "break-br_table-num", []arg{{wa.I32, 4294967196}}, arg{wa.I32, 50})
	})
	t.Run("break-br_table-num-num:355", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("break-br_table-num-num:358", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("break-br_table-num-num:361", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("break-br_table-num-num:364", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("break-br_table-nested-empty:367", func(t *testing.T) { x0.assertReturnInvoke(t, "break-br_table-nested-empty", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("break-br_table-nested-empty:368", func(t *testing.T) { x0.assertReturnInvoke(t, "break-br_table-nested-empty", []arg{{wa.I32, 1}}, arg{}) })
	t.Run("break-br_table-nested-empty:369", func(t *testing.T) { x0.assertReturnInvoke(t, "break-br_table-nested-empty", []arg{{wa.I32, 3}}, arg{}) })
	t.Run("break-br_table-nested-empty:370", func(t *testing.T) {
		x0.assertReturnInvoke(t, "break-br_table-nested-empty", []arg{{wa.I32, 4294967294}}, arg{})
	})
	t.Run("break-br_table-nested-num:372", func(t *testing.T) {
		x0.assertReturnInvoke(t, "break-br_table-nested-num", []arg{{wa.I32, 0}}, arg{wa.I32, 52})
	})
	t.Run("break-br_table-nested-num:375", func(t *testing.T) {
		x0.assertReturnInvoke(t, "break-br_table-nested-num", []arg{{wa.I32, 1}}, arg{wa.I32, 50})
	})
	t.Run("break-br_table-nested-num:378", func(t *testing.T) {
		x0.assertReturnInvoke(t, "break-br_table-nested-num", []arg{{wa.I32, 2}}, arg{wa.I32, 52})
	})
	t.Run("break-br_table-nested-num:381", func(t *testing.T) {
		x0.assertReturnInvoke(t, "break-br_table-nested-num", []arg{{wa.I32, 4294967293}}, arg{wa.I32, 52})
	})
	t.Run("break-br_table-nested-num-num:384", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("break-br_table-nested-num-num:388", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("break-br_table-nested-num-num:392", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("break-br_table-nested-num-num:396", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("large-sig:401", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("init-local-i32:414", func(t *testing.T) { x0.assertReturnInvoke(t, "init-local-i32", nil, arg{wa.I32, 0}) })
	t.Run("init-local-i64:415", func(t *testing.T) { x0.assertReturnInvoke(t, "init-local-i64", nil, arg{wa.I64, 0}) })
	t.Run("init-local-f32:416", func(t *testing.T) { x0.assertReturnInvoke(t, "init-local-f32", nil, arg{wa.F32, 0}) })
	t.Run("init-local-f64:417", func(t *testing.T) { x0.assertReturnInvoke(t, "init-local-f64", nil, arg{wa.F64, 0}) })
	x1 := instantiateSpecTest(t, "1", "func.1.wasm")
	t.Cleanup(func() { x1.close(t) })
	t.Run("assert_invalid:436", func(t *testing.T) { assertInvalidSpec(t, "func.2.wasm", "unknown type") })
	t.Run("assert_malformed:448", func(t *testing.T) { t.Skip("text format not supported") })
	x2 := instantiateSpecTest(t, "2", "func.4.wasm")
	t.Cleanup(func() { x2.close(t) })
	t.Run("f:483", func(t *testing.T) { x2.assertReturnInvoke(t, "f", []arg{{wa.I32, 42}}, arg{wa.I32, 0}) })
	t.Run("g:484", func(t *testing.T) { x2.assertReturnInvoke(t, "g", []arg{{wa.I32, 42}}, arg{wa.I32, 0}) })
	t.Run("p:485", func(t *testing.T) { x2.assertReturnInvoke(t, "p", nil, arg{wa.I32, 42}) })
	x3 := instantiateSpecTest(t, "3", "func.5.wasm")
	t.Cleanup(func() { x3.close(t) })
	t.Run("signature-explicit-reused:551", func(t *testing.T) { x3.assertReturnInvoke(t, "signature-explicit-reused", nil, arg{}) })
	t.Run("signature-implicit-reused:552", func(t *testing.T) { x3.assertReturnInvoke(t, "signature-implicit-reused", nil, arg{}) })
	t.Run("signature-explicit-duplicate:553", func(t *testing.T) { x3.assertReturnInvoke(t, "signature-explicit-duplicate", nil, arg{}) })
	t.Run("signature-implicit-duplicate:554", func(t *testing.T) { x3.assertReturnInvoke(t, "signature-implicit-duplicate", nil, arg{}) })
	t.Run("assert_malformed:560", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:567", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:574", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:581", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:588", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:595", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:602", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:609", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:616", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:623", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_invalid:634", func(t *testing.T) { assertInvalidSpec(t, "func.16.wasm", "type mismatch") })
	t.Run("assert_invalid:638", func(t *testing.T) { assertInvalidSpec(t, "func.17.wasm", "type mismatch") })
	t.Run("assert_invalid:642", func(t *testing.T) { assertInvalidSpec(t, "func.18.wasm", "type mismatch") })
	t.Run("assert_invalid:650", func(t *testing.T) { assertInvalidSpec(t, "func.19.wasm", "type mismatch") })
	t.Run("assert_invalid:654", func(t *testing.T) { assertInvalidSpec(t, "func.20.wasm", "type mismatch") })
	t.Run("assert_invalid:658", func(t *testing.T) { assertInvalidSpec(t, "func.21.wasm", "type mismatch") })
	t.Run("assert_invalid:666", func(t *testing.T) { assertInvalidSpec(t, "func.22.wasm", "type mismatch") })
	t.Run("assert_invalid:670", func(t *testing.T) { assertInvalidSpec(t, "func.23.wasm", "type mismatch") })
	t.Run("assert_invalid:674", func(t *testing.T) { assertInvalidSpec(t, "func.24.wasm", "type mismatch") })
	t.Run("assert_invalid:678", func(t *testing.T) { assertInvalidSpec(t, "func.25.wasm", "type mismatch") })
	t.Run("assert_invalid:682", func(t *testing.T) { assertInvalidSpec(t, "func.26.wasm", "type mismatch") })
	t.Run("assert_invalid:687", func(t *testing.T) { assertInvalidSpec(t, "func.27.wasm", "type mismatch") })
	t.Run("assert_invalid:693", func(t *testing.T) { assertInvalidSpec(t, "func.28.wasm", "type mismatch") })
	t.Run("assert_invalid:699", func(t *testing.T) { assertInvalidSpec(t, "func.29.wasm", "type mismatch") })
	t.Run("assert_invalid:705", func(t *testing.T) { assertInvalidSpec(t, "func.30.wasm", "type mismatch") })
	t.Run("assert_invalid:711", func(t *testing.T) { assertInvalidSpec(t, "func.31.wasm", "type mismatch") })
	t.Run("assert_invalid:717", func(t *testing.T) { assertInvalidSpec(t, "func.32.wasm", "type mismatch") })
	t.Run("assert_invalid:723", func(t *testing.T) { assertInvalidSpec(t, "func.33.wasm", "type mismatch") })
	t.Run("assert_invalid:730", func(t *testing.T) { assertInvalidSpec(t, "func.34.wasm", "type mismatch") })
	t.Run("assert_invalid:736", func(t *testing.T) { assertInvalidSpec(t, "func.35.wasm", "type mismatch") })
	t.Run("assert_invalid:742", func(t *testing.T) { assertInvalidSpec(t, "func.36.wasm", "type mismatch") })
	t.Run("assert_invalid:748", func(t *testing.T) { assertInvalidSpec(t, "func.37.wasm", "type mismatch") })
	t.Run("assert_invalid:754", func(t *testing.T) { assertInvalidSpec(t, "func.38.wasm", "type mismatch") })
	t.Run("assert_invalid:760", func(t *testing.T) { assertInvalidSpec(t, "func.39.wasm", "type mismatch") })
	t.Run("assert_invalid:767", func(t *testing.T) { assertInvalidSpec(t, "func.40.wasm", "type mismatch") })
	t.Run("assert_invalid:773", func(t *testing.T) { assertInvalidSpec(t, "func.41.wasm", "type mismatch") })
	t.Run("assert_invalid:779", func(t *testing.T) { assertInvalidSpec(t, "func.42.wasm", "type mismatch") })
	t.Run("assert_invalid:785", func(t *testing.T) { assertInvalidSpec(t, "func.43.wasm", "type mismatch") })
	t.Run("assert_invalid:791", func(t *testing.T) { assertInvalidSpec(t, "func.44.wasm", "type mismatch") })
	t.Run("assert_invalid:797", func(t *testing.T) { assertInvalidSpec(t, "func.45.wasm", "type mismatch") })
	t.Run("assert_invalid:803", func(t *testing.T) { assertInvalidSpec(t, "func.46.wasm", "type mismatch") })
	t.Run("assert_invalid:809", func(t *testing.T) { assertInvalidSpec(t, "func.47.wasm", "type mismatch") })
	t.Run("assert_invalid:815", func(t *testing.T) { assertInvalidSpec(t, "func.48.wasm", "type mismatch") })
	t.Run("assert_invalid:822", func(t *testing.T) { assertInvalidSpec(t, "func.49.wasm", "type mismatch") })
	t.Run("assert_invalid:828", func(t *testing.T) { assertInvalidSpec(t, "func.50.wasm", "type mismatch") })
	t.Run("assert_invalid:834", func(t *testing.T) { assertInvalidSpec(t, "func.51.wasm", "type mismatch") })
	t.Run("assert_invalid:840", func(t *testing.T) { assertInvalidSpec(t, "func.52.wasm", "type mismatch") })
	t.Run("assert_invalid:846", func(t *testing.T) { assertInvalidSpec(t, "func.53.wasm", "type mismatch") })
	t.Run("assert_invalid:852", func(t *testing.T) { assertInvalidSpec(t, "func.54.wasm", "type mismatch") })
	t.Run("assert_invalid:858", func(t *testing.T) { assertInvalidSpec(t, "func.55.wasm", "type mismatch") })
	t.Run("assert_invalid:864", func(t *testing.T) { assertInvalidSpec(t, "func.56.wasm", "type mismatch") })
	t.Run("assert_invalid:870", func(t *testing.T) { assertInvalidSpec(t, "func.57.wasm", "type mismatch") })
	t.Run("assert_invalid:877", func(t *testing.T) { assertInvalidSpec(t, "func.58.wasm", "type mismatch") })
	t.Run("assert_invalid:883", func(t *testing.T) { assertInvalidSpec(t, "func.59.wasm", "type mismatch") })
	t.Run("assert_invalid:889", func(t *testing.T) { assertInvalidSpec(t, "func.60.wasm", "type mismatch") })
	t.Run("assert_invalid:895", func(t *testing.T) { assertInvalidSpec(t, "func.61.wasm", "type mismatch") })
	t.Run("assert_invalid:901", func(t *testing.T) { assertInvalidSpec(t, "func.62.wasm", "type mismatch") })
	t.Run("assert_invalid:907", func(t *testing.T) { assertInvalidSpec(t, "func.63.wasm", "type mismatch") })
	t.Run("assert_malformed:917", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:921", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:925", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:929", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:933", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:937", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:943", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:947", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:951", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:956", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:958", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:960", func(t *testing.T) { t.Skip("text format not supported") })
}

func Test_func_ptrs(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "func_ptrs.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("one:27", func(t *testing.T) { x0.assertReturnInvoke(t, "one", nil, arg{wa.I32, 13}) })
	t.Run("two:28", func(t *testing.T) { x0.assertReturnInvoke(t, "two", []arg{{wa.I32, 13}}, arg{wa.I32, 14}) })
	t.Run("three:29", func(t *testing.T) { x0.assertReturnInvoke(t, "three", []arg{{wa.I32, 13}}, arg{wa.I32, 11}) })
	t.Run("four:30", func(t *testing.T) { x0.invoke(t, "four", []arg{{wa.I32, 83}}) })
	t.Run("assert_invalid:32", func(t *testing.T) { assertInvalidSpec(t, "func_ptrs.1.wasm", "unknown table") })
	t.Run("assert_invalid:33", func(t *testing.T) { assertInvalidSpec(t, "func_ptrs.2.wasm", "unknown table") })
	t.Run("assert_invalid:36", func(t *testing.T) { assertInvalidSpec(t, "func_ptrs.3.wasm", "type mismatch") })
	t.Run("assert_invalid:40", func(t *testing.T) { assertInvalidSpec(t, "func_ptrs.4.wasm", "constant expression required") })
	t.Run("assert_invalid:44", func(t *testing.T) { assertInvalidSpec(t, "func_ptrs.5.wasm", "constant expression required") })
	t.Run("assert_invalid:48", func(t *testing.T) { assertInvalidSpec(t, "func_ptrs.6.wasm", "unknown type") })
	t.Run("assert_invalid:49", func(t *testing.T) { assertInvalidSpec(t, "func_ptrs.7.wasm", "unknown type") })
	x1 := instantiateSpecTest(t, "1", "func_ptrs.8.wasm")
	t.Cleanup(func() { x1.close(t) })
	t.Run("callt:71", func(t *testing.T) { x1.assertReturnInvoke(t, "callt", []arg{{wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("callt:72", func(t *testing.T) { x1.assertReturnInvoke(t, "callt", []arg{{wa.I32, 1}}, arg{wa.I32, 2}) })
	t.Run("callt:73", func(t *testing.T) { x1.assertReturnInvoke(t, "callt", []arg{{wa.I32, 2}}, arg{wa.I32, 3}) })
	t.Run("callt:74", func(t *testing.T) { x1.assertReturnInvoke(t, "callt", []arg{{wa.I32, 3}}, arg{wa.I32, 4}) })
	t.Run("callt:75", func(t *testing.T) { x1.assertReturnInvoke(t, "callt", []arg{{wa.I32, 4}}, arg{wa.I32, 5}) })
	t.Run("callt:76", func(t *testing.T) { x1.assertReturnInvoke(t, "callt", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("callt:77", func(t *testing.T) { x1.assertReturnInvoke(t, "callt", []arg{{wa.I32, 6}}, arg{wa.I32, 3}) })
	t.Run("callt:78", func(t *testing.T) {
		x1.assertTrap(t, "callt", []arg{{wa.I32, 7}}, arg{Type: wa.I32}, "undefined element")
	})
	t.Run("callt:79", func(t *testing.T) {
		x1.assertTrap(t, "callt", []arg{{wa.I32, 100}}, arg{Type: wa.I32}, "undefined element")
	})
	t.Run("callt:80", func(t *testing.T) {
		x1.assertTrap(t, "callt", []arg{{wa.I32, 4294967295}}, arg{Type: wa.I32}, "undefined element")
	})
	t.Run("callu:82", func(t *testing.T) { x1.assertReturnInvoke(t, "callu", []arg{{wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("callu:83", func(t *testing.T) { x1.assertReturnInvoke(t, "callu", []arg{{wa.I32, 1}}, arg{wa.I32, 2}) })
	t.Run("callu:84", func(t *testing.T) { x1.assertReturnInvoke(t, "callu", []arg{{wa.I32, 2}}, arg{wa.I32, 3}) })
	t.Run("callu:85", func(t *testing.T) { x1.assertReturnInvoke(t, "callu", []arg{{wa.I32, 3}}, arg{wa.I32, 4}) })
	t.Run("callu:86", func(t *testing.T) { x1.assertReturnInvoke(t, "callu", []arg{{wa.I32, 4}}, arg{wa.I32, 5}) })
	t.Run("callu:87", func(t *testing.T) { x1.assertReturnInvoke(t, "callu", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("callu:88", func(t *testing.T) { x1.assertReturnInvoke(t, "callu", []arg{{wa.I32, 6}}, arg{wa.I32, 3}) })
	t.Run("callu:89", func(t *testing.T) {
		x1.assertTrap(t, "callu", []arg{{wa.I32, 7}}, arg{Type: wa.I32}, "undefined element")
	})
	t.Run("callu:90", func(t *testing.T) {
		x1.assertTrap(t, "callu", []arg{{wa.I32, 100}}, arg{Type: wa.I32}, "undefined element")
	})
	t.Run("callu:91", func(t *testing.T) {
		x1.assertTrap(t, "callu", []arg{{wa.I32, 4294967295}}, arg{Type: wa.I32}, "undefined element")
	})
	x2 := instantiateSpecTest(t, "2", "func_ptrs.9.wasm")
	t.Cleanup(func() { x2.close(t) })
	t.Run("callt:105", func(t *testing.T) { x2.assertReturnInvoke(t, "callt", []arg{{wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("callt:106", func(t *testing.T) { x2.assertReturnInvoke(t, "callt", []arg{{wa.I32, 1}}, arg{wa.I32, 2}) })
}

func Test_global(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "global.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("get-a:196", func(t *testing.T) { x0.assertReturnInvoke(t, "get-a", nil, arg{wa.I32, 4294967294}) })
	t.Run("get-b:197", func(t *testing.T) { x0.assertReturnInvoke(t, "get-b", nil, arg{wa.I64, 18446744073709551611}) })
	t.Run("get-r:198", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get-mr:199", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get-x:200", func(t *testing.T) { x0.assertReturnInvoke(t, "get-x", nil, arg{wa.I32, 4294967284}) })
	t.Run("get-y:201", func(t *testing.T) { x0.assertReturnInvoke(t, "get-y", nil, arg{wa.I64, 18446744073709551601}) })
	t.Run("get-z1:202", func(t *testing.T) { x0.assertReturnInvoke(t, "get-z1", nil, arg{wa.I32, 666}) })
	t.Run("get-z2:203", func(t *testing.T) { x0.assertReturnInvoke(t, "get-z2", nil, arg{wa.I64, 666}) })
	t.Run("get-3:205", func(t *testing.T) { x0.assertReturnInvoke(t, "get-3", nil, arg{wa.F32, 3225419776}) })
	t.Run("get-4:206", func(t *testing.T) { x0.assertReturnInvoke(t, "get-4", nil, arg{wa.F64, 13839561654909534208}) })
	t.Run("get-7:207", func(t *testing.T) { x0.assertReturnInvoke(t, "get-7", nil, arg{wa.F32, 3243245568}) })
	t.Run("get-8:208", func(t *testing.T) { x0.assertReturnInvoke(t, "get-8", nil, arg{wa.F64, 13847442954257432576}) })
	t.Run("set-x:210", func(t *testing.T) { x0.assertReturnInvoke(t, "set-x", []arg{{wa.I32, 6}}, arg{}) })
	t.Run("set-y:211", func(t *testing.T) { x0.assertReturnInvoke(t, "set-y", []arg{{wa.I64, 7}}, arg{}) })
	t.Run("set-7:213", func(t *testing.T) { x0.assertReturnInvoke(t, "set-7", []arg{{wa.F32, 1090519040}}, arg{}) })
	t.Run("set-8:214", func(t *testing.T) { x0.assertReturnInvoke(t, "set-8", []arg{{wa.F64, 4621256167635550208}}, arg{}) })
	t.Run("get-x:216", func(t *testing.T) { x0.assertReturnInvoke(t, "get-x", nil, arg{wa.I32, 6}) })
	t.Run("get-y:217", func(t *testing.T) { x0.assertReturnInvoke(t, "get-y", nil, arg{wa.I64, 7}) })
	t.Run("get-7:218", func(t *testing.T) { x0.assertReturnInvoke(t, "get-7", nil, arg{wa.F32, 1090519040}) })
	t.Run("get-8:219", func(t *testing.T) { x0.assertReturnInvoke(t, "get-8", nil, arg{wa.F64, 4621256167635550208}) })
	t.Run("set-7:221", func(t *testing.T) { x0.assertReturnInvoke(t, "set-7", []arg{{wa.F32, 1090519040}}, arg{}) })
	t.Run("set-8:222", func(t *testing.T) { x0.assertReturnInvoke(t, "set-8", []arg{{wa.F64, 4621256167635550208}}, arg{}) })
	t.Run("set-mr:223", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get-x:225", func(t *testing.T) { x0.assertReturnInvoke(t, "get-x", nil, arg{wa.I32, 6}) })
	t.Run("get-y:226", func(t *testing.T) { x0.assertReturnInvoke(t, "get-y", nil, arg{wa.I64, 7}) })
	t.Run("get-7:227", func(t *testing.T) { x0.assertReturnInvoke(t, "get-7", nil, arg{wa.F32, 1090519040}) })
	t.Run("get-8:228", func(t *testing.T) { x0.assertReturnInvoke(t, "get-8", nil, arg{wa.F64, 4621256167635550208}) })
	t.Run("get-mr:229", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("as-select-first:231", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-first", nil, arg{wa.I32, 6}) })
	t.Run("as-select-mid:232", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-mid", nil, arg{wa.I32, 2}) })
	t.Run("as-select-last:233", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-last", nil, arg{wa.I32, 2}) })
	t.Run("as-loop-first:235", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-first", nil, arg{wa.I32, 6}) })
	t.Run("as-loop-mid:236", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-mid", nil, arg{wa.I32, 6}) })
	t.Run("as-loop-last:237", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-last", nil, arg{wa.I32, 6}) })
	t.Run("as-if-condition:239", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-condition", nil, arg{wa.I32, 2}) })
	t.Run("as-if-then:240", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-then", nil, arg{wa.I32, 6}) })
	t.Run("as-if-else:241", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-else", nil, arg{wa.I32, 6}) })
	t.Run("as-br_if-first:243", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-first", nil, arg{wa.I32, 6}) })
	t.Run("as-br_if-last:244", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-last", nil, arg{wa.I32, 2}) })
	t.Run("as-br_table-first:246", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-first", nil, arg{wa.I32, 6}) })
	t.Run("as-br_table-last:247", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-last", nil, arg{wa.I32, 2}) })
	t.Run("as-call_indirect-first:249", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-first", nil, arg{wa.I32, 6}) })
	t.Run("as-call_indirect-mid:250", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-mid", nil, arg{wa.I32, 2}) })
	t.Run("as-call_indirect-last:251", func(t *testing.T) {
		x0.assertTrap(t, "as-call_indirect-last", nil, arg{Type: wa.I32}, "undefined element")
	})
	t.Run("as-store-first:253", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-first", nil, arg{}) })
	t.Run("as-store-last:254", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-last", nil, arg{}) })
	t.Run("as-load-operand:255", func(t *testing.T) { x0.assertReturnInvoke(t, "as-load-operand", nil, arg{wa.I32, 1}) })
	t.Run("as-memory.grow-value:256", func(t *testing.T) { x0.assertReturnInvoke(t, "as-memory.grow-value", nil, arg{wa.I32, 1}) })
	t.Run("as-call-value:258", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call-value", nil, arg{wa.I32, 6}) })
	t.Run("as-return-value:260", func(t *testing.T) { x0.assertReturnInvoke(t, "as-return-value", nil, arg{wa.I32, 6}) })
	t.Run("as-drop-operand:261", func(t *testing.T) { x0.assertReturnInvoke(t, "as-drop-operand", nil, arg{}) })
	t.Run("as-br-value:262", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br-value", nil, arg{wa.I32, 6}) })
	t.Run("as-local.set-value:264", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.set-value", []arg{{wa.I32, 1}}, arg{wa.I32, 6}) })
	t.Run("as-local.tee-value:265", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.tee-value", []arg{{wa.I32, 1}}, arg{wa.I32, 6}) })
	t.Run("as-global.set-value:266", func(t *testing.T) { x0.assertReturnInvoke(t, "as-global.set-value", nil, arg{wa.I32, 6}) })
	t.Run("as-unary-operand:268", func(t *testing.T) { x0.assertReturnInvoke(t, "as-unary-operand", nil, arg{wa.I32, 0}) })
	t.Run("as-binary-operand:269", func(t *testing.T) { x0.assertReturnInvoke(t, "as-binary-operand", nil, arg{wa.I32, 36}) })
	t.Run("as-compare-operand:270", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-operand", nil, arg{wa.I32, 1}) })
	t.Run("assert_invalid:273", func(t *testing.T) { assertInvalidSpec(t, "global.1.wasm", "global is immutable") })
	t.Run("assert_invalid:278", func(t *testing.T) { assertInvalidSpec(t, "global.2.wasm", "global is immutable") })
	x1 := instantiateSpecTest(t, "1", "global.3.wasm")
	t.Cleanup(func() { x1.close(t) })
	x2 := instantiateSpecTest(t, "2", "global.4.wasm")
	t.Cleanup(func() { x2.close(t) })
	t.Run("assert_invalid:287", func(t *testing.T) { assertInvalidSpec(t, "global.5.wasm", "constant expression required") })
	t.Run("assert_invalid:292", func(t *testing.T) { assertInvalidSpec(t, "global.6.wasm", "constant expression required") })
	t.Run("assert_invalid:297", func(t *testing.T) { assertInvalidSpec(t, "global.7.wasm", "constant expression required") })
	t.Run("assert_invalid:302", func(t *testing.T) { assertInvalidSpec(t, "global.8.wasm", "constant expression required") })
	t.Run("assert_invalid:307", func(t *testing.T) { assertInvalidSpec(t, "global.9.wasm", "constant expression required") })
	t.Run("assert_invalid:312", func(t *testing.T) { assertInvalidSpec(t, "global.10.wasm", "constant expression required") })
	t.Run("assert_invalid:317", func(t *testing.T) { assertInvalidSpec(t, "global.11.wasm", "type mismatch") })
	t.Run("assert_invalid:322", func(t *testing.T) { assertInvalidSpec(t, "global.12.wasm", "type mismatch") })
	t.Run("assert_invalid:327", func(t *testing.T) { assertInvalidSpec(t, "global.13.wasm", "type mismatch") })
	t.Run("assert_invalid:332", func(t *testing.T) { assertInvalidSpec(t, "global.14.wasm", "type mismatch") })
	t.Run("assert_invalid:337", func(t *testing.T) { assertInvalidSpec(t, "global.15.wasm", "type mismatch") })
	t.Run("assert_invalid:342", func(t *testing.T) { assertInvalidSpec(t, "global.16.wasm", "type mismatch") })
	t.Run("assert_invalid:347", func(t *testing.T) { assertInvalidSpec(t, "global.17.wasm", "unknown global") })
	t.Run("assert_invalid:352", func(t *testing.T) { assertInvalidSpec(t, "global.18.wasm", "unknown global") })
	t.Run("assert_invalid:357", func(t *testing.T) { assertInvalidSpec(t, "global.19.wasm", "unknown global") })
	t.Run("assert_invalid:362", func(t *testing.T) { assertInvalidSpec(t, "global.20.wasm", "constant expression required") })
	x3 := instantiateSpecTest(t, "3", "global.21.wasm")
	t.Cleanup(func() { x3.close(t) })
	t.Run("assert_malformed:370", func(t *testing.T) { assertMalformedSpec(t, "global.22.wasm", "malformed mutability") })
	t.Run("assert_malformed:383", func(t *testing.T) { assertMalformedSpec(t, "global.23.wasm", "malformed mutability") })
	x4 := instantiateSpecTest(t, "4", "global.24.wasm")
	t.Cleanup(func() { x4.close(t) })
	t.Run("assert_malformed:400", func(t *testing.T) { assertMalformedSpec(t, "global.25.wasm", "malformed mutability") })
	t.Run("assert_malformed:412", func(t *testing.T) { assertMalformedSpec(t, "global.26.wasm", "malformed mutability") })
	t.Run("assert_invalid:426", func(t *testing.T) { assertInvalidSpec(t, "global.27.wasm", "unknown global") })
	t.Run("assert_invalid:431", func(t *testing.T) { assertInvalidSpec(t, "global.28.wasm", "unknown global") })
	t.Run("assert_invalid:439", func(t *testing.T) { assertInvalidSpec(t, "global.29.wasm", "unknown global") })
	t.Run("assert_invalid:447", func(t *testing.T) { assertInvalidSpec(t, "global.30.wasm", "unknown global") })
	t.Run("assert_invalid:457", func(t *testing.T) { assertInvalidSpec(t, "global.31.wasm", "unknown global") })
	t.Run("assert_invalid:462", func(t *testing.T) { assertInvalidSpec(t, "global.32.wasm", "unknown global") })
	t.Run("assert_invalid:470", func(t *testing.T) { assertInvalidSpec(t, "global.33.wasm", "unknown global") })
	t.Run("assert_invalid:478", func(t *testing.T) { assertInvalidSpec(t, "global.34.wasm", "unknown global") })
	t.Run("assert_invalid:488", func(t *testing.T) { assertInvalidSpec(t, "global.35.wasm", "type mismatch") })
	t.Run("assert_invalid:497", func(t *testing.T) { assertInvalidSpec(t, "global.36.wasm", "type mismatch") })
	t.Run("assert_invalid:507", func(t *testing.T) { assertInvalidSpec(t, "global.37.wasm", "type mismatch") })
	t.Run("assert_invalid:517", func(t *testing.T) { assertInvalidSpec(t, "global.38.wasm", "type mismatch") })
	t.Run("assert_invalid:527", func(t *testing.T) { assertInvalidSpec(t, "global.39.wasm", "type mismatch") })
	t.Run("assert_invalid:537", func(t *testing.T) { assertInvalidSpec(t, "global.40.wasm", "type mismatch") })
	t.Run("assert_invalid:547", func(t *testing.T) { assertInvalidSpec(t, "global.41.wasm", "type mismatch") })
	t.Run("assert_invalid:557", func(t *testing.T) { assertInvalidSpec(t, "global.42.wasm", "type mismatch") })
	t.Run("assert_invalid:567", func(t *testing.T) { assertInvalidSpec(t, "global.43.wasm", "type mismatch") })
	t.Run("assert_invalid:576", func(t *testing.T) { assertInvalidSpec(t, "global.44.wasm", "type mismatch") })
	t.Run("assert_invalid:585", func(t *testing.T) { assertInvalidSpec(t, "global.45.wasm", "type mismatch") })
	t.Run("assert_invalid:595", func(t *testing.T) { assertInvalidSpec(t, "global.46.wasm", "type mismatch") })
	t.Run("assert_malformed:613", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:617", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:621", func(t *testing.T) { t.Skip("text format not supported") })
}

func Test_i32(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "i32.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("add:37", func(t *testing.T) { x0.assertReturnInvoke(t, "add", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I32, 2}) })
	t.Run("add:38", func(t *testing.T) { x0.assertReturnInvoke(t, "add", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("add:39", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.I32, 4294967295}, {wa.I32, 4294967295}}, arg{wa.I32, 4294967294})
	})
	t.Run("add:40", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.I32, 4294967295}, {wa.I32, 1}}, arg{wa.I32, 0})
	})
	t.Run("add:41", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.I32, 2147483647}, {wa.I32, 1}}, arg{wa.I32, 2147483648})
	})
	t.Run("add:42", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.I32, 2147483648}, {wa.I32, 4294967295}}, arg{wa.I32, 2147483647})
	})
	t.Run("add:43", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.I32, 2147483648}, {wa.I32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("add:44", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.I32, 1073741823}, {wa.I32, 1}}, arg{wa.I32, 1073741824})
	})
	t.Run("sub:46", func(t *testing.T) { x0.assertReturnInvoke(t, "sub", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("sub:47", func(t *testing.T) { x0.assertReturnInvoke(t, "sub", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("sub:48", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.I32, 4294967295}, {wa.I32, 4294967295}}, arg{wa.I32, 0})
	})
	t.Run("sub:49", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.I32, 2147483647}, {wa.I32, 4294967295}}, arg{wa.I32, 2147483648})
	})
	t.Run("sub:50", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.I32, 2147483648}, {wa.I32, 1}}, arg{wa.I32, 2147483647})
	})
	t.Run("sub:51", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.I32, 2147483648}, {wa.I32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("sub:52", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.I32, 1073741823}, {wa.I32, 4294967295}}, arg{wa.I32, 1073741824})
	})
	t.Run("mul:54", func(t *testing.T) { x0.assertReturnInvoke(t, "mul", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("mul:55", func(t *testing.T) { x0.assertReturnInvoke(t, "mul", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("mul:56", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.I32, 4294967295}, {wa.I32, 4294967295}}, arg{wa.I32, 1})
	})
	t.Run("mul:57", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.I32, 268435456}, {wa.I32, 4096}}, arg{wa.I32, 0})
	})
	t.Run("mul:58", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.I32, 2147483648}, {wa.I32, 0}}, arg{wa.I32, 0})
	})
	t.Run("mul:59", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.I32, 2147483648}, {wa.I32, 4294967295}}, arg{wa.I32, 2147483648})
	})
	t.Run("mul:60", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.I32, 2147483647}, {wa.I32, 4294967295}}, arg{wa.I32, 2147483649})
	})
	t.Run("mul:61", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.I32, 19088743}, {wa.I32, 1985229328}}, arg{wa.I32, 898528368})
	})
	t.Run("mul:62", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.I32, 2147483647}, {wa.I32, 2147483647}}, arg{wa.I32, 1})
	})
	t.Run("div_s:64", func(t *testing.T) {
		x0.assertTrap(t, "div_s", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{Type: wa.I32}, "integer divide by zero")
	})
	t.Run("div_s:65", func(t *testing.T) {
		x0.assertTrap(t, "div_s", []arg{{wa.I32, 0}, {wa.I32, 0}}, arg{Type: wa.I32}, "integer divide by zero")
	})
	t.Run("div_s:66", func(t *testing.T) {
		x0.assertTrap(t, "div_s", []arg{{wa.I32, 2147483648}, {wa.I32, 4294967295}}, arg{Type: wa.I32}, "integer overflow")
	})
	t.Run("div_s:67", func(t *testing.T) {
		x0.assertTrap(t, "div_s", []arg{{wa.I32, 2147483648}, {wa.I32, 0}}, arg{Type: wa.I32}, "integer divide by zero")
	})
	t.Run("div_s:68", func(t *testing.T) { x0.assertReturnInvoke(t, "div_s", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("div_s:69", func(t *testing.T) { x0.assertReturnInvoke(t, "div_s", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("div_s:70", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_s", []arg{{wa.I32, 0}, {wa.I32, 4294967295}}, arg{wa.I32, 0})
	})
	t.Run("div_s:71", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_s", []arg{{wa.I32, 4294967295}, {wa.I32, 4294967295}}, arg{wa.I32, 1})
	})
	t.Run("div_s:72", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_s", []arg{{wa.I32, 2147483648}, {wa.I32, 2}}, arg{wa.I32, 3221225472})
	})
	t.Run("div_s:73", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_s", []arg{{wa.I32, 2147483649}, {wa.I32, 1000}}, arg{wa.I32, 4292819813})
	})
	t.Run("div_s:74", func(t *testing.T) { x0.assertReturnInvoke(t, "div_s", []arg{{wa.I32, 5}, {wa.I32, 2}}, arg{wa.I32, 2}) })
	t.Run("div_s:75", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_s", []arg{{wa.I32, 4294967291}, {wa.I32, 2}}, arg{wa.I32, 4294967294})
	})
	t.Run("div_s:76", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_s", []arg{{wa.I32, 5}, {wa.I32, 4294967294}}, arg{wa.I32, 4294967294})
	})
	t.Run("div_s:77", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_s", []arg{{wa.I32, 4294967291}, {wa.I32, 4294967294}}, arg{wa.I32, 2})
	})
	t.Run("div_s:78", func(t *testing.T) { x0.assertReturnInvoke(t, "div_s", []arg{{wa.I32, 7}, {wa.I32, 3}}, arg{wa.I32, 2}) })
	t.Run("div_s:79", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_s", []arg{{wa.I32, 4294967289}, {wa.I32, 3}}, arg{wa.I32, 4294967294})
	})
	t.Run("div_s:80", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_s", []arg{{wa.I32, 7}, {wa.I32, 4294967293}}, arg{wa.I32, 4294967294})
	})
	t.Run("div_s:81", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_s", []arg{{wa.I32, 4294967289}, {wa.I32, 4294967293}}, arg{wa.I32, 2})
	})
	t.Run("div_s:82", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_s", []arg{{wa.I32, 11}, {wa.I32, 5}}, arg{wa.I32, 2})
	})
	t.Run("div_s:83", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_s", []arg{{wa.I32, 17}, {wa.I32, 7}}, arg{wa.I32, 2})
	})
	t.Run("div_u:85", func(t *testing.T) {
		x0.assertTrap(t, "div_u", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{Type: wa.I32}, "integer divide by zero")
	})
	t.Run("div_u:86", func(t *testing.T) {
		x0.assertTrap(t, "div_u", []arg{{wa.I32, 0}, {wa.I32, 0}}, arg{Type: wa.I32}, "integer divide by zero")
	})
	t.Run("div_u:87", func(t *testing.T) { x0.assertReturnInvoke(t, "div_u", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("div_u:88", func(t *testing.T) { x0.assertReturnInvoke(t, "div_u", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("div_u:89", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_u", []arg{{wa.I32, 4294967295}, {wa.I32, 4294967295}}, arg{wa.I32, 1})
	})
	t.Run("div_u:90", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_u", []arg{{wa.I32, 2147483648}, {wa.I32, 4294967295}}, arg{wa.I32, 0})
	})
	t.Run("div_u:91", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_u", []arg{{wa.I32, 2147483648}, {wa.I32, 2}}, arg{wa.I32, 1073741824})
	})
	t.Run("div_u:92", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_u", []arg{{wa.I32, 2414874608}, {wa.I32, 65537}}, arg{wa.I32, 36847})
	})
	t.Run("div_u:93", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_u", []arg{{wa.I32, 2147483649}, {wa.I32, 1000}}, arg{wa.I32, 2147483})
	})
	t.Run("div_u:94", func(t *testing.T) { x0.assertReturnInvoke(t, "div_u", []arg{{wa.I32, 5}, {wa.I32, 2}}, arg{wa.I32, 2}) })
	t.Run("div_u:95", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_u", []arg{{wa.I32, 4294967291}, {wa.I32, 2}}, arg{wa.I32, 2147483645})
	})
	t.Run("div_u:96", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_u", []arg{{wa.I32, 5}, {wa.I32, 4294967294}}, arg{wa.I32, 0})
	})
	t.Run("div_u:97", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_u", []arg{{wa.I32, 4294967291}, {wa.I32, 4294967294}}, arg{wa.I32, 0})
	})
	t.Run("div_u:98", func(t *testing.T) { x0.assertReturnInvoke(t, "div_u", []arg{{wa.I32, 7}, {wa.I32, 3}}, arg{wa.I32, 2}) })
	t.Run("div_u:99", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_u", []arg{{wa.I32, 11}, {wa.I32, 5}}, arg{wa.I32, 2})
	})
	t.Run("div_u:100", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_u", []arg{{wa.I32, 17}, {wa.I32, 7}}, arg{wa.I32, 2})
	})
	t.Run("rem_s:102", func(t *testing.T) {
		x0.assertTrap(t, "rem_s", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{Type: wa.I32}, "integer divide by zero")
	})
	t.Run("rem_s:103", func(t *testing.T) {
		x0.assertTrap(t, "rem_s", []arg{{wa.I32, 0}, {wa.I32, 0}}, arg{Type: wa.I32}, "integer divide by zero")
	})
	t.Run("rem_s:104", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I32, 2147483647}, {wa.I32, 4294967295}}, arg{wa.I32, 0})
	})
	t.Run("rem_s:105", func(t *testing.T) { x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("rem_s:106", func(t *testing.T) { x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("rem_s:107", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I32, 0}, {wa.I32, 4294967295}}, arg{wa.I32, 0})
	})
	t.Run("rem_s:108", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I32, 4294967295}, {wa.I32, 4294967295}}, arg{wa.I32, 0})
	})
	t.Run("rem_s:109", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I32, 2147483648}, {wa.I32, 4294967295}}, arg{wa.I32, 0})
	})
	t.Run("rem_s:110", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I32, 2147483648}, {wa.I32, 2}}, arg{wa.I32, 0})
	})
	t.Run("rem_s:111", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I32, 2147483649}, {wa.I32, 1000}}, arg{wa.I32, 4294966649})
	})
	t.Run("rem_s:112", func(t *testing.T) { x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I32, 5}, {wa.I32, 2}}, arg{wa.I32, 1}) })
	t.Run("rem_s:113", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I32, 4294967291}, {wa.I32, 2}}, arg{wa.I32, 4294967295})
	})
	t.Run("rem_s:114", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I32, 5}, {wa.I32, 4294967294}}, arg{wa.I32, 1})
	})
	t.Run("rem_s:115", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I32, 4294967291}, {wa.I32, 4294967294}}, arg{wa.I32, 4294967295})
	})
	t.Run("rem_s:116", func(t *testing.T) { x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I32, 7}, {wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("rem_s:117", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I32, 4294967289}, {wa.I32, 3}}, arg{wa.I32, 4294967295})
	})
	t.Run("rem_s:118", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I32, 7}, {wa.I32, 4294967293}}, arg{wa.I32, 1})
	})
	t.Run("rem_s:119", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I32, 4294967289}, {wa.I32, 4294967293}}, arg{wa.I32, 4294967295})
	})
	t.Run("rem_s:120", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I32, 11}, {wa.I32, 5}}, arg{wa.I32, 1})
	})
	t.Run("rem_s:121", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I32, 17}, {wa.I32, 7}}, arg{wa.I32, 3})
	})
	t.Run("rem_u:123", func(t *testing.T) {
		x0.assertTrap(t, "rem_u", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{Type: wa.I32}, "integer divide by zero")
	})
	t.Run("rem_u:124", func(t *testing.T) {
		x0.assertTrap(t, "rem_u", []arg{{wa.I32, 0}, {wa.I32, 0}}, arg{Type: wa.I32}, "integer divide by zero")
	})
	t.Run("rem_u:125", func(t *testing.T) { x0.assertReturnInvoke(t, "rem_u", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("rem_u:126", func(t *testing.T) { x0.assertReturnInvoke(t, "rem_u", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("rem_u:127", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_u", []arg{{wa.I32, 4294967295}, {wa.I32, 4294967295}}, arg{wa.I32, 0})
	})
	t.Run("rem_u:128", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_u", []arg{{wa.I32, 2147483648}, {wa.I32, 4294967295}}, arg{wa.I32, 2147483648})
	})
	t.Run("rem_u:129", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_u", []arg{{wa.I32, 2147483648}, {wa.I32, 2}}, arg{wa.I32, 0})
	})
	t.Run("rem_u:130", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_u", []arg{{wa.I32, 2414874608}, {wa.I32, 65537}}, arg{wa.I32, 32769})
	})
	t.Run("rem_u:131", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_u", []arg{{wa.I32, 2147483649}, {wa.I32, 1000}}, arg{wa.I32, 649})
	})
	t.Run("rem_u:132", func(t *testing.T) { x0.assertReturnInvoke(t, "rem_u", []arg{{wa.I32, 5}, {wa.I32, 2}}, arg{wa.I32, 1}) })
	t.Run("rem_u:133", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_u", []arg{{wa.I32, 4294967291}, {wa.I32, 2}}, arg{wa.I32, 1})
	})
	t.Run("rem_u:134", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_u", []arg{{wa.I32, 5}, {wa.I32, 4294967294}}, arg{wa.I32, 5})
	})
	t.Run("rem_u:135", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_u", []arg{{wa.I32, 4294967291}, {wa.I32, 4294967294}}, arg{wa.I32, 4294967291})
	})
	t.Run("rem_u:136", func(t *testing.T) { x0.assertReturnInvoke(t, "rem_u", []arg{{wa.I32, 7}, {wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("rem_u:137", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_u", []arg{{wa.I32, 11}, {wa.I32, 5}}, arg{wa.I32, 1})
	})
	t.Run("rem_u:138", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_u", []arg{{wa.I32, 17}, {wa.I32, 7}}, arg{wa.I32, 3})
	})
	t.Run("and:140", func(t *testing.T) { x0.assertReturnInvoke(t, "and", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("and:141", func(t *testing.T) { x0.assertReturnInvoke(t, "and", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("and:142", func(t *testing.T) { x0.assertReturnInvoke(t, "and", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("and:143", func(t *testing.T) { x0.assertReturnInvoke(t, "and", []arg{{wa.I32, 0}, {wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("and:144", func(t *testing.T) {
		x0.assertReturnInvoke(t, "and", []arg{{wa.I32, 2147483647}, {wa.I32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("and:145", func(t *testing.T) {
		x0.assertReturnInvoke(t, "and", []arg{{wa.I32, 2147483647}, {wa.I32, 4294967295}}, arg{wa.I32, 2147483647})
	})
	t.Run("and:146", func(t *testing.T) {
		x0.assertReturnInvoke(t, "and", []arg{{wa.I32, 4042326015}, {wa.I32, 4294963440}}, arg{wa.I32, 4042322160})
	})
	t.Run("and:147", func(t *testing.T) {
		x0.assertReturnInvoke(t, "and", []arg{{wa.I32, 4294967295}, {wa.I32, 4294967295}}, arg{wa.I32, 4294967295})
	})
	t.Run("or:149", func(t *testing.T) { x0.assertReturnInvoke(t, "or", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("or:150", func(t *testing.T) { x0.assertReturnInvoke(t, "or", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("or:151", func(t *testing.T) { x0.assertReturnInvoke(t, "or", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("or:152", func(t *testing.T) { x0.assertReturnInvoke(t, "or", []arg{{wa.I32, 0}, {wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("or:153", func(t *testing.T) {
		x0.assertReturnInvoke(t, "or", []arg{{wa.I32, 2147483647}, {wa.I32, 2147483648}}, arg{wa.I32, 4294967295})
	})
	t.Run("or:154", func(t *testing.T) {
		x0.assertReturnInvoke(t, "or", []arg{{wa.I32, 2147483648}, {wa.I32, 0}}, arg{wa.I32, 2147483648})
	})
	t.Run("or:155", func(t *testing.T) {
		x0.assertReturnInvoke(t, "or", []arg{{wa.I32, 4042326015}, {wa.I32, 4294963440}}, arg{wa.I32, 4294967295})
	})
	t.Run("or:156", func(t *testing.T) {
		x0.assertReturnInvoke(t, "or", []arg{{wa.I32, 4294967295}, {wa.I32, 4294967295}}, arg{wa.I32, 4294967295})
	})
	t.Run("xor:158", func(t *testing.T) { x0.assertReturnInvoke(t, "xor", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("xor:159", func(t *testing.T) { x0.assertReturnInvoke(t, "xor", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("xor:160", func(t *testing.T) { x0.assertReturnInvoke(t, "xor", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("xor:161", func(t *testing.T) { x0.assertReturnInvoke(t, "xor", []arg{{wa.I32, 0}, {wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("xor:162", func(t *testing.T) {
		x0.assertReturnInvoke(t, "xor", []arg{{wa.I32, 2147483647}, {wa.I32, 2147483648}}, arg{wa.I32, 4294967295})
	})
	t.Run("xor:163", func(t *testing.T) {
		x0.assertReturnInvoke(t, "xor", []arg{{wa.I32, 2147483648}, {wa.I32, 0}}, arg{wa.I32, 2147483648})
	})
	t.Run("xor:164", func(t *testing.T) {
		x0.assertReturnInvoke(t, "xor", []arg{{wa.I32, 4294967295}, {wa.I32, 2147483648}}, arg{wa.I32, 2147483647})
	})
	t.Run("xor:165", func(t *testing.T) {
		x0.assertReturnInvoke(t, "xor", []arg{{wa.I32, 4294967295}, {wa.I32, 2147483647}}, arg{wa.I32, 2147483648})
	})
	t.Run("xor:166", func(t *testing.T) {
		x0.assertReturnInvoke(t, "xor", []arg{{wa.I32, 4042326015}, {wa.I32, 4294963440}}, arg{wa.I32, 252645135})
	})
	t.Run("xor:167", func(t *testing.T) {
		x0.assertReturnInvoke(t, "xor", []arg{{wa.I32, 4294967295}, {wa.I32, 4294967295}}, arg{wa.I32, 0})
	})
	t.Run("shl:169", func(t *testing.T) { x0.assertReturnInvoke(t, "shl", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I32, 2}) })
	t.Run("shl:170", func(t *testing.T) { x0.assertReturnInvoke(t, "shl", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("shl:171", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shl", []arg{{wa.I32, 2147483647}, {wa.I32, 1}}, arg{wa.I32, 4294967294})
	})
	t.Run("shl:172", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shl", []arg{{wa.I32, 4294967295}, {wa.I32, 1}}, arg{wa.I32, 4294967294})
	})
	t.Run("shl:173", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shl", []arg{{wa.I32, 2147483648}, {wa.I32, 1}}, arg{wa.I32, 0})
	})
	t.Run("shl:174", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shl", []arg{{wa.I32, 1073741824}, {wa.I32, 1}}, arg{wa.I32, 2147483648})
	})
	t.Run("shl:175", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shl", []arg{{wa.I32, 1}, {wa.I32, 31}}, arg{wa.I32, 2147483648})
	})
	t.Run("shl:176", func(t *testing.T) { x0.assertReturnInvoke(t, "shl", []arg{{wa.I32, 1}, {wa.I32, 32}}, arg{wa.I32, 1}) })
	t.Run("shl:177", func(t *testing.T) { x0.assertReturnInvoke(t, "shl", []arg{{wa.I32, 1}, {wa.I32, 33}}, arg{wa.I32, 2}) })
	t.Run("shl:178", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shl", []arg{{wa.I32, 1}, {wa.I32, 4294967295}}, arg{wa.I32, 2147483648})
	})
	t.Run("shl:179", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shl", []arg{{wa.I32, 1}, {wa.I32, 2147483647}}, arg{wa.I32, 2147483648})
	})
	t.Run("shr_s:181", func(t *testing.T) { x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("shr_s:182", func(t *testing.T) { x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("shr_s:183", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I32, 4294967295}, {wa.I32, 1}}, arg{wa.I32, 4294967295})
	})
	t.Run("shr_s:184", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I32, 2147483647}, {wa.I32, 1}}, arg{wa.I32, 1073741823})
	})
	t.Run("shr_s:185", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I32, 2147483648}, {wa.I32, 1}}, arg{wa.I32, 3221225472})
	})
	t.Run("shr_s:186", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I32, 1073741824}, {wa.I32, 1}}, arg{wa.I32, 536870912})
	})
	t.Run("shr_s:187", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I32, 1}, {wa.I32, 32}}, arg{wa.I32, 1})
	})
	t.Run("shr_s:188", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I32, 1}, {wa.I32, 33}}, arg{wa.I32, 0})
	})
	t.Run("shr_s:189", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I32, 1}, {wa.I32, 4294967295}}, arg{wa.I32, 0})
	})
	t.Run("shr_s:190", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I32, 1}, {wa.I32, 2147483647}}, arg{wa.I32, 0})
	})
	t.Run("shr_s:191", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I32, 1}, {wa.I32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("shr_s:192", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I32, 2147483648}, {wa.I32, 31}}, arg{wa.I32, 4294967295})
	})
	t.Run("shr_s:193", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I32, 4294967295}, {wa.I32, 32}}, arg{wa.I32, 4294967295})
	})
	t.Run("shr_s:194", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I32, 4294967295}, {wa.I32, 33}}, arg{wa.I32, 4294967295})
	})
	t.Run("shr_s:195", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I32, 4294967295}, {wa.I32, 4294967295}}, arg{wa.I32, 4294967295})
	})
	t.Run("shr_s:196", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I32, 4294967295}, {wa.I32, 2147483647}}, arg{wa.I32, 4294967295})
	})
	t.Run("shr_s:197", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I32, 4294967295}, {wa.I32, 2147483648}}, arg{wa.I32, 4294967295})
	})
	t.Run("shr_u:199", func(t *testing.T) { x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("shr_u:200", func(t *testing.T) { x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("shr_u:201", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I32, 4294967295}, {wa.I32, 1}}, arg{wa.I32, 2147483647})
	})
	t.Run("shr_u:202", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I32, 2147483647}, {wa.I32, 1}}, arg{wa.I32, 1073741823})
	})
	t.Run("shr_u:203", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I32, 2147483648}, {wa.I32, 1}}, arg{wa.I32, 1073741824})
	})
	t.Run("shr_u:204", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I32, 1073741824}, {wa.I32, 1}}, arg{wa.I32, 536870912})
	})
	t.Run("shr_u:205", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I32, 1}, {wa.I32, 32}}, arg{wa.I32, 1})
	})
	t.Run("shr_u:206", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I32, 1}, {wa.I32, 33}}, arg{wa.I32, 0})
	})
	t.Run("shr_u:207", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I32, 1}, {wa.I32, 4294967295}}, arg{wa.I32, 0})
	})
	t.Run("shr_u:208", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I32, 1}, {wa.I32, 2147483647}}, arg{wa.I32, 0})
	})
	t.Run("shr_u:209", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I32, 1}, {wa.I32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("shr_u:210", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I32, 2147483648}, {wa.I32, 31}}, arg{wa.I32, 1})
	})
	t.Run("shr_u:211", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I32, 4294967295}, {wa.I32, 32}}, arg{wa.I32, 4294967295})
	})
	t.Run("shr_u:212", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I32, 4294967295}, {wa.I32, 33}}, arg{wa.I32, 2147483647})
	})
	t.Run("shr_u:213", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I32, 4294967295}, {wa.I32, 4294967295}}, arg{wa.I32, 1})
	})
	t.Run("shr_u:214", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I32, 4294967295}, {wa.I32, 2147483647}}, arg{wa.I32, 1})
	})
	t.Run("shr_u:215", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I32, 4294967295}, {wa.I32, 2147483648}}, arg{wa.I32, 4294967295})
	})
	t.Run("rotl:217", func(t *testing.T) { x0.assertReturnInvoke(t, "rotl", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I32, 2}) })
	t.Run("rotl:218", func(t *testing.T) { x0.assertReturnInvoke(t, "rotl", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("rotl:219", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotl", []arg{{wa.I32, 4294967295}, {wa.I32, 1}}, arg{wa.I32, 4294967295})
	})
	t.Run("rotl:220", func(t *testing.T) { x0.assertReturnInvoke(t, "rotl", []arg{{wa.I32, 1}, {wa.I32, 32}}, arg{wa.I32, 1}) })
	t.Run("rotl:221", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotl", []arg{{wa.I32, 2882377846}, {wa.I32, 1}}, arg{wa.I32, 1469788397})
	})
	t.Run("rotl:222", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotl", []arg{{wa.I32, 4261469184}, {wa.I32, 4}}, arg{wa.I32, 3758997519})
	})
	t.Run("rotl:223", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotl", []arg{{wa.I32, 2965492451}, {wa.I32, 5}}, arg{wa.I32, 406477942})
	})
	t.Run("rotl:224", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotl", []arg{{wa.I32, 32768}, {wa.I32, 37}}, arg{wa.I32, 1048576})
	})
	t.Run("rotl:225", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotl", []arg{{wa.I32, 2965492451}, {wa.I32, 65285}}, arg{wa.I32, 406477942})
	})
	t.Run("rotl:226", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotl", []arg{{wa.I32, 1989852383}, {wa.I32, 4294967277}}, arg{wa.I32, 1469837011})
	})
	t.Run("rotl:227", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotl", []arg{{wa.I32, 1989852383}, {wa.I32, 2147483661}}, arg{wa.I32, 1469837011})
	})
	t.Run("rotl:228", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotl", []arg{{wa.I32, 1}, {wa.I32, 31}}, arg{wa.I32, 2147483648})
	})
	t.Run("rotl:229", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotl", []arg{{wa.I32, 2147483648}, {wa.I32, 1}}, arg{wa.I32, 1})
	})
	t.Run("rotr:231", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotr", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I32, 2147483648})
	})
	t.Run("rotr:232", func(t *testing.T) { x0.assertReturnInvoke(t, "rotr", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("rotr:233", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotr", []arg{{wa.I32, 4294967295}, {wa.I32, 1}}, arg{wa.I32, 4294967295})
	})
	t.Run("rotr:234", func(t *testing.T) { x0.assertReturnInvoke(t, "rotr", []arg{{wa.I32, 1}, {wa.I32, 32}}, arg{wa.I32, 1}) })
	t.Run("rotr:235", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotr", []arg{{wa.I32, 4278242304}, {wa.I32, 1}}, arg{wa.I32, 2139121152})
	})
	t.Run("rotr:236", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotr", []arg{{wa.I32, 524288}, {wa.I32, 4}}, arg{wa.I32, 32768})
	})
	t.Run("rotr:237", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotr", []arg{{wa.I32, 2965492451}, {wa.I32, 5}}, arg{wa.I32, 495324823})
	})
	t.Run("rotr:238", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotr", []arg{{wa.I32, 32768}, {wa.I32, 37}}, arg{wa.I32, 1024})
	})
	t.Run("rotr:239", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotr", []arg{{wa.I32, 2965492451}, {wa.I32, 65285}}, arg{wa.I32, 495324823})
	})
	t.Run("rotr:240", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotr", []arg{{wa.I32, 1989852383}, {wa.I32, 4294967277}}, arg{wa.I32, 3875255509})
	})
	t.Run("rotr:241", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotr", []arg{{wa.I32, 1989852383}, {wa.I32, 2147483661}}, arg{wa.I32, 3875255509})
	})
	t.Run("rotr:242", func(t *testing.T) { x0.assertReturnInvoke(t, "rotr", []arg{{wa.I32, 1}, {wa.I32, 31}}, arg{wa.I32, 2}) })
	t.Run("rotr:243", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotr", []arg{{wa.I32, 2147483648}, {wa.I32, 31}}, arg{wa.I32, 1})
	})
	t.Run("clz:245", func(t *testing.T) { x0.assertReturnInvoke(t, "clz", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 0}) })
	t.Run("clz:246", func(t *testing.T) { x0.assertReturnInvoke(t, "clz", []arg{{wa.I32, 0}}, arg{wa.I32, 32}) })
	t.Run("clz:247", func(t *testing.T) { x0.assertReturnInvoke(t, "clz", []arg{{wa.I32, 32768}}, arg{wa.I32, 16}) })
	t.Run("clz:248", func(t *testing.T) { x0.assertReturnInvoke(t, "clz", []arg{{wa.I32, 255}}, arg{wa.I32, 24}) })
	t.Run("clz:249", func(t *testing.T) { x0.assertReturnInvoke(t, "clz", []arg{{wa.I32, 2147483648}}, arg{wa.I32, 0}) })
	t.Run("clz:250", func(t *testing.T) { x0.assertReturnInvoke(t, "clz", []arg{{wa.I32, 1}}, arg{wa.I32, 31}) })
	t.Run("clz:251", func(t *testing.T) { x0.assertReturnInvoke(t, "clz", []arg{{wa.I32, 2}}, arg{wa.I32, 30}) })
	t.Run("clz:252", func(t *testing.T) { x0.assertReturnInvoke(t, "clz", []arg{{wa.I32, 2147483647}}, arg{wa.I32, 1}) })
	t.Run("ctz:254", func(t *testing.T) { x0.assertReturnInvoke(t, "ctz", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 0}) })
	t.Run("ctz:255", func(t *testing.T) { x0.assertReturnInvoke(t, "ctz", []arg{{wa.I32, 0}}, arg{wa.I32, 32}) })
	t.Run("ctz:256", func(t *testing.T) { x0.assertReturnInvoke(t, "ctz", []arg{{wa.I32, 32768}}, arg{wa.I32, 15}) })
	t.Run("ctz:257", func(t *testing.T) { x0.assertReturnInvoke(t, "ctz", []arg{{wa.I32, 65536}}, arg{wa.I32, 16}) })
	t.Run("ctz:258", func(t *testing.T) { x0.assertReturnInvoke(t, "ctz", []arg{{wa.I32, 2147483648}}, arg{wa.I32, 31}) })
	t.Run("ctz:259", func(t *testing.T) { x0.assertReturnInvoke(t, "ctz", []arg{{wa.I32, 2147483647}}, arg{wa.I32, 0}) })
	t.Run("popcnt:261", func(t *testing.T) { x0.assertReturnInvoke(t, "popcnt", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 32}) })
	t.Run("popcnt:262", func(t *testing.T) { x0.assertReturnInvoke(t, "popcnt", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("popcnt:263", func(t *testing.T) { x0.assertReturnInvoke(t, "popcnt", []arg{{wa.I32, 32768}}, arg{wa.I32, 1}) })
	t.Run("popcnt:264", func(t *testing.T) { x0.assertReturnInvoke(t, "popcnt", []arg{{wa.I32, 2147516416}}, arg{wa.I32, 2}) })
	t.Run("popcnt:265", func(t *testing.T) { x0.assertReturnInvoke(t, "popcnt", []arg{{wa.I32, 2147483647}}, arg{wa.I32, 31}) })
	t.Run("popcnt:266", func(t *testing.T) { x0.assertReturnInvoke(t, "popcnt", []arg{{wa.I32, 2863311530}}, arg{wa.I32, 16}) })
	t.Run("popcnt:267", func(t *testing.T) { x0.assertReturnInvoke(t, "popcnt", []arg{{wa.I32, 1431655765}}, arg{wa.I32, 16}) })
	t.Run("popcnt:268", func(t *testing.T) { x0.assertReturnInvoke(t, "popcnt", []arg{{wa.I32, 3735928559}}, arg{wa.I32, 24}) })
	t.Run("extend8_s:270", func(t *testing.T) { x0.assertReturnInvoke(t, "extend8_s", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("extend8_s:271", func(t *testing.T) { x0.assertReturnInvoke(t, "extend8_s", []arg{{wa.I32, 127}}, arg{wa.I32, 127}) })
	t.Run("extend8_s:272", func(t *testing.T) {
		x0.assertReturnInvoke(t, "extend8_s", []arg{{wa.I32, 128}}, arg{wa.I32, 4294967168})
	})
	t.Run("extend8_s:273", func(t *testing.T) {
		x0.assertReturnInvoke(t, "extend8_s", []arg{{wa.I32, 255}}, arg{wa.I32, 4294967295})
	})
	t.Run("extend8_s:274", func(t *testing.T) { x0.assertReturnInvoke(t, "extend8_s", []arg{{wa.I32, 19088640}}, arg{wa.I32, 0}) })
	t.Run("extend8_s:275", func(t *testing.T) {
		x0.assertReturnInvoke(t, "extend8_s", []arg{{wa.I32, 4275878528}}, arg{wa.I32, 4294967168})
	})
	t.Run("extend8_s:276", func(t *testing.T) {
		x0.assertReturnInvoke(t, "extend8_s", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 4294967295})
	})
	t.Run("extend16_s:278", func(t *testing.T) { x0.assertReturnInvoke(t, "extend16_s", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("extend16_s:279", func(t *testing.T) { x0.assertReturnInvoke(t, "extend16_s", []arg{{wa.I32, 32767}}, arg{wa.I32, 32767}) })
	t.Run("extend16_s:280", func(t *testing.T) {
		x0.assertReturnInvoke(t, "extend16_s", []arg{{wa.I32, 32768}}, arg{wa.I32, 4294934528})
	})
	t.Run("extend16_s:281", func(t *testing.T) {
		x0.assertReturnInvoke(t, "extend16_s", []arg{{wa.I32, 65535}}, arg{wa.I32, 4294967295})
	})
	t.Run("extend16_s:282", func(t *testing.T) { x0.assertReturnInvoke(t, "extend16_s", []arg{{wa.I32, 19070976}}, arg{wa.I32, 0}) })
	t.Run("extend16_s:283", func(t *testing.T) {
		x0.assertReturnInvoke(t, "extend16_s", []arg{{wa.I32, 4275863552}}, arg{wa.I32, 4294934528})
	})
	t.Run("extend16_s:284", func(t *testing.T) {
		x0.assertReturnInvoke(t, "extend16_s", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 4294967295})
	})
	t.Run("eqz:286", func(t *testing.T) { x0.assertReturnInvoke(t, "eqz", []arg{{wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("eqz:287", func(t *testing.T) { x0.assertReturnInvoke(t, "eqz", []arg{{wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("eqz:288", func(t *testing.T) { x0.assertReturnInvoke(t, "eqz", []arg{{wa.I32, 2147483648}}, arg{wa.I32, 0}) })
	t.Run("eqz:289", func(t *testing.T) { x0.assertReturnInvoke(t, "eqz", []arg{{wa.I32, 2147483647}}, arg{wa.I32, 0}) })
	t.Run("eqz:290", func(t *testing.T) { x0.assertReturnInvoke(t, "eqz", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 0}) })
	t.Run("eq:292", func(t *testing.T) { x0.assertReturnInvoke(t, "eq", []arg{{wa.I32, 0}, {wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("eq:293", func(t *testing.T) { x0.assertReturnInvoke(t, "eq", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("eq:294", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.I32, 4294967295}, {wa.I32, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:295", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.I32, 2147483648}, {wa.I32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("eq:296", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.I32, 2147483647}, {wa.I32, 2147483647}}, arg{wa.I32, 1})
	})
	t.Run("eq:297", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.I32, 4294967295}, {wa.I32, 4294967295}}, arg{wa.I32, 1})
	})
	t.Run("eq:298", func(t *testing.T) { x0.assertReturnInvoke(t, "eq", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("eq:299", func(t *testing.T) { x0.assertReturnInvoke(t, "eq", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("eq:300", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.I32, 2147483648}, {wa.I32, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:301", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.I32, 0}, {wa.I32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("eq:302", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.I32, 2147483648}, {wa.I32, 4294967295}}, arg{wa.I32, 0})
	})
	t.Run("eq:303", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.I32, 4294967295}, {wa.I32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("eq:304", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.I32, 2147483648}, {wa.I32, 2147483647}}, arg{wa.I32, 0})
	})
	t.Run("eq:305", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.I32, 2147483647}, {wa.I32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("ne:307", func(t *testing.T) { x0.assertReturnInvoke(t, "ne", []arg{{wa.I32, 0}, {wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("ne:308", func(t *testing.T) { x0.assertReturnInvoke(t, "ne", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("ne:309", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.I32, 4294967295}, {wa.I32, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:310", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.I32, 2147483648}, {wa.I32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("ne:311", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.I32, 2147483647}, {wa.I32, 2147483647}}, arg{wa.I32, 0})
	})
	t.Run("ne:312", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.I32, 4294967295}, {wa.I32, 4294967295}}, arg{wa.I32, 0})
	})
	t.Run("ne:313", func(t *testing.T) { x0.assertReturnInvoke(t, "ne", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("ne:314", func(t *testing.T) { x0.assertReturnInvoke(t, "ne", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("ne:315", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.I32, 2147483648}, {wa.I32, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:316", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.I32, 0}, {wa.I32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ne:317", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.I32, 2147483648}, {wa.I32, 4294967295}}, arg{wa.I32, 1})
	})
	t.Run("ne:318", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.I32, 4294967295}, {wa.I32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ne:319", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.I32, 2147483648}, {wa.I32, 2147483647}}, arg{wa.I32, 1})
	})
	t.Run("ne:320", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.I32, 2147483647}, {wa.I32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("lt_s:322", func(t *testing.T) { x0.assertReturnInvoke(t, "lt_s", []arg{{wa.I32, 0}, {wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("lt_s:323", func(t *testing.T) { x0.assertReturnInvoke(t, "lt_s", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("lt_s:324", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_s", []arg{{wa.I32, 4294967295}, {wa.I32, 1}}, arg{wa.I32, 1})
	})
	t.Run("lt_s:325", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_s", []arg{{wa.I32, 2147483648}, {wa.I32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("lt_s:326", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_s", []arg{{wa.I32, 2147483647}, {wa.I32, 2147483647}}, arg{wa.I32, 0})
	})
	t.Run("lt_s:327", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_s", []arg{{wa.I32, 4294967295}, {wa.I32, 4294967295}}, arg{wa.I32, 0})
	})
	t.Run("lt_s:328", func(t *testing.T) { x0.assertReturnInvoke(t, "lt_s", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("lt_s:329", func(t *testing.T) { x0.assertReturnInvoke(t, "lt_s", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("lt_s:330", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_s", []arg{{wa.I32, 2147483648}, {wa.I32, 0}}, arg{wa.I32, 1})
	})
	t.Run("lt_s:331", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_s", []arg{{wa.I32, 0}, {wa.I32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("lt_s:332", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_s", []arg{{wa.I32, 2147483648}, {wa.I32, 4294967295}}, arg{wa.I32, 1})
	})
	t.Run("lt_s:333", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_s", []arg{{wa.I32, 4294967295}, {wa.I32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("lt_s:334", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_s", []arg{{wa.I32, 2147483648}, {wa.I32, 2147483647}}, arg{wa.I32, 1})
	})
	t.Run("lt_s:335", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_s", []arg{{wa.I32, 2147483647}, {wa.I32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("lt_u:337", func(t *testing.T) { x0.assertReturnInvoke(t, "lt_u", []arg{{wa.I32, 0}, {wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("lt_u:338", func(t *testing.T) { x0.assertReturnInvoke(t, "lt_u", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("lt_u:339", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_u", []arg{{wa.I32, 4294967295}, {wa.I32, 1}}, arg{wa.I32, 0})
	})
	t.Run("lt_u:340", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_u", []arg{{wa.I32, 2147483648}, {wa.I32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("lt_u:341", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_u", []arg{{wa.I32, 2147483647}, {wa.I32, 2147483647}}, arg{wa.I32, 0})
	})
	t.Run("lt_u:342", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_u", []arg{{wa.I32, 4294967295}, {wa.I32, 4294967295}}, arg{wa.I32, 0})
	})
	t.Run("lt_u:343", func(t *testing.T) { x0.assertReturnInvoke(t, "lt_u", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("lt_u:344", func(t *testing.T) { x0.assertReturnInvoke(t, "lt_u", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("lt_u:345", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_u", []arg{{wa.I32, 2147483648}, {wa.I32, 0}}, arg{wa.I32, 0})
	})
	t.Run("lt_u:346", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_u", []arg{{wa.I32, 0}, {wa.I32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("lt_u:347", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_u", []arg{{wa.I32, 2147483648}, {wa.I32, 4294967295}}, arg{wa.I32, 1})
	})
	t.Run("lt_u:348", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_u", []arg{{wa.I32, 4294967295}, {wa.I32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("lt_u:349", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_u", []arg{{wa.I32, 2147483648}, {wa.I32, 2147483647}}, arg{wa.I32, 0})
	})
	t.Run("lt_u:350", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_u", []arg{{wa.I32, 2147483647}, {wa.I32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("le_s:352", func(t *testing.T) { x0.assertReturnInvoke(t, "le_s", []arg{{wa.I32, 0}, {wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("le_s:353", func(t *testing.T) { x0.assertReturnInvoke(t, "le_s", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("le_s:354", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_s", []arg{{wa.I32, 4294967295}, {wa.I32, 1}}, arg{wa.I32, 1})
	})
	t.Run("le_s:355", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_s", []arg{{wa.I32, 2147483648}, {wa.I32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("le_s:356", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_s", []arg{{wa.I32, 2147483647}, {wa.I32, 2147483647}}, arg{wa.I32, 1})
	})
	t.Run("le_s:357", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_s", []arg{{wa.I32, 4294967295}, {wa.I32, 4294967295}}, arg{wa.I32, 1})
	})
	t.Run("le_s:358", func(t *testing.T) { x0.assertReturnInvoke(t, "le_s", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("le_s:359", func(t *testing.T) { x0.assertReturnInvoke(t, "le_s", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("le_s:360", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_s", []arg{{wa.I32, 2147483648}, {wa.I32, 0}}, arg{wa.I32, 1})
	})
	t.Run("le_s:361", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_s", []arg{{wa.I32, 0}, {wa.I32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("le_s:362", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_s", []arg{{wa.I32, 2147483648}, {wa.I32, 4294967295}}, arg{wa.I32, 1})
	})
	t.Run("le_s:363", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_s", []arg{{wa.I32, 4294967295}, {wa.I32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("le_s:364", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_s", []arg{{wa.I32, 2147483648}, {wa.I32, 2147483647}}, arg{wa.I32, 1})
	})
	t.Run("le_s:365", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_s", []arg{{wa.I32, 2147483647}, {wa.I32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("le_u:367", func(t *testing.T) { x0.assertReturnInvoke(t, "le_u", []arg{{wa.I32, 0}, {wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("le_u:368", func(t *testing.T) { x0.assertReturnInvoke(t, "le_u", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("le_u:369", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_u", []arg{{wa.I32, 4294967295}, {wa.I32, 1}}, arg{wa.I32, 0})
	})
	t.Run("le_u:370", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_u", []arg{{wa.I32, 2147483648}, {wa.I32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("le_u:371", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_u", []arg{{wa.I32, 2147483647}, {wa.I32, 2147483647}}, arg{wa.I32, 1})
	})
	t.Run("le_u:372", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_u", []arg{{wa.I32, 4294967295}, {wa.I32, 4294967295}}, arg{wa.I32, 1})
	})
	t.Run("le_u:373", func(t *testing.T) { x0.assertReturnInvoke(t, "le_u", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("le_u:374", func(t *testing.T) { x0.assertReturnInvoke(t, "le_u", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("le_u:375", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_u", []arg{{wa.I32, 2147483648}, {wa.I32, 0}}, arg{wa.I32, 0})
	})
	t.Run("le_u:376", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_u", []arg{{wa.I32, 0}, {wa.I32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("le_u:377", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_u", []arg{{wa.I32, 2147483648}, {wa.I32, 4294967295}}, arg{wa.I32, 1})
	})
	t.Run("le_u:378", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_u", []arg{{wa.I32, 4294967295}, {wa.I32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("le_u:379", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_u", []arg{{wa.I32, 2147483648}, {wa.I32, 2147483647}}, arg{wa.I32, 0})
	})
	t.Run("le_u:380", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_u", []arg{{wa.I32, 2147483647}, {wa.I32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("gt_s:382", func(t *testing.T) { x0.assertReturnInvoke(t, "gt_s", []arg{{wa.I32, 0}, {wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("gt_s:383", func(t *testing.T) { x0.assertReturnInvoke(t, "gt_s", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("gt_s:384", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_s", []arg{{wa.I32, 4294967295}, {wa.I32, 1}}, arg{wa.I32, 0})
	})
	t.Run("gt_s:385", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_s", []arg{{wa.I32, 2147483648}, {wa.I32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("gt_s:386", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_s", []arg{{wa.I32, 2147483647}, {wa.I32, 2147483647}}, arg{wa.I32, 0})
	})
	t.Run("gt_s:387", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_s", []arg{{wa.I32, 4294967295}, {wa.I32, 4294967295}}, arg{wa.I32, 0})
	})
	t.Run("gt_s:388", func(t *testing.T) { x0.assertReturnInvoke(t, "gt_s", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("gt_s:389", func(t *testing.T) { x0.assertReturnInvoke(t, "gt_s", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("gt_s:390", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_s", []arg{{wa.I32, 2147483648}, {wa.I32, 0}}, arg{wa.I32, 0})
	})
	t.Run("gt_s:391", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_s", []arg{{wa.I32, 0}, {wa.I32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("gt_s:392", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_s", []arg{{wa.I32, 2147483648}, {wa.I32, 4294967295}}, arg{wa.I32, 0})
	})
	t.Run("gt_s:393", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_s", []arg{{wa.I32, 4294967295}, {wa.I32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("gt_s:394", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_s", []arg{{wa.I32, 2147483648}, {wa.I32, 2147483647}}, arg{wa.I32, 0})
	})
	t.Run("gt_s:395", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_s", []arg{{wa.I32, 2147483647}, {wa.I32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("gt_u:397", func(t *testing.T) { x0.assertReturnInvoke(t, "gt_u", []arg{{wa.I32, 0}, {wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("gt_u:398", func(t *testing.T) { x0.assertReturnInvoke(t, "gt_u", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("gt_u:399", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_u", []arg{{wa.I32, 4294967295}, {wa.I32, 1}}, arg{wa.I32, 1})
	})
	t.Run("gt_u:400", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_u", []arg{{wa.I32, 2147483648}, {wa.I32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("gt_u:401", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_u", []arg{{wa.I32, 2147483647}, {wa.I32, 2147483647}}, arg{wa.I32, 0})
	})
	t.Run("gt_u:402", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_u", []arg{{wa.I32, 4294967295}, {wa.I32, 4294967295}}, arg{wa.I32, 0})
	})
	t.Run("gt_u:403", func(t *testing.T) { x0.assertReturnInvoke(t, "gt_u", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("gt_u:404", func(t *testing.T) { x0.assertReturnInvoke(t, "gt_u", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("gt_u:405", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_u", []arg{{wa.I32, 2147483648}, {wa.I32, 0}}, arg{wa.I32, 1})
	})
	t.Run("gt_u:406", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_u", []arg{{wa.I32, 0}, {wa.I32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("gt_u:407", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_u", []arg{{wa.I32, 2147483648}, {wa.I32, 4294967295}}, arg{wa.I32, 0})
	})
	t.Run("gt_u:408", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_u", []arg{{wa.I32, 4294967295}, {wa.I32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("gt_u:409", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_u", []arg{{wa.I32, 2147483648}, {wa.I32, 2147483647}}, arg{wa.I32, 1})
	})
	t.Run("gt_u:410", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_u", []arg{{wa.I32, 2147483647}, {wa.I32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("ge_s:412", func(t *testing.T) { x0.assertReturnInvoke(t, "ge_s", []arg{{wa.I32, 0}, {wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("ge_s:413", func(t *testing.T) { x0.assertReturnInvoke(t, "ge_s", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("ge_s:414", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_s", []arg{{wa.I32, 4294967295}, {wa.I32, 1}}, arg{wa.I32, 0})
	})
	t.Run("ge_s:415", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_s", []arg{{wa.I32, 2147483648}, {wa.I32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ge_s:416", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_s", []arg{{wa.I32, 2147483647}, {wa.I32, 2147483647}}, arg{wa.I32, 1})
	})
	t.Run("ge_s:417", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_s", []arg{{wa.I32, 4294967295}, {wa.I32, 4294967295}}, arg{wa.I32, 1})
	})
	t.Run("ge_s:418", func(t *testing.T) { x0.assertReturnInvoke(t, "ge_s", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("ge_s:419", func(t *testing.T) { x0.assertReturnInvoke(t, "ge_s", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("ge_s:420", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_s", []arg{{wa.I32, 2147483648}, {wa.I32, 0}}, arg{wa.I32, 0})
	})
	t.Run("ge_s:421", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_s", []arg{{wa.I32, 0}, {wa.I32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ge_s:422", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_s", []arg{{wa.I32, 2147483648}, {wa.I32, 4294967295}}, arg{wa.I32, 0})
	})
	t.Run("ge_s:423", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_s", []arg{{wa.I32, 4294967295}, {wa.I32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ge_s:424", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_s", []arg{{wa.I32, 2147483648}, {wa.I32, 2147483647}}, arg{wa.I32, 0})
	})
	t.Run("ge_s:425", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_s", []arg{{wa.I32, 2147483647}, {wa.I32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ge_u:427", func(t *testing.T) { x0.assertReturnInvoke(t, "ge_u", []arg{{wa.I32, 0}, {wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("ge_u:428", func(t *testing.T) { x0.assertReturnInvoke(t, "ge_u", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("ge_u:429", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_u", []arg{{wa.I32, 4294967295}, {wa.I32, 1}}, arg{wa.I32, 1})
	})
	t.Run("ge_u:430", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_u", []arg{{wa.I32, 2147483648}, {wa.I32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ge_u:431", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_u", []arg{{wa.I32, 2147483647}, {wa.I32, 2147483647}}, arg{wa.I32, 1})
	})
	t.Run("ge_u:432", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_u", []arg{{wa.I32, 4294967295}, {wa.I32, 4294967295}}, arg{wa.I32, 1})
	})
	t.Run("ge_u:433", func(t *testing.T) { x0.assertReturnInvoke(t, "ge_u", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("ge_u:434", func(t *testing.T) { x0.assertReturnInvoke(t, "ge_u", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("ge_u:435", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_u", []arg{{wa.I32, 2147483648}, {wa.I32, 0}}, arg{wa.I32, 1})
	})
	t.Run("ge_u:436", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_u", []arg{{wa.I32, 0}, {wa.I32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("ge_u:437", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_u", []arg{{wa.I32, 2147483648}, {wa.I32, 4294967295}}, arg{wa.I32, 0})
	})
	t.Run("ge_u:438", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_u", []arg{{wa.I32, 4294967295}, {wa.I32, 2147483648}}, arg{wa.I32, 1})
	})
	t.Run("ge_u:439", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_u", []arg{{wa.I32, 2147483648}, {wa.I32, 2147483647}}, arg{wa.I32, 1})
	})
	t.Run("ge_u:440", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_u", []arg{{wa.I32, 2147483647}, {wa.I32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("assert_invalid:444", func(t *testing.T) { assertInvalidSpec(t, "i32.1.wasm", "type mismatch") })
	t.Run("assert_invalid:452", func(t *testing.T) { assertInvalidSpec(t, "i32.2.wasm", "type mismatch") })
	t.Run("assert_invalid:461", func(t *testing.T) { assertInvalidSpec(t, "i32.3.wasm", "type mismatch") })
	t.Run("assert_invalid:470", func(t *testing.T) { assertInvalidSpec(t, "i32.4.wasm", "type mismatch") })
	t.Run("assert_invalid:479", func(t *testing.T) { assertInvalidSpec(t, "i32.5.wasm", "type mismatch") })
	t.Run("assert_invalid:488", func(t *testing.T) { assertInvalidSpec(t, "i32.6.wasm", "type mismatch") })
	t.Run("assert_invalid:497", func(t *testing.T) { assertInvalidSpec(t, "i32.7.wasm", "type mismatch") })
	t.Run("assert_invalid:506", func(t *testing.T) { assertInvalidSpec(t, "i32.8.wasm", "type mismatch") })
	t.Run("assert_invalid:515", func(t *testing.T) { assertInvalidSpec(t, "i32.9.wasm", "type mismatch") })
	t.Run("assert_invalid:523", func(t *testing.T) { assertInvalidSpec(t, "i32.10.wasm", "type mismatch") })
	t.Run("assert_invalid:531", func(t *testing.T) { assertInvalidSpec(t, "i32.11.wasm", "type mismatch") })
	t.Run("assert_invalid:540", func(t *testing.T) { assertInvalidSpec(t, "i32.12.wasm", "type mismatch") })
	t.Run("assert_invalid:556", func(t *testing.T) { assertInvalidSpec(t, "i32.13.wasm", "type mismatch") })
	t.Run("assert_invalid:565", func(t *testing.T) { assertInvalidSpec(t, "i32.14.wasm", "type mismatch") })
	t.Run("assert_invalid:574", func(t *testing.T) { assertInvalidSpec(t, "i32.15.wasm", "type mismatch") })
	t.Run("assert_invalid:583", func(t *testing.T) { assertInvalidSpec(t, "i32.16.wasm", "type mismatch") })
	t.Run("assert_invalid:592", func(t *testing.T) { assertInvalidSpec(t, "i32.17.wasm", "type mismatch") })
	t.Run("assert_invalid:601", func(t *testing.T) { assertInvalidSpec(t, "i32.18.wasm", "type mismatch") })
	t.Run("assert_invalid:611", func(t *testing.T) { assertInvalidSpec(t, "i32.19.wasm", "type mismatch") })
	t.Run("assert_invalid:619", func(t *testing.T) { assertInvalidSpec(t, "i32.20.wasm", "type mismatch") })
	t.Run("assert_invalid:627", func(t *testing.T) { assertInvalidSpec(t, "i32.21.wasm", "type mismatch") })
	t.Run("assert_invalid:636", func(t *testing.T) { assertInvalidSpec(t, "i32.22.wasm", "type mismatch") })
	t.Run("assert_invalid:645", func(t *testing.T) { assertInvalidSpec(t, "i32.23.wasm", "type mismatch") })
	t.Run("assert_invalid:654", func(t *testing.T) { assertInvalidSpec(t, "i32.24.wasm", "type mismatch") })
	t.Run("assert_invalid:663", func(t *testing.T) { assertInvalidSpec(t, "i32.25.wasm", "type mismatch") })
	t.Run("assert_invalid:672", func(t *testing.T) { assertInvalidSpec(t, "i32.26.wasm", "type mismatch") })
	t.Run("assert_invalid:681", func(t *testing.T) { assertInvalidSpec(t, "i32.27.wasm", "type mismatch") })
	t.Run("assert_invalid:691", func(t *testing.T) { assertInvalidSpec(t, "i32.28.wasm", "type mismatch") })
	t.Run("assert_invalid:701", func(t *testing.T) { assertInvalidSpec(t, "i32.29.wasm", "type mismatch") })
	t.Run("assert_invalid:710", func(t *testing.T) { assertInvalidSpec(t, "i32.30.wasm", "type mismatch") })
	t.Run("assert_invalid:719", func(t *testing.T) { assertInvalidSpec(t, "i32.31.wasm", "type mismatch") })
	t.Run("assert_invalid:728", func(t *testing.T) { assertInvalidSpec(t, "i32.32.wasm", "type mismatch") })
	t.Run("assert_invalid:737", func(t *testing.T) { assertInvalidSpec(t, "i32.33.wasm", "type mismatch") })
	t.Run("assert_invalid:746", func(t *testing.T) { assertInvalidSpec(t, "i32.34.wasm", "type mismatch") })
	t.Run("assert_invalid:755", func(t *testing.T) { assertInvalidSpec(t, "i32.35.wasm", "type mismatch") })
	t.Run("assert_invalid:763", func(t *testing.T) { assertInvalidSpec(t, "i32.36.wasm", "type mismatch") })
	t.Run("assert_invalid:771", func(t *testing.T) { assertInvalidSpec(t, "i32.37.wasm", "type mismatch") })
	t.Run("assert_invalid:779", func(t *testing.T) { assertInvalidSpec(t, "i32.38.wasm", "type mismatch") })
	t.Run("assert_invalid:787", func(t *testing.T) { assertInvalidSpec(t, "i32.39.wasm", "type mismatch") })
	t.Run("assert_invalid:796", func(t *testing.T) { assertInvalidSpec(t, "i32.40.wasm", "type mismatch") })
	t.Run("assert_invalid:805", func(t *testing.T) { assertInvalidSpec(t, "i32.41.wasm", "type mismatch") })
	t.Run("assert_invalid:821", func(t *testing.T) { assertInvalidSpec(t, "i32.42.wasm", "type mismatch") })
	t.Run("assert_invalid:837", func(t *testing.T) { assertInvalidSpec(t, "i32.43.wasm", "type mismatch") })
	t.Run("assert_invalid:846", func(t *testing.T) { assertInvalidSpec(t, "i32.44.wasm", "type mismatch") })
	t.Run("assert_invalid:855", func(t *testing.T) { assertInvalidSpec(t, "i32.45.wasm", "type mismatch") })
	t.Run("assert_invalid:864", func(t *testing.T) { assertInvalidSpec(t, "i32.46.wasm", "type mismatch") })
	t.Run("assert_invalid:873", func(t *testing.T) { assertInvalidSpec(t, "i32.47.wasm", "type mismatch") })
	t.Run("assert_invalid:882", func(t *testing.T) { assertInvalidSpec(t, "i32.48.wasm", "type mismatch") })
	t.Run("assert_invalid:891", func(t *testing.T) { assertInvalidSpec(t, "i32.49.wasm", "type mismatch") })
	t.Run("assert_invalid:900", func(t *testing.T) { assertInvalidSpec(t, "i32.50.wasm", "type mismatch") })
	t.Run("assert_invalid:909", func(t *testing.T) { assertInvalidSpec(t, "i32.51.wasm", "type mismatch") })
	t.Run("assert_invalid:918", func(t *testing.T) { assertInvalidSpec(t, "i32.52.wasm", "type mismatch") })
	t.Run("assert_invalid:927", func(t *testing.T) { assertInvalidSpec(t, "i32.53.wasm", "type mismatch") })
	t.Run("assert_invalid:936", func(t *testing.T) { assertInvalidSpec(t, "i32.54.wasm", "type mismatch") })
	t.Run("assert_invalid:948", func(t *testing.T) { assertInvalidSpec(t, "i32.55.wasm", "type mismatch") })
	t.Run("assert_invalid:949", func(t *testing.T) { assertInvalidSpec(t, "i32.56.wasm", "type mismatch") })
	t.Run("assert_invalid:950", func(t *testing.T) { assertInvalidSpec(t, "i32.57.wasm", "type mismatch") })
	t.Run("assert_invalid:951", func(t *testing.T) { assertInvalidSpec(t, "i32.58.wasm", "type mismatch") })
	t.Run("assert_invalid:952", func(t *testing.T) { assertInvalidSpec(t, "i32.59.wasm", "type mismatch") })
	t.Run("assert_invalid:953", func(t *testing.T) { assertInvalidSpec(t, "i32.60.wasm", "type mismatch") })
	t.Run("assert_invalid:954", func(t *testing.T) { assertInvalidSpec(t, "i32.61.wasm", "type mismatch") })
	t.Run("assert_invalid:955", func(t *testing.T) { assertInvalidSpec(t, "i32.62.wasm", "type mismatch") })
	t.Run("assert_invalid:956", func(t *testing.T) { assertInvalidSpec(t, "i32.63.wasm", "type mismatch") })
	t.Run("assert_invalid:957", func(t *testing.T) { assertInvalidSpec(t, "i32.64.wasm", "type mismatch") })
	t.Run("assert_invalid:958", func(t *testing.T) { assertInvalidSpec(t, "i32.65.wasm", "type mismatch") })
	t.Run("assert_invalid:959", func(t *testing.T) { assertInvalidSpec(t, "i32.66.wasm", "type mismatch") })
	t.Run("assert_invalid:960", func(t *testing.T) { assertInvalidSpec(t, "i32.67.wasm", "type mismatch") })
	t.Run("assert_invalid:961", func(t *testing.T) { assertInvalidSpec(t, "i32.68.wasm", "type mismatch") })
	t.Run("assert_invalid:962", func(t *testing.T) { assertInvalidSpec(t, "i32.69.wasm", "type mismatch") })
	t.Run("assert_invalid:963", func(t *testing.T) { assertInvalidSpec(t, "i32.70.wasm", "type mismatch") })
	t.Run("assert_invalid:964", func(t *testing.T) { assertInvalidSpec(t, "i32.71.wasm", "type mismatch") })
	t.Run("assert_invalid:965", func(t *testing.T) { assertInvalidSpec(t, "i32.72.wasm", "type mismatch") })
	t.Run("assert_invalid:966", func(t *testing.T) { assertInvalidSpec(t, "i32.73.wasm", "type mismatch") })
	t.Run("assert_invalid:967", func(t *testing.T) { assertInvalidSpec(t, "i32.74.wasm", "type mismatch") })
	t.Run("assert_invalid:968", func(t *testing.T) { assertInvalidSpec(t, "i32.75.wasm", "type mismatch") })
	t.Run("assert_invalid:969", func(t *testing.T) { assertInvalidSpec(t, "i32.76.wasm", "type mismatch") })
	t.Run("assert_invalid:970", func(t *testing.T) { assertInvalidSpec(t, "i32.77.wasm", "type mismatch") })
	t.Run("assert_invalid:971", func(t *testing.T) { assertInvalidSpec(t, "i32.78.wasm", "type mismatch") })
	t.Run("assert_invalid:972", func(t *testing.T) { assertInvalidSpec(t, "i32.79.wasm", "type mismatch") })
	t.Run("assert_invalid:973", func(t *testing.T) { assertInvalidSpec(t, "i32.80.wasm", "type mismatch") })
	t.Run("assert_invalid:974", func(t *testing.T) { assertInvalidSpec(t, "i32.81.wasm", "type mismatch") })
	t.Run("assert_invalid:975", func(t *testing.T) { assertInvalidSpec(t, "i32.82.wasm", "type mismatch") })
	t.Run("assert_invalid:976", func(t *testing.T) { assertInvalidSpec(t, "i32.83.wasm", "type mismatch") })
}

func Test_i64(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "i64.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("add:38", func(t *testing.T) { x0.assertReturnInvoke(t, "add", []arg{{wa.I64, 1}, {wa.I64, 1}}, arg{wa.I64, 2}) })
	t.Run("add:39", func(t *testing.T) { x0.assertReturnInvoke(t, "add", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{wa.I64, 1}) })
	t.Run("add:40", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 18446744073709551615}}, arg{wa.I64, 18446744073709551614})
	})
	t.Run("add:41", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 1}}, arg{wa.I64, 0})
	})
	t.Run("add:42", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 1}}, arg{wa.I64, 9223372036854775808})
	})
	t.Run("add:43", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 18446744073709551615}}, arg{wa.I64, 9223372036854775807})
	})
	t.Run("add:44", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 9223372036854775808}}, arg{wa.I64, 0})
	})
	t.Run("add:45", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add", []arg{{wa.I64, 1073741823}, {wa.I64, 1}}, arg{wa.I64, 1073741824})
	})
	t.Run("sub:47", func(t *testing.T) { x0.assertReturnInvoke(t, "sub", []arg{{wa.I64, 1}, {wa.I64, 1}}, arg{wa.I64, 0}) })
	t.Run("sub:48", func(t *testing.T) { x0.assertReturnInvoke(t, "sub", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{wa.I64, 1}) })
	t.Run("sub:49", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 18446744073709551615}}, arg{wa.I64, 0})
	})
	t.Run("sub:50", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 18446744073709551615}}, arg{wa.I64, 9223372036854775808})
	})
	t.Run("sub:51", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 1}}, arg{wa.I64, 9223372036854775807})
	})
	t.Run("sub:52", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 9223372036854775808}}, arg{wa.I64, 0})
	})
	t.Run("sub:53", func(t *testing.T) {
		x0.assertReturnInvoke(t, "sub", []arg{{wa.I64, 1073741823}, {wa.I64, 18446744073709551615}}, arg{wa.I64, 1073741824})
	})
	t.Run("mul:55", func(t *testing.T) { x0.assertReturnInvoke(t, "mul", []arg{{wa.I64, 1}, {wa.I64, 1}}, arg{wa.I64, 1}) })
	t.Run("mul:56", func(t *testing.T) { x0.assertReturnInvoke(t, "mul", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{wa.I64, 0}) })
	t.Run("mul:57", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 18446744073709551615}}, arg{wa.I64, 1})
	})
	t.Run("mul:58", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.I64, 1152921504606846976}, {wa.I64, 4096}}, arg{wa.I64, 0})
	})
	t.Run("mul:59", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 0}}, arg{wa.I64, 0})
	})
	t.Run("mul:60", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 18446744073709551615}}, arg{wa.I64, 9223372036854775808})
	})
	t.Run("mul:61", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 18446744073709551615}}, arg{wa.I64, 9223372036854775809})
	})
	t.Run("mul:62", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.I64, 81985529216486895}, {wa.I64, 18364758544493064720}}, arg{wa.I64, 2465395958572223728})
	})
	t.Run("mul:63", func(t *testing.T) {
		x0.assertReturnInvoke(t, "mul", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 9223372036854775807}}, arg{wa.I64, 1})
	})
	t.Run("div_s:65", func(t *testing.T) {
		x0.assertTrap(t, "div_s", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{Type: wa.I64}, "integer divide by zero")
	})
	t.Run("div_s:66", func(t *testing.T) {
		x0.assertTrap(t, "div_s", []arg{{wa.I64, 0}, {wa.I64, 0}}, arg{Type: wa.I64}, "integer divide by zero")
	})
	t.Run("div_s:67", func(t *testing.T) {
		x0.assertTrap(t, "div_s", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 18446744073709551615}}, arg{Type: wa.I64}, "integer overflow")
	})
	t.Run("div_s:68", func(t *testing.T) {
		x0.assertTrap(t, "div_s", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 0}}, arg{Type: wa.I64}, "integer divide by zero")
	})
	t.Run("div_s:69", func(t *testing.T) { x0.assertReturnInvoke(t, "div_s", []arg{{wa.I64, 1}, {wa.I64, 1}}, arg{wa.I64, 1}) })
	t.Run("div_s:70", func(t *testing.T) { x0.assertReturnInvoke(t, "div_s", []arg{{wa.I64, 0}, {wa.I64, 1}}, arg{wa.I64, 0}) })
	t.Run("div_s:71", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_s", []arg{{wa.I64, 0}, {wa.I64, 18446744073709551615}}, arg{wa.I64, 0})
	})
	t.Run("div_s:72", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_s", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 18446744073709551615}}, arg{wa.I64, 1})
	})
	t.Run("div_s:73", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_s", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 2}}, arg{wa.I64, 13835058055282163712})
	})
	t.Run("div_s:74", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_s", []arg{{wa.I64, 9223372036854775809}, {wa.I64, 1000}}, arg{wa.I64, 18437520701672696841})
	})
	t.Run("div_s:75", func(t *testing.T) { x0.assertReturnInvoke(t, "div_s", []arg{{wa.I64, 5}, {wa.I64, 2}}, arg{wa.I64, 2}) })
	t.Run("div_s:76", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_s", []arg{{wa.I64, 18446744073709551611}, {wa.I64, 2}}, arg{wa.I64, 18446744073709551614})
	})
	t.Run("div_s:77", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_s", []arg{{wa.I64, 5}, {wa.I64, 18446744073709551614}}, arg{wa.I64, 18446744073709551614})
	})
	t.Run("div_s:78", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_s", []arg{{wa.I64, 18446744073709551611}, {wa.I64, 18446744073709551614}}, arg{wa.I64, 2})
	})
	t.Run("div_s:79", func(t *testing.T) { x0.assertReturnInvoke(t, "div_s", []arg{{wa.I64, 7}, {wa.I64, 3}}, arg{wa.I64, 2}) })
	t.Run("div_s:80", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_s", []arg{{wa.I64, 18446744073709551609}, {wa.I64, 3}}, arg{wa.I64, 18446744073709551614})
	})
	t.Run("div_s:81", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_s", []arg{{wa.I64, 7}, {wa.I64, 18446744073709551613}}, arg{wa.I64, 18446744073709551614})
	})
	t.Run("div_s:82", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_s", []arg{{wa.I64, 18446744073709551609}, {wa.I64, 18446744073709551613}}, arg{wa.I64, 2})
	})
	t.Run("div_s:83", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_s", []arg{{wa.I64, 11}, {wa.I64, 5}}, arg{wa.I64, 2})
	})
	t.Run("div_s:84", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_s", []arg{{wa.I64, 17}, {wa.I64, 7}}, arg{wa.I64, 2})
	})
	t.Run("div_u:86", func(t *testing.T) {
		x0.assertTrap(t, "div_u", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{Type: wa.I64}, "integer divide by zero")
	})
	t.Run("div_u:87", func(t *testing.T) {
		x0.assertTrap(t, "div_u", []arg{{wa.I64, 0}, {wa.I64, 0}}, arg{Type: wa.I64}, "integer divide by zero")
	})
	t.Run("div_u:88", func(t *testing.T) { x0.assertReturnInvoke(t, "div_u", []arg{{wa.I64, 1}, {wa.I64, 1}}, arg{wa.I64, 1}) })
	t.Run("div_u:89", func(t *testing.T) { x0.assertReturnInvoke(t, "div_u", []arg{{wa.I64, 0}, {wa.I64, 1}}, arg{wa.I64, 0}) })
	t.Run("div_u:90", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_u", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 18446744073709551615}}, arg{wa.I64, 1})
	})
	t.Run("div_u:91", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_u", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 18446744073709551615}}, arg{wa.I64, 0})
	})
	t.Run("div_u:92", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_u", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 2}}, arg{wa.I64, 4611686018427387904})
	})
	t.Run("div_u:93", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_u", []arg{{wa.I64, 10371807465568210928}, {wa.I64, 4294967297}}, arg{wa.I64, 2414874607})
	})
	t.Run("div_u:94", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_u", []arg{{wa.I64, 9223372036854775809}, {wa.I64, 1000}}, arg{wa.I64, 9223372036854775})
	})
	t.Run("div_u:95", func(t *testing.T) { x0.assertReturnInvoke(t, "div_u", []arg{{wa.I64, 5}, {wa.I64, 2}}, arg{wa.I64, 2}) })
	t.Run("div_u:96", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_u", []arg{{wa.I64, 18446744073709551611}, {wa.I64, 2}}, arg{wa.I64, 9223372036854775805})
	})
	t.Run("div_u:97", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_u", []arg{{wa.I64, 5}, {wa.I64, 18446744073709551614}}, arg{wa.I64, 0})
	})
	t.Run("div_u:98", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_u", []arg{{wa.I64, 18446744073709551611}, {wa.I64, 18446744073709551614}}, arg{wa.I64, 0})
	})
	t.Run("div_u:99", func(t *testing.T) { x0.assertReturnInvoke(t, "div_u", []arg{{wa.I64, 7}, {wa.I64, 3}}, arg{wa.I64, 2}) })
	t.Run("div_u:100", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_u", []arg{{wa.I64, 11}, {wa.I64, 5}}, arg{wa.I64, 2})
	})
	t.Run("div_u:101", func(t *testing.T) {
		x0.assertReturnInvoke(t, "div_u", []arg{{wa.I64, 17}, {wa.I64, 7}}, arg{wa.I64, 2})
	})
	t.Run("rem_s:103", func(t *testing.T) {
		x0.assertTrap(t, "rem_s", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{Type: wa.I64}, "integer divide by zero")
	})
	t.Run("rem_s:104", func(t *testing.T) {
		x0.assertTrap(t, "rem_s", []arg{{wa.I64, 0}, {wa.I64, 0}}, arg{Type: wa.I64}, "integer divide by zero")
	})
	t.Run("rem_s:105", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 18446744073709551615}}, arg{wa.I64, 0})
	})
	t.Run("rem_s:106", func(t *testing.T) { x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I64, 1}, {wa.I64, 1}}, arg{wa.I64, 0}) })
	t.Run("rem_s:107", func(t *testing.T) { x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I64, 0}, {wa.I64, 1}}, arg{wa.I64, 0}) })
	t.Run("rem_s:108", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I64, 0}, {wa.I64, 18446744073709551615}}, arg{wa.I64, 0})
	})
	t.Run("rem_s:109", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 18446744073709551615}}, arg{wa.I64, 0})
	})
	t.Run("rem_s:110", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 18446744073709551615}}, arg{wa.I64, 0})
	})
	t.Run("rem_s:111", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 2}}, arg{wa.I64, 0})
	})
	t.Run("rem_s:112", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I64, 9223372036854775809}, {wa.I64, 1000}}, arg{wa.I64, 18446744073709550809})
	})
	t.Run("rem_s:113", func(t *testing.T) { x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I64, 5}, {wa.I64, 2}}, arg{wa.I64, 1}) })
	t.Run("rem_s:114", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I64, 18446744073709551611}, {wa.I64, 2}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("rem_s:115", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I64, 5}, {wa.I64, 18446744073709551614}}, arg{wa.I64, 1})
	})
	t.Run("rem_s:116", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I64, 18446744073709551611}, {wa.I64, 18446744073709551614}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("rem_s:117", func(t *testing.T) { x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I64, 7}, {wa.I64, 3}}, arg{wa.I64, 1}) })
	t.Run("rem_s:118", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I64, 18446744073709551609}, {wa.I64, 3}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("rem_s:119", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I64, 7}, {wa.I64, 18446744073709551613}}, arg{wa.I64, 1})
	})
	t.Run("rem_s:120", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I64, 18446744073709551609}, {wa.I64, 18446744073709551613}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("rem_s:121", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I64, 11}, {wa.I64, 5}}, arg{wa.I64, 1})
	})
	t.Run("rem_s:122", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_s", []arg{{wa.I64, 17}, {wa.I64, 7}}, arg{wa.I64, 3})
	})
	t.Run("rem_u:124", func(t *testing.T) {
		x0.assertTrap(t, "rem_u", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{Type: wa.I64}, "integer divide by zero")
	})
	t.Run("rem_u:125", func(t *testing.T) {
		x0.assertTrap(t, "rem_u", []arg{{wa.I64, 0}, {wa.I64, 0}}, arg{Type: wa.I64}, "integer divide by zero")
	})
	t.Run("rem_u:126", func(t *testing.T) { x0.assertReturnInvoke(t, "rem_u", []arg{{wa.I64, 1}, {wa.I64, 1}}, arg{wa.I64, 0}) })
	t.Run("rem_u:127", func(t *testing.T) { x0.assertReturnInvoke(t, "rem_u", []arg{{wa.I64, 0}, {wa.I64, 1}}, arg{wa.I64, 0}) })
	t.Run("rem_u:128", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_u", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 18446744073709551615}}, arg{wa.I64, 0})
	})
	t.Run("rem_u:129", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_u", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 18446744073709551615}}, arg{wa.I64, 9223372036854775808})
	})
	t.Run("rem_u:130", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_u", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 2}}, arg{wa.I64, 0})
	})
	t.Run("rem_u:131", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_u", []arg{{wa.I64, 10371807465568210928}, {wa.I64, 4294967297}}, arg{wa.I64, 2147483649})
	})
	t.Run("rem_u:132", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_u", []arg{{wa.I64, 9223372036854775809}, {wa.I64, 1000}}, arg{wa.I64, 809})
	})
	t.Run("rem_u:133", func(t *testing.T) { x0.assertReturnInvoke(t, "rem_u", []arg{{wa.I64, 5}, {wa.I64, 2}}, arg{wa.I64, 1}) })
	t.Run("rem_u:134", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_u", []arg{{wa.I64, 18446744073709551611}, {wa.I64, 2}}, arg{wa.I64, 1})
	})
	t.Run("rem_u:135", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_u", []arg{{wa.I64, 5}, {wa.I64, 18446744073709551614}}, arg{wa.I64, 5})
	})
	t.Run("rem_u:136", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_u", []arg{{wa.I64, 18446744073709551611}, {wa.I64, 18446744073709551614}}, arg{wa.I64, 18446744073709551611})
	})
	t.Run("rem_u:137", func(t *testing.T) { x0.assertReturnInvoke(t, "rem_u", []arg{{wa.I64, 7}, {wa.I64, 3}}, arg{wa.I64, 1}) })
	t.Run("rem_u:138", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_u", []arg{{wa.I64, 11}, {wa.I64, 5}}, arg{wa.I64, 1})
	})
	t.Run("rem_u:139", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rem_u", []arg{{wa.I64, 17}, {wa.I64, 7}}, arg{wa.I64, 3})
	})
	t.Run("and:141", func(t *testing.T) { x0.assertReturnInvoke(t, "and", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{wa.I64, 0}) })
	t.Run("and:142", func(t *testing.T) { x0.assertReturnInvoke(t, "and", []arg{{wa.I64, 0}, {wa.I64, 1}}, arg{wa.I64, 0}) })
	t.Run("and:143", func(t *testing.T) { x0.assertReturnInvoke(t, "and", []arg{{wa.I64, 1}, {wa.I64, 1}}, arg{wa.I64, 1}) })
	t.Run("and:144", func(t *testing.T) { x0.assertReturnInvoke(t, "and", []arg{{wa.I64, 0}, {wa.I64, 0}}, arg{wa.I64, 0}) })
	t.Run("and:145", func(t *testing.T) {
		x0.assertReturnInvoke(t, "and", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 9223372036854775808}}, arg{wa.I64, 0})
	})
	t.Run("and:146", func(t *testing.T) {
		x0.assertReturnInvoke(t, "and", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 18446744073709551615}}, arg{wa.I64, 9223372036854775807})
	})
	t.Run("and:147", func(t *testing.T) {
		x0.assertReturnInvoke(t, "and", []arg{{wa.I64, 4042326015}, {wa.I64, 4294963440}}, arg{wa.I64, 4042322160})
	})
	t.Run("and:148", func(t *testing.T) {
		x0.assertReturnInvoke(t, "and", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 18446744073709551615}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("or:150", func(t *testing.T) { x0.assertReturnInvoke(t, "or", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{wa.I64, 1}) })
	t.Run("or:151", func(t *testing.T) { x0.assertReturnInvoke(t, "or", []arg{{wa.I64, 0}, {wa.I64, 1}}, arg{wa.I64, 1}) })
	t.Run("or:152", func(t *testing.T) { x0.assertReturnInvoke(t, "or", []arg{{wa.I64, 1}, {wa.I64, 1}}, arg{wa.I64, 1}) })
	t.Run("or:153", func(t *testing.T) { x0.assertReturnInvoke(t, "or", []arg{{wa.I64, 0}, {wa.I64, 0}}, arg{wa.I64, 0}) })
	t.Run("or:154", func(t *testing.T) {
		x0.assertReturnInvoke(t, "or", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 9223372036854775808}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("or:155", func(t *testing.T) {
		x0.assertReturnInvoke(t, "or", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 0}}, arg{wa.I64, 9223372036854775808})
	})
	t.Run("or:156", func(t *testing.T) {
		x0.assertReturnInvoke(t, "or", []arg{{wa.I64, 4042326015}, {wa.I64, 4294963440}}, arg{wa.I64, 4294967295})
	})
	t.Run("or:157", func(t *testing.T) {
		x0.assertReturnInvoke(t, "or", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 18446744073709551615}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("xor:159", func(t *testing.T) { x0.assertReturnInvoke(t, "xor", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{wa.I64, 1}) })
	t.Run("xor:160", func(t *testing.T) { x0.assertReturnInvoke(t, "xor", []arg{{wa.I64, 0}, {wa.I64, 1}}, arg{wa.I64, 1}) })
	t.Run("xor:161", func(t *testing.T) { x0.assertReturnInvoke(t, "xor", []arg{{wa.I64, 1}, {wa.I64, 1}}, arg{wa.I64, 0}) })
	t.Run("xor:162", func(t *testing.T) { x0.assertReturnInvoke(t, "xor", []arg{{wa.I64, 0}, {wa.I64, 0}}, arg{wa.I64, 0}) })
	t.Run("xor:163", func(t *testing.T) {
		x0.assertReturnInvoke(t, "xor", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 9223372036854775808}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("xor:164", func(t *testing.T) {
		x0.assertReturnInvoke(t, "xor", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 0}}, arg{wa.I64, 9223372036854775808})
	})
	t.Run("xor:165", func(t *testing.T) {
		x0.assertReturnInvoke(t, "xor", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 9223372036854775808}}, arg{wa.I64, 9223372036854775807})
	})
	t.Run("xor:166", func(t *testing.T) {
		x0.assertReturnInvoke(t, "xor", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 9223372036854775807}}, arg{wa.I64, 9223372036854775808})
	})
	t.Run("xor:167", func(t *testing.T) {
		x0.assertReturnInvoke(t, "xor", []arg{{wa.I64, 4042326015}, {wa.I64, 4294963440}}, arg{wa.I64, 252645135})
	})
	t.Run("xor:168", func(t *testing.T) {
		x0.assertReturnInvoke(t, "xor", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 18446744073709551615}}, arg{wa.I64, 0})
	})
	t.Run("shl:170", func(t *testing.T) { x0.assertReturnInvoke(t, "shl", []arg{{wa.I64, 1}, {wa.I64, 1}}, arg{wa.I64, 2}) })
	t.Run("shl:171", func(t *testing.T) { x0.assertReturnInvoke(t, "shl", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{wa.I64, 1}) })
	t.Run("shl:172", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shl", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 1}}, arg{wa.I64, 18446744073709551614})
	})
	t.Run("shl:173", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shl", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 1}}, arg{wa.I64, 18446744073709551614})
	})
	t.Run("shl:174", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shl", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 1}}, arg{wa.I64, 0})
	})
	t.Run("shl:175", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shl", []arg{{wa.I64, 4611686018427387904}, {wa.I64, 1}}, arg{wa.I64, 9223372036854775808})
	})
	t.Run("shl:176", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shl", []arg{{wa.I64, 1}, {wa.I64, 63}}, arg{wa.I64, 9223372036854775808})
	})
	t.Run("shl:177", func(t *testing.T) { x0.assertReturnInvoke(t, "shl", []arg{{wa.I64, 1}, {wa.I64, 64}}, arg{wa.I64, 1}) })
	t.Run("shl:178", func(t *testing.T) { x0.assertReturnInvoke(t, "shl", []arg{{wa.I64, 1}, {wa.I64, 65}}, arg{wa.I64, 2}) })
	t.Run("shl:179", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shl", []arg{{wa.I64, 1}, {wa.I64, 18446744073709551615}}, arg{wa.I64, 9223372036854775808})
	})
	t.Run("shl:180", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shl", []arg{{wa.I64, 1}, {wa.I64, 9223372036854775807}}, arg{wa.I64, 9223372036854775808})
	})
	t.Run("shr_s:182", func(t *testing.T) { x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I64, 1}, {wa.I64, 1}}, arg{wa.I64, 0}) })
	t.Run("shr_s:183", func(t *testing.T) { x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{wa.I64, 1}) })
	t.Run("shr_s:184", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 1}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("shr_s:185", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 1}}, arg{wa.I64, 4611686018427387903})
	})
	t.Run("shr_s:186", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 1}}, arg{wa.I64, 13835058055282163712})
	})
	t.Run("shr_s:187", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I64, 4611686018427387904}, {wa.I64, 1}}, arg{wa.I64, 2305843009213693952})
	})
	t.Run("shr_s:188", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I64, 1}, {wa.I64, 64}}, arg{wa.I64, 1})
	})
	t.Run("shr_s:189", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I64, 1}, {wa.I64, 65}}, arg{wa.I64, 0})
	})
	t.Run("shr_s:190", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I64, 1}, {wa.I64, 18446744073709551615}}, arg{wa.I64, 0})
	})
	t.Run("shr_s:191", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I64, 1}, {wa.I64, 9223372036854775807}}, arg{wa.I64, 0})
	})
	t.Run("shr_s:192", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I64, 1}, {wa.I64, 9223372036854775808}}, arg{wa.I64, 1})
	})
	t.Run("shr_s:193", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 63}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("shr_s:194", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 64}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("shr_s:195", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 65}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("shr_s:196", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 18446744073709551615}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("shr_s:197", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 9223372036854775807}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("shr_s:198", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_s", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 9223372036854775808}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("shr_u:200", func(t *testing.T) { x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I64, 1}, {wa.I64, 1}}, arg{wa.I64, 0}) })
	t.Run("shr_u:201", func(t *testing.T) { x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{wa.I64, 1}) })
	t.Run("shr_u:202", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 1}}, arg{wa.I64, 9223372036854775807})
	})
	t.Run("shr_u:203", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 1}}, arg{wa.I64, 4611686018427387903})
	})
	t.Run("shr_u:204", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 1}}, arg{wa.I64, 4611686018427387904})
	})
	t.Run("shr_u:205", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I64, 4611686018427387904}, {wa.I64, 1}}, arg{wa.I64, 2305843009213693952})
	})
	t.Run("shr_u:206", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I64, 1}, {wa.I64, 64}}, arg{wa.I64, 1})
	})
	t.Run("shr_u:207", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I64, 1}, {wa.I64, 65}}, arg{wa.I64, 0})
	})
	t.Run("shr_u:208", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I64, 1}, {wa.I64, 18446744073709551615}}, arg{wa.I64, 0})
	})
	t.Run("shr_u:209", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I64, 1}, {wa.I64, 9223372036854775807}}, arg{wa.I64, 0})
	})
	t.Run("shr_u:210", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I64, 1}, {wa.I64, 9223372036854775808}}, arg{wa.I64, 1})
	})
	t.Run("shr_u:211", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 63}}, arg{wa.I64, 1})
	})
	t.Run("shr_u:212", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 64}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("shr_u:213", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 65}}, arg{wa.I64, 9223372036854775807})
	})
	t.Run("shr_u:214", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 18446744073709551615}}, arg{wa.I64, 1})
	})
	t.Run("shr_u:215", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 9223372036854775807}}, arg{wa.I64, 1})
	})
	t.Run("shr_u:216", func(t *testing.T) {
		x0.assertReturnInvoke(t, "shr_u", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 9223372036854775808}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("rotl:218", func(t *testing.T) { x0.assertReturnInvoke(t, "rotl", []arg{{wa.I64, 1}, {wa.I64, 1}}, arg{wa.I64, 2}) })
	t.Run("rotl:219", func(t *testing.T) { x0.assertReturnInvoke(t, "rotl", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{wa.I64, 1}) })
	t.Run("rotl:220", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotl", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 1}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("rotl:221", func(t *testing.T) { x0.assertReturnInvoke(t, "rotl", []arg{{wa.I64, 1}, {wa.I64, 64}}, arg{wa.I64, 1}) })
	t.Run("rotl:222", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotl", []arg{{wa.I64, 12379718583323101902}, {wa.I64, 1}}, arg{wa.I64, 6312693092936652189})
	})
	t.Run("rotl:223", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotl", []arg{{wa.I64, 18302628889324683264}, {wa.I64, 4}}, arg{wa.I64, 16140901123551657999})
	})
	t.Run("rotl:224", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotl", []arg{{wa.I64, 12379570969274382345}, {wa.I64, 53}}, arg{wa.I64, 87109505680009935})
	})
	t.Run("rotl:225", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotl", []arg{{wa.I64, 12380715672649826460}, {wa.I64, 63}}, arg{wa.I64, 6190357836324913230})
	})
	t.Run("rotl:226", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotl", []arg{{wa.I64, 12379570969274382345}, {wa.I64, 245}}, arg{wa.I64, 87109505680009935})
	})
	t.Run("rotl:227", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotl", []arg{{wa.I64, 12379676934707509257}, {wa.I64, 18446744073709551597}}, arg{wa.I64, 14916262237559758314})
	})
	t.Run("rotl:228", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotl", []arg{{wa.I64, 12380715672649826460}, {wa.I64, 9223372036854775871}}, arg{wa.I64, 6190357836324913230})
	})
	t.Run("rotl:229", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotl", []arg{{wa.I64, 1}, {wa.I64, 63}}, arg{wa.I64, 9223372036854775808})
	})
	t.Run("rotl:230", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotl", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 1}}, arg{wa.I64, 1})
	})
	t.Run("rotr:232", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotr", []arg{{wa.I64, 1}, {wa.I64, 1}}, arg{wa.I64, 9223372036854775808})
	})
	t.Run("rotr:233", func(t *testing.T) { x0.assertReturnInvoke(t, "rotr", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{wa.I64, 1}) })
	t.Run("rotr:234", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotr", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 1}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("rotr:235", func(t *testing.T) { x0.assertReturnInvoke(t, "rotr", []arg{{wa.I64, 1}, {wa.I64, 64}}, arg{wa.I64, 1}) })
	t.Run("rotr:236", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotr", []arg{{wa.I64, 12379718583323101902}, {wa.I64, 1}}, arg{wa.I64, 6189859291661550951})
	})
	t.Run("rotr:237", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotr", []arg{{wa.I64, 18302628889324683264}, {wa.I64, 4}}, arg{wa.I64, 1143914305582792704})
	})
	t.Run("rotr:238", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotr", []arg{{wa.I64, 12379570969274382345}, {wa.I64, 53}}, arg{wa.I64, 7534987797011123550})
	})
	t.Run("rotr:239", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotr", []arg{{wa.I64, 12380715672649826460}, {wa.I64, 63}}, arg{wa.I64, 6314687271590101305})
	})
	t.Run("rotr:240", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotr", []arg{{wa.I64, 12379570969274382345}, {wa.I64, 245}}, arg{wa.I64, 7534987797011123550})
	})
	t.Run("rotr:241", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotr", []arg{{wa.I64, 12379676934707509257}, {wa.I64, 18446744073709551597}}, arg{wa.I64, 10711665151168044651})
	})
	t.Run("rotr:242", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotr", []arg{{wa.I64, 12380715672649826460}, {wa.I64, 9223372036854775871}}, arg{wa.I64, 6314687271590101305})
	})
	t.Run("rotr:243", func(t *testing.T) { x0.assertReturnInvoke(t, "rotr", []arg{{wa.I64, 1}, {wa.I64, 63}}, arg{wa.I64, 2}) })
	t.Run("rotr:244", func(t *testing.T) {
		x0.assertReturnInvoke(t, "rotr", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 63}}, arg{wa.I64, 1})
	})
	t.Run("clz:246", func(t *testing.T) {
		x0.assertReturnInvoke(t, "clz", []arg{{wa.I64, 18446744073709551615}}, arg{wa.I64, 0})
	})
	t.Run("clz:247", func(t *testing.T) { x0.assertReturnInvoke(t, "clz", []arg{{wa.I64, 0}}, arg{wa.I64, 64}) })
	t.Run("clz:248", func(t *testing.T) { x0.assertReturnInvoke(t, "clz", []arg{{wa.I64, 32768}}, arg{wa.I64, 48}) })
	t.Run("clz:249", func(t *testing.T) { x0.assertReturnInvoke(t, "clz", []arg{{wa.I64, 255}}, arg{wa.I64, 56}) })
	t.Run("clz:250", func(t *testing.T) {
		x0.assertReturnInvoke(t, "clz", []arg{{wa.I64, 9223372036854775808}}, arg{wa.I64, 0})
	})
	t.Run("clz:251", func(t *testing.T) { x0.assertReturnInvoke(t, "clz", []arg{{wa.I64, 1}}, arg{wa.I64, 63}) })
	t.Run("clz:252", func(t *testing.T) { x0.assertReturnInvoke(t, "clz", []arg{{wa.I64, 2}}, arg{wa.I64, 62}) })
	t.Run("clz:253", func(t *testing.T) {
		x0.assertReturnInvoke(t, "clz", []arg{{wa.I64, 9223372036854775807}}, arg{wa.I64, 1})
	})
	t.Run("ctz:255", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ctz", []arg{{wa.I64, 18446744073709551615}}, arg{wa.I64, 0})
	})
	t.Run("ctz:256", func(t *testing.T) { x0.assertReturnInvoke(t, "ctz", []arg{{wa.I64, 0}}, arg{wa.I64, 64}) })
	t.Run("ctz:257", func(t *testing.T) { x0.assertReturnInvoke(t, "ctz", []arg{{wa.I64, 32768}}, arg{wa.I64, 15}) })
	t.Run("ctz:258", func(t *testing.T) { x0.assertReturnInvoke(t, "ctz", []arg{{wa.I64, 65536}}, arg{wa.I64, 16}) })
	t.Run("ctz:259", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ctz", []arg{{wa.I64, 9223372036854775808}}, arg{wa.I64, 63})
	})
	t.Run("ctz:260", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ctz", []arg{{wa.I64, 9223372036854775807}}, arg{wa.I64, 0})
	})
	t.Run("popcnt:262", func(t *testing.T) {
		x0.assertReturnInvoke(t, "popcnt", []arg{{wa.I64, 18446744073709551615}}, arg{wa.I64, 64})
	})
	t.Run("popcnt:263", func(t *testing.T) { x0.assertReturnInvoke(t, "popcnt", []arg{{wa.I64, 0}}, arg{wa.I64, 0}) })
	t.Run("popcnt:264", func(t *testing.T) { x0.assertReturnInvoke(t, "popcnt", []arg{{wa.I64, 32768}}, arg{wa.I64, 1}) })
	t.Run("popcnt:265", func(t *testing.T) {
		x0.assertReturnInvoke(t, "popcnt", []arg{{wa.I64, 9223512776490647552}}, arg{wa.I64, 4})
	})
	t.Run("popcnt:266", func(t *testing.T) {
		x0.assertReturnInvoke(t, "popcnt", []arg{{wa.I64, 9223372036854775807}}, arg{wa.I64, 63})
	})
	t.Run("popcnt:267", func(t *testing.T) {
		x0.assertReturnInvoke(t, "popcnt", []arg{{wa.I64, 12297829381041378645}}, arg{wa.I64, 32})
	})
	t.Run("popcnt:268", func(t *testing.T) {
		x0.assertReturnInvoke(t, "popcnt", []arg{{wa.I64, 11068046444512062122}}, arg{wa.I64, 32})
	})
	t.Run("popcnt:269", func(t *testing.T) {
		x0.assertReturnInvoke(t, "popcnt", []arg{{wa.I64, 16045690984833335023}}, arg{wa.I64, 48})
	})
	t.Run("extend8_s:271", func(t *testing.T) { x0.assertReturnInvoke(t, "extend8_s", []arg{{wa.I64, 0}}, arg{wa.I64, 0}) })
	t.Run("extend8_s:272", func(t *testing.T) { x0.assertReturnInvoke(t, "extend8_s", []arg{{wa.I64, 127}}, arg{wa.I64, 127}) })
	t.Run("extend8_s:273", func(t *testing.T) {
		x0.assertReturnInvoke(t, "extend8_s", []arg{{wa.I64, 128}}, arg{wa.I64, 18446744073709551488})
	})
	t.Run("extend8_s:274", func(t *testing.T) {
		x0.assertReturnInvoke(t, "extend8_s", []arg{{wa.I64, 255}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("extend8_s:275", func(t *testing.T) {
		x0.assertReturnInvoke(t, "extend8_s", []arg{{wa.I64, 81985529216486656}}, arg{wa.I64, 0})
	})
	t.Run("extend8_s:276", func(t *testing.T) {
		x0.assertReturnInvoke(t, "extend8_s", []arg{{wa.I64, 18364758544493064832}}, arg{wa.I64, 18446744073709551488})
	})
	t.Run("extend8_s:277", func(t *testing.T) {
		x0.assertReturnInvoke(t, "extend8_s", []arg{{wa.I64, 18446744073709551615}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("extend16_s:279", func(t *testing.T) { x0.assertReturnInvoke(t, "extend16_s", []arg{{wa.I64, 0}}, arg{wa.I64, 0}) })
	t.Run("extend16_s:280", func(t *testing.T) { x0.assertReturnInvoke(t, "extend16_s", []arg{{wa.I64, 32767}}, arg{wa.I64, 32767}) })
	t.Run("extend16_s:281", func(t *testing.T) {
		x0.assertReturnInvoke(t, "extend16_s", []arg{{wa.I64, 32768}}, arg{wa.I64, 18446744073709518848})
	})
	t.Run("extend16_s:282", func(t *testing.T) {
		x0.assertReturnInvoke(t, "extend16_s", []arg{{wa.I64, 65535}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("extend16_s:283", func(t *testing.T) {
		x0.assertReturnInvoke(t, "extend16_s", []arg{{wa.I64, 1311768467463733248}}, arg{wa.I64, 0})
	})
	t.Run("extend16_s:284", func(t *testing.T) {
		x0.assertReturnInvoke(t, "extend16_s", []arg{{wa.I64, 18364758544493084672}}, arg{wa.I64, 18446744073709518848})
	})
	t.Run("extend16_s:285", func(t *testing.T) {
		x0.assertReturnInvoke(t, "extend16_s", []arg{{wa.I64, 18446744073709551615}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("extend32_s:287", func(t *testing.T) { x0.assertReturnInvoke(t, "extend32_s", []arg{{wa.I64, 0}}, arg{wa.I64, 0}) })
	t.Run("extend32_s:288", func(t *testing.T) { x0.assertReturnInvoke(t, "extend32_s", []arg{{wa.I64, 32767}}, arg{wa.I64, 32767}) })
	t.Run("extend32_s:289", func(t *testing.T) { x0.assertReturnInvoke(t, "extend32_s", []arg{{wa.I64, 32768}}, arg{wa.I64, 32768}) })
	t.Run("extend32_s:290", func(t *testing.T) { x0.assertReturnInvoke(t, "extend32_s", []arg{{wa.I64, 65535}}, arg{wa.I64, 65535}) })
	t.Run("extend32_s:291", func(t *testing.T) {
		x0.assertReturnInvoke(t, "extend32_s", []arg{{wa.I64, 2147483647}}, arg{wa.I64, 2147483647})
	})
	t.Run("extend32_s:292", func(t *testing.T) {
		x0.assertReturnInvoke(t, "extend32_s", []arg{{wa.I64, 2147483648}}, arg{wa.I64, 18446744071562067968})
	})
	t.Run("extend32_s:293", func(t *testing.T) {
		x0.assertReturnInvoke(t, "extend32_s", []arg{{wa.I64, 4294967295}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("extend32_s:294", func(t *testing.T) {
		x0.assertReturnInvoke(t, "extend32_s", []arg{{wa.I64, 81985526906748928}}, arg{wa.I64, 0})
	})
	t.Run("extend32_s:295", func(t *testing.T) {
		x0.assertReturnInvoke(t, "extend32_s", []arg{{wa.I64, 18364758544655319040}}, arg{wa.I64, 18446744071562067968})
	})
	t.Run("extend32_s:296", func(t *testing.T) {
		x0.assertReturnInvoke(t, "extend32_s", []arg{{wa.I64, 18446744073709551615}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("eqz:298", func(t *testing.T) { x0.assertReturnInvoke(t, "eqz", []arg{{wa.I64, 0}}, arg{wa.I32, 1}) })
	t.Run("eqz:299", func(t *testing.T) { x0.assertReturnInvoke(t, "eqz", []arg{{wa.I64, 1}}, arg{wa.I32, 0}) })
	t.Run("eqz:300", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eqz", []arg{{wa.I64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("eqz:301", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eqz", []arg{{wa.I64, 9223372036854775807}}, arg{wa.I32, 0})
	})
	t.Run("eqz:302", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eqz", []arg{{wa.I64, 18446744073709551615}}, arg{wa.I32, 0})
	})
	t.Run("eq:304", func(t *testing.T) { x0.assertReturnInvoke(t, "eq", []arg{{wa.I64, 0}, {wa.I64, 0}}, arg{wa.I32, 1}) })
	t.Run("eq:305", func(t *testing.T) { x0.assertReturnInvoke(t, "eq", []arg{{wa.I64, 1}, {wa.I64, 1}}, arg{wa.I32, 1}) })
	t.Run("eq:306", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 1}}, arg{wa.I32, 0})
	})
	t.Run("eq:307", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("eq:308", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 9223372036854775807}}, arg{wa.I32, 1})
	})
	t.Run("eq:309", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 18446744073709551615}}, arg{wa.I32, 1})
	})
	t.Run("eq:310", func(t *testing.T) { x0.assertReturnInvoke(t, "eq", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{wa.I32, 0}) })
	t.Run("eq:311", func(t *testing.T) { x0.assertReturnInvoke(t, "eq", []arg{{wa.I64, 0}, {wa.I64, 1}}, arg{wa.I32, 0}) })
	t.Run("eq:312", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 0}}, arg{wa.I32, 0})
	})
	t.Run("eq:313", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.I64, 0}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("eq:314", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 18446744073709551615}}, arg{wa.I32, 0})
	})
	t.Run("eq:315", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("eq:316", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 9223372036854775807}}, arg{wa.I32, 0})
	})
	t.Run("eq:317", func(t *testing.T) {
		x0.assertReturnInvoke(t, "eq", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("ne:319", func(t *testing.T) { x0.assertReturnInvoke(t, "ne", []arg{{wa.I64, 0}, {wa.I64, 0}}, arg{wa.I32, 0}) })
	t.Run("ne:320", func(t *testing.T) { x0.assertReturnInvoke(t, "ne", []arg{{wa.I64, 1}, {wa.I64, 1}}, arg{wa.I32, 0}) })
	t.Run("ne:321", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 1}}, arg{wa.I32, 1})
	})
	t.Run("ne:322", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("ne:323", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 9223372036854775807}}, arg{wa.I32, 0})
	})
	t.Run("ne:324", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 18446744073709551615}}, arg{wa.I32, 0})
	})
	t.Run("ne:325", func(t *testing.T) { x0.assertReturnInvoke(t, "ne", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{wa.I32, 1}) })
	t.Run("ne:326", func(t *testing.T) { x0.assertReturnInvoke(t, "ne", []arg{{wa.I64, 0}, {wa.I64, 1}}, arg{wa.I32, 1}) })
	t.Run("ne:327", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 0}}, arg{wa.I32, 1})
	})
	t.Run("ne:328", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.I64, 0}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ne:329", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 18446744073709551615}}, arg{wa.I32, 1})
	})
	t.Run("ne:330", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ne:331", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 9223372036854775807}}, arg{wa.I32, 1})
	})
	t.Run("ne:332", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ne", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("lt_s:334", func(t *testing.T) { x0.assertReturnInvoke(t, "lt_s", []arg{{wa.I64, 0}, {wa.I64, 0}}, arg{wa.I32, 0}) })
	t.Run("lt_s:335", func(t *testing.T) { x0.assertReturnInvoke(t, "lt_s", []arg{{wa.I64, 1}, {wa.I64, 1}}, arg{wa.I32, 0}) })
	t.Run("lt_s:336", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_s", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 1}}, arg{wa.I32, 1})
	})
	t.Run("lt_s:337", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_s", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("lt_s:338", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_s", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 9223372036854775807}}, arg{wa.I32, 0})
	})
	t.Run("lt_s:339", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_s", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 18446744073709551615}}, arg{wa.I32, 0})
	})
	t.Run("lt_s:340", func(t *testing.T) { x0.assertReturnInvoke(t, "lt_s", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{wa.I32, 0}) })
	t.Run("lt_s:341", func(t *testing.T) { x0.assertReturnInvoke(t, "lt_s", []arg{{wa.I64, 0}, {wa.I64, 1}}, arg{wa.I32, 1}) })
	t.Run("lt_s:342", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_s", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 0}}, arg{wa.I32, 1})
	})
	t.Run("lt_s:343", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_s", []arg{{wa.I64, 0}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("lt_s:344", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_s", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 18446744073709551615}}, arg{wa.I32, 1})
	})
	t.Run("lt_s:345", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_s", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("lt_s:346", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_s", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 9223372036854775807}}, arg{wa.I32, 1})
	})
	t.Run("lt_s:347", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_s", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("lt_u:349", func(t *testing.T) { x0.assertReturnInvoke(t, "lt_u", []arg{{wa.I64, 0}, {wa.I64, 0}}, arg{wa.I32, 0}) })
	t.Run("lt_u:350", func(t *testing.T) { x0.assertReturnInvoke(t, "lt_u", []arg{{wa.I64, 1}, {wa.I64, 1}}, arg{wa.I32, 0}) })
	t.Run("lt_u:351", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_u", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 1}}, arg{wa.I32, 0})
	})
	t.Run("lt_u:352", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_u", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("lt_u:353", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_u", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 9223372036854775807}}, arg{wa.I32, 0})
	})
	t.Run("lt_u:354", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_u", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 18446744073709551615}}, arg{wa.I32, 0})
	})
	t.Run("lt_u:355", func(t *testing.T) { x0.assertReturnInvoke(t, "lt_u", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{wa.I32, 0}) })
	t.Run("lt_u:356", func(t *testing.T) { x0.assertReturnInvoke(t, "lt_u", []arg{{wa.I64, 0}, {wa.I64, 1}}, arg{wa.I32, 1}) })
	t.Run("lt_u:357", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_u", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 0}}, arg{wa.I32, 0})
	})
	t.Run("lt_u:358", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_u", []arg{{wa.I64, 0}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("lt_u:359", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_u", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 18446744073709551615}}, arg{wa.I32, 1})
	})
	t.Run("lt_u:360", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_u", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("lt_u:361", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_u", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 9223372036854775807}}, arg{wa.I32, 0})
	})
	t.Run("lt_u:362", func(t *testing.T) {
		x0.assertReturnInvoke(t, "lt_u", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("le_s:364", func(t *testing.T) { x0.assertReturnInvoke(t, "le_s", []arg{{wa.I64, 0}, {wa.I64, 0}}, arg{wa.I32, 1}) })
	t.Run("le_s:365", func(t *testing.T) { x0.assertReturnInvoke(t, "le_s", []arg{{wa.I64, 1}, {wa.I64, 1}}, arg{wa.I32, 1}) })
	t.Run("le_s:366", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_s", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 1}}, arg{wa.I32, 1})
	})
	t.Run("le_s:367", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_s", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("le_s:368", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_s", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 9223372036854775807}}, arg{wa.I32, 1})
	})
	t.Run("le_s:369", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_s", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 18446744073709551615}}, arg{wa.I32, 1})
	})
	t.Run("le_s:370", func(t *testing.T) { x0.assertReturnInvoke(t, "le_s", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{wa.I32, 0}) })
	t.Run("le_s:371", func(t *testing.T) { x0.assertReturnInvoke(t, "le_s", []arg{{wa.I64, 0}, {wa.I64, 1}}, arg{wa.I32, 1}) })
	t.Run("le_s:372", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_s", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 0}}, arg{wa.I32, 1})
	})
	t.Run("le_s:373", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_s", []arg{{wa.I64, 0}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("le_s:374", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_s", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 18446744073709551615}}, arg{wa.I32, 1})
	})
	t.Run("le_s:375", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_s", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("le_s:376", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_s", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 9223372036854775807}}, arg{wa.I32, 1})
	})
	t.Run("le_s:377", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_s", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("le_u:379", func(t *testing.T) { x0.assertReturnInvoke(t, "le_u", []arg{{wa.I64, 0}, {wa.I64, 0}}, arg{wa.I32, 1}) })
	t.Run("le_u:380", func(t *testing.T) { x0.assertReturnInvoke(t, "le_u", []arg{{wa.I64, 1}, {wa.I64, 1}}, arg{wa.I32, 1}) })
	t.Run("le_u:381", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_u", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 1}}, arg{wa.I32, 0})
	})
	t.Run("le_u:382", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_u", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("le_u:383", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_u", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 9223372036854775807}}, arg{wa.I32, 1})
	})
	t.Run("le_u:384", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_u", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 18446744073709551615}}, arg{wa.I32, 1})
	})
	t.Run("le_u:385", func(t *testing.T) { x0.assertReturnInvoke(t, "le_u", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{wa.I32, 0}) })
	t.Run("le_u:386", func(t *testing.T) { x0.assertReturnInvoke(t, "le_u", []arg{{wa.I64, 0}, {wa.I64, 1}}, arg{wa.I32, 1}) })
	t.Run("le_u:387", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_u", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 0}}, arg{wa.I32, 0})
	})
	t.Run("le_u:388", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_u", []arg{{wa.I64, 0}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("le_u:389", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_u", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 18446744073709551615}}, arg{wa.I32, 1})
	})
	t.Run("le_u:390", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_u", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("le_u:391", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_u", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 9223372036854775807}}, arg{wa.I32, 0})
	})
	t.Run("le_u:392", func(t *testing.T) {
		x0.assertReturnInvoke(t, "le_u", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("gt_s:394", func(t *testing.T) { x0.assertReturnInvoke(t, "gt_s", []arg{{wa.I64, 0}, {wa.I64, 0}}, arg{wa.I32, 0}) })
	t.Run("gt_s:395", func(t *testing.T) { x0.assertReturnInvoke(t, "gt_s", []arg{{wa.I64, 1}, {wa.I64, 1}}, arg{wa.I32, 0}) })
	t.Run("gt_s:396", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_s", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 1}}, arg{wa.I32, 0})
	})
	t.Run("gt_s:397", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_s", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("gt_s:398", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_s", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 9223372036854775807}}, arg{wa.I32, 0})
	})
	t.Run("gt_s:399", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_s", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 18446744073709551615}}, arg{wa.I32, 0})
	})
	t.Run("gt_s:400", func(t *testing.T) { x0.assertReturnInvoke(t, "gt_s", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{wa.I32, 1}) })
	t.Run("gt_s:401", func(t *testing.T) { x0.assertReturnInvoke(t, "gt_s", []arg{{wa.I64, 0}, {wa.I64, 1}}, arg{wa.I32, 0}) })
	t.Run("gt_s:402", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_s", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 0}}, arg{wa.I32, 0})
	})
	t.Run("gt_s:403", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_s", []arg{{wa.I64, 0}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("gt_s:404", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_s", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 18446744073709551615}}, arg{wa.I32, 0})
	})
	t.Run("gt_s:405", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_s", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("gt_s:406", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_s", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 9223372036854775807}}, arg{wa.I32, 0})
	})
	t.Run("gt_s:407", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_s", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("gt_u:409", func(t *testing.T) { x0.assertReturnInvoke(t, "gt_u", []arg{{wa.I64, 0}, {wa.I64, 0}}, arg{wa.I32, 0}) })
	t.Run("gt_u:410", func(t *testing.T) { x0.assertReturnInvoke(t, "gt_u", []arg{{wa.I64, 1}, {wa.I64, 1}}, arg{wa.I32, 0}) })
	t.Run("gt_u:411", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_u", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 1}}, arg{wa.I32, 1})
	})
	t.Run("gt_u:412", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_u", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("gt_u:413", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_u", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 9223372036854775807}}, arg{wa.I32, 0})
	})
	t.Run("gt_u:414", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_u", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 18446744073709551615}}, arg{wa.I32, 0})
	})
	t.Run("gt_u:415", func(t *testing.T) { x0.assertReturnInvoke(t, "gt_u", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{wa.I32, 1}) })
	t.Run("gt_u:416", func(t *testing.T) { x0.assertReturnInvoke(t, "gt_u", []arg{{wa.I64, 0}, {wa.I64, 1}}, arg{wa.I32, 0}) })
	t.Run("gt_u:417", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_u", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 0}}, arg{wa.I32, 1})
	})
	t.Run("gt_u:418", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_u", []arg{{wa.I64, 0}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("gt_u:419", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_u", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 18446744073709551615}}, arg{wa.I32, 0})
	})
	t.Run("gt_u:420", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_u", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("gt_u:421", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_u", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 9223372036854775807}}, arg{wa.I32, 1})
	})
	t.Run("gt_u:422", func(t *testing.T) {
		x0.assertReturnInvoke(t, "gt_u", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("ge_s:424", func(t *testing.T) { x0.assertReturnInvoke(t, "ge_s", []arg{{wa.I64, 0}, {wa.I64, 0}}, arg{wa.I32, 1}) })
	t.Run("ge_s:425", func(t *testing.T) { x0.assertReturnInvoke(t, "ge_s", []arg{{wa.I64, 1}, {wa.I64, 1}}, arg{wa.I32, 1}) })
	t.Run("ge_s:426", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_s", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 1}}, arg{wa.I32, 0})
	})
	t.Run("ge_s:427", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_s", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ge_s:428", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_s", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 9223372036854775807}}, arg{wa.I32, 1})
	})
	t.Run("ge_s:429", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_s", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 18446744073709551615}}, arg{wa.I32, 1})
	})
	t.Run("ge_s:430", func(t *testing.T) { x0.assertReturnInvoke(t, "ge_s", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{wa.I32, 1}) })
	t.Run("ge_s:431", func(t *testing.T) { x0.assertReturnInvoke(t, "ge_s", []arg{{wa.I64, 0}, {wa.I64, 1}}, arg{wa.I32, 0}) })
	t.Run("ge_s:432", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_s", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 0}}, arg{wa.I32, 0})
	})
	t.Run("ge_s:433", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_s", []arg{{wa.I64, 0}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ge_s:434", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_s", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 18446744073709551615}}, arg{wa.I32, 0})
	})
	t.Run("ge_s:435", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_s", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ge_s:436", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_s", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 9223372036854775807}}, arg{wa.I32, 0})
	})
	t.Run("ge_s:437", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_s", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ge_u:439", func(t *testing.T) { x0.assertReturnInvoke(t, "ge_u", []arg{{wa.I64, 0}, {wa.I64, 0}}, arg{wa.I32, 1}) })
	t.Run("ge_u:440", func(t *testing.T) { x0.assertReturnInvoke(t, "ge_u", []arg{{wa.I64, 1}, {wa.I64, 1}}, arg{wa.I32, 1}) })
	t.Run("ge_u:441", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_u", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 1}}, arg{wa.I32, 1})
	})
	t.Run("ge_u:442", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_u", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ge_u:443", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_u", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 9223372036854775807}}, arg{wa.I32, 1})
	})
	t.Run("ge_u:444", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_u", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 18446744073709551615}}, arg{wa.I32, 1})
	})
	t.Run("ge_u:445", func(t *testing.T) { x0.assertReturnInvoke(t, "ge_u", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{wa.I32, 1}) })
	t.Run("ge_u:446", func(t *testing.T) { x0.assertReturnInvoke(t, "ge_u", []arg{{wa.I64, 0}, {wa.I64, 1}}, arg{wa.I32, 0}) })
	t.Run("ge_u:447", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_u", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 0}}, arg{wa.I32, 1})
	})
	t.Run("ge_u:448", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_u", []arg{{wa.I64, 0}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("ge_u:449", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_u", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 18446744073709551615}}, arg{wa.I32, 0})
	})
	t.Run("ge_u:450", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_u", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 1})
	})
	t.Run("ge_u:451", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_u", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 9223372036854775807}}, arg{wa.I32, 1})
	})
	t.Run("ge_u:452", func(t *testing.T) {
		x0.assertReturnInvoke(t, "ge_u", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 9223372036854775808}}, arg{wa.I32, 0})
	})
	t.Run("assert_invalid:457", func(t *testing.T) { assertInvalidSpec(t, "i64.1.wasm", "type mismatch") })
	t.Run("assert_invalid:458", func(t *testing.T) { assertInvalidSpec(t, "i64.2.wasm", "type mismatch") })
	t.Run("assert_invalid:459", func(t *testing.T) { assertInvalidSpec(t, "i64.3.wasm", "type mismatch") })
	t.Run("assert_invalid:460", func(t *testing.T) { assertInvalidSpec(t, "i64.4.wasm", "type mismatch") })
	t.Run("assert_invalid:461", func(t *testing.T) { assertInvalidSpec(t, "i64.5.wasm", "type mismatch") })
	t.Run("assert_invalid:462", func(t *testing.T) { assertInvalidSpec(t, "i64.6.wasm", "type mismatch") })
	t.Run("assert_invalid:463", func(t *testing.T) { assertInvalidSpec(t, "i64.7.wasm", "type mismatch") })
	t.Run("assert_invalid:464", func(t *testing.T) { assertInvalidSpec(t, "i64.8.wasm", "type mismatch") })
	t.Run("assert_invalid:465", func(t *testing.T) { assertInvalidSpec(t, "i64.9.wasm", "type mismatch") })
	t.Run("assert_invalid:466", func(t *testing.T) { assertInvalidSpec(t, "i64.10.wasm", "type mismatch") })
	t.Run("assert_invalid:467", func(t *testing.T) { assertInvalidSpec(t, "i64.11.wasm", "type mismatch") })
	t.Run("assert_invalid:468", func(t *testing.T) { assertInvalidSpec(t, "i64.12.wasm", "type mismatch") })
	t.Run("assert_invalid:469", func(t *testing.T) { assertInvalidSpec(t, "i64.13.wasm", "type mismatch") })
	t.Run("assert_invalid:470", func(t *testing.T) { assertInvalidSpec(t, "i64.14.wasm", "type mismatch") })
	t.Run("assert_invalid:471", func(t *testing.T) { assertInvalidSpec(t, "i64.15.wasm", "type mismatch") })
	t.Run("assert_invalid:472", func(t *testing.T) { assertInvalidSpec(t, "i64.16.wasm", "type mismatch") })
	t.Run("assert_invalid:473", func(t *testing.T) { assertInvalidSpec(t, "i64.17.wasm", "type mismatch") })
	t.Run("assert_invalid:474", func(t *testing.T) { assertInvalidSpec(t, "i64.18.wasm", "type mismatch") })
	t.Run("assert_invalid:475", func(t *testing.T) { assertInvalidSpec(t, "i64.19.wasm", "type mismatch") })
	t.Run("assert_invalid:476", func(t *testing.T) { assertInvalidSpec(t, "i64.20.wasm", "type mismatch") })
	t.Run("assert_invalid:477", func(t *testing.T) { assertInvalidSpec(t, "i64.21.wasm", "type mismatch") })
	t.Run("assert_invalid:478", func(t *testing.T) { assertInvalidSpec(t, "i64.22.wasm", "type mismatch") })
	t.Run("assert_invalid:479", func(t *testing.T) { assertInvalidSpec(t, "i64.23.wasm", "type mismatch") })
	t.Run("assert_invalid:480", func(t *testing.T) { assertInvalidSpec(t, "i64.24.wasm", "type mismatch") })
	t.Run("assert_invalid:481", func(t *testing.T) { assertInvalidSpec(t, "i64.25.wasm", "type mismatch") })
	t.Run("assert_invalid:482", func(t *testing.T) { assertInvalidSpec(t, "i64.26.wasm", "type mismatch") })
	t.Run("assert_invalid:483", func(t *testing.T) { assertInvalidSpec(t, "i64.27.wasm", "type mismatch") })
	t.Run("assert_invalid:484", func(t *testing.T) { assertInvalidSpec(t, "i64.28.wasm", "type mismatch") })
	t.Run("assert_invalid:485", func(t *testing.T) { assertInvalidSpec(t, "i64.29.wasm", "type mismatch") })
}

func Test_if(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "if.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("empty:529", func(t *testing.T) { x0.assertReturnInvoke(t, "empty", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("empty:530", func(t *testing.T) { x0.assertReturnInvoke(t, "empty", []arg{{wa.I32, 1}}, arg{}) })
	t.Run("empty:531", func(t *testing.T) { x0.assertReturnInvoke(t, "empty", []arg{{wa.I32, 100}}, arg{}) })
	t.Run("empty:532", func(t *testing.T) { x0.assertReturnInvoke(t, "empty", []arg{{wa.I32, 4294967294}}, arg{}) })
	t.Run("singular:534", func(t *testing.T) { x0.assertReturnInvoke(t, "singular", []arg{{wa.I32, 0}}, arg{wa.I32, 8}) })
	t.Run("singular:535", func(t *testing.T) { x0.assertReturnInvoke(t, "singular", []arg{{wa.I32, 1}}, arg{wa.I32, 7}) })
	t.Run("singular:536", func(t *testing.T) { x0.assertReturnInvoke(t, "singular", []arg{{wa.I32, 10}}, arg{wa.I32, 7}) })
	t.Run("singular:537", func(t *testing.T) { x0.assertReturnInvoke(t, "singular", []arg{{wa.I32, 4294967286}}, arg{wa.I32, 7}) })
	t.Run("multi:539", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("multi:540", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("multi:541", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("multi:542", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("nested:544", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested", []arg{{wa.I32, 0}, {wa.I32, 0}}, arg{wa.I32, 11})
	})
	t.Run("nested:545", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{wa.I32, 10})
	})
	t.Run("nested:546", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{wa.I32, 10})
	})
	t.Run("nested:547", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested", []arg{{wa.I32, 3}, {wa.I32, 2}}, arg{wa.I32, 9})
	})
	t.Run("nested:548", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested", []arg{{wa.I32, 0}, {wa.I32, 4294967196}}, arg{wa.I32, 10})
	})
	t.Run("nested:549", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested", []arg{{wa.I32, 10}, {wa.I32, 10}}, arg{wa.I32, 9})
	})
	t.Run("nested:550", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested", []arg{{wa.I32, 0}, {wa.I32, 4294967295}}, arg{wa.I32, 10})
	})
	t.Run("nested:551", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nested", []arg{{wa.I32, 4294967185}, {wa.I32, 4294967294}}, arg{wa.I32, 9})
	})
	t.Run("as-select-first:553", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-first", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("as-select-first:554", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-first", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("as-select-mid:555", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-mid", []arg{{wa.I32, 0}}, arg{wa.I32, 2}) })
	t.Run("as-select-mid:556", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-mid", []arg{{wa.I32, 1}}, arg{wa.I32, 2}) })
	t.Run("as-select-last:557", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-last", []arg{{wa.I32, 0}}, arg{wa.I32, 3}) })
	t.Run("as-select-last:558", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-last", []arg{{wa.I32, 1}}, arg{wa.I32, 2}) })
	t.Run("as-loop-first:560", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-first", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("as-loop-first:561", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-first", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("as-loop-mid:562", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-mid", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("as-loop-mid:563", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-mid", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("as-loop-last:564", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-last", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("as-loop-last:565", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-last", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("as-if-condition:567", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-condition", []arg{{wa.I32, 0}}, arg{wa.I32, 3}) })
	t.Run("as-if-condition:568", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-condition", []arg{{wa.I32, 1}}, arg{wa.I32, 2}) })
	t.Run("as-br_if-first:570", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-first", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("as-br_if-first:571", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-first", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("as-br_if-last:572", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-last", []arg{{wa.I32, 0}}, arg{wa.I32, 3}) })
	t.Run("as-br_if-last:573", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-last", []arg{{wa.I32, 1}}, arg{wa.I32, 2}) })
	t.Run("as-br_table-first:575", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-first", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("as-br_table-first:576", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-first", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("as-br_table-last:577", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-last", []arg{{wa.I32, 0}}, arg{wa.I32, 2}) })
	t.Run("as-br_table-last:578", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-last", []arg{{wa.I32, 1}}, arg{wa.I32, 2}) })
	t.Run("as-call_indirect-first:580", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-call_indirect-first", []arg{{wa.I32, 0}}, arg{wa.I32, 0})
	})
	t.Run("as-call_indirect-first:581", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-call_indirect-first", []arg{{wa.I32, 1}}, arg{wa.I32, 1})
	})
	t.Run("as-call_indirect-mid:582", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-call_indirect-mid", []arg{{wa.I32, 0}}, arg{wa.I32, 2})
	})
	t.Run("as-call_indirect-mid:583", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-call_indirect-mid", []arg{{wa.I32, 1}}, arg{wa.I32, 2})
	})
	t.Run("as-call_indirect-last:584", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-call_indirect-last", []arg{{wa.I32, 0}}, arg{wa.I32, 2})
	})
	t.Run("as-call_indirect-last:585", func(t *testing.T) {
		x0.assertTrap(t, "as-call_indirect-last", []arg{{wa.I32, 1}}, arg{Type: wa.I32}, "undefined element")
	})
	t.Run("as-store-first:587", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-first", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("as-store-first:588", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-first", []arg{{wa.I32, 1}}, arg{}) })
	t.Run("as-store-last:589", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-last", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("as-store-last:590", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-last", []arg{{wa.I32, 1}}, arg{}) })
	t.Run("as-memory.grow-value:592", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-memory.grow-value", []arg{{wa.I32, 0}}, arg{wa.I32, 1})
	})
	t.Run("as-memory.grow-value:593", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-memory.grow-value", []arg{{wa.I32, 1}}, arg{wa.I32, 1})
	})
	t.Run("as-call-value:595", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call-value", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("as-call-value:596", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call-value", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("as-return-value:598", func(t *testing.T) { x0.assertReturnInvoke(t, "as-return-value", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("as-return-value:599", func(t *testing.T) { x0.assertReturnInvoke(t, "as-return-value", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("as-drop-operand:601", func(t *testing.T) { x0.assertReturnInvoke(t, "as-drop-operand", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("as-drop-operand:602", func(t *testing.T) { x0.assertReturnInvoke(t, "as-drop-operand", []arg{{wa.I32, 1}}, arg{}) })
	t.Run("as-br-value:604", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br-value", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("as-br-value:605", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br-value", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("as-local.set-value:607", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.set-value", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("as-local.set-value:608", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.set-value", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("as-local.tee-value:610", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.tee-value", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("as-local.tee-value:611", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.tee-value", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("as-global.set-value:613", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-global.set-value", []arg{{wa.I32, 0}}, arg{wa.I32, 0})
	})
	t.Run("as-global.set-value:614", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-global.set-value", []arg{{wa.I32, 1}}, arg{wa.I32, 1})
	})
	t.Run("as-load-operand:616", func(t *testing.T) { x0.assertReturnInvoke(t, "as-load-operand", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("as-load-operand:617", func(t *testing.T) { x0.assertReturnInvoke(t, "as-load-operand", []arg{{wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("as-unary-operand:619", func(t *testing.T) { x0.assertReturnInvoke(t, "as-unary-operand", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("as-unary-operand:620", func(t *testing.T) { x0.assertReturnInvoke(t, "as-unary-operand", []arg{{wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("as-unary-operand:621", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-unary-operand", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 0})
	})
	t.Run("as-binary-operand:623", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-binary-operand", []arg{{wa.I32, 0}, {wa.I32, 0}}, arg{wa.I32, 15})
	})
	t.Run("as-binary-operand:624", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-binary-operand", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{wa.I32, 4294967284})
	})
	t.Run("as-binary-operand:625", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-binary-operand", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{wa.I32, 4294967281})
	})
	t.Run("as-binary-operand:626", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-binary-operand", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I32, 12})
	})
	t.Run("as-test-operand:628", func(t *testing.T) { x0.assertReturnInvoke(t, "as-test-operand", []arg{{wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("as-test-operand:629", func(t *testing.T) { x0.assertReturnInvoke(t, "as-test-operand", []arg{{wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("as-compare-operand:631", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-compare-operand", []arg{{wa.I32, 0}, {wa.I32, 0}}, arg{wa.I32, 1})
	})
	t.Run("as-compare-operand:632", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-compare-operand", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{wa.I32, 0})
	})
	t.Run("as-compare-operand:633", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-compare-operand", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{wa.I32, 1})
	})
	t.Run("as-compare-operand:634", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-compare-operand", []arg{{wa.I32, 1}, {wa.I32, 1}}, arg{wa.I32, 0})
	})
	t.Run("as-binary-operands:636", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-binary-operands", []arg{{wa.I32, 0}}, arg{wa.I32, 4294967284})
	})
	t.Run("as-binary-operands:637", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-binary-operands", []arg{{wa.I32, 1}}, arg{wa.I32, 12})
	})
	t.Run("as-compare-operands:639", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-compare-operands", []arg{{wa.I32, 0}}, arg{wa.I32, 1})
	})
	t.Run("as-compare-operands:640", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-compare-operands", []arg{{wa.I32, 1}}, arg{wa.I32, 0})
	})
	t.Run("as-mixed-operands:642", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-mixed-operands", []arg{{wa.I32, 0}}, arg{wa.I32, 4294967293})
	})
	t.Run("as-mixed-operands:643", func(t *testing.T) { x0.assertReturnInvoke(t, "as-mixed-operands", []arg{{wa.I32, 1}}, arg{wa.I32, 27}) })
	t.Run("break-bare:645", func(t *testing.T) { x0.assertReturnInvoke(t, "break-bare", nil, arg{wa.I32, 19}) })
	t.Run("break-value:646", func(t *testing.T) { x0.assertReturnInvoke(t, "break-value", []arg{{wa.I32, 1}}, arg{wa.I32, 18}) })
	t.Run("break-value:647", func(t *testing.T) { x0.assertReturnInvoke(t, "break-value", []arg{{wa.I32, 0}}, arg{wa.I32, 21}) })
	t.Run("break-multi-value:648", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("break-multi-value:651", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("param:655", func(t *testing.T) { x0.assertReturnInvoke(t, "param", []arg{{wa.I32, 0}}, arg{wa.I32, 4294967295}) })
	t.Run("param:656", func(t *testing.T) { x0.assertReturnInvoke(t, "param", []arg{{wa.I32, 1}}, arg{wa.I32, 3}) })
	t.Run("params:657", func(t *testing.T) { x0.assertReturnInvoke(t, "params", []arg{{wa.I32, 0}}, arg{wa.I32, 4294967295}) })
	t.Run("params:658", func(t *testing.T) { x0.assertReturnInvoke(t, "params", []arg{{wa.I32, 1}}, arg{wa.I32, 3}) })
	t.Run("params-id:659", func(t *testing.T) { x0.assertReturnInvoke(t, "params-id", []arg{{wa.I32, 0}}, arg{wa.I32, 3}) })
	t.Run("params-id:660", func(t *testing.T) { x0.assertReturnInvoke(t, "params-id", []arg{{wa.I32, 1}}, arg{wa.I32, 3}) })
	t.Run("param-break:661", func(t *testing.T) {
		x0.assertReturnInvoke(t, "param-break", []arg{{wa.I32, 0}}, arg{wa.I32, 4294967295})
	})
	t.Run("param-break:662", func(t *testing.T) { x0.assertReturnInvoke(t, "param-break", []arg{{wa.I32, 1}}, arg{wa.I32, 3}) })
	t.Run("params-break:663", func(t *testing.T) {
		x0.assertReturnInvoke(t, "params-break", []arg{{wa.I32, 0}}, arg{wa.I32, 4294967295})
	})
	t.Run("params-break:664", func(t *testing.T) { x0.assertReturnInvoke(t, "params-break", []arg{{wa.I32, 1}}, arg{wa.I32, 3}) })
	t.Run("params-id-break:665", func(t *testing.T) { x0.assertReturnInvoke(t, "params-id-break", []arg{{wa.I32, 0}}, arg{wa.I32, 3}) })
	t.Run("params-id-break:666", func(t *testing.T) { x0.assertReturnInvoke(t, "params-id-break", []arg{{wa.I32, 1}}, arg{wa.I32, 3}) })
	t.Run("effects:668", func(t *testing.T) { x0.assertReturnInvoke(t, "effects", []arg{{wa.I32, 1}}, arg{wa.I32, 4294967282}) })
	t.Run("effects:669", func(t *testing.T) { x0.assertReturnInvoke(t, "effects", []arg{{wa.I32, 0}}, arg{wa.I32, 4294967290}) })
	t.Run("add64_u_with_carry:672", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("add64_u_with_carry:676", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("add64_u_with_carry:680", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("add64_u_with_carry:684", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("add64_u_with_carry:688", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("add64_u_with_carry:692", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("add64_u_with_carry:696", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("add64_u_with_carry:700", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("add64_u_saturated:705", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add64_u_saturated", []arg{{wa.I64, 0}, {wa.I64, 0}}, arg{wa.I64, 0})
	})
	t.Run("add64_u_saturated:708", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add64_u_saturated", []arg{{wa.I64, 1230}, {wa.I64, 23}}, arg{wa.I64, 1253})
	})
	t.Run("add64_u_saturated:711", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add64_u_saturated", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 0}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("add64_u_saturated:714", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add64_u_saturated", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 1}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("add64_u_saturated:717", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add64_u_saturated", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 18446744073709551615}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("add64_u_saturated:720", func(t *testing.T) {
		x0.assertReturnInvoke(t, "add64_u_saturated", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 9223372036854775808}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("type-use:723", func(t *testing.T) { x0.assertReturnInvoke(t, "type-use", nil, arg{}) })
	t.Run("assert_malformed:726", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:735", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:744", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:753", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:762", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:771", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:778", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:786", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:796", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:806", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:816", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_invalid:826", func(t *testing.T) { assertInvalidSpec(t, "if.12.wasm", "type mismatch") })
	t.Run("assert_invalid:834", func(t *testing.T) { assertInvalidSpec(t, "if.13.wasm", "type mismatch") })
	t.Run("assert_invalid:838", func(t *testing.T) { assertInvalidSpec(t, "if.14.wasm", "type mismatch") })
	t.Run("assert_invalid:842", func(t *testing.T) { assertInvalidSpec(t, "if.15.wasm", "type mismatch") })
	t.Run("assert_invalid:846", func(t *testing.T) { assertInvalidSpec(t, "if.16.wasm", "type mismatch") })
	t.Run("assert_invalid:851", func(t *testing.T) { assertInvalidSpec(t, "if.17.wasm", "type mismatch") })
	t.Run("assert_invalid:855", func(t *testing.T) { assertInvalidSpec(t, "if.18.wasm", "type mismatch") })
	t.Run("assert_invalid:859", func(t *testing.T) { assertInvalidSpec(t, "if.19.wasm", "type mismatch") })
	t.Run("assert_invalid:863", func(t *testing.T) { assertInvalidSpec(t, "if.20.wasm", "type mismatch") })
	t.Run("assert_invalid:868", func(t *testing.T) { assertInvalidSpec(t, "if.21.wasm", "type mismatch") })
	t.Run("assert_invalid:874", func(t *testing.T) { assertInvalidSpec(t, "if.22.wasm", "type mismatch") })
	t.Run("assert_invalid:880", func(t *testing.T) { assertInvalidSpec(t, "if.23.wasm", "type mismatch") })
	t.Run("assert_invalid:886", func(t *testing.T) { assertInvalidSpec(t, "if.24.wasm", "type mismatch") })
	t.Run("assert_invalid:893", func(t *testing.T) { assertInvalidSpec(t, "if.25.wasm", "type mismatch") })
	t.Run("assert_invalid:899", func(t *testing.T) { assertInvalidSpec(t, "if.26.wasm", "type mismatch") })
	t.Run("assert_invalid:905", func(t *testing.T) { assertInvalidSpec(t, "if.27.wasm", "type mismatch") })
	t.Run("assert_invalid:911", func(t *testing.T) { assertInvalidSpec(t, "if.28.wasm", "type mismatch") })
	t.Run("assert_invalid:918", func(t *testing.T) { assertInvalidSpec(t, "if.29.wasm", "type mismatch") })
	t.Run("assert_invalid:924", func(t *testing.T) { assertInvalidSpec(t, "if.30.wasm", "type mismatch") })
	t.Run("assert_invalid:930", func(t *testing.T) { assertInvalidSpec(t, "if.31.wasm", "type mismatch") })
	t.Run("assert_invalid:937", func(t *testing.T) { assertInvalidSpec(t, "if.32.wasm", "type mismatch") })
	t.Run("assert_invalid:943", func(t *testing.T) { assertInvalidSpec(t, "if.33.wasm", "type mismatch") })
	t.Run("assert_invalid:949", func(t *testing.T) { assertInvalidSpec(t, "if.34.wasm", "type mismatch") })
	t.Run("assert_invalid:956", func(t *testing.T) { assertInvalidSpec(t, "if.35.wasm", "type mismatch") })
	t.Run("assert_invalid:962", func(t *testing.T) { assertInvalidSpec(t, "if.36.wasm", "type mismatch") })
	t.Run("assert_invalid:969", func(t *testing.T) { assertInvalidSpec(t, "if.37.wasm", "type mismatch") })
	t.Run("assert_invalid:975", func(t *testing.T) { assertInvalidSpec(t, "if.38.wasm", "type mismatch") })
	t.Run("assert_invalid:981", func(t *testing.T) { assertInvalidSpec(t, "if.39.wasm", "type mismatch") })
	t.Run("assert_invalid:988", func(t *testing.T) { assertInvalidSpec(t, "if.40.wasm", "type mismatch") })
	t.Run("assert_invalid:994", func(t *testing.T) { assertInvalidSpec(t, "if.41.wasm", "type mismatch") })
	t.Run("assert_invalid:1000", func(t *testing.T) { assertInvalidSpec(t, "if.42.wasm", "type mismatch") })
	t.Run("assert_invalid:1007", func(t *testing.T) { assertInvalidSpec(t, "if.43.wasm", "type mismatch") })
	t.Run("assert_invalid:1013", func(t *testing.T) { assertInvalidSpec(t, "if.44.wasm", "type mismatch") })
	t.Run("assert_invalid:1019", func(t *testing.T) { assertInvalidSpec(t, "if.45.wasm", "type mismatch") })
	t.Run("assert_invalid:1026", func(t *testing.T) { assertInvalidSpec(t, "if.46.wasm", "type mismatch") })
	t.Run("assert_invalid:1032", func(t *testing.T) { assertInvalidSpec(t, "if.47.wasm", "type mismatch") })
	t.Run("assert_invalid:1038", func(t *testing.T) { assertInvalidSpec(t, "if.48.wasm", "type mismatch") })
	t.Run("assert_invalid:1045", func(t *testing.T) { assertInvalidSpec(t, "if.49.wasm", "type mismatch") })
	t.Run("assert_invalid:1052", func(t *testing.T) { assertInvalidSpec(t, "if.50.wasm", "type mismatch") })
	t.Run("assert_invalid:1059", func(t *testing.T) { assertInvalidSpec(t, "if.51.wasm", "type mismatch") })
	t.Run("assert_invalid:1067", func(t *testing.T) { assertInvalidSpec(t, "if.52.wasm", "type mismatch") })
	t.Run("assert_invalid:1073", func(t *testing.T) { assertInvalidSpec(t, "if.53.wasm", "type mismatch") })
	t.Run("assert_invalid:1079", func(t *testing.T) { assertInvalidSpec(t, "if.54.wasm", "type mismatch") })
	t.Run("assert_invalid:1086", func(t *testing.T) { assertInvalidSpec(t, "if.55.wasm", "type mismatch") })
	t.Run("assert_invalid:1092", func(t *testing.T) { assertInvalidSpec(t, "if.56.wasm", "type mismatch") })
	t.Run("assert_invalid:1099", func(t *testing.T) { assertInvalidSpec(t, "if.57.wasm", "type mismatch") })
	t.Run("assert_invalid:1109", func(t *testing.T) { assertInvalidSpec(t, "if.58.wasm", "type mismatch") })
	t.Run("assert_invalid:1119", func(t *testing.T) { assertInvalidSpec(t, "if.59.wasm", "type mismatch") })
	t.Run("assert_invalid:1130", func(t *testing.T) { assertInvalidSpec(t, "if.60.wasm", "type mismatch") })
	t.Run("assert_invalid:1136", func(t *testing.T) { assertInvalidSpec(t, "if.61.wasm", "type mismatch") })
	t.Run("assert_invalid:1142", func(t *testing.T) { assertInvalidSpec(t, "if.62.wasm", "type mismatch") })
	t.Run("assert_invalid:1148", func(t *testing.T) { assertInvalidSpec(t, "if.63.wasm", "type mismatch") })
	t.Run("assert_invalid:1155", func(t *testing.T) { assertInvalidSpec(t, "if.64.wasm", "type mismatch") })
	t.Run("assert_invalid:1164", func(t *testing.T) { assertInvalidSpec(t, "if.65.wasm", "type mismatch") })
	t.Run("assert_invalid:1173", func(t *testing.T) { assertInvalidSpec(t, "if.66.wasm", "type mismatch") })
	t.Run("assert_invalid:1182", func(t *testing.T) { assertInvalidSpec(t, "if.67.wasm", "type mismatch") })
	t.Run("assert_invalid:1192", func(t *testing.T) { assertInvalidSpec(t, "if.68.wasm", "type mismatch") })
	t.Run("assert_invalid:1201", func(t *testing.T) { assertInvalidSpec(t, "if.69.wasm", "type mismatch") })
	t.Run("assert_invalid:1210", func(t *testing.T) { assertInvalidSpec(t, "if.70.wasm", "type mismatch") })
	t.Run("assert_invalid:1219", func(t *testing.T) { assertInvalidSpec(t, "if.71.wasm", "type mismatch") })
	t.Run("assert_invalid:1229", func(t *testing.T) { assertInvalidSpec(t, "if.72.wasm", "type mismatch") })
	t.Run("assert_invalid:1238", func(t *testing.T) { assertInvalidSpec(t, "if.73.wasm", "type mismatch") })
	t.Run("assert_invalid:1247", func(t *testing.T) { assertInvalidSpec(t, "if.74.wasm", "type mismatch") })
	t.Run("assert_invalid:1256", func(t *testing.T) { assertInvalidSpec(t, "if.75.wasm", "type mismatch") })
	t.Run("assert_invalid:1265", func(t *testing.T) { assertInvalidSpec(t, "if.76.wasm", "type mismatch") })
	t.Run("assert_invalid:1275", func(t *testing.T) { assertInvalidSpec(t, "if.77.wasm", "type mismatch") })
	t.Run("assert_invalid:1286", func(t *testing.T) { assertInvalidSpec(t, "if.78.wasm", "type mismatch") })
	t.Run("assert_invalid:1294", func(t *testing.T) { assertInvalidSpec(t, "if.79.wasm", "type mismatch") })
	t.Run("assert_invalid:1303", func(t *testing.T) { assertInvalidSpec(t, "if.80.wasm", "type mismatch") })
	t.Run("assert_invalid:1312", func(t *testing.T) { assertInvalidSpec(t, "if.81.wasm", "type mismatch") })
	t.Run("assert_invalid:1321", func(t *testing.T) { assertInvalidSpec(t, "if.82.wasm", "type mismatch") })
	t.Run("assert_invalid:1331", func(t *testing.T) { assertInvalidSpec(t, "if.83.wasm", "type mismatch") })
	t.Run("assert_invalid:1340", func(t *testing.T) { assertInvalidSpec(t, "if.84.wasm", "type mismatch") })
	t.Run("assert_invalid:1349", func(t *testing.T) { assertInvalidSpec(t, "if.85.wasm", "type mismatch") })
	t.Run("assert_invalid:1358", func(t *testing.T) { assertInvalidSpec(t, "if.86.wasm", "type mismatch") })
	t.Run("assert_invalid:1366", func(t *testing.T) { assertInvalidSpec(t, "if.87.wasm", "type mismatch") })
	t.Run("assert_invalid:1374", func(t *testing.T) { assertInvalidSpec(t, "if.88.wasm", "type mismatch") })
	t.Run("assert_invalid:1383", func(t *testing.T) { assertInvalidSpec(t, "if.89.wasm", "type mismatch") })
	t.Run("assert_invalid:1399", func(t *testing.T) { assertInvalidSpec(t, "if.90.wasm", "type mismatch") })
	t.Run("assert_invalid:1408", func(t *testing.T) { assertInvalidSpec(t, "if.91.wasm", "type mismatch") })
	t.Run("assert_invalid:1417", func(t *testing.T) { assertInvalidSpec(t, "if.92.wasm", "type mismatch") })
	t.Run("assert_invalid:1426", func(t *testing.T) { assertInvalidSpec(t, "if.93.wasm", "type mismatch") })
	t.Run("assert_invalid:1435", func(t *testing.T) { assertInvalidSpec(t, "if.94.wasm", "type mismatch") })
	t.Run("assert_invalid:1444", func(t *testing.T) { assertInvalidSpec(t, "if.95.wasm", "type mismatch") })
	t.Run("assert_invalid:1454", func(t *testing.T) { assertInvalidSpec(t, "if.96.wasm", "type mismatch") })
	t.Run("assert_invalid:1460", func(t *testing.T) { assertInvalidSpec(t, "if.97.wasm", "type mismatch") })
	t.Run("assert_invalid:1466", func(t *testing.T) { assertInvalidSpec(t, "if.98.wasm", "type mismatch") })
	t.Run("assert_invalid:1472", func(t *testing.T) { assertInvalidSpec(t, "if.99.wasm", "type mismatch") })
	t.Run("assert_invalid:1478", func(t *testing.T) { assertInvalidSpec(t, "if.100.wasm", "type mismatch") })
	t.Run("assert_invalid:1484", func(t *testing.T) { assertInvalidSpec(t, "if.101.wasm", "type mismatch") })
	t.Run("assert_invalid:1490", func(t *testing.T) { assertInvalidSpec(t, "if.102.wasm", "type mismatch") })
	t.Run("assert_invalid:1496", func(t *testing.T) { assertInvalidSpec(t, "if.103.wasm", "type mismatch") })
	t.Run("assert_malformed:1503", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:1507", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:1512", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:1516", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:1520", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:1524", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:1528", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:1532", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:1536", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:1540", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:1544", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:1548", func(t *testing.T) { t.Skip("text format not supported") })
}

func Test_imports(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "imports.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	x0.register(t)
	x1 := instantiateSpecTest(t, "1", "imports.1.wasm")
	t.Cleanup(func() { x1.close(t) })
	t.Run("print32:89", func(t *testing.T) { x1.assertReturnInvoke(t, "print32", []arg{{wa.I32, 13}}, arg{}) })
	t.Run("print64:90", func(t *testing.T) { x1.assertReturnInvoke(t, "print64", []arg{{wa.I64, 24}}, arg{}) })
	t.Run("assert_invalid:93", func(t *testing.T) { assertInvalidSpec(t, "imports.2.wasm", "unknown type") })
	x2 := instantiateSpecTest(t, "2", "imports.3.wasm")
	t.Cleanup(func() { x2.close(t) })
	t.Run("print_i32:108", func(t *testing.T) { x2.assertReturnInvoke(t, "print_i32", []arg{{wa.I32, 13}}, arg{}) })
	x3 := instantiateSpecTest(t, "3", "imports.4.wasm")
	t.Cleanup(func() { x3.close(t) })
	t.Run("print_i32:118", func(t *testing.T) {
		x3.assertReturnInvoke(t, "print_i32", []arg{{wa.I32, 5}, {wa.I32, 11}}, arg{wa.I32, 16})
	})
	x4 := instantiateSpecTest(t, "4", "imports.5.wasm")
	t.Cleanup(func() { x4.close(t) })
	x5 := instantiateSpecTest(t, "5", "imports.6.wasm")
	t.Cleanup(func() { x5.close(t) })
	x6 := instantiateSpecTest(t, "6", "imports.7.wasm")
	t.Cleanup(func() { x6.close(t) })
	x7 := instantiateSpecTest(t, "7", "imports.8.wasm")
	t.Cleanup(func() { x7.close(t) })
	x8 := instantiateSpecTest(t, "8", "imports.9.wasm")
	t.Cleanup(func() { x8.close(t) })
	x9 := instantiateSpecTest(t, "9", "imports.10.wasm")
	t.Cleanup(func() { x9.close(t) })
	x10 := instantiateSpecTest(t, "10", "imports.11.wasm")
	t.Cleanup(func() { x10.close(t) })
	t.Run("assert_unlinkable:129", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:133", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:138", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:142", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:146", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:150", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:154", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:158", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:162", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:166", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:170", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:174", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:178", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:182", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:186", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:190", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:194", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:198", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:203", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:207", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:211", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:215", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:219", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:223", func(t *testing.T) { t.Skip("linking not supported") })
	x11 := instantiateSpecTest(t, "11", "imports.36.wasm")
	t.Cleanup(func() { x11.close(t) })
	t.Run("get-0:248", func(t *testing.T) { x11.assertReturnInvoke(t, "get-0", nil, arg{wa.I32, 666}) })
	t.Run("get-1:249", func(t *testing.T) { x11.assertReturnInvoke(t, "get-1", nil, arg{wa.I32, 666}) })
	t.Run("get-x:250", func(t *testing.T) { x11.assertReturnInvoke(t, "get-x", nil, arg{wa.I32, 666}) })
	t.Run("get-y:251", func(t *testing.T) { x11.assertReturnInvoke(t, "get-y", nil, arg{wa.I32, 666}) })
	x12 := instantiateSpecTest(t, "12", "imports.37.wasm")
	t.Cleanup(func() { x12.close(t) })
	x13 := instantiateSpecTest(t, "13", "imports.38.wasm")
	t.Cleanup(func() { x13.close(t) })
	x14 := instantiateSpecTest(t, "14", "imports.39.wasm")
	t.Cleanup(func() { x14.close(t) })
	t.Run("assert_unlinkable:258", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:262", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:267", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:271", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:275", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:279", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:283", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:287", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:291", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:295", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:299", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:303", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:307", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:311", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:316", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:320", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:324", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:328", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:332", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:336", func(t *testing.T) { t.Skip("linking not supported") })
	x15 := instantiateSpecTest(t, "15", "imports.60.wasm")
	t.Cleanup(func() { x15.close(t) })
	t.Run("call:355", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("call:356", func(t *testing.T) { x15.assertReturnInvoke(t, "call", []arg{{wa.I32, 1}}, arg{wa.I32, 11}) })
	t.Run("call:357", func(t *testing.T) { x15.assertReturnInvoke(t, "call", []arg{{wa.I32, 2}}, arg{wa.I32, 22}) })
	t.Run("call:358", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("call:359", func(t *testing.T) {
		x15.assertTrap(t, "call", []arg{{wa.I32, 100}}, arg{Type: wa.I32}, "undefined element")
	})
	x16 := instantiateSpecTest(t, "16", "imports.61.wasm")
	t.Cleanup(func() { x16.close(t) })
	t.Run("call:374", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("call:375", func(t *testing.T) { x16.assertReturnInvoke(t, "call", []arg{{wa.I32, 1}}, arg{wa.I32, 11}) })
	t.Run("call:376", func(t *testing.T) { x16.assertReturnInvoke(t, "call", []arg{{wa.I32, 2}}, arg{wa.I32, 22}) })
	t.Run("call:377", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("call:378", func(t *testing.T) {
		x16.assertTrap(t, "call", []arg{{wa.I32, 100}}, arg{Type: wa.I32}, "undefined element")
	})
	x17 := instantiateSpecTest(t, "17", "imports.62.wasm")
	t.Cleanup(func() { x17.close(t) })
	x18 := instantiateSpecTest(t, "18", "imports.63.wasm")
	t.Cleanup(func() { x18.close(t) })
	x19 := instantiateSpecTest(t, "19", "imports.64.wasm")
	t.Cleanup(func() { x19.close(t) })
	x20 := instantiateSpecTest(t, "20", "imports.65.wasm")
	t.Cleanup(func() { x20.close(t) })
	x21 := instantiateSpecTest(t, "21", "imports.66.wasm")
	t.Cleanup(func() { x21.close(t) })
	x22 := instantiateSpecTest(t, "22", "imports.67.wasm")
	t.Cleanup(func() { x22.close(t) })
	x23 := instantiateSpecTest(t, "23", "imports.68.wasm")
	t.Cleanup(func() { x23.close(t) })
	x24 := instantiateSpecTest(t, "24", "imports.69.wasm")
	t.Cleanup(func() { x24.close(t) })
	x25 := instantiateSpecTest(t, "25", "imports.70.wasm")
	t.Cleanup(func() { x25.close(t) })
	x26 := instantiateSpecTest(t, "26", "imports.71.wasm")
	t.Cleanup(func() { x26.close(t) })
	x27 := instantiateSpecTest(t, "27", "imports.72.wasm")
	t.Cleanup(func() { x27.close(t) })
	x28 := instantiateSpecTest(t, "28", "imports.73.wasm")
	t.Cleanup(func() { x28.close(t) })
	x29 := instantiateSpecTest(t, "29", "imports.74.wasm")
	t.Cleanup(func() { x29.close(t) })
	x30 := instantiateSpecTest(t, "30", "imports.75.wasm")
	t.Cleanup(func() { x30.close(t) })
	x31 := instantiateSpecTest(t, "31", "imports.76.wasm")
	t.Cleanup(func() { x31.close(t) })
	x32 := instantiateSpecTest(t, "32", "imports.77.wasm")
	t.Cleanup(func() { x32.close(t) })
	x33 := instantiateSpecTest(t, "33", "imports.78.wasm")
	t.Cleanup(func() { x33.close(t) })
	x34 := instantiateSpecTest(t, "34", "imports.79.wasm")
	t.Cleanup(func() { x34.close(t) })
	x35 := instantiateSpecTest(t, "35", "imports.80.wasm")
	t.Cleanup(func() { x35.close(t) })
	x36 := instantiateSpecTest(t, "36", "imports.81.wasm")
	t.Cleanup(func() { x36.close(t) })
	x37 := instantiateSpecTest(t, "37", "imports.82.wasm")
	t.Cleanup(func() { x37.close(t) })
	t.Run("assert_unlinkable:410", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:414", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:419", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:423", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:427", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:431", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:435", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:439", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:444", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:448", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:452", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:456", func(t *testing.T) { t.Skip("linking not supported") })
	x38 := instantiateSpecTest(t, "38", "imports.95.wasm")
	t.Cleanup(func() { x38.close(t) })
	t.Run("load:471", func(t *testing.T) { x38.assertReturnInvoke(t, "load", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("load:472", func(t *testing.T) { x38.assertReturnInvoke(t, "load", []arg{{wa.I32, 10}}, arg{wa.I32, 16}) })
	t.Run("load:473", func(t *testing.T) { x38.assertReturnInvoke(t, "load", []arg{{wa.I32, 8}}, arg{wa.I32, 1048576}) })
	t.Run("load:474", func(t *testing.T) {
		x38.assertTrap(t, "load", []arg{{wa.I32, 1000000}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	x39 := instantiateSpecTest(t, "39", "imports.96.wasm")
	t.Cleanup(func() { x39.close(t) })
	t.Run("load:482", func(t *testing.T) { x39.assertReturnInvoke(t, "load", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("load:483", func(t *testing.T) { x39.assertReturnInvoke(t, "load", []arg{{wa.I32, 10}}, arg{wa.I32, 16}) })
	t.Run("load:484", func(t *testing.T) { x39.assertReturnInvoke(t, "load", []arg{{wa.I32, 8}}, arg{wa.I32, 1048576}) })
	t.Run("load:485", func(t *testing.T) {
		x39.assertTrap(t, "load", []arg{{wa.I32, 1000000}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("assert_invalid:488", func(t *testing.T) { assertInvalidSpec(t, "imports.97.wasm", "multiple memories") })
	t.Run("assert_invalid:492", func(t *testing.T) { assertInvalidSpec(t, "imports.98.wasm", "multiple memories") })
	t.Run("assert_invalid:496", func(t *testing.T) { assertInvalidSpec(t, "imports.99.wasm", "multiple memories") })
	x40 := instantiateSpecTest(t, "40", "imports.100.wasm")
	t.Cleanup(func() { x40.close(t) })
	x41 := instantiateSpecTest(t, "41", "imports.101.wasm")
	t.Cleanup(func() { x41.close(t) })
	x42 := instantiateSpecTest(t, "42", "imports.102.wasm")
	t.Cleanup(func() { x42.close(t) })
	x43 := instantiateSpecTest(t, "43", "imports.103.wasm")
	t.Cleanup(func() { x43.close(t) })
	x44 := instantiateSpecTest(t, "44", "imports.104.wasm")
	t.Cleanup(func() { x44.close(t) })
	x45 := instantiateSpecTest(t, "45", "imports.105.wasm")
	t.Cleanup(func() { x45.close(t) })
	x46 := instantiateSpecTest(t, "46", "imports.106.wasm")
	t.Cleanup(func() { x46.close(t) })
	x47 := instantiateSpecTest(t, "47", "imports.107.wasm")
	t.Cleanup(func() { x47.close(t) })
	x48 := instantiateSpecTest(t, "48", "imports.108.wasm")
	t.Cleanup(func() { x48.close(t) })
	t.Run("assert_unlinkable:511", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:515", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:520", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:524", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:528", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:532", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:537", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:541", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:545", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:549", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:553", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:557", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:562", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("assert_unlinkable:566", func(t *testing.T) { t.Skip("linking not supported") })
	x49 := instantiateSpecTest(t, "49", "imports.123.wasm")
	t.Cleanup(func() { x49.close(t) })
	t.Run("grow:574", func(t *testing.T) { x49.assertReturnInvoke(t, "grow", []arg{{wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("grow:575", func(t *testing.T) { x49.assertReturnInvoke(t, "grow", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("grow:576", func(t *testing.T) { x49.assertReturnInvoke(t, "grow", []arg{{wa.I32, 0}}, arg{wa.I32, 2}) })
	t.Run("grow:577", func(t *testing.T) { x49.assertReturnInvoke(t, "grow", []arg{{wa.I32, 1}}, arg{wa.I32, 4294967295}) })
	t.Run("grow:578", func(t *testing.T) { x49.assertReturnInvoke(t, "grow", []arg{{wa.I32, 0}}, arg{wa.I32, 2}) })
	xMgm := instantiateSpecTest(t, "$Mgm", "imports.124.wasm")
	t.Cleanup(func() { xMgm.close(t) })
	xMgm.register(t)
	t.Run("grow:585", func(t *testing.T) { xMgm.assertReturnInvoke(t, "grow", nil, arg{wa.I32, 1}) })
	xMgim1 := instantiateSpecTest(t, "$Mgim1", "imports.125.wasm")
	t.Cleanup(func() { xMgim1.close(t) })
	xMgim1.register(t)
	t.Run("grow:592", func(t *testing.T) { xMgim1.assertReturnInvoke(t, "grow", nil, arg{wa.I32, 2}) })
	xMgim2 := instantiateSpecTest(t, "$Mgim2", "imports.126.wasm")
	t.Cleanup(func() { xMgim2.close(t) })
	t.Run("size:598", func(t *testing.T) { xMgim2.assertReturnInvoke(t, "size", nil, arg{wa.I32, 3}) })
	t.Run("assert_malformed:604", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:608", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:612", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:616", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:621", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:625", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:629", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:633", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:638", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:642", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:646", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:650", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:655", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:659", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:663", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:667", func(t *testing.T) { t.Skip("text format not supported") })
	x50 := instantiateSpecTest(t, "50", "imports.143.wasm")
	t.Cleanup(func() { x50.close(t) })
	x50.register(t)
	t.Run("assert_unlinkable:677", func(t *testing.T) { t.Skip("linking not supported") })
}

func Test_inline_module(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "inline-module.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	if x0.unsupported() {
		t.Skip("no supported modules")
	}
}

func Test_int_exprs(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "int_exprs.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("i32.no_fold_cmp_s_offset:18", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.no_fold_cmp_s_offset", []arg{{wa.I32, 2147483647}, {wa.I32, 0}}, arg{wa.I32, 1})
	})
	t.Run("i32.no_fold_cmp_u_offset:19", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i32.no_fold_cmp_u_offset", []arg{{wa.I32, 4294967295}, {wa.I32, 0}}, arg{wa.I32, 1})
	})
	t.Run("i64.no_fold_cmp_s_offset:20", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.no_fold_cmp_s_offset", []arg{{wa.I64, 9223372036854775807}, {wa.I64, 0}}, arg{wa.I32, 1})
	})
	t.Run("i64.no_fold_cmp_u_offset:21", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.no_fold_cmp_u_offset", []arg{{wa.I64, 18446744073709551615}, {wa.I64, 0}}, arg{wa.I32, 1})
	})
	x1 := instantiateSpecTest(t, "1", "int_exprs.1.wasm")
	t.Cleanup(func() { x1.close(t) })
	t.Run("i64.no_fold_wrap_extend_s:30", func(t *testing.T) {
		x1.assertReturnInvoke(t, "i64.no_fold_wrap_extend_s", []arg{{wa.I64, 4538991236898928}}, arg{wa.I64, 1079009392})
	})
	t.Run("i64.no_fold_wrap_extend_s:31", func(t *testing.T) {
		x1.assertReturnInvoke(t, "i64.no_fold_wrap_extend_s", []arg{{wa.I64, 45230338458316960}}, arg{wa.I64, 18446744072918986912})
	})
	x2 := instantiateSpecTest(t, "2", "int_exprs.2.wasm")
	t.Cleanup(func() { x2.close(t) })
	t.Run("i64.no_fold_wrap_extend_u:40", func(t *testing.T) {
		x2.assertReturnInvoke(t, "i64.no_fold_wrap_extend_u", []arg{{wa.I64, 4538991236898928}}, arg{wa.I64, 1079009392})
	})
	x3 := instantiateSpecTest(t, "3", "int_exprs.3.wasm")
	t.Cleanup(func() { x3.close(t) })
	t.Run("i32.no_fold_shl_shr_s:56", func(t *testing.T) {
		x3.assertReturnInvoke(t, "i32.no_fold_shl_shr_s", []arg{{wa.I32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("i32.no_fold_shl_shr_u:57", func(t *testing.T) {
		x3.assertReturnInvoke(t, "i32.no_fold_shl_shr_u", []arg{{wa.I32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("i64.no_fold_shl_shr_s:58", func(t *testing.T) {
		x3.assertReturnInvoke(t, "i64.no_fold_shl_shr_s", []arg{{wa.I64, 9223372036854775808}}, arg{wa.I64, 0})
	})
	t.Run("i64.no_fold_shl_shr_u:59", func(t *testing.T) {
		x3.assertReturnInvoke(t, "i64.no_fold_shl_shr_u", []arg{{wa.I64, 9223372036854775808}}, arg{wa.I64, 0})
	})
	x4 := instantiateSpecTest(t, "4", "int_exprs.4.wasm")
	t.Cleanup(func() { x4.close(t) })
	t.Run("i32.no_fold_shr_s_shl:75", func(t *testing.T) {
		x4.assertReturnInvoke(t, "i32.no_fold_shr_s_shl", []arg{{wa.I32, 1}}, arg{wa.I32, 0})
	})
	t.Run("i32.no_fold_shr_u_shl:76", func(t *testing.T) {
		x4.assertReturnInvoke(t, "i32.no_fold_shr_u_shl", []arg{{wa.I32, 1}}, arg{wa.I32, 0})
	})
	t.Run("i64.no_fold_shr_s_shl:77", func(t *testing.T) {
		x4.assertReturnInvoke(t, "i64.no_fold_shr_s_shl", []arg{{wa.I64, 1}}, arg{wa.I64, 0})
	})
	t.Run("i64.no_fold_shr_u_shl:78", func(t *testing.T) {
		x4.assertReturnInvoke(t, "i64.no_fold_shr_u_shl", []arg{{wa.I64, 1}}, arg{wa.I64, 0})
	})
	x5 := instantiateSpecTest(t, "5", "int_exprs.5.wasm")
	t.Cleanup(func() { x5.close(t) })
	t.Run("i32.no_fold_div_s_mul:94", func(t *testing.T) {
		x5.assertReturnInvoke(t, "i32.no_fold_div_s_mul", []arg{{wa.I32, 1}}, arg{wa.I32, 0})
	})
	t.Run("i32.no_fold_div_u_mul:95", func(t *testing.T) {
		x5.assertReturnInvoke(t, "i32.no_fold_div_u_mul", []arg{{wa.I32, 1}}, arg{wa.I32, 0})
	})
	t.Run("i64.no_fold_div_s_mul:96", func(t *testing.T) {
		x5.assertReturnInvoke(t, "i64.no_fold_div_s_mul", []arg{{wa.I64, 1}}, arg{wa.I64, 0})
	})
	t.Run("i64.no_fold_div_u_mul:97", func(t *testing.T) {
		x5.assertReturnInvoke(t, "i64.no_fold_div_u_mul", []arg{{wa.I64, 1}}, arg{wa.I64, 0})
	})
	x6 := instantiateSpecTest(t, "6", "int_exprs.6.wasm")
	t.Cleanup(func() { x6.close(t) })
	t.Run("i32.no_fold_div_s_self:113", func(t *testing.T) {
		x6.assertTrap(t, "i32.no_fold_div_s_self", []arg{{wa.I32, 0}}, arg{Type: wa.I32}, "integer divide by zero")
	})
	t.Run("i32.no_fold_div_u_self:114", func(t *testing.T) {
		x6.assertTrap(t, "i32.no_fold_div_u_self", []arg{{wa.I32, 0}}, arg{Type: wa.I32}, "integer divide by zero")
	})
	t.Run("i64.no_fold_div_s_self:115", func(t *testing.T) {
		x6.assertTrap(t, "i64.no_fold_div_s_self", []arg{{wa.I64, 0}}, arg{Type: wa.I64}, "integer divide by zero")
	})
	t.Run("i64.no_fold_div_u_self:116", func(t *testing.T) {
		x6.assertTrap(t, "i64.no_fold_div_u_self", []arg{{wa.I64, 0}}, arg{Type: wa.I64}, "integer divide by zero")
	})
	x7 := instantiateSpecTest(t, "7", "int_exprs.7.wasm")
	t.Cleanup(func() { x7.close(t) })
	t.Run("i32.no_fold_rem_s_self:132", func(t *testing.T) {
		x7.assertTrap(t, "i32.no_fold_rem_s_self", []arg{{wa.I32, 0}}, arg{Type: wa.I32}, "integer divide by zero")
	})
	t.Run("i32.no_fold_rem_u_self:133", func(t *testing.T) {
		x7.assertTrap(t, "i32.no_fold_rem_u_self", []arg{{wa.I32, 0}}, arg{Type: wa.I32}, "integer divide by zero")
	})
	t.Run("i64.no_fold_rem_s_self:134", func(t *testing.T) {
		x7.assertTrap(t, "i64.no_fold_rem_s_self", []arg{{wa.I64, 0}}, arg{Type: wa.I64}, "integer divide by zero")
	})
	t.Run("i64.no_fold_rem_u_self:135", func(t *testing.T) {
		x7.assertTrap(t, "i64.no_fold_rem_u_self", []arg{{wa.I64, 0}}, arg{Type: wa.I64}, "integer divide by zero")
	})
	x8 := instantiateSpecTest(t, "8", "int_exprs.8.wasm")
	t.Cleanup(func() { x8.close(t) })
	t.Run("i32.no_fold_mul_div_s:151", func(t *testing.T) {
		x8.assertReturnInvoke(t, "i32.no_fold_mul_div_s", []arg{{wa.I32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("i32.no_fold_mul_div_u:152", func(t *testing.T) {
		x8.assertReturnInvoke(t, "i32.no_fold_mul_div_u", []arg{{wa.I32, 2147483648}}, arg{wa.I32, 0})
	})
	t.Run("i64.no_fold_mul_div_s:153", func(t *testing.T) {
		x8.assertReturnInvoke(t, "i64.no_fold_mul_div_s", []arg{{wa.I64, 9223372036854775808}}, arg{wa.I64, 0})
	})
	t.Run("i64.no_fold_mul_div_u:154", func(t *testing.T) {
		x8.assertReturnInvoke(t, "i64.no_fold_mul_div_u", []arg{{wa.I64, 9223372036854775808}}, arg{wa.I64, 0})
	})
	x9 := instantiateSpecTest(t, "9", "int_exprs.9.wasm")
	t.Cleanup(func() { x9.close(t) })
	t.Run("i32.no_fold_div_s_2:166", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i32.no_fold_div_s_2", []arg{{wa.I32, 4294967285}}, arg{wa.I32, 4294967291})
	})
	t.Run("i64.no_fold_div_s_2:167", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i64.no_fold_div_s_2", []arg{{wa.I64, 18446744073709551605}}, arg{wa.I64, 18446744073709551611})
	})
	x10 := instantiateSpecTest(t, "10", "int_exprs.10.wasm")
	t.Cleanup(func() { x10.close(t) })
	t.Run("i32.no_fold_rem_s_2:179", func(t *testing.T) {
		x10.assertReturnInvoke(t, "i32.no_fold_rem_s_2", []arg{{wa.I32, 4294967285}}, arg{wa.I32, 4294967295})
	})
	t.Run("i64.no_fold_rem_s_2:180", func(t *testing.T) {
		x10.assertReturnInvoke(t, "i64.no_fold_rem_s_2", []arg{{wa.I64, 18446744073709551605}}, arg{wa.I64, 18446744073709551615})
	})
	x11 := instantiateSpecTest(t, "11", "int_exprs.11.wasm")
	t.Cleanup(func() { x11.close(t) })
	t.Run("i32.div_s_0:196", func(t *testing.T) {
		x11.assertTrap(t, "i32.div_s_0", []arg{{wa.I32, 71}}, arg{Type: wa.I32}, "integer divide by zero")
	})
	t.Run("i32.div_u_0:197", func(t *testing.T) {
		x11.assertTrap(t, "i32.div_u_0", []arg{{wa.I32, 71}}, arg{Type: wa.I32}, "integer divide by zero")
	})
	t.Run("i64.div_s_0:198", func(t *testing.T) {
		x11.assertTrap(t, "i64.div_s_0", []arg{{wa.I64, 71}}, arg{Type: wa.I64}, "integer divide by zero")
	})
	t.Run("i64.div_u_0:199", func(t *testing.T) {
		x11.assertTrap(t, "i64.div_u_0", []arg{{wa.I64, 71}}, arg{Type: wa.I64}, "integer divide by zero")
	})
	x12 := instantiateSpecTest(t, "12", "int_exprs.12.wasm")
	t.Cleanup(func() { x12.close(t) })
	t.Run("i32.div_s_3:215", func(t *testing.T) { x12.assertReturnInvoke(t, "i32.div_s_3", []arg{{wa.I32, 71}}, arg{wa.I32, 23}) })
	t.Run("i32.div_s_3:216", func(t *testing.T) {
		x12.assertReturnInvoke(t, "i32.div_s_3", []arg{{wa.I32, 1610612736}}, arg{wa.I32, 536870912})
	})
	t.Run("i32.div_u_3:217", func(t *testing.T) { x12.assertReturnInvoke(t, "i32.div_u_3", []arg{{wa.I32, 71}}, arg{wa.I32, 23}) })
	t.Run("i32.div_u_3:218", func(t *testing.T) {
		x12.assertReturnInvoke(t, "i32.div_u_3", []arg{{wa.I32, 3221225472}}, arg{wa.I32, 1073741824})
	})
	t.Run("i64.div_s_3:219", func(t *testing.T) { x12.assertReturnInvoke(t, "i64.div_s_3", []arg{{wa.I64, 71}}, arg{wa.I64, 23}) })
	t.Run("i64.div_s_3:220", func(t *testing.T) {
		x12.assertReturnInvoke(t, "i64.div_s_3", []arg{{wa.I64, 3458764513820540928}}, arg{wa.I64, 1152921504606846976})
	})
	t.Run("i64.div_u_3:221", func(t *testing.T) { x12.assertReturnInvoke(t, "i64.div_u_3", []arg{{wa.I64, 71}}, arg{wa.I64, 23}) })
	t.Run("i64.div_u_3:222", func(t *testing.T) {
		x12.assertReturnInvoke(t, "i64.div_u_3", []arg{{wa.I64, 13835058055282163712}}, arg{wa.I64, 4611686018427387904})
	})
	x13 := instantiateSpecTest(t, "13", "int_exprs.13.wasm")
	t.Cleanup(func() { x13.close(t) })
	t.Run("i32.div_s_5:238", func(t *testing.T) { x13.assertReturnInvoke(t, "i32.div_s_5", []arg{{wa.I32, 71}}, arg{wa.I32, 14}) })
	t.Run("i32.div_s_5:239", func(t *testing.T) {
		x13.assertReturnInvoke(t, "i32.div_s_5", []arg{{wa.I32, 1342177280}}, arg{wa.I32, 268435456})
	})
	t.Run("i32.div_u_5:240", func(t *testing.T) { x13.assertReturnInvoke(t, "i32.div_u_5", []arg{{wa.I32, 71}}, arg{wa.I32, 14}) })
	t.Run("i32.div_u_5:241", func(t *testing.T) {
		x13.assertReturnInvoke(t, "i32.div_u_5", []arg{{wa.I32, 2684354560}}, arg{wa.I32, 536870912})
	})
	t.Run("i64.div_s_5:242", func(t *testing.T) { x13.assertReturnInvoke(t, "i64.div_s_5", []arg{{wa.I64, 71}}, arg{wa.I64, 14}) })
	t.Run("i64.div_s_5:243", func(t *testing.T) {
		x13.assertReturnInvoke(t, "i64.div_s_5", []arg{{wa.I64, 5764607523034234880}}, arg{wa.I64, 1152921504606846976})
	})
	t.Run("i64.div_u_5:244", func(t *testing.T) { x13.assertReturnInvoke(t, "i64.div_u_5", []arg{{wa.I64, 71}}, arg{wa.I64, 14}) })
	t.Run("i64.div_u_5:245", func(t *testing.T) {
		x13.assertReturnInvoke(t, "i64.div_u_5", []arg{{wa.I64, 11529215046068469760}}, arg{wa.I64, 2305843009213693952})
	})
	x14 := instantiateSpecTest(t, "14", "int_exprs.14.wasm")
	t.Cleanup(func() { x14.close(t) })
	t.Run("i32.div_s_7:261", func(t *testing.T) { x14.assertReturnInvoke(t, "i32.div_s_7", []arg{{wa.I32, 71}}, arg{wa.I32, 10}) })
	t.Run("i32.div_s_7:262", func(t *testing.T) {
		x14.assertReturnInvoke(t, "i32.div_s_7", []arg{{wa.I32, 1879048192}}, arg{wa.I32, 268435456})
	})
	t.Run("i32.div_u_7:263", func(t *testing.T) { x14.assertReturnInvoke(t, "i32.div_u_7", []arg{{wa.I32, 71}}, arg{wa.I32, 10}) })
	t.Run("i32.div_u_7:264", func(t *testing.T) {
		x14.assertReturnInvoke(t, "i32.div_u_7", []arg{{wa.I32, 3758096384}}, arg{wa.I32, 536870912})
	})
	t.Run("i64.div_s_7:265", func(t *testing.T) { x14.assertReturnInvoke(t, "i64.div_s_7", []arg{{wa.I64, 71}}, arg{wa.I64, 10}) })
	t.Run("i64.div_s_7:266", func(t *testing.T) {
		x14.assertReturnInvoke(t, "i64.div_s_7", []arg{{wa.I64, 8070450532247928832}}, arg{wa.I64, 1152921504606846976})
	})
	t.Run("i64.div_u_7:267", func(t *testing.T) { x14.assertReturnInvoke(t, "i64.div_u_7", []arg{{wa.I64, 71}}, arg{wa.I64, 10}) })
	t.Run("i64.div_u_7:268", func(t *testing.T) {
		x14.assertReturnInvoke(t, "i64.div_u_7", []arg{{wa.I64, 16140901064495857664}}, arg{wa.I64, 2305843009213693952})
	})
	x15 := instantiateSpecTest(t, "15", "int_exprs.15.wasm")
	t.Cleanup(func() { x15.close(t) })
	t.Run("i32.rem_s_3:284", func(t *testing.T) { x15.assertReturnInvoke(t, "i32.rem_s_3", []arg{{wa.I32, 71}}, arg{wa.I32, 2}) })
	t.Run("i32.rem_s_3:285", func(t *testing.T) {
		x15.assertReturnInvoke(t, "i32.rem_s_3", []arg{{wa.I32, 1610612736}}, arg{wa.I32, 0})
	})
	t.Run("i32.rem_u_3:286", func(t *testing.T) { x15.assertReturnInvoke(t, "i32.rem_u_3", []arg{{wa.I32, 71}}, arg{wa.I32, 2}) })
	t.Run("i32.rem_u_3:287", func(t *testing.T) {
		x15.assertReturnInvoke(t, "i32.rem_u_3", []arg{{wa.I32, 3221225472}}, arg{wa.I32, 0})
	})
	t.Run("i64.rem_s_3:288", func(t *testing.T) { x15.assertReturnInvoke(t, "i64.rem_s_3", []arg{{wa.I64, 71}}, arg{wa.I64, 2}) })
	t.Run("i64.rem_s_3:289", func(t *testing.T) {
		x15.assertReturnInvoke(t, "i64.rem_s_3", []arg{{wa.I64, 3458764513820540928}}, arg{wa.I64, 0})
	})
	t.Run("i64.rem_u_3:290", func(t *testing.T) { x15.assertReturnInvoke(t, "i64.rem_u_3", []arg{{wa.I64, 71}}, arg{wa.I64, 2}) })
	t.Run("i64.rem_u_3:291", func(t *testing.T) {
		x15.assertReturnInvoke(t, "i64.rem_u_3", []arg{{wa.I64, 13835058055282163712}}, arg{wa.I64, 0})
	})
	x16 := instantiateSpecTest(t, "16", "int_exprs.16.wasm")
	t.Cleanup(func() { x16.close(t) })
	t.Run("i32.rem_s_5:307", func(t *testing.T) { x16.assertReturnInvoke(t, "i32.rem_s_5", []arg{{wa.I32, 71}}, arg{wa.I32, 1}) })
	t.Run("i32.rem_s_5:308", func(t *testing.T) {
		x16.assertReturnInvoke(t, "i32.rem_s_5", []arg{{wa.I32, 1342177280}}, arg{wa.I32, 0})
	})
	t.Run("i32.rem_u_5:309", func(t *testing.T) { x16.assertReturnInvoke(t, "i32.rem_u_5", []arg{{wa.I32, 71}}, arg{wa.I32, 1}) })
	t.Run("i32.rem_u_5:310", func(t *testing.T) {
		x16.assertReturnInvoke(t, "i32.rem_u_5", []arg{{wa.I32, 2684354560}}, arg{wa.I32, 0})
	})
	t.Run("i64.rem_s_5:311", func(t *testing.T) { x16.assertReturnInvoke(t, "i64.rem_s_5", []arg{{wa.I64, 71}}, arg{wa.I64, 1}) })
	t.Run("i64.rem_s_5:312", func(t *testing.T) {
		x16.assertReturnInvoke(t, "i64.rem_s_5", []arg{{wa.I64, 5764607523034234880}}, arg{wa.I64, 0})
	})
	t.Run("i64.rem_u_5:313", func(t *testing.T) { x16.assertReturnInvoke(t, "i64.rem_u_5", []arg{{wa.I64, 71}}, arg{wa.I64, 1}) })
	t.Run("i64.rem_u_5:314", func(t *testing.T) {
		x16.assertReturnInvoke(t, "i64.rem_u_5", []arg{{wa.I64, 11529215046068469760}}, arg{wa.I64, 0})
	})
	x17 := instantiateSpecTest(t, "17", "int_exprs.17.wasm")
	t.Cleanup(func() { x17.close(t) })
	t.Run("i32.rem_s_7:330", func(t *testing.T) { x17.assertReturnInvoke(t, "i32.rem_s_7", []arg{{wa.I32, 71}}, arg{wa.I32, 1}) })
	t.Run("i32.rem_s_7:331", func(t *testing.T) {
		x17.assertReturnInvoke(t, "i32.rem_s_7", []arg{{wa.I32, 1879048192}}, arg{wa.I32, 0})
	})
	t.Run("i32.rem_u_7:332", func(t *testing.T) { x17.assertReturnInvoke(t, "i32.rem_u_7", []arg{{wa.I32, 71}}, arg{wa.I32, 1}) })
	t.Run("i32.rem_u_7:333", func(t *testing.T) {
		x17.assertReturnInvoke(t, "i32.rem_u_7", []arg{{wa.I32, 3758096384}}, arg{wa.I32, 0})
	})
	t.Run("i64.rem_s_7:334", func(t *testing.T) { x17.assertReturnInvoke(t, "i64.rem_s_7", []arg{{wa.I64, 71}}, arg{wa.I64, 1}) })
	t.Run("i64.rem_s_7:335", func(t *testing.T) {
		x17.assertReturnInvoke(t, "i64.rem_s_7", []arg{{wa.I64, 8070450532247928832}}, arg{wa.I64, 0})
	})
	t.Run("i64.rem_u_7:336", func(t *testing.T) { x17.assertReturnInvoke(t, "i64.rem_u_7", []arg{{wa.I64, 71}}, arg{wa.I64, 1}) })
	t.Run("i64.rem_u_7:337", func(t *testing.T) {
		x17.assertReturnInvoke(t, "i64.rem_u_7", []arg{{wa.I64, 16140901064495857664}}, arg{wa.I64, 0})
	})
	x18 := instantiateSpecTest(t, "18", "int_exprs.18.wasm")
	t.Cleanup(func() { x18.close(t) })
	t.Run("i32.no_fold_div_neg1:349", func(t *testing.T) {
		x18.assertTrap(t, "i32.no_fold_div_neg1", []arg{{wa.I32, 2147483648}}, arg{Type: wa.I32}, "integer overflow")
	})
	t.Run("i64.no_fold_div_neg1:350", func(t *testing.T) {
		x18.assertTrap(t, "i64.no_fold_div_neg1", []arg{{wa.I64, 9223372036854775808}}, arg{Type: wa.I64}, "integer overflow")
	})
}

func Test_int_literals(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "int_literals.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("i32.test:37", func(t *testing.T) { x0.assertReturnInvoke(t, "i32.test", nil, arg{wa.I32, 195940365}) })
	t.Run("i32.umax:38", func(t *testing.T) { x0.assertReturnInvoke(t, "i32.umax", nil, arg{wa.I32, 4294967295}) })
	t.Run("i32.smax:39", func(t *testing.T) { x0.assertReturnInvoke(t, "i32.smax", nil, arg{wa.I32, 2147483647}) })
	t.Run("i32.neg_smax:40", func(t *testing.T) { x0.assertReturnInvoke(t, "i32.neg_smax", nil, arg{wa.I32, 2147483649}) })
	t.Run("i32.smin:41", func(t *testing.T) { x0.assertReturnInvoke(t, "i32.smin", nil, arg{wa.I32, 2147483648}) })
	t.Run("i32.alt_smin:42", func(t *testing.T) { x0.assertReturnInvoke(t, "i32.alt_smin", nil, arg{wa.I32, 2147483648}) })
	t.Run("i32.inc_smin:43", func(t *testing.T) { x0.assertReturnInvoke(t, "i32.inc_smin", nil, arg{wa.I32, 2147483649}) })
	t.Run("i32.neg_zero:44", func(t *testing.T) { x0.assertReturnInvoke(t, "i32.neg_zero", nil, arg{wa.I32, 0}) })
	t.Run("i32.not_octal:45", func(t *testing.T) { x0.assertReturnInvoke(t, "i32.not_octal", nil, arg{wa.I32, 10}) })
	t.Run("i32.unsigned_decimal:46", func(t *testing.T) { x0.assertReturnInvoke(t, "i32.unsigned_decimal", nil, arg{wa.I32, 4294967295}) })
	t.Run("i32.plus_sign:47", func(t *testing.T) { x0.assertReturnInvoke(t, "i32.plus_sign", nil, arg{wa.I32, 42}) })
	t.Run("i64.test:49", func(t *testing.T) { x0.assertReturnInvoke(t, "i64.test", nil, arg{wa.I64, 913028331277281902}) })
	t.Run("i64.umax:50", func(t *testing.T) { x0.assertReturnInvoke(t, "i64.umax", nil, arg{wa.I64, 18446744073709551615}) })
	t.Run("i64.smax:51", func(t *testing.T) { x0.assertReturnInvoke(t, "i64.smax", nil, arg{wa.I64, 9223372036854775807}) })
	t.Run("i64.neg_smax:52", func(t *testing.T) { x0.assertReturnInvoke(t, "i64.neg_smax", nil, arg{wa.I64, 9223372036854775809}) })
	t.Run("i64.smin:53", func(t *testing.T) { x0.assertReturnInvoke(t, "i64.smin", nil, arg{wa.I64, 9223372036854775808}) })
	t.Run("i64.alt_smin:54", func(t *testing.T) { x0.assertReturnInvoke(t, "i64.alt_smin", nil, arg{wa.I64, 9223372036854775808}) })
	t.Run("i64.inc_smin:55", func(t *testing.T) { x0.assertReturnInvoke(t, "i64.inc_smin", nil, arg{wa.I64, 9223372036854775809}) })
	t.Run("i64.neg_zero:56", func(t *testing.T) { x0.assertReturnInvoke(t, "i64.neg_zero", nil, arg{wa.I64, 0}) })
	t.Run("i64.not_octal:57", func(t *testing.T) { x0.assertReturnInvoke(t, "i64.not_octal", nil, arg{wa.I64, 10}) })
	t.Run("i64.unsigned_decimal:58", func(t *testing.T) {
		x0.assertReturnInvoke(t, "i64.unsigned_decimal", nil, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64.plus_sign:59", func(t *testing.T) { x0.assertReturnInvoke(t, "i64.plus_sign", nil, arg{wa.I64, 42}) })
	t.Run("i32-dec-sep1:61", func(t *testing.T) { x0.assertReturnInvoke(t, "i32-dec-sep1", nil, arg{wa.I32, 1000000}) })
	t.Run("i32-dec-sep2:62", func(t *testing.T) { x0.assertReturnInvoke(t, "i32-dec-sep2", nil, arg{wa.I32, 1000}) })
	t.Run("i32-hex-sep1:63", func(t *testing.T) { x0.assertReturnInvoke(t, "i32-hex-sep1", nil, arg{wa.I32, 168755353}) })
	t.Run("i32-hex-sep2:64", func(t *testing.T) { x0.assertReturnInvoke(t, "i32-hex-sep2", nil, arg{wa.I32, 109071}) })
	t.Run("i64-dec-sep1:66", func(t *testing.T) { x0.assertReturnInvoke(t, "i64-dec-sep1", nil, arg{wa.I64, 1000000}) })
	t.Run("i64-dec-sep2:67", func(t *testing.T) { x0.assertReturnInvoke(t, "i64-dec-sep2", nil, arg{wa.I64, 1000}) })
	t.Run("i64-hex-sep1:68", func(t *testing.T) { x0.assertReturnInvoke(t, "i64-hex-sep1", nil, arg{wa.I64, 3078696982321561}) })
	t.Run("i64-hex-sep2:69", func(t *testing.T) { x0.assertReturnInvoke(t, "i64-hex-sep2", nil, arg{wa.I64, 109071}) })
	t.Run("assert_malformed:72", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:76", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:80", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:84", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:88", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:92", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:96", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:100", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:104", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:108", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:113", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:117", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:121", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:125", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:129", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:133", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:137", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:141", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:145", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:149", func(t *testing.T) { t.Skip("text format not supported") })
}

func Test_labels(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "labels.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("block:291", func(t *testing.T) { x0.assertReturnInvoke(t, "block", nil, arg{wa.I32, 1}) })
	t.Run("loop1:292", func(t *testing.T) { x0.assertReturnInvoke(t, "loop1", nil, arg{wa.I32, 5}) })
	t.Run("loop2:293", func(t *testing.T) { x0.assertReturnInvoke(t, "loop2", nil, arg{wa.I32, 8}) })
	t.Run("loop3:294", func(t *testing.T) { x0.assertReturnInvoke(t, "loop3", nil, arg{wa.I32, 1}) })
	t.Run("loop4:295", func(t *testing.T) { x0.assertReturnInvoke(t, "loop4", []arg{{wa.I32, 8}}, arg{wa.I32, 16}) })
	t.Run("loop5:296", func(t *testing.T) { x0.assertReturnInvoke(t, "loop5", nil, arg{wa.I32, 2}) })
	t.Run("loop6:297", func(t *testing.T) { x0.assertReturnInvoke(t, "loop6", nil, arg{wa.I32, 3}) })
	t.Run("if:298", func(t *testing.T) { x0.assertReturnInvoke(t, "if", nil, arg{wa.I32, 5}) })
	t.Run("if2:299", func(t *testing.T) { x0.assertReturnInvoke(t, "if2", nil, arg{wa.I32, 5}) })
	t.Run("switch:300", func(t *testing.T) { x0.assertReturnInvoke(t, "switch", []arg{{wa.I32, 0}}, arg{wa.I32, 50}) })
	t.Run("switch:301", func(t *testing.T) { x0.assertReturnInvoke(t, "switch", []arg{{wa.I32, 1}}, arg{wa.I32, 20}) })
	t.Run("switch:302", func(t *testing.T) { x0.assertReturnInvoke(t, "switch", []arg{{wa.I32, 2}}, arg{wa.I32, 20}) })
	t.Run("switch:303", func(t *testing.T) { x0.assertReturnInvoke(t, "switch", []arg{{wa.I32, 3}}, arg{wa.I32, 3}) })
	t.Run("switch:304", func(t *testing.T) { x0.assertReturnInvoke(t, "switch", []arg{{wa.I32, 4}}, arg{wa.I32, 50}) })
	t.Run("switch:305", func(t *testing.T) { x0.assertReturnInvoke(t, "switch", []arg{{wa.I32, 5}}, arg{wa.I32, 50}) })
	t.Run("return:306", func(t *testing.T) { x0.assertReturnInvoke(t, "return", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("return:307", func(t *testing.T) { x0.assertReturnInvoke(t, "return", []arg{{wa.I32, 1}}, arg{wa.I32, 2}) })
	t.Run("return:308", func(t *testing.T) { x0.assertReturnInvoke(t, "return", []arg{{wa.I32, 2}}, arg{wa.I32, 2}) })
	t.Run("br_if0:309", func(t *testing.T) { x0.assertReturnInvoke(t, "br_if0", nil, arg{wa.I32, 29}) })
	t.Run("br_if1:310", func(t *testing.T) { x0.assertReturnInvoke(t, "br_if1", nil, arg{wa.I32, 1}) })
	t.Run("br_if2:311", func(t *testing.T) { x0.assertReturnInvoke(t, "br_if2", nil, arg{wa.I32, 1}) })
	t.Run("br_if3:312", func(t *testing.T) { x0.assertReturnInvoke(t, "br_if3", nil, arg{wa.I32, 2}) })
	t.Run("br:313", func(t *testing.T) { x0.assertReturnInvoke(t, "br", nil, arg{wa.I32, 1}) })
	t.Run("shadowing:314", func(t *testing.T) { x0.assertReturnInvoke(t, "shadowing", nil, arg{wa.I32, 1}) })
	t.Run("redefinition:315", func(t *testing.T) { x0.assertReturnInvoke(t, "redefinition", nil, arg{wa.I32, 5}) })
	t.Run("assert_invalid:318", func(t *testing.T) { assertInvalidSpec(t, "labels.1.wasm", "type mismatch") })
	t.Run("assert_invalid:322", func(t *testing.T) { assertInvalidSpec(t, "labels.2.wasm", "type mismatch") })
	t.Run("assert_invalid:326", func(t *testing.T) { assertInvalidSpec(t, "labels.3.wasm", "type mismatch") })
}

func Test_left_to_right(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "left-to-right.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("i32_add:181", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_add", nil, arg{wa.I32, 258}) })
	t.Run("i64_add:181", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_add", nil, arg{wa.I32, 258}) })
	t.Run("i32_sub:182", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_sub", nil, arg{wa.I32, 258}) })
	t.Run("i64_sub:182", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_sub", nil, arg{wa.I32, 258}) })
	t.Run("i32_mul:183", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_mul", nil, arg{wa.I32, 258}) })
	t.Run("i64_mul:183", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_mul", nil, arg{wa.I32, 258}) })
	t.Run("i32_div_s:184", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_div_s", nil, arg{wa.I32, 258}) })
	t.Run("i64_div_s:184", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_div_s", nil, arg{wa.I32, 258}) })
	t.Run("i32_div_u:185", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_div_u", nil, arg{wa.I32, 258}) })
	t.Run("i64_div_u:185", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_div_u", nil, arg{wa.I32, 258}) })
	t.Run("i32_rem_s:186", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_rem_s", nil, arg{wa.I32, 258}) })
	t.Run("i64_rem_s:186", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_rem_s", nil, arg{wa.I32, 258}) })
	t.Run("i32_rem_u:187", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_rem_u", nil, arg{wa.I32, 258}) })
	t.Run("i64_rem_u:187", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_rem_u", nil, arg{wa.I32, 258}) })
	t.Run("i32_and:188", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_and", nil, arg{wa.I32, 258}) })
	t.Run("i64_and:188", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_and", nil, arg{wa.I32, 258}) })
	t.Run("i32_or:189", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_or", nil, arg{wa.I32, 258}) })
	t.Run("i64_or:189", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_or", nil, arg{wa.I32, 258}) })
	t.Run("i32_xor:190", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_xor", nil, arg{wa.I32, 258}) })
	t.Run("i64_xor:190", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_xor", nil, arg{wa.I32, 258}) })
	t.Run("i32_shl:191", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_shl", nil, arg{wa.I32, 258}) })
	t.Run("i64_shl:191", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_shl", nil, arg{wa.I32, 258}) })
	t.Run("i32_shr_u:192", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_shr_u", nil, arg{wa.I32, 258}) })
	t.Run("i64_shr_u:192", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_shr_u", nil, arg{wa.I32, 258}) })
	t.Run("i32_shr_s:193", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_shr_s", nil, arg{wa.I32, 258}) })
	t.Run("i64_shr_s:193", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_shr_s", nil, arg{wa.I32, 258}) })
	t.Run("i32_eq:194", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_eq", nil, arg{wa.I32, 258}) })
	t.Run("i64_eq:194", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_eq", nil, arg{wa.I32, 258}) })
	t.Run("i32_ne:195", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_ne", nil, arg{wa.I32, 258}) })
	t.Run("i64_ne:195", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_ne", nil, arg{wa.I32, 258}) })
	t.Run("i32_lt_s:196", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_lt_s", nil, arg{wa.I32, 258}) })
	t.Run("i64_lt_s:196", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_lt_s", nil, arg{wa.I32, 258}) })
	t.Run("i32_le_s:197", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_le_s", nil, arg{wa.I32, 258}) })
	t.Run("i64_le_s:197", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_le_s", nil, arg{wa.I32, 258}) })
	t.Run("i32_lt_u:198", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_lt_u", nil, arg{wa.I32, 258}) })
	t.Run("i64_lt_u:198", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_lt_u", nil, arg{wa.I32, 258}) })
	t.Run("i32_le_u:199", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_le_u", nil, arg{wa.I32, 258}) })
	t.Run("i64_le_u:199", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_le_u", nil, arg{wa.I32, 258}) })
	t.Run("i32_gt_s:200", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_gt_s", nil, arg{wa.I32, 258}) })
	t.Run("i64_gt_s:200", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_gt_s", nil, arg{wa.I32, 258}) })
	t.Run("i32_ge_s:201", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_ge_s", nil, arg{wa.I32, 258}) })
	t.Run("i64_ge_s:201", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_ge_s", nil, arg{wa.I32, 258}) })
	t.Run("i32_gt_u:202", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_gt_u", nil, arg{wa.I32, 258}) })
	t.Run("i64_gt_u:202", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_gt_u", nil, arg{wa.I32, 258}) })
	t.Run("i32_ge_u:203", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_ge_u", nil, arg{wa.I32, 258}) })
	t.Run("i64_ge_u:203", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_ge_u", nil, arg{wa.I32, 258}) })
	t.Run("i32_store:204", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_store", nil, arg{wa.I32, 258}) })
	t.Run("i64_store:204", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_store", nil, arg{wa.I32, 258}) })
	t.Run("i32_store8:205", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_store8", nil, arg{wa.I32, 258}) })
	t.Run("i64_store8:205", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_store8", nil, arg{wa.I32, 258}) })
	t.Run("i32_store16:206", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_store16", nil, arg{wa.I32, 258}) })
	t.Run("i64_store16:206", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_store16", nil, arg{wa.I32, 258}) })
	t.Run("i64_store32:207", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_store32", nil, arg{wa.I32, 258}) })
	t.Run("i32_call:208", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_call", nil, arg{wa.I32, 258}) })
	t.Run("i64_call:208", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_call", nil, arg{wa.I32, 258}) })
	t.Run("i32_call_indirect:209", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_call_indirect", nil, arg{wa.I32, 66052}) })
	t.Run("i64_call_indirect:210", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_call_indirect", nil, arg{wa.I32, 66052}) })
	t.Run("i32_select:211", func(t *testing.T) { x0.assertReturnInvoke(t, "i32_select", nil, arg{wa.I32, 66053}) })
	t.Run("i64_select:211", func(t *testing.T) { x0.assertReturnInvoke(t, "i64_select", nil, arg{wa.I32, 66053}) })
	t.Run("f32_add:213", func(t *testing.T) { x0.assertReturnInvoke(t, "f32_add", nil, arg{wa.I32, 258}) })
	t.Run("f64_add:213", func(t *testing.T) { x0.assertReturnInvoke(t, "f64_add", nil, arg{wa.I32, 258}) })
	t.Run("f32_sub:214", func(t *testing.T) { x0.assertReturnInvoke(t, "f32_sub", nil, arg{wa.I32, 258}) })
	t.Run("f64_sub:214", func(t *testing.T) { x0.assertReturnInvoke(t, "f64_sub", nil, arg{wa.I32, 258}) })
	t.Run("f32_mul:215", func(t *testing.T) { x0.assertReturnInvoke(t, "f32_mul", nil, arg{wa.I32, 258}) })
	t.Run("f64_mul:215", func(t *testing.T) { x0.assertReturnInvoke(t, "f64_mul", nil, arg{wa.I32, 258}) })
	t.Run("f32_div:216", func(t *testing.T) { x0.assertReturnInvoke(t, "f32_div", nil, arg{wa.I32, 258}) })
	t.Run("f64_div:216", func(t *testing.T) { x0.assertReturnInvoke(t, "f64_div", nil, arg{wa.I32, 258}) })
	t.Run("f32_copysign:217", func(t *testing.T) { x0.assertReturnInvoke(t, "f32_copysign", nil, arg{wa.I32, 258}) })
	t.Run("f64_copysign:217", func(t *testing.T) { x0.assertReturnInvoke(t, "f64_copysign", nil, arg{wa.I32, 258}) })
	t.Run("f32_eq:218", func(t *testing.T) { x0.assertReturnInvoke(t, "f32_eq", nil, arg{wa.I32, 258}) })
	t.Run("f64_eq:218", func(t *testing.T) { x0.assertReturnInvoke(t, "f64_eq", nil, arg{wa.I32, 258}) })
	t.Run("f32_ne:219", func(t *testing.T) { x0.assertReturnInvoke(t, "f32_ne", nil, arg{wa.I32, 258}) })
	t.Run("f64_ne:219", func(t *testing.T) { x0.assertReturnInvoke(t, "f64_ne", nil, arg{wa.I32, 258}) })
	t.Run("f32_lt:220", func(t *testing.T) { x0.assertReturnInvoke(t, "f32_lt", nil, arg{wa.I32, 258}) })
	t.Run("f64_lt:220", func(t *testing.T) { x0.assertReturnInvoke(t, "f64_lt", nil, arg{wa.I32, 258}) })
	t.Run("f32_le:221", func(t *testing.T) { x0.assertReturnInvoke(t, "f32_le", nil, arg{wa.I32, 258}) })
	t.Run("f64_le:221", func(t *testing.T) { x0.assertReturnInvoke(t, "f64_le", nil, arg{wa.I32, 258}) })
	t.Run("f32_gt:222", func(t *testing.T) { x0.assertReturnInvoke(t, "f32_gt", nil, arg{wa.I32, 258}) })
	t.Run("f64_gt:222", func(t *testing.T) { x0.assertReturnInvoke(t, "f64_gt", nil, arg{wa.I32, 258}) })
	t.Run("f32_ge:223", func(t *testing.T) { x0.assertReturnInvoke(t, "f32_ge", nil, arg{wa.I32, 258}) })
	t.Run("f64_ge:223", func(t *testing.T) { x0.assertReturnInvoke(t, "f64_ge", nil, arg{wa.I32, 258}) })
	t.Run("f32_min:224", func(t *testing.T) { x0.assertReturnInvoke(t, "f32_min", nil, arg{wa.I32, 258}) })
	t.Run("f64_min:224", func(t *testing.T) { x0.assertReturnInvoke(t, "f64_min", nil, arg{wa.I32, 258}) })
	t.Run("f32_max:225", func(t *testing.T) { x0.assertReturnInvoke(t, "f32_max", nil, arg{wa.I32, 258}) })
	t.Run("f64_max:225", func(t *testing.T) { x0.assertReturnInvoke(t, "f64_max", nil, arg{wa.I32, 258}) })
	t.Run("f32_store:226", func(t *testing.T) { x0.assertReturnInvoke(t, "f32_store", nil, arg{wa.I32, 258}) })
	t.Run("f64_store:226", func(t *testing.T) { x0.assertReturnInvoke(t, "f64_store", nil, arg{wa.I32, 258}) })
	t.Run("f32_call:227", func(t *testing.T) { x0.assertReturnInvoke(t, "f32_call", nil, arg{wa.I32, 258}) })
	t.Run("f64_call:227", func(t *testing.T) { x0.assertReturnInvoke(t, "f64_call", nil, arg{wa.I32, 258}) })
	t.Run("f32_call_indirect:228", func(t *testing.T) { x0.assertReturnInvoke(t, "f32_call_indirect", nil, arg{wa.I32, 66052}) })
	t.Run("f64_call_indirect:229", func(t *testing.T) { x0.assertReturnInvoke(t, "f64_call_indirect", nil, arg{wa.I32, 66052}) })
	t.Run("f32_select:230", func(t *testing.T) { x0.assertReturnInvoke(t, "f32_select", nil, arg{wa.I32, 66053}) })
	t.Run("f64_select:230", func(t *testing.T) { x0.assertReturnInvoke(t, "f64_select", nil, arg{wa.I32, 66053}) })
	t.Run("br_if:232", func(t *testing.T) { x0.assertReturnInvoke(t, "br_if", nil, arg{wa.I32, 258}) })
	t.Run("br_table:233", func(t *testing.T) { x0.assertReturnInvoke(t, "br_table", nil, arg{wa.I32, 258}) })
}

func Test_linking(t *testing.T) { t.Skip("linking not supported") }

func Test_load(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "load.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("as-br-value:161", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br-value", nil, arg{wa.I32, 0}) })
	t.Run("as-br_if-cond:163", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-cond", nil, arg{}) })
	t.Run("as-br_if-value:164", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-value", nil, arg{wa.I32, 0}) })
	t.Run("as-br_if-value-cond:165", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-value-cond", nil, arg{wa.I32, 7}) })
	t.Run("as-br_table-index:167", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-index", nil, arg{}) })
	t.Run("as-br_table-value:168", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-value", nil, arg{wa.I32, 0}) })
	t.Run("as-br_table-value-index:169", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-value-index", nil, arg{wa.I32, 6}) })
	t.Run("as-return-value:171", func(t *testing.T) { x0.assertReturnInvoke(t, "as-return-value", nil, arg{wa.I32, 0}) })
	t.Run("as-if-cond:173", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-cond", nil, arg{wa.I32, 1}) })
	t.Run("as-if-then:174", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-then", nil, arg{wa.I32, 0}) })
	t.Run("as-if-else:175", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-else", nil, arg{wa.I32, 0}) })
	t.Run("as-select-first:177", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-select-first", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{wa.I32, 0})
	})
	t.Run("as-select-second:178", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-select-second", []arg{{wa.I32, 0}, {wa.I32, 0}}, arg{wa.I32, 0})
	})
	t.Run("as-select-cond:179", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-cond", nil, arg{wa.I32, 1}) })
	t.Run("as-call-first:181", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call-first", nil, arg{wa.I32, 4294967295}) })
	t.Run("as-call-mid:182", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call-mid", nil, arg{wa.I32, 4294967295}) })
	t.Run("as-call-last:183", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call-last", nil, arg{wa.I32, 4294967295}) })
	t.Run("as-call_indirect-first:185", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-first", nil, arg{wa.I32, 4294967295}) })
	t.Run("as-call_indirect-mid:186", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-mid", nil, arg{wa.I32, 4294967295}) })
	t.Run("as-call_indirect-last:187", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-last", nil, arg{wa.I32, 4294967295}) })
	t.Run("as-call_indirect-index:188", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-index", nil, arg{wa.I32, 4294967295}) })
	t.Run("as-local.set-value:190", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.set-value", nil, arg{}) })
	t.Run("as-local.tee-value:191", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.tee-value", nil, arg{wa.I32, 0}) })
	t.Run("as-global.set-value:192", func(t *testing.T) { x0.assertReturnInvoke(t, "as-global.set-value", nil, arg{}) })
	t.Run("as-load-address:194", func(t *testing.T) { x0.assertReturnInvoke(t, "as-load-address", nil, arg{wa.I32, 0}) })
	t.Run("as-loadN-address:195", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loadN-address", nil, arg{wa.I32, 0}) })
	t.Run("as-store-address:196", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-address", nil, arg{}) })
	t.Run("as-store-value:197", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-value", nil, arg{}) })
	t.Run("as-storeN-address:198", func(t *testing.T) { x0.assertReturnInvoke(t, "as-storeN-address", nil, arg{}) })
	t.Run("as-storeN-value:199", func(t *testing.T) { x0.assertReturnInvoke(t, "as-storeN-value", nil, arg{}) })
	t.Run("as-unary-operand:201", func(t *testing.T) { x0.assertReturnInvoke(t, "as-unary-operand", nil, arg{wa.I32, 32}) })
	t.Run("as-binary-left:203", func(t *testing.T) { x0.assertReturnInvoke(t, "as-binary-left", nil, arg{wa.I32, 10}) })
	t.Run("as-binary-right:204", func(t *testing.T) { x0.assertReturnInvoke(t, "as-binary-right", nil, arg{wa.I32, 10}) })
	t.Run("as-test-operand:206", func(t *testing.T) { x0.assertReturnInvoke(t, "as-test-operand", nil, arg{wa.I32, 1}) })
	t.Run("as-compare-left:208", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-left", nil, arg{wa.I32, 1}) })
	t.Run("as-compare-right:209", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-right", nil, arg{wa.I32, 1}) })
	t.Run("as-memory.grow-size:211", func(t *testing.T) { x0.assertReturnInvoke(t, "as-memory.grow-size", nil, arg{wa.I32, 1}) })
	t.Run("assert_malformed:214", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:221", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:228", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:235", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:242", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:249", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:257", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:264", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:271", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:279", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:286", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:294", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:301", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_invalid:312", func(t *testing.T) { assertInvalidSpec(t, "load.14.wasm", "type mismatch") })
	t.Run("assert_invalid:316", func(t *testing.T) { assertInvalidSpec(t, "load.15.wasm", "type mismatch") })
	t.Run("assert_invalid:320", func(t *testing.T) { assertInvalidSpec(t, "load.16.wasm", "type mismatch") })
	t.Run("assert_invalid:324", func(t *testing.T) { assertInvalidSpec(t, "load.17.wasm", "type mismatch") })
	t.Run("assert_invalid:328", func(t *testing.T) { assertInvalidSpec(t, "load.18.wasm", "type mismatch") })
	t.Run("assert_invalid:332", func(t *testing.T) { assertInvalidSpec(t, "load.19.wasm", "type mismatch") })
	t.Run("assert_invalid:336", func(t *testing.T) { assertInvalidSpec(t, "load.20.wasm", "type mismatch") })
	t.Run("assert_invalid:340", func(t *testing.T) { assertInvalidSpec(t, "load.21.wasm", "type mismatch") })
	t.Run("assert_invalid:344", func(t *testing.T) { assertInvalidSpec(t, "load.22.wasm", "type mismatch") })
	t.Run("assert_invalid:348", func(t *testing.T) { assertInvalidSpec(t, "load.23.wasm", "type mismatch") })
	t.Run("assert_invalid:352", func(t *testing.T) { assertInvalidSpec(t, "load.24.wasm", "type mismatch") })
	t.Run("assert_invalid:356", func(t *testing.T) { assertInvalidSpec(t, "load.25.wasm", "type mismatch") })
	t.Run("assert_invalid:360", func(t *testing.T) { assertInvalidSpec(t, "load.26.wasm", "type mismatch") })
	t.Run("assert_invalid:364", func(t *testing.T) { assertInvalidSpec(t, "load.27.wasm", "type mismatch") })
	t.Run("assert_invalid:371", func(t *testing.T) { assertInvalidSpec(t, "load.28.wasm", "type mismatch") })
	t.Run("assert_invalid:372", func(t *testing.T) { assertInvalidSpec(t, "load.29.wasm", "type mismatch") })
	t.Run("assert_invalid:373", func(t *testing.T) { assertInvalidSpec(t, "load.30.wasm", "type mismatch") })
	t.Run("assert_invalid:374", func(t *testing.T) { assertInvalidSpec(t, "load.31.wasm", "type mismatch") })
	t.Run("assert_invalid:375", func(t *testing.T) { assertInvalidSpec(t, "load.32.wasm", "type mismatch") })
	t.Run("assert_invalid:376", func(t *testing.T) { assertInvalidSpec(t, "load.33.wasm", "type mismatch") })
	t.Run("assert_invalid:377", func(t *testing.T) { assertInvalidSpec(t, "load.34.wasm", "type mismatch") })
	t.Run("assert_invalid:378", func(t *testing.T) { assertInvalidSpec(t, "load.35.wasm", "type mismatch") })
	t.Run("assert_invalid:379", func(t *testing.T) { assertInvalidSpec(t, "load.36.wasm", "type mismatch") })
	t.Run("assert_invalid:380", func(t *testing.T) { assertInvalidSpec(t, "load.37.wasm", "type mismatch") })
	t.Run("assert_invalid:381", func(t *testing.T) { assertInvalidSpec(t, "load.38.wasm", "type mismatch") })
	t.Run("assert_invalid:382", func(t *testing.T) { assertInvalidSpec(t, "load.39.wasm", "type mismatch") })
	t.Run("assert_invalid:383", func(t *testing.T) { assertInvalidSpec(t, "load.40.wasm", "type mismatch") })
	t.Run("assert_invalid:384", func(t *testing.T) { assertInvalidSpec(t, "load.41.wasm", "type mismatch") })
	t.Run("assert_invalid:388", func(t *testing.T) { assertInvalidSpec(t, "load.42.wasm", "type mismatch") })
	t.Run("assert_invalid:397", func(t *testing.T) { assertInvalidSpec(t, "load.43.wasm", "type mismatch") })
	t.Run("assert_invalid:407", func(t *testing.T) { assertInvalidSpec(t, "load.44.wasm", "type mismatch") })
	t.Run("assert_invalid:417", func(t *testing.T) { assertInvalidSpec(t, "load.45.wasm", "type mismatch") })
	t.Run("assert_invalid:427", func(t *testing.T) { assertInvalidSpec(t, "load.46.wasm", "type mismatch") })
	t.Run("assert_invalid:437", func(t *testing.T) { assertInvalidSpec(t, "load.47.wasm", "type mismatch") })
	t.Run("assert_invalid:447", func(t *testing.T) { assertInvalidSpec(t, "load.48.wasm", "type mismatch") })
	t.Run("assert_invalid:457", func(t *testing.T) { assertInvalidSpec(t, "load.49.wasm", "type mismatch") })
	t.Run("assert_invalid:467", func(t *testing.T) { assertInvalidSpec(t, "load.50.wasm", "type mismatch") })
	t.Run("assert_invalid:476", func(t *testing.T) { assertInvalidSpec(t, "load.51.wasm", "type mismatch") })
	t.Run("assert_invalid:485", func(t *testing.T) { assertInvalidSpec(t, "load.52.wasm", "type mismatch") })
	t.Run("assert_invalid:495", func(t *testing.T) { assertInvalidSpec(t, "load.53.wasm", "type mismatch") })
	t.Run("assert_invalid:512", func(t *testing.T) { assertInvalidSpec(t, "load.54.wasm", "type mismatch") })
	t.Run("assert_invalid:522", func(t *testing.T) { assertInvalidSpec(t, "load.55.wasm", "type mismatch") })
	t.Run("assert_invalid:532", func(t *testing.T) { assertInvalidSpec(t, "load.56.wasm", "type mismatch") })
	t.Run("assert_invalid:542", func(t *testing.T) { assertInvalidSpec(t, "load.57.wasm", "type mismatch") })
	t.Run("assert_invalid:551", func(t *testing.T) { assertInvalidSpec(t, "load.58.wasm", "type mismatch") })
	t.Run("assert_invalid:560", func(t *testing.T) { assertInvalidSpec(t, "load.59.wasm", "type mismatch") })
}

func Test_local_get(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "local_get.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("type-local-i32:109", func(t *testing.T) { x0.assertReturnInvoke(t, "type-local-i32", nil, arg{wa.I32, 0}) })
	t.Run("type-local-i64:110", func(t *testing.T) { x0.assertReturnInvoke(t, "type-local-i64", nil, arg{wa.I64, 0}) })
	t.Run("type-local-f32:111", func(t *testing.T) { x0.assertReturnInvoke(t, "type-local-f32", nil, arg{wa.F32, 0}) })
	t.Run("type-local-f64:112", func(t *testing.T) { x0.assertReturnInvoke(t, "type-local-f64", nil, arg{wa.F64, 0}) })
	t.Run("type-param-i32:114", func(t *testing.T) { x0.assertReturnInvoke(t, "type-param-i32", []arg{{wa.I32, 2}}, arg{wa.I32, 2}) })
	t.Run("type-param-i64:115", func(t *testing.T) { x0.assertReturnInvoke(t, "type-param-i64", []arg{{wa.I64, 3}}, arg{wa.I64, 3}) })
	t.Run("type-param-f32:116", func(t *testing.T) {
		x0.assertReturnInvoke(t, "type-param-f32", []arg{{wa.F32, 1082969293}}, arg{wa.F32, 1082969293})
	})
	t.Run("type-param-f64:117", func(t *testing.T) {
		x0.assertReturnInvoke(t, "type-param-f64", []arg{{wa.F64, 4617878467915022336}}, arg{wa.F64, 4617878467915022336})
	})
	t.Run("as-block-value:119", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-value", []arg{{wa.I32, 6}}, arg{wa.I32, 6}) })
	t.Run("as-loop-value:120", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-value", []arg{{wa.I32, 7}}, arg{wa.I32, 7}) })
	t.Run("as-br-value:122", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br-value", []arg{{wa.I32, 8}}, arg{wa.I32, 8}) })
	t.Run("as-br_if-value:123", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-value", []arg{{wa.I32, 9}}, arg{wa.I32, 9}) })
	t.Run("as-br_if-value-cond:124", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-br_if-value-cond", []arg{{wa.I32, 10}}, arg{wa.I32, 10})
	})
	t.Run("as-br_table-value:125", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-value", []arg{{wa.I32, 1}}, arg{wa.I32, 2}) })
	t.Run("as-return-value:127", func(t *testing.T) { x0.assertReturnInvoke(t, "as-return-value", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("as-if-then:129", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-then", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("as-if-else:130", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-else", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("type-mixed:133", func(t *testing.T) {
		x0.assertReturnInvoke(t, "type-mixed", []arg{{wa.I64, 1}, {wa.F32, 1074580685}, {wa.F64, 4614613358185178726}, {wa.I32, 4}, {wa.I32, 5}}, arg{})
	})
	t.Run("read:139", func(t *testing.T) {
		x0.assertReturnInvoke(t, "read", []arg{{wa.I64, 1}, {wa.F32, 1073741824}, {wa.F64, 4614613358185178726}, {wa.I32, 4}, {wa.I32, 5}}, arg{wa.F64, 4630094481904264806})
	})
	t.Run("assert_invalid:149", func(t *testing.T) { assertInvalidSpec(t, "local_get.1.wasm", "type mismatch") })
	t.Run("assert_invalid:153", func(t *testing.T) { assertInvalidSpec(t, "local_get.2.wasm", "type mismatch") })
	t.Run("assert_invalid:157", func(t *testing.T) { assertInvalidSpec(t, "local_get.3.wasm", "type mismatch") })
	t.Run("assert_invalid:165", func(t *testing.T) { assertInvalidSpec(t, "local_get.4.wasm", "type mismatch") })
	t.Run("assert_invalid:169", func(t *testing.T) { assertInvalidSpec(t, "local_get.5.wasm", "type mismatch") })
	t.Run("assert_invalid:173", func(t *testing.T) { assertInvalidSpec(t, "local_get.6.wasm", "type mismatch") })
	t.Run("assert_invalid:181", func(t *testing.T) { assertInvalidSpec(t, "local_get.7.wasm", "type mismatch") })
	t.Run("assert_invalid:185", func(t *testing.T) { assertInvalidSpec(t, "local_get.8.wasm", "type mismatch") })
	t.Run("assert_invalid:189", func(t *testing.T) { assertInvalidSpec(t, "local_get.9.wasm", "type mismatch") })
	t.Run("assert_invalid:193", func(t *testing.T) { assertInvalidSpec(t, "local_get.10.wasm", "type mismatch") })
	t.Run("assert_invalid:201", func(t *testing.T) { assertInvalidSpec(t, "local_get.11.wasm", "unknown local") })
	t.Run("assert_invalid:205", func(t *testing.T) { assertInvalidSpec(t, "local_get.12.wasm", "unknown local") })
	t.Run("assert_invalid:210", func(t *testing.T) { assertInvalidSpec(t, "local_get.13.wasm", "unknown local") })
	t.Run("assert_invalid:214", func(t *testing.T) { assertInvalidSpec(t, "local_get.14.wasm", "unknown local") })
	t.Run("assert_invalid:219", func(t *testing.T) { assertInvalidSpec(t, "local_get.15.wasm", "unknown local") })
	t.Run("assert_invalid:223", func(t *testing.T) { assertInvalidSpec(t, "local_get.16.wasm", "unknown local") })
}

func Test_local_set(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "local_set.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("type-local-i32:107", func(t *testing.T) { x0.assertReturnInvoke(t, "type-local-i32", nil, arg{}) })
	t.Run("type-local-i64:108", func(t *testing.T) { x0.assertReturnInvoke(t, "type-local-i64", nil, arg{}) })
	t.Run("type-local-f32:109", func(t *testing.T) { x0.assertReturnInvoke(t, "type-local-f32", nil, arg{}) })
	t.Run("type-local-f64:110", func(t *testing.T) { x0.assertReturnInvoke(t, "type-local-f64", nil, arg{}) })
	t.Run("type-param-i32:112", func(t *testing.T) { x0.assertReturnInvoke(t, "type-param-i32", []arg{{wa.I32, 2}}, arg{}) })
	t.Run("type-param-i64:113", func(t *testing.T) { x0.assertReturnInvoke(t, "type-param-i64", []arg{{wa.I64, 3}}, arg{}) })
	t.Run("type-param-f32:114", func(t *testing.T) { x0.assertReturnInvoke(t, "type-param-f32", []arg{{wa.F32, 1082969293}}, arg{}) })
	t.Run("type-param-f64:115", func(t *testing.T) {
		x0.assertReturnInvoke(t, "type-param-f64", []arg{{wa.F64, 4617878467915022336}}, arg{})
	})
	t.Run("as-block-value:117", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-value", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("as-loop-value:118", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-value", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("as-br-value:120", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br-value", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("as-br_if-value:121", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-value", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("as-br_if-value-cond:122", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-value-cond", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("as-br_table-value:123", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-value", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("as-return-value:125", func(t *testing.T) { x0.assertReturnInvoke(t, "as-return-value", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("as-if-then:127", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-then", []arg{{wa.I32, 1}}, arg{}) })
	t.Run("as-if-else:128", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-else", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("type-mixed:131", func(t *testing.T) {
		x0.assertReturnInvoke(t, "type-mixed", []arg{{wa.I64, 1}, {wa.F32, 1074580685}, {wa.F64, 4614613358185178726}, {wa.I32, 4}, {wa.I32, 5}}, arg{})
	})
	t.Run("write:137", func(t *testing.T) {
		x0.assertReturnInvoke(t, "write", []arg{{wa.I64, 1}, {wa.F32, 1073741824}, {wa.F64, 4614613358185178726}, {wa.I32, 4}, {wa.I32, 5}}, arg{wa.I64, 56})
	})
	t.Run("assert_invalid:148", func(t *testing.T) { assertInvalidSpec(t, "local_set.1.wasm", "type mismatch") })
	t.Run("assert_invalid:152", func(t *testing.T) { assertInvalidSpec(t, "local_set.2.wasm", "type mismatch") })
	t.Run("assert_invalid:156", func(t *testing.T) { assertInvalidSpec(t, "local_set.3.wasm", "type mismatch") })
	t.Run("assert_invalid:160", func(t *testing.T) { assertInvalidSpec(t, "local_set.4.wasm", "type mismatch") })
	t.Run("assert_invalid:169", func(t *testing.T) { assertInvalidSpec(t, "local_set.5.wasm", "type mismatch") })
	t.Run("assert_invalid:173", func(t *testing.T) { assertInvalidSpec(t, "local_set.6.wasm", "type mismatch") })
	t.Run("assert_invalid:177", func(t *testing.T) { assertInvalidSpec(t, "local_set.7.wasm", "type mismatch") })
	t.Run("assert_invalid:181", func(t *testing.T) { assertInvalidSpec(t, "local_set.8.wasm", "type mismatch") })
	t.Run("assert_invalid:186", func(t *testing.T) { assertInvalidSpec(t, "local_set.9.wasm", "type mismatch") })
	t.Run("assert_invalid:194", func(t *testing.T) { assertInvalidSpec(t, "local_set.10.wasm", "type mismatch") })
	t.Run("assert_invalid:203", func(t *testing.T) { assertInvalidSpec(t, "local_set.11.wasm", "type mismatch") })
	t.Run("assert_invalid:212", func(t *testing.T) { assertInvalidSpec(t, "local_set.12.wasm", "type mismatch") })
	t.Run("assert_invalid:221", func(t *testing.T) { assertInvalidSpec(t, "local_set.13.wasm", "type mismatch") })
	t.Run("assert_invalid:230", func(t *testing.T) { assertInvalidSpec(t, "local_set.14.wasm", "type mismatch") })
	t.Run("assert_invalid:239", func(t *testing.T) { assertInvalidSpec(t, "local_set.15.wasm", "type mismatch") })
	t.Run("assert_invalid:248", func(t *testing.T) { assertInvalidSpec(t, "local_set.16.wasm", "type mismatch") })
	t.Run("assert_invalid:257", func(t *testing.T) { assertInvalidSpec(t, "local_set.17.wasm", "type mismatch") })
	t.Run("assert_invalid:265", func(t *testing.T) { assertInvalidSpec(t, "local_set.18.wasm", "type mismatch") })
	t.Run("assert_invalid:273", func(t *testing.T) { assertInvalidSpec(t, "local_set.19.wasm", "type mismatch") })
	t.Run("assert_invalid:282", func(t *testing.T) { assertInvalidSpec(t, "local_set.20.wasm", "type mismatch") })
	t.Run("assert_invalid:301", func(t *testing.T) { assertInvalidSpec(t, "local_set.21.wasm", "type mismatch") })
	t.Run("assert_invalid:305", func(t *testing.T) { assertInvalidSpec(t, "local_set.22.wasm", "type mismatch") })
	t.Run("assert_invalid:309", func(t *testing.T) { assertInvalidSpec(t, "local_set.23.wasm", "type mismatch") })
	t.Run("assert_invalid:317", func(t *testing.T) { assertInvalidSpec(t, "local_set.24.wasm", "type mismatch") })
	t.Run("assert_invalid:321", func(t *testing.T) { assertInvalidSpec(t, "local_set.25.wasm", "type mismatch") })
	t.Run("assert_invalid:325", func(t *testing.T) { assertInvalidSpec(t, "local_set.26.wasm", "type mismatch") })
	t.Run("assert_invalid:329", func(t *testing.T) { assertInvalidSpec(t, "local_set.27.wasm", "type mismatch") })
	t.Run("assert_invalid:337", func(t *testing.T) { assertInvalidSpec(t, "local_set.28.wasm", "unknown local") })
	t.Run("assert_invalid:341", func(t *testing.T) { assertInvalidSpec(t, "local_set.29.wasm", "unknown local") })
	t.Run("assert_invalid:346", func(t *testing.T) { assertInvalidSpec(t, "local_set.30.wasm", "unknown local") })
	t.Run("assert_invalid:350", func(t *testing.T) { assertInvalidSpec(t, "local_set.31.wasm", "unknown local") })
	t.Run("assert_invalid:355", func(t *testing.T) { assertInvalidSpec(t, "local_set.32.wasm", "unknown local") })
	t.Run("assert_invalid:359", func(t *testing.T) { assertInvalidSpec(t, "local_set.33.wasm", "unknown local") })
}

func Test_local_tee(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "local_tee.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("type-local-i32:280", func(t *testing.T) { x0.assertReturnInvoke(t, "type-local-i32", nil, arg{wa.I32, 0}) })
	t.Run("type-local-i64:281", func(t *testing.T) { x0.assertReturnInvoke(t, "type-local-i64", nil, arg{wa.I64, 0}) })
	t.Run("type-local-f32:282", func(t *testing.T) { x0.assertReturnInvoke(t, "type-local-f32", nil, arg{wa.F32, 0}) })
	t.Run("type-local-f64:283", func(t *testing.T) { x0.assertReturnInvoke(t, "type-local-f64", nil, arg{wa.F64, 0}) })
	t.Run("type-param-i32:285", func(t *testing.T) { x0.assertReturnInvoke(t, "type-param-i32", []arg{{wa.I32, 2}}, arg{wa.I32, 10}) })
	t.Run("type-param-i64:286", func(t *testing.T) { x0.assertReturnInvoke(t, "type-param-i64", []arg{{wa.I64, 3}}, arg{wa.I64, 11}) })
	t.Run("type-param-f32:287", func(t *testing.T) {
		x0.assertReturnInvoke(t, "type-param-f32", []arg{{wa.F32, 1082969293}}, arg{wa.F32, 1093769626})
	})
	t.Run("type-param-f64:288", func(t *testing.T) {
		x0.assertReturnInvoke(t, "type-param-f64", []arg{{wa.F64, 4617878467915022336}}, arg{wa.F64, 4623057607486498406})
	})
	t.Run("as-block-first:290", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-first", []arg{{wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("as-block-mid:291", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-mid", []arg{{wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("as-block-last:292", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-last", []arg{{wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("as-loop-first:294", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-first", []arg{{wa.I32, 0}}, arg{wa.I32, 3}) })
	t.Run("as-loop-mid:295", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-mid", []arg{{wa.I32, 0}}, arg{wa.I32, 4}) })
	t.Run("as-loop-last:296", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-last", []arg{{wa.I32, 0}}, arg{wa.I32, 5}) })
	t.Run("as-br-value:298", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br-value", []arg{{wa.I32, 0}}, arg{wa.I32, 9}) })
	t.Run("as-br_if-cond:300", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-cond", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("as-br_if-value:301", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-value", []arg{{wa.I32, 0}}, arg{wa.I32, 8}) })
	t.Run("as-br_if-value-cond:302", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-br_if-value-cond", []arg{{wa.I32, 0}}, arg{wa.I32, 6})
	})
	t.Run("as-br_table-index:304", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-index", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("as-br_table-value:305", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-value", []arg{{wa.I32, 0}}, arg{wa.I32, 10}) })
	t.Run("as-br_table-value-index:306", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-br_table-value-index", []arg{{wa.I32, 0}}, arg{wa.I32, 6})
	})
	t.Run("as-return-value:308", func(t *testing.T) { x0.assertReturnInvoke(t, "as-return-value", []arg{{wa.I32, 0}}, arg{wa.I32, 7}) })
	t.Run("as-if-cond:310", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-cond", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("as-if-then:311", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-then", []arg{{wa.I32, 1}}, arg{wa.I32, 3}) })
	t.Run("as-if-else:312", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-else", []arg{{wa.I32, 0}}, arg{wa.I32, 4}) })
	t.Run("as-select-first:314", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-select-first", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{wa.I32, 5})
	})
	t.Run("as-select-second:315", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-select-second", []arg{{wa.I32, 0}, {wa.I32, 0}}, arg{wa.I32, 6})
	})
	t.Run("as-select-cond:316", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-cond", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("as-call-first:318", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-call-first", []arg{{wa.I32, 0}}, arg{wa.I32, 4294967295})
	})
	t.Run("as-call-mid:319", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-call-mid", []arg{{wa.I32, 0}}, arg{wa.I32, 4294967295})
	})
	t.Run("as-call-last:320", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-call-last", []arg{{wa.I32, 0}}, arg{wa.I32, 4294967295})
	})
	t.Run("as-call_indirect-first:322", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-call_indirect-first", []arg{{wa.I32, 0}}, arg{wa.I32, 4294967295})
	})
	t.Run("as-call_indirect-mid:323", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-call_indirect-mid", []arg{{wa.I32, 0}}, arg{wa.I32, 4294967295})
	})
	t.Run("as-call_indirect-last:324", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-call_indirect-last", []arg{{wa.I32, 0}}, arg{wa.I32, 4294967295})
	})
	t.Run("as-call_indirect-index:325", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-call_indirect-index", []arg{{wa.I32, 0}}, arg{wa.I32, 4294967295})
	})
	t.Run("as-local.set-value:327", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.set-value", nil, arg{}) })
	t.Run("as-local.tee-value:328", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.tee-value", []arg{{wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("as-global.set-value:329", func(t *testing.T) { x0.assertReturnInvoke(t, "as-global.set-value", nil, arg{}) })
	t.Run("as-load-address:331", func(t *testing.T) { x0.assertReturnInvoke(t, "as-load-address", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("as-loadN-address:332", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loadN-address", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("as-store-address:333", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-address", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("as-store-value:334", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-value", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("as-storeN-address:335", func(t *testing.T) { x0.assertReturnInvoke(t, "as-storeN-address", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("as-storeN-value:336", func(t *testing.T) { x0.assertReturnInvoke(t, "as-storeN-value", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("as-unary-operand:338", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-unary-operand", []arg{{wa.F32, 0}}, arg{wa.F32, 4286640610})
	})
	t.Run("as-binary-left:339", func(t *testing.T) { x0.assertReturnInvoke(t, "as-binary-left", []arg{{wa.I32, 0}}, arg{wa.I32, 13}) })
	t.Run("as-binary-right:340", func(t *testing.T) { x0.assertReturnInvoke(t, "as-binary-right", []arg{{wa.I32, 0}}, arg{wa.I32, 6}) })
	t.Run("as-test-operand:341", func(t *testing.T) { x0.assertReturnInvoke(t, "as-test-operand", []arg{{wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("as-compare-left:342", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-left", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("as-compare-right:343", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-right", []arg{{wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("as-convert-operand:344", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-convert-operand", []arg{{wa.I64, 0}}, arg{wa.I32, 41})
	})
	t.Run("as-memory.grow-size:345", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-memory.grow-size", []arg{{wa.I32, 0}}, arg{wa.I32, 1})
	})
	t.Run("type-mixed:348", func(t *testing.T) {
		x0.assertReturnInvoke(t, "type-mixed", []arg{{wa.I64, 1}, {wa.F32, 1074580685}, {wa.F64, 4614613358185178726}, {wa.I32, 4}, {wa.I32, 5}}, arg{})
	})
	t.Run("write:354", func(t *testing.T) {
		x0.assertReturnInvoke(t, "write", []arg{{wa.I64, 1}, {wa.F32, 1073741824}, {wa.F64, 4614613358185178726}, {wa.I32, 4}, {wa.I32, 5}}, arg{wa.I64, 56})
	})
	t.Run("result:361", func(t *testing.T) {
		x0.assertReturnInvoke(t, "result", []arg{{wa.I64, 18446744073709551615}, {wa.F32, 3221225472}, {wa.F64, 13837985395039954534}, {wa.I32, 4294967292}, {wa.I32, 4294967291}}, arg{wa.F64, 4630094481904264806})
	})
	t.Run("assert_invalid:371", func(t *testing.T) { assertInvalidSpec(t, "local_tee.1.wasm", "type mismatch") })
	t.Run("assert_invalid:375", func(t *testing.T) { assertInvalidSpec(t, "local_tee.2.wasm", "type mismatch") })
	t.Run("assert_invalid:379", func(t *testing.T) { assertInvalidSpec(t, "local_tee.3.wasm", "type mismatch") })
	t.Run("assert_invalid:384", func(t *testing.T) { assertInvalidSpec(t, "local_tee.4.wasm", "type mismatch") })
	t.Run("assert_invalid:388", func(t *testing.T) { assertInvalidSpec(t, "local_tee.5.wasm", "type mismatch") })
	t.Run("assert_invalid:392", func(t *testing.T) { assertInvalidSpec(t, "local_tee.6.wasm", "type mismatch") })
	t.Run("assert_invalid:396", func(t *testing.T) { assertInvalidSpec(t, "local_tee.7.wasm", "type mismatch") })
	t.Run("assert_invalid:404", func(t *testing.T) { assertInvalidSpec(t, "local_tee.8.wasm", "type mismatch") })
	t.Run("assert_invalid:408", func(t *testing.T) { assertInvalidSpec(t, "local_tee.9.wasm", "type mismatch") })
	t.Run("assert_invalid:412", func(t *testing.T) { assertInvalidSpec(t, "local_tee.10.wasm", "type mismatch") })
	t.Run("assert_invalid:417", func(t *testing.T) { assertInvalidSpec(t, "local_tee.11.wasm", "type mismatch") })
	t.Run("assert_invalid:421", func(t *testing.T) { assertInvalidSpec(t, "local_tee.12.wasm", "type mismatch") })
	t.Run("assert_invalid:425", func(t *testing.T) { assertInvalidSpec(t, "local_tee.13.wasm", "type mismatch") })
	t.Run("assert_invalid:429", func(t *testing.T) { assertInvalidSpec(t, "local_tee.14.wasm", "type mismatch") })
	t.Run("assert_invalid:434", func(t *testing.T) { assertInvalidSpec(t, "local_tee.15.wasm", "type mismatch") })
	t.Run("assert_invalid:442", func(t *testing.T) { assertInvalidSpec(t, "local_tee.16.wasm", "type mismatch") })
	t.Run("assert_invalid:451", func(t *testing.T) { assertInvalidSpec(t, "local_tee.17.wasm", "type mismatch") })
	t.Run("assert_invalid:460", func(t *testing.T) { assertInvalidSpec(t, "local_tee.18.wasm", "type mismatch") })
	t.Run("assert_invalid:469", func(t *testing.T) { assertInvalidSpec(t, "local_tee.19.wasm", "type mismatch") })
	t.Run("assert_invalid:478", func(t *testing.T) { assertInvalidSpec(t, "local_tee.20.wasm", "type mismatch") })
	t.Run("assert_invalid:487", func(t *testing.T) { assertInvalidSpec(t, "local_tee.21.wasm", "type mismatch") })
	t.Run("assert_invalid:496", func(t *testing.T) { assertInvalidSpec(t, "local_tee.22.wasm", "type mismatch") })
	t.Run("assert_invalid:505", func(t *testing.T) { assertInvalidSpec(t, "local_tee.23.wasm", "type mismatch") })
	t.Run("assert_invalid:513", func(t *testing.T) { assertInvalidSpec(t, "local_tee.24.wasm", "type mismatch") })
	t.Run("assert_invalid:521", func(t *testing.T) { assertInvalidSpec(t, "local_tee.25.wasm", "type mismatch") })
	t.Run("assert_invalid:530", func(t *testing.T) { assertInvalidSpec(t, "local_tee.26.wasm", "type mismatch") })
	t.Run("assert_invalid:546", func(t *testing.T) { assertInvalidSpec(t, "local_tee.27.wasm", "type mismatch") })
	t.Run("assert_invalid:554", func(t *testing.T) { assertInvalidSpec(t, "local_tee.28.wasm", "type mismatch") })
	t.Run("assert_invalid:562", func(t *testing.T) { assertInvalidSpec(t, "local_tee.29.wasm", "type mismatch") })
	t.Run("assert_invalid:571", func(t *testing.T) { assertInvalidSpec(t, "local_tee.30.wasm", "type mismatch") })
	t.Run("assert_invalid:580", func(t *testing.T) { assertInvalidSpec(t, "local_tee.31.wasm", "type mismatch") })
	t.Run("assert_invalid:589", func(t *testing.T) { assertInvalidSpec(t, "local_tee.32.wasm", "type mismatch") })
	t.Run("assert_invalid:599", func(t *testing.T) { assertInvalidSpec(t, "local_tee.33.wasm", "type mismatch") })
	t.Run("assert_invalid:603", func(t *testing.T) { assertInvalidSpec(t, "local_tee.34.wasm", "type mismatch") })
	t.Run("assert_invalid:607", func(t *testing.T) { assertInvalidSpec(t, "local_tee.35.wasm", "type mismatch") })
	t.Run("assert_invalid:615", func(t *testing.T) { assertInvalidSpec(t, "local_tee.36.wasm", "unknown local") })
	t.Run("assert_invalid:619", func(t *testing.T) { assertInvalidSpec(t, "local_tee.37.wasm", "unknown local") })
	t.Run("assert_invalid:624", func(t *testing.T) { assertInvalidSpec(t, "local_tee.38.wasm", "unknown local") })
	t.Run("assert_invalid:628", func(t *testing.T) { assertInvalidSpec(t, "local_tee.39.wasm", "unknown local") })
	t.Run("assert_invalid:633", func(t *testing.T) { assertInvalidSpec(t, "local_tee.40.wasm", "unknown local") })
	t.Run("assert_invalid:637", func(t *testing.T) { assertInvalidSpec(t, "local_tee.41.wasm", "unknown local") })
}

func Test_loop(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "loop.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("empty:430", func(t *testing.T) { x0.assertReturnInvoke(t, "empty", nil, arg{}) })
	t.Run("singular:431", func(t *testing.T) { x0.assertReturnInvoke(t, "singular", nil, arg{wa.I32, 7}) })
	t.Run("multi:432", func(t *testing.T) { x0.assertReturnInvoke(t, "multi", nil, arg{wa.I32, 8}) })
	t.Run("nested:433", func(t *testing.T) { x0.assertReturnInvoke(t, "nested", nil, arg{wa.I32, 9}) })
	t.Run("deep:434", func(t *testing.T) { x0.assertReturnInvoke(t, "deep", nil, arg{wa.I32, 150}) })
	t.Run("as-select-first:436", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-first", nil, arg{wa.I32, 1}) })
	t.Run("as-select-mid:437", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-mid", nil, arg{wa.I32, 2}) })
	t.Run("as-select-last:438", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-last", nil, arg{wa.I32, 2}) })
	t.Run("as-if-condition:440", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-condition", nil, arg{}) })
	t.Run("as-if-then:441", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-then", nil, arg{wa.I32, 1}) })
	t.Run("as-if-else:442", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-else", nil, arg{wa.I32, 2}) })
	t.Run("as-br_if-first:444", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-first", nil, arg{wa.I32, 1}) })
	t.Run("as-br_if-last:445", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-last", nil, arg{wa.I32, 2}) })
	t.Run("as-br_table-first:447", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-first", nil, arg{wa.I32, 1}) })
	t.Run("as-br_table-last:448", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-last", nil, arg{wa.I32, 2}) })
	t.Run("as-call_indirect-first:450", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-first", nil, arg{wa.I32, 1}) })
	t.Run("as-call_indirect-mid:451", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-mid", nil, arg{wa.I32, 2}) })
	t.Run("as-call_indirect-last:452", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-last", nil, arg{wa.I32, 1}) })
	t.Run("as-store-first:454", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-first", nil, arg{}) })
	t.Run("as-store-last:455", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-last", nil, arg{}) })
	t.Run("as-memory.grow-value:457", func(t *testing.T) { x0.assertReturnInvoke(t, "as-memory.grow-value", nil, arg{wa.I32, 1}) })
	t.Run("as-call-value:458", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call-value", nil, arg{wa.I32, 1}) })
	t.Run("as-return-value:459", func(t *testing.T) { x0.assertReturnInvoke(t, "as-return-value", nil, arg{wa.I32, 1}) })
	t.Run("as-drop-operand:460", func(t *testing.T) { x0.assertReturnInvoke(t, "as-drop-operand", nil, arg{}) })
	t.Run("as-br-value:461", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br-value", nil, arg{wa.I32, 1}) })
	t.Run("as-local.set-value:462", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.set-value", nil, arg{wa.I32, 1}) })
	t.Run("as-local.tee-value:463", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.tee-value", nil, arg{wa.I32, 1}) })
	t.Run("as-global.set-value:464", func(t *testing.T) { x0.assertReturnInvoke(t, "as-global.set-value", nil, arg{wa.I32, 1}) })
	t.Run("as-load-operand:465", func(t *testing.T) { x0.assertReturnInvoke(t, "as-load-operand", nil, arg{wa.I32, 1}) })
	t.Run("as-unary-operand:467", func(t *testing.T) { x0.assertReturnInvoke(t, "as-unary-operand", nil, arg{wa.I32, 0}) })
	t.Run("as-binary-operand:468", func(t *testing.T) { x0.assertReturnInvoke(t, "as-binary-operand", nil, arg{wa.I32, 12}) })
	t.Run("as-test-operand:469", func(t *testing.T) { x0.assertReturnInvoke(t, "as-test-operand", nil, arg{wa.I32, 0}) })
	t.Run("as-compare-operand:470", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-operand", nil, arg{wa.I32, 0}) })
	t.Run("as-binary-operands:471", func(t *testing.T) { x0.assertReturnInvoke(t, "as-binary-operands", nil, arg{wa.I32, 12}) })
	t.Run("as-compare-operands:472", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-operands", nil, arg{wa.I32, 0}) })
	t.Run("as-mixed-operands:473", func(t *testing.T) { x0.assertReturnInvoke(t, "as-mixed-operands", nil, arg{wa.I32, 27}) })
	t.Run("break-bare:475", func(t *testing.T) { x0.assertReturnInvoke(t, "break-bare", nil, arg{wa.I32, 19}) })
	t.Run("break-value:476", func(t *testing.T) { x0.assertReturnInvoke(t, "break-value", nil, arg{wa.I32, 18}) })
	t.Run("break-multi-value:477", func(t *testing.T) { t.Skip("multi-value extension not supported") })
	t.Run("break-repeated:480", func(t *testing.T) { x0.assertReturnInvoke(t, "break-repeated", nil, arg{wa.I32, 18}) })
	t.Run("break-inner:481", func(t *testing.T) { x0.assertReturnInvoke(t, "break-inner", nil, arg{wa.I32, 31}) })
	t.Run("param:483", func(t *testing.T) { x0.assertReturnInvoke(t, "param", nil, arg{wa.I32, 3}) })
	t.Run("params:484", func(t *testing.T) { x0.assertReturnInvoke(t, "params", nil, arg{wa.I32, 3}) })
	t.Run("params-id:485", func(t *testing.T) { x0.assertReturnInvoke(t, "params-id", nil, arg{wa.I32, 3}) })
	t.Run("param-break:486", func(t *testing.T) { x0.assertReturnInvoke(t, "param-break", nil, arg{wa.I32, 13}) })
	t.Run("params-break:487", func(t *testing.T) { x0.assertReturnInvoke(t, "params-break", nil, arg{wa.I32, 12}) })
	t.Run("params-id-break:488", func(t *testing.T) { x0.assertReturnInvoke(t, "params-id-break", nil, arg{wa.I32, 3}) })
	t.Run("effects:490", func(t *testing.T) { x0.assertReturnInvoke(t, "effects", nil, arg{wa.I32, 1}) })
	t.Run("while:492", func(t *testing.T) { x0.assertReturnInvoke(t, "while", []arg{{wa.I64, 0}}, arg{wa.I64, 1}) })
	t.Run("while:493", func(t *testing.T) { x0.assertReturnInvoke(t, "while", []arg{{wa.I64, 1}}, arg{wa.I64, 1}) })
	t.Run("while:494", func(t *testing.T) { x0.assertReturnInvoke(t, "while", []arg{{wa.I64, 2}}, arg{wa.I64, 2}) })
	t.Run("while:495", func(t *testing.T) { x0.assertReturnInvoke(t, "while", []arg{{wa.I64, 3}}, arg{wa.I64, 6}) })
	t.Run("while:496", func(t *testing.T) { x0.assertReturnInvoke(t, "while", []arg{{wa.I64, 5}}, arg{wa.I64, 120}) })
	t.Run("while:497", func(t *testing.T) {
		x0.assertReturnInvoke(t, "while", []arg{{wa.I64, 20}}, arg{wa.I64, 2432902008176640000})
	})
	t.Run("for:499", func(t *testing.T) { x0.assertReturnInvoke(t, "for", []arg{{wa.I64, 0}}, arg{wa.I64, 1}) })
	t.Run("for:500", func(t *testing.T) { x0.assertReturnInvoke(t, "for", []arg{{wa.I64, 1}}, arg{wa.I64, 1}) })
	t.Run("for:501", func(t *testing.T) { x0.assertReturnInvoke(t, "for", []arg{{wa.I64, 2}}, arg{wa.I64, 2}) })
	t.Run("for:502", func(t *testing.T) { x0.assertReturnInvoke(t, "for", []arg{{wa.I64, 3}}, arg{wa.I64, 6}) })
	t.Run("for:503", func(t *testing.T) { x0.assertReturnInvoke(t, "for", []arg{{wa.I64, 5}}, arg{wa.I64, 120}) })
	t.Run("for:504", func(t *testing.T) {
		x0.assertReturnInvoke(t, "for", []arg{{wa.I64, 20}}, arg{wa.I64, 2432902008176640000})
	})
	t.Run("nesting:506", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nesting", []arg{{wa.F32, 0}, {wa.F32, 1088421888}}, arg{wa.F32, 0})
	})
	t.Run("nesting:507", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nesting", []arg{{wa.F32, 1088421888}, {wa.F32, 0}}, arg{wa.F32, 0})
	})
	t.Run("nesting:508", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nesting", []arg{{wa.F32, 1065353216}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("nesting:509", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nesting", []arg{{wa.F32, 1065353216}, {wa.F32, 1073741824}}, arg{wa.F32, 1073741824})
	})
	t.Run("nesting:510", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nesting", []arg{{wa.F32, 1065353216}, {wa.F32, 1077936128}}, arg{wa.F32, 1082130432})
	})
	t.Run("nesting:511", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nesting", []arg{{wa.F32, 1065353216}, {wa.F32, 1082130432}}, arg{wa.F32, 1086324736})
	})
	t.Run("nesting:512", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nesting", []arg{{wa.F32, 1065353216}, {wa.F32, 1120403456}}, arg{wa.F32, 1159684096})
	})
	t.Run("nesting:513", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nesting", []arg{{wa.F32, 1065353216}, {wa.F32, 1120534528}}, arg{wa.F32, 1159892992})
	})
	t.Run("nesting:514", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nesting", []arg{{wa.F32, 1073741824}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("nesting:515", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nesting", []arg{{wa.F32, 1077936128}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("nesting:516", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nesting", []arg{{wa.F32, 1092616192}, {wa.F32, 1065353216}}, arg{wa.F32, 1065353216})
	})
	t.Run("nesting:517", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nesting", []arg{{wa.F32, 1073741824}, {wa.F32, 1073741824}}, arg{wa.F32, 1077936128})
	})
	t.Run("nesting:518", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nesting", []arg{{wa.F32, 1073741824}, {wa.F32, 1077936128}}, arg{wa.F32, 1082130432})
	})
	t.Run("nesting:519", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nesting", []arg{{wa.F32, 1088421888}, {wa.F32, 1082130432}}, arg{wa.F32, 1092940751})
	})
	t.Run("nesting:520", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nesting", []arg{{wa.F32, 1088421888}, {wa.F32, 1120403456}}, arg{wa.F32, 1166601314})
	})
	t.Run("nesting:521", func(t *testing.T) {
		x0.assertReturnInvoke(t, "nesting", []arg{{wa.F32, 1088421888}, {wa.F32, 1120534528}}, arg{wa.F32, 1159892992})
	})
	t.Run("type-use:523", func(t *testing.T) { x0.assertReturnInvoke(t, "type-use", nil, arg{}) })
	t.Run("assert_malformed:526", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:533", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:540", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:547", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:554", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:561", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:568", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:572", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:579", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:586", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:593", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_invalid:601", func(t *testing.T) { assertInvalidSpec(t, "loop.12.wasm", "type mismatch") })
	t.Run("assert_invalid:609", func(t *testing.T) { assertInvalidSpec(t, "loop.13.wasm", "type mismatch") })
	t.Run("assert_invalid:613", func(t *testing.T) { assertInvalidSpec(t, "loop.14.wasm", "type mismatch") })
	t.Run("assert_invalid:617", func(t *testing.T) { assertInvalidSpec(t, "loop.15.wasm", "type mismatch") })
	t.Run("assert_invalid:621", func(t *testing.T) { assertInvalidSpec(t, "loop.16.wasm", "type mismatch") })
	t.Run("assert_invalid:626", func(t *testing.T) { assertInvalidSpec(t, "loop.17.wasm", "type mismatch") })
	t.Run("assert_invalid:632", func(t *testing.T) { assertInvalidSpec(t, "loop.18.wasm", "type mismatch") })
	t.Run("assert_invalid:638", func(t *testing.T) { assertInvalidSpec(t, "loop.19.wasm", "type mismatch") })
	t.Run("assert_invalid:644", func(t *testing.T) { assertInvalidSpec(t, "loop.20.wasm", "type mismatch") })
	t.Run("assert_invalid:650", func(t *testing.T) { assertInvalidSpec(t, "loop.21.wasm", "type mismatch") })
	t.Run("assert_invalid:656", func(t *testing.T) { assertInvalidSpec(t, "loop.22.wasm", "type mismatch") })
	t.Run("assert_invalid:662", func(t *testing.T) { assertInvalidSpec(t, "loop.23.wasm", "type mismatch") })
	t.Run("assert_invalid:668", func(t *testing.T) { assertInvalidSpec(t, "loop.24.wasm", "type mismatch") })
	t.Run("assert_invalid:674", func(t *testing.T) { assertInvalidSpec(t, "loop.25.wasm", "type mismatch") })
	t.Run("assert_invalid:680", func(t *testing.T) { assertInvalidSpec(t, "loop.26.wasm", "type mismatch") })
	t.Run("assert_invalid:686", func(t *testing.T) { assertInvalidSpec(t, "loop.27.wasm", "type mismatch") })
	t.Run("assert_invalid:693", func(t *testing.T) { assertInvalidSpec(t, "loop.28.wasm", "type mismatch") })
	t.Run("assert_invalid:702", func(t *testing.T) { assertInvalidSpec(t, "loop.29.wasm", "type mismatch") })
	t.Run("assert_invalid:711", func(t *testing.T) { assertInvalidSpec(t, "loop.30.wasm", "type mismatch") })
	t.Run("assert_invalid:721", func(t *testing.T) { assertInvalidSpec(t, "loop.31.wasm", "type mismatch") })
	t.Run("assert_invalid:727", func(t *testing.T) { assertInvalidSpec(t, "loop.32.wasm", "type mismatch") })
	t.Run("assert_invalid:733", func(t *testing.T) { assertInvalidSpec(t, "loop.33.wasm", "type mismatch") })
	t.Run("assert_invalid:739", func(t *testing.T) { assertInvalidSpec(t, "loop.34.wasm", "type mismatch") })
	t.Run("assert_invalid:745", func(t *testing.T) { assertInvalidSpec(t, "loop.35.wasm", "type mismatch") })
	t.Run("assert_invalid:751", func(t *testing.T) { assertInvalidSpec(t, "loop.36.wasm", "type mismatch") })
	t.Run("assert_invalid:757", func(t *testing.T) { assertInvalidSpec(t, "loop.37.wasm", "type mismatch") })
	t.Run("assert_invalid:763", func(t *testing.T) { assertInvalidSpec(t, "loop.38.wasm", "type mismatch") })
	t.Run("assert_malformed:770", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:774", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:779", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:783", func(t *testing.T) { t.Skip("text format not supported") })
}

func Test_memory(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "memory.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	x1 := instantiateSpecTest(t, "1", "memory.1.wasm")
	t.Cleanup(func() { x1.close(t) })
	x2 := instantiateSpecTest(t, "2", "memory.2.wasm")
	t.Cleanup(func() { x2.close(t) })
	x3 := instantiateSpecTest(t, "3", "memory.3.wasm")
	t.Cleanup(func() { x3.close(t) })
	x4 := instantiateSpecTest(t, "4", "memory.4.wasm")
	t.Cleanup(func() { x4.close(t) })
	x5 := instantiateSpecTest(t, "5", "memory.5.wasm")
	t.Cleanup(func() { x5.close(t) })
	t.Run("assert_invalid:10", func(t *testing.T) { assertInvalidSpec(t, "memory.6.wasm", "multiple memories") })
	t.Run("assert_invalid:11", func(t *testing.T) { assertInvalidSpec(t, "memory.7.wasm", "multiple memories") })
	x6 := instantiateSpecTest(t, "6", "memory.8.wasm")
	t.Cleanup(func() { x6.close(t) })
	t.Run("memsize:14", func(t *testing.T) { x6.assertReturnInvoke(t, "memsize", nil, arg{wa.I32, 0}) })
	x7 := instantiateSpecTest(t, "7", "memory.9.wasm")
	t.Cleanup(func() { x7.close(t) })
	t.Run("memsize:16", func(t *testing.T) { x7.assertReturnInvoke(t, "memsize", nil, arg{wa.I32, 0}) })
	x8 := instantiateSpecTest(t, "8", "memory.10.wasm")
	t.Cleanup(func() { x8.close(t) })
	t.Run("memsize:18", func(t *testing.T) { x8.assertReturnInvoke(t, "memsize", nil, arg{wa.I32, 1}) })
	t.Run("assert_invalid:20", func(t *testing.T) { assertInvalidSpec(t, "memory.11.wasm", "unknown memory") })
	t.Run("assert_invalid:21", func(t *testing.T) { assertInvalidSpec(t, "memory.12.wasm", "unknown memory") })
	t.Run("assert_invalid:22", func(t *testing.T) { assertInvalidSpec(t, "memory.13.wasm", "unknown memory") })
	t.Run("assert_invalid:25", func(t *testing.T) { assertInvalidSpec(t, "memory.14.wasm", "unknown memory") })
	t.Run("assert_invalid:29", func(t *testing.T) { assertInvalidSpec(t, "memory.15.wasm", "unknown memory") })
	t.Run("assert_invalid:33", func(t *testing.T) { assertInvalidSpec(t, "memory.16.wasm", "unknown memory") })
	t.Run("assert_invalid:37", func(t *testing.T) { assertInvalidSpec(t, "memory.17.wasm", "unknown memory") })
	t.Run("assert_invalid:41", func(t *testing.T) { assertInvalidSpec(t, "memory.18.wasm", "unknown memory") })
	t.Run("assert_invalid:45", func(t *testing.T) { assertInvalidSpec(t, "memory.19.wasm", "unknown memory") })
	t.Run("assert_invalid:51", func(t *testing.T) {
		assertInvalidSpec(t, "memory.20.wasm", "size minimum must not be greater than maximum")
	})
	t.Run("assert_invalid:55", func(t *testing.T) {
		assertInvalidSpec(t, "memory.21.wasm", "memory size must be at most 65536 pages (4GiB)")
	})
	t.Run("assert_invalid:59", func(t *testing.T) {
		assertInvalidSpec(t, "memory.22.wasm", "memory size must be at most 65536 pages (4GiB)")
	})
	t.Run("assert_invalid:63", func(t *testing.T) {
		assertInvalidSpec(t, "memory.23.wasm", "memory size must be at most 65536 pages (4GiB)")
	})
	t.Run("assert_invalid:67", func(t *testing.T) {
		assertInvalidSpec(t, "memory.24.wasm", "memory size must be at most 65536 pages (4GiB)")
	})
	t.Run("assert_invalid:71", func(t *testing.T) {
		assertInvalidSpec(t, "memory.25.wasm", "memory size must be at most 65536 pages (4GiB)")
	})
	t.Run("assert_invalid:75", func(t *testing.T) {
		assertInvalidSpec(t, "memory.26.wasm", "memory size must be at most 65536 pages (4GiB)")
	})
	t.Run("assert_malformed:80", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:84", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:88", func(t *testing.T) { t.Skip("text format not supported") })
	x9 := instantiateSpecTest(t, "9", "memory.30.wasm")
	t.Cleanup(func() { x9.close(t) })
	t.Run("data:180", func(t *testing.T) { x9.assertReturnInvoke(t, "data", nil, arg{wa.I32, 1}) })
	t.Run("cast:181", func(t *testing.T) { x9.assertReturnInvoke(t, "cast", nil, arg{wa.F64, 4631107791820423168}) })
	t.Run("i32_load8_s:183", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i32_load8_s", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32_load8_u:184", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i32_load8_u", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 255})
	})
	t.Run("i32_load16_s:185", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i32_load16_s", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 4294967295})
	})
	t.Run("i32_load16_u:186", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i32_load16_u", []arg{{wa.I32, 4294967295}}, arg{wa.I32, 65535})
	})
	t.Run("i32_load8_s:188", func(t *testing.T) { x9.assertReturnInvoke(t, "i32_load8_s", []arg{{wa.I32, 100}}, arg{wa.I32, 100}) })
	t.Run("i32_load8_u:189", func(t *testing.T) { x9.assertReturnInvoke(t, "i32_load8_u", []arg{{wa.I32, 200}}, arg{wa.I32, 200}) })
	t.Run("i32_load16_s:190", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i32_load16_s", []arg{{wa.I32, 20000}}, arg{wa.I32, 20000})
	})
	t.Run("i32_load16_u:191", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i32_load16_u", []arg{{wa.I32, 40000}}, arg{wa.I32, 40000})
	})
	t.Run("i32_load8_s:193", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i32_load8_s", []arg{{wa.I32, 4275856707}}, arg{wa.I32, 67})
	})
	t.Run("i32_load8_s:194", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i32_load8_s", []arg{{wa.I32, 878104047}}, arg{wa.I32, 4294967279})
	})
	t.Run("i32_load8_u:195", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i32_load8_u", []arg{{wa.I32, 4275856707}}, arg{wa.I32, 67})
	})
	t.Run("i32_load8_u:196", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i32_load8_u", []arg{{wa.I32, 878104047}}, arg{wa.I32, 239})
	})
	t.Run("i32_load16_s:197", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i32_load16_s", []arg{{wa.I32, 4275856707}}, arg{wa.I32, 25923})
	})
	t.Run("i32_load16_s:198", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i32_load16_s", []arg{{wa.I32, 878104047}}, arg{wa.I32, 4294954479})
	})
	t.Run("i32_load16_u:199", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i32_load16_u", []arg{{wa.I32, 4275856707}}, arg{wa.I32, 25923})
	})
	t.Run("i32_load16_u:200", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i32_load16_u", []arg{{wa.I32, 878104047}}, arg{wa.I32, 52719})
	})
	t.Run("i64_load8_s:202", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i64_load8_s", []arg{{wa.I64, 18446744073709551615}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64_load8_u:203", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i64_load8_u", []arg{{wa.I64, 18446744073709551615}}, arg{wa.I64, 255})
	})
	t.Run("i64_load16_s:204", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i64_load16_s", []arg{{wa.I64, 18446744073709551615}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64_load16_u:205", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i64_load16_u", []arg{{wa.I64, 18446744073709551615}}, arg{wa.I64, 65535})
	})
	t.Run("i64_load32_s:206", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i64_load32_s", []arg{{wa.I64, 18446744073709551615}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("i64_load32_u:207", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i64_load32_u", []arg{{wa.I64, 18446744073709551615}}, arg{wa.I64, 4294967295})
	})
	t.Run("i64_load8_s:209", func(t *testing.T) { x9.assertReturnInvoke(t, "i64_load8_s", []arg{{wa.I64, 100}}, arg{wa.I64, 100}) })
	t.Run("i64_load8_u:210", func(t *testing.T) { x9.assertReturnInvoke(t, "i64_load8_u", []arg{{wa.I64, 200}}, arg{wa.I64, 200}) })
	t.Run("i64_load16_s:211", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i64_load16_s", []arg{{wa.I64, 20000}}, arg{wa.I64, 20000})
	})
	t.Run("i64_load16_u:212", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i64_load16_u", []arg{{wa.I64, 40000}}, arg{wa.I64, 40000})
	})
	t.Run("i64_load32_s:213", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i64_load32_s", []arg{{wa.I64, 20000}}, arg{wa.I64, 20000})
	})
	t.Run("i64_load32_u:214", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i64_load32_u", []arg{{wa.I64, 40000}}, arg{wa.I64, 40000})
	})
	t.Run("i64_load8_s:216", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i64_load8_s", []arg{{wa.I64, 18364758543954109763}}, arg{wa.I64, 67})
	})
	t.Run("i64_load8_s:217", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i64_load8_s", []arg{{wa.I64, 3771275841602506223}}, arg{wa.I64, 18446744073709551599})
	})
	t.Run("i64_load8_u:218", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i64_load8_u", []arg{{wa.I64, 18364758543954109763}}, arg{wa.I64, 67})
	})
	t.Run("i64_load8_u:219", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i64_load8_u", []arg{{wa.I64, 3771275841602506223}}, arg{wa.I64, 239})
	})
	t.Run("i64_load16_s:220", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i64_load16_s", []arg{{wa.I64, 18364758543954109763}}, arg{wa.I64, 25923})
	})
	t.Run("i64_load16_s:221", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i64_load16_s", []arg{{wa.I64, 3771275841602506223}}, arg{wa.I64, 18446744073709538799})
	})
	t.Run("i64_load16_u:222", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i64_load16_u", []arg{{wa.I64, 18364758543954109763}}, arg{wa.I64, 25923})
	})
	t.Run("i64_load16_u:223", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i64_load16_u", []arg{{wa.I64, 3771275841602506223}}, arg{wa.I64, 52719})
	})
	t.Run("i64_load32_s:224", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i64_load32_s", []arg{{wa.I64, 18364758543954109763}}, arg{wa.I64, 1446274371})
	})
	t.Run("i64_load32_s:225", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i64_load32_s", []arg{{wa.I64, 3771275841602506223}}, arg{wa.I64, 18446744071976963567})
	})
	t.Run("i64_load32_u:226", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i64_load32_u", []arg{{wa.I64, 18364758543954109763}}, arg{wa.I64, 1446274371})
	})
	t.Run("i64_load32_u:227", func(t *testing.T) {
		x9.assertReturnInvoke(t, "i64_load32_u", []arg{{wa.I64, 3771275841602506223}}, arg{wa.I64, 2562379247})
	})
	t.Run("assert_malformed:231", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:235", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:239", func(t *testing.T) { t.Skip("text format not supported") })
}

func Test_memory_copy(t *testing.T) { t.Skip("memory_copy not supported") }

func Test_memory_fill(t *testing.T) { t.Skip("memory_fill not supported") }

func Test_memory_grow(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "memory_grow.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("size:14", func(t *testing.T) { x0.assertReturnInvoke(t, "size", nil, arg{wa.I32, 0}) })
	t.Run("store_at_zero:15", func(t *testing.T) { x0.assertTrap(t, "store_at_zero", nil, arg{}, "out of bounds memory access") })
	t.Run("load_at_zero:16", func(t *testing.T) {
		x0.assertTrap(t, "load_at_zero", nil, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("store_at_page_size:17", func(t *testing.T) { x0.assertTrap(t, "store_at_page_size", nil, arg{}, "out of bounds memory access") })
	t.Run("load_at_page_size:18", func(t *testing.T) {
		x0.assertTrap(t, "load_at_page_size", nil, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("grow:19", func(t *testing.T) { x0.assertReturnInvoke(t, "grow", []arg{{wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("size:20", func(t *testing.T) { x0.assertReturnInvoke(t, "size", nil, arg{wa.I32, 1}) })
	t.Run("load_at_zero:21", func(t *testing.T) { x0.assertReturnInvoke(t, "load_at_zero", nil, arg{wa.I32, 0}) })
	t.Run("store_at_zero:22", func(t *testing.T) { x0.assertReturnInvoke(t, "store_at_zero", nil, arg{}) })
	t.Run("load_at_zero:23", func(t *testing.T) { x0.assertReturnInvoke(t, "load_at_zero", nil, arg{wa.I32, 2}) })
	t.Run("store_at_page_size:24", func(t *testing.T) { x0.assertTrap(t, "store_at_page_size", nil, arg{}, "out of bounds memory access") })
	t.Run("load_at_page_size:25", func(t *testing.T) {
		x0.assertTrap(t, "load_at_page_size", nil, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("grow:26", func(t *testing.T) { x0.assertReturnInvoke(t, "grow", []arg{{wa.I32, 4}}, arg{wa.I32, 1}) })
	t.Run("size:27", func(t *testing.T) { x0.assertReturnInvoke(t, "size", nil, arg{wa.I32, 5}) })
	t.Run("load_at_zero:28", func(t *testing.T) { x0.assertReturnInvoke(t, "load_at_zero", nil, arg{wa.I32, 2}) })
	t.Run("store_at_zero:29", func(t *testing.T) { x0.assertReturnInvoke(t, "store_at_zero", nil, arg{}) })
	t.Run("load_at_zero:30", func(t *testing.T) { x0.assertReturnInvoke(t, "load_at_zero", nil, arg{wa.I32, 2}) })
	t.Run("load_at_page_size:31", func(t *testing.T) { x0.assertReturnInvoke(t, "load_at_page_size", nil, arg{wa.I32, 0}) })
	t.Run("store_at_page_size:32", func(t *testing.T) { x0.assertReturnInvoke(t, "store_at_page_size", nil, arg{}) })
	t.Run("load_at_page_size:33", func(t *testing.T) { x0.assertReturnInvoke(t, "load_at_page_size", nil, arg{wa.I32, 3}) })
	x1 := instantiateSpecTest(t, "1", "memory_grow.1.wasm")
	t.Cleanup(func() { x1.close(t) })
	t.Run("grow:41", func(t *testing.T) { x1.assertReturnInvoke(t, "grow", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("grow:42", func(t *testing.T) { x1.assertReturnInvoke(t, "grow", []arg{{wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("grow:43", func(t *testing.T) { x1.assertReturnInvoke(t, "grow", []arg{{wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("grow:44", func(t *testing.T) { x1.assertReturnInvoke(t, "grow", []arg{{wa.I32, 2}}, arg{wa.I32, 1}) })
	t.Run("grow:45", func(t *testing.T) { x1.assertReturnInvoke(t, "grow", []arg{{wa.I32, 800}}, arg{wa.I32, 3}) })
	t.Run("grow:46", func(t *testing.T) { x1.assertReturnInvoke(t, "grow", []arg{{wa.I32, 65536}}, arg{wa.I32, 4294967295}) })
	t.Run("grow:47", func(t *testing.T) { x1.assertReturnInvoke(t, "grow", []arg{{wa.I32, 64736}}, arg{wa.I32, 4294967295}) })
	t.Run("grow:48", func(t *testing.T) { x1.assertReturnInvoke(t, "grow", []arg{{wa.I32, 1}}, arg{wa.I32, 803}) })
	x2 := instantiateSpecTest(t, "2", "memory_grow.2.wasm")
	t.Cleanup(func() { x2.close(t) })
	t.Run("grow:55", func(t *testing.T) { x2.assertReturnInvoke(t, "grow", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("grow:56", func(t *testing.T) { x2.assertReturnInvoke(t, "grow", []arg{{wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("grow:57", func(t *testing.T) { x2.assertReturnInvoke(t, "grow", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("grow:58", func(t *testing.T) { x2.assertReturnInvoke(t, "grow", []arg{{wa.I32, 2}}, arg{wa.I32, 2}) })
	t.Run("grow:59", func(t *testing.T) { x2.assertReturnInvoke(t, "grow", []arg{{wa.I32, 6}}, arg{wa.I32, 4}) })
	t.Run("grow:60", func(t *testing.T) { x2.assertReturnInvoke(t, "grow", []arg{{wa.I32, 0}}, arg{wa.I32, 10}) })
	t.Run("grow:61", func(t *testing.T) { x2.assertReturnInvoke(t, "grow", []arg{{wa.I32, 1}}, arg{wa.I32, 4294967295}) })
	t.Run("grow:62", func(t *testing.T) { x2.assertReturnInvoke(t, "grow", []arg{{wa.I32, 65536}}, arg{wa.I32, 4294967295}) })
	x3 := instantiateSpecTest(t, "3", "memory_grow.3.wasm")
	t.Cleanup(func() { x3.close(t) })
	t.Run("check-memory-zero:87", func(t *testing.T) {
		x3.assertReturnInvoke(t, "check-memory-zero", []arg{{wa.I32, 0}, {wa.I32, 65535}}, arg{wa.I32, 0})
	})
	t.Run("grow:88", func(t *testing.T) { x3.assertReturnInvoke(t, "grow", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("check-memory-zero:89", func(t *testing.T) {
		x3.assertReturnInvoke(t, "check-memory-zero", []arg{{wa.I32, 65536}, {wa.I32, 131071}}, arg{wa.I32, 0})
	})
	t.Run("grow:90", func(t *testing.T) { x3.assertReturnInvoke(t, "grow", []arg{{wa.I32, 1}}, arg{wa.I32, 2}) })
	t.Run("check-memory-zero:91", func(t *testing.T) {
		x3.assertReturnInvoke(t, "check-memory-zero", []arg{{wa.I32, 131072}, {wa.I32, 196607}}, arg{wa.I32, 0})
	})
	t.Run("grow:92", func(t *testing.T) { x3.assertReturnInvoke(t, "grow", []arg{{wa.I32, 1}}, arg{wa.I32, 3}) })
	t.Run("check-memory-zero:93", func(t *testing.T) {
		x3.assertReturnInvoke(t, "check-memory-zero", []arg{{wa.I32, 196608}, {wa.I32, 262143}}, arg{wa.I32, 0})
	})
	t.Run("grow:94", func(t *testing.T) { x3.assertReturnInvoke(t, "grow", []arg{{wa.I32, 1}}, arg{wa.I32, 4}) })
	t.Run("check-memory-zero:95", func(t *testing.T) {
		x3.assertReturnInvoke(t, "check-memory-zero", []arg{{wa.I32, 262144}, {wa.I32, 327679}}, arg{wa.I32, 0})
	})
	t.Run("grow:96", func(t *testing.T) { x3.assertReturnInvoke(t, "grow", []arg{{wa.I32, 1}}, arg{wa.I32, 5}) })
	t.Run("check-memory-zero:97", func(t *testing.T) {
		x3.assertReturnInvoke(t, "check-memory-zero", []arg{{wa.I32, 327680}, {wa.I32, 393215}}, arg{wa.I32, 0})
	})
	x4 := instantiateSpecTest(t, "4", "memory_grow.4.wasm")
	t.Cleanup(func() { x4.close(t) })
	t.Run("as-br-value:259", func(t *testing.T) { x4.assertReturnInvoke(t, "as-br-value", nil, arg{wa.I32, 1}) })
	t.Run("as-br_if-cond:261", func(t *testing.T) { x4.assertReturnInvoke(t, "as-br_if-cond", nil, arg{}) })
	t.Run("as-br_if-value:262", func(t *testing.T) { x4.assertReturnInvoke(t, "as-br_if-value", nil, arg{wa.I32, 1}) })
	t.Run("as-br_if-value-cond:263", func(t *testing.T) { x4.assertReturnInvoke(t, "as-br_if-value-cond", nil, arg{wa.I32, 6}) })
	t.Run("as-br_table-index:265", func(t *testing.T) { x4.assertReturnInvoke(t, "as-br_table-index", nil, arg{}) })
	t.Run("as-br_table-value:266", func(t *testing.T) { x4.assertReturnInvoke(t, "as-br_table-value", nil, arg{wa.I32, 1}) })
	t.Run("as-br_table-value-index:267", func(t *testing.T) { x4.assertReturnInvoke(t, "as-br_table-value-index", nil, arg{wa.I32, 6}) })
	t.Run("as-return-value:269", func(t *testing.T) { x4.assertReturnInvoke(t, "as-return-value", nil, arg{wa.I32, 1}) })
	t.Run("as-if-cond:271", func(t *testing.T) { x4.assertReturnInvoke(t, "as-if-cond", nil, arg{wa.I32, 0}) })
	t.Run("as-if-then:272", func(t *testing.T) { x4.assertReturnInvoke(t, "as-if-then", nil, arg{wa.I32, 1}) })
	t.Run("as-if-else:273", func(t *testing.T) { x4.assertReturnInvoke(t, "as-if-else", nil, arg{wa.I32, 1}) })
	t.Run("as-select-first:275", func(t *testing.T) {
		x4.assertReturnInvoke(t, "as-select-first", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{wa.I32, 1})
	})
	t.Run("as-select-second:276", func(t *testing.T) {
		x4.assertReturnInvoke(t, "as-select-second", []arg{{wa.I32, 0}, {wa.I32, 0}}, arg{wa.I32, 1})
	})
	t.Run("as-select-cond:277", func(t *testing.T) { x4.assertReturnInvoke(t, "as-select-cond", nil, arg{wa.I32, 0}) })
	t.Run("as-call-first:279", func(t *testing.T) { x4.assertReturnInvoke(t, "as-call-first", nil, arg{wa.I32, 4294967295}) })
	t.Run("as-call-mid:280", func(t *testing.T) { x4.assertReturnInvoke(t, "as-call-mid", nil, arg{wa.I32, 4294967295}) })
	t.Run("as-call-last:281", func(t *testing.T) { x4.assertReturnInvoke(t, "as-call-last", nil, arg{wa.I32, 4294967295}) })
	t.Run("as-call_indirect-first:283", func(t *testing.T) { x4.assertReturnInvoke(t, "as-call_indirect-first", nil, arg{wa.I32, 4294967295}) })
	t.Run("as-call_indirect-mid:284", func(t *testing.T) { x4.assertReturnInvoke(t, "as-call_indirect-mid", nil, arg{wa.I32, 4294967295}) })
	t.Run("as-call_indirect-last:285", func(t *testing.T) { x4.assertReturnInvoke(t, "as-call_indirect-last", nil, arg{wa.I32, 4294967295}) })
	t.Run("as-call_indirect-index:286", func(t *testing.T) {
		x4.assertTrap(t, "as-call_indirect-index", nil, arg{Type: wa.I32}, "undefined element")
	})
	t.Run("as-local.set-value:288", func(t *testing.T) { x4.assertReturnInvoke(t, "as-local.set-value", nil, arg{}) })
	t.Run("as-local.tee-value:289", func(t *testing.T) { x4.assertReturnInvoke(t, "as-local.tee-value", nil, arg{wa.I32, 1}) })
	t.Run("as-global.set-value:290", func(t *testing.T) { x4.assertReturnInvoke(t, "as-global.set-value", nil, arg{}) })
	t.Run("as-load-address:292", func(t *testing.T) { x4.assertReturnInvoke(t, "as-load-address", nil, arg{wa.I32, 0}) })
	t.Run("as-loadN-address:293", func(t *testing.T) { x4.assertReturnInvoke(t, "as-loadN-address", nil, arg{wa.I32, 0}) })
	t.Run("as-store-address:294", func(t *testing.T) { x4.assertReturnInvoke(t, "as-store-address", nil, arg{}) })
	t.Run("as-store-value:295", func(t *testing.T) { x4.assertReturnInvoke(t, "as-store-value", nil, arg{}) })
	t.Run("as-storeN-address:296", func(t *testing.T) { x4.assertReturnInvoke(t, "as-storeN-address", nil, arg{}) })
	t.Run("as-storeN-value:297", func(t *testing.T) { x4.assertReturnInvoke(t, "as-storeN-value", nil, arg{}) })
	t.Run("as-unary-operand:299", func(t *testing.T) { x4.assertReturnInvoke(t, "as-unary-operand", nil, arg{wa.I32, 31}) })
	t.Run("as-binary-left:301", func(t *testing.T) { x4.assertReturnInvoke(t, "as-binary-left", nil, arg{wa.I32, 11}) })
	t.Run("as-binary-right:302", func(t *testing.T) { x4.assertReturnInvoke(t, "as-binary-right", nil, arg{wa.I32, 9}) })
	t.Run("as-test-operand:304", func(t *testing.T) { x4.assertReturnInvoke(t, "as-test-operand", nil, arg{wa.I32, 0}) })
	t.Run("as-compare-left:306", func(t *testing.T) { x4.assertReturnInvoke(t, "as-compare-left", nil, arg{wa.I32, 1}) })
	t.Run("as-compare-right:307", func(t *testing.T) { x4.assertReturnInvoke(t, "as-compare-right", nil, arg{wa.I32, 1}) })
	t.Run("as-memory.grow-size:309", func(t *testing.T) { x4.assertReturnInvoke(t, "as-memory.grow-size", nil, arg{wa.I32, 1}) })
	t.Run("assert_invalid:313", func(t *testing.T) { assertInvalidSpec(t, "memory_grow.5.wasm", "type mismatch") })
	t.Run("assert_invalid:322", func(t *testing.T) { assertInvalidSpec(t, "memory_grow.6.wasm", "type mismatch") })
	t.Run("assert_invalid:332", func(t *testing.T) { assertInvalidSpec(t, "memory_grow.7.wasm", "type mismatch") })
	t.Run("assert_invalid:342", func(t *testing.T) { assertInvalidSpec(t, "memory_grow.8.wasm", "type mismatch") })
	t.Run("assert_invalid:353", func(t *testing.T) { assertInvalidSpec(t, "memory_grow.9.wasm", "type mismatch") })
	t.Run("assert_invalid:363", func(t *testing.T) { assertInvalidSpec(t, "memory_grow.10.wasm", "type mismatch") })
	t.Run("assert_invalid:372", func(t *testing.T) { assertInvalidSpec(t, "memory_grow.11.wasm", "type mismatch") })
}

func Test_memory_init(t *testing.T) { t.Skip("memory_init not supported") }

func Test_memory_redundancy(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "memory_redundancy.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("test_store_to_load:59", func(t *testing.T) { x0.assertReturnInvoke(t, "test_store_to_load", nil, arg{wa.I32, 128}) })
	t.Run("zero_everything:60", func(t *testing.T) { x0.invoke(t, "zero_everything", nil) })
	t.Run("test_redundant_load:61", func(t *testing.T) { x0.assertReturnInvoke(t, "test_redundant_load", nil, arg{wa.I32, 128}) })
	t.Run("zero_everything:62", func(t *testing.T) { x0.invoke(t, "zero_everything", nil) })
	t.Run("test_dead_store:63", func(t *testing.T) { x0.assertReturnInvoke(t, "test_dead_store", nil, arg{wa.F32, 35}) })
	t.Run("zero_everything:64", func(t *testing.T) { x0.invoke(t, "zero_everything", nil) })
	t.Run("malloc_aliasing:65", func(t *testing.T) { x0.assertReturnInvoke(t, "malloc_aliasing", nil, arg{wa.I32, 43}) })
}

func Test_memory_size(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "memory_size.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("size:7", func(t *testing.T) { x0.assertReturnInvoke(t, "size", nil, arg{wa.I32, 0}) })
	t.Run("grow:8", func(t *testing.T) { x0.assertReturnInvoke(t, "grow", []arg{{wa.I32, 1}}, arg{}) })
	t.Run("size:9", func(t *testing.T) { x0.assertReturnInvoke(t, "size", nil, arg{wa.I32, 1}) })
	t.Run("grow:10", func(t *testing.T) { x0.assertReturnInvoke(t, "grow", []arg{{wa.I32, 4}}, arg{}) })
	t.Run("size:11", func(t *testing.T) { x0.assertReturnInvoke(t, "size", nil, arg{wa.I32, 5}) })
	t.Run("grow:12", func(t *testing.T) { x0.assertReturnInvoke(t, "grow", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("size:13", func(t *testing.T) { x0.assertReturnInvoke(t, "size", nil, arg{wa.I32, 5}) })
	x1 := instantiateSpecTest(t, "1", "memory_size.1.wasm")
	t.Cleanup(func() { x1.close(t) })
	t.Run("size:21", func(t *testing.T) { x1.assertReturnInvoke(t, "size", nil, arg{wa.I32, 1}) })
	t.Run("grow:22", func(t *testing.T) { x1.assertReturnInvoke(t, "grow", []arg{{wa.I32, 1}}, arg{}) })
	t.Run("size:23", func(t *testing.T) { x1.assertReturnInvoke(t, "size", nil, arg{wa.I32, 2}) })
	t.Run("grow:24", func(t *testing.T) { x1.assertReturnInvoke(t, "grow", []arg{{wa.I32, 4}}, arg{}) })
	t.Run("size:25", func(t *testing.T) { x1.assertReturnInvoke(t, "size", nil, arg{wa.I32, 6}) })
	t.Run("grow:26", func(t *testing.T) { x1.assertReturnInvoke(t, "grow", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("size:27", func(t *testing.T) { x1.assertReturnInvoke(t, "size", nil, arg{wa.I32, 6}) })
	x2 := instantiateSpecTest(t, "2", "memory_size.2.wasm")
	t.Cleanup(func() { x2.close(t) })
	t.Run("size:35", func(t *testing.T) { x2.assertReturnInvoke(t, "size", nil, arg{wa.I32, 0}) })
	t.Run("grow:36", func(t *testing.T) { x2.assertReturnInvoke(t, "grow", []arg{{wa.I32, 3}}, arg{}) })
	t.Run("size:37", func(t *testing.T) { x2.assertReturnInvoke(t, "size", nil, arg{wa.I32, 0}) })
	t.Run("grow:38", func(t *testing.T) { x2.assertReturnInvoke(t, "grow", []arg{{wa.I32, 1}}, arg{}) })
	t.Run("size:39", func(t *testing.T) { x2.assertReturnInvoke(t, "size", nil, arg{wa.I32, 1}) })
	t.Run("grow:40", func(t *testing.T) { x2.assertReturnInvoke(t, "grow", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("size:41", func(t *testing.T) { x2.assertReturnInvoke(t, "size", nil, arg{wa.I32, 1}) })
	t.Run("grow:42", func(t *testing.T) { x2.assertReturnInvoke(t, "grow", []arg{{wa.I32, 4}}, arg{}) })
	t.Run("size:43", func(t *testing.T) { x2.assertReturnInvoke(t, "size", nil, arg{wa.I32, 1}) })
	t.Run("grow:44", func(t *testing.T) { x2.assertReturnInvoke(t, "grow", []arg{{wa.I32, 1}}, arg{}) })
	t.Run("size:45", func(t *testing.T) { x2.assertReturnInvoke(t, "size", nil, arg{wa.I32, 2}) })
	x3 := instantiateSpecTest(t, "3", "memory_size.3.wasm")
	t.Cleanup(func() { x3.close(t) })
	t.Run("size:53", func(t *testing.T) { x3.assertReturnInvoke(t, "size", nil, arg{wa.I32, 3}) })
	t.Run("grow:54", func(t *testing.T) { x3.assertReturnInvoke(t, "grow", []arg{{wa.I32, 1}}, arg{}) })
	t.Run("size:55", func(t *testing.T) { x3.assertReturnInvoke(t, "size", nil, arg{wa.I32, 4}) })
	t.Run("grow:56", func(t *testing.T) { x3.assertReturnInvoke(t, "grow", []arg{{wa.I32, 3}}, arg{}) })
	t.Run("size:57", func(t *testing.T) { x3.assertReturnInvoke(t, "size", nil, arg{wa.I32, 7}) })
	t.Run("grow:58", func(t *testing.T) { x3.assertReturnInvoke(t, "grow", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("size:59", func(t *testing.T) { x3.assertReturnInvoke(t, "size", nil, arg{wa.I32, 7}) })
	t.Run("grow:60", func(t *testing.T) { x3.assertReturnInvoke(t, "grow", []arg{{wa.I32, 2}}, arg{}) })
	t.Run("size:61", func(t *testing.T) { x3.assertReturnInvoke(t, "size", nil, arg{wa.I32, 7}) })
	t.Run("grow:62", func(t *testing.T) { x3.assertReturnInvoke(t, "grow", []arg{{wa.I32, 1}}, arg{}) })
	t.Run("size:63", func(t *testing.T) { x3.assertReturnInvoke(t, "size", nil, arg{wa.I32, 8}) })
	t.Run("assert_invalid:69", func(t *testing.T) { assertInvalidSpec(t, "memory_size.4.wasm", "type mismatch") })
	t.Run("assert_invalid:78", func(t *testing.T) { assertInvalidSpec(t, "memory_size.5.wasm", "type mismatch") })
}

func Test_memory_trap(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "memory_trap.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("store:21", func(t *testing.T) {
		x0.assertReturnInvoke(t, "store", []arg{{wa.I32, 4294967292}, {wa.I32, 42}}, arg{})
	})
	t.Run("load:22", func(t *testing.T) { x0.assertReturnInvoke(t, "load", []arg{{wa.I32, 4294967292}}, arg{wa.I32, 42}) })
	t.Run("store:23", func(t *testing.T) {
		x0.assertTrap(t, "store", []arg{{wa.I32, 4294967293}, {wa.I32, 13}}, arg{}, "out of bounds memory access")
	})
	t.Run("load:24", func(t *testing.T) {
		x0.assertTrap(t, "load", []arg{{wa.I32, 4294967293}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("store:25", func(t *testing.T) {
		x0.assertTrap(t, "store", []arg{{wa.I32, 4294967294}, {wa.I32, 13}}, arg{}, "out of bounds memory access")
	})
	t.Run("load:26", func(t *testing.T) {
		x0.assertTrap(t, "load", []arg{{wa.I32, 4294967294}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("store:27", func(t *testing.T) {
		x0.assertTrap(t, "store", []arg{{wa.I32, 4294967295}, {wa.I32, 13}}, arg{}, "out of bounds memory access")
	})
	t.Run("load:28", func(t *testing.T) {
		x0.assertTrap(t, "load", []arg{{wa.I32, 4294967295}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("store:29", func(t *testing.T) {
		x0.assertTrap(t, "store", []arg{{wa.I32, 0}, {wa.I32, 13}}, arg{}, "out of bounds memory access")
	})
	t.Run("load:30", func(t *testing.T) {
		x0.assertTrap(t, "load", []arg{{wa.I32, 0}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("store:31", func(t *testing.T) {
		x0.assertTrap(t, "store", []arg{{wa.I32, 2147483648}, {wa.I32, 13}}, arg{}, "out of bounds memory access")
	})
	t.Run("load:32", func(t *testing.T) {
		x0.assertTrap(t, "load", []arg{{wa.I32, 2147483648}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("memory.grow:33", func(t *testing.T) {
		x0.assertReturnInvoke(t, "memory.grow", []arg{{wa.I32, 65537}}, arg{wa.I32, 4294967295})
	})
	x1 := instantiateSpecTest(t, "1", "memory_trap.1.wasm")
	t.Cleanup(func() { x1.close(t) })
	t.Run("i32.store:111", func(t *testing.T) {
		x1.assertTrap(t, "i32.store", []arg{{wa.I32, 65536}, {wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i32.store:112", func(t *testing.T) {
		x1.assertTrap(t, "i32.store", []arg{{wa.I32, 65535}, {wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i32.store:113", func(t *testing.T) {
		x1.assertTrap(t, "i32.store", []arg{{wa.I32, 65534}, {wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i32.store:114", func(t *testing.T) {
		x1.assertTrap(t, "i32.store", []arg{{wa.I32, 65533}, {wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i32.store:115", func(t *testing.T) {
		x1.assertTrap(t, "i32.store", []arg{{wa.I32, 4294967295}, {wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i32.store:116", func(t *testing.T) {
		x1.assertTrap(t, "i32.store", []arg{{wa.I32, 4294967294}, {wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i32.store:117", func(t *testing.T) {
		x1.assertTrap(t, "i32.store", []arg{{wa.I32, 4294967293}, {wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i32.store:118", func(t *testing.T) {
		x1.assertTrap(t, "i32.store", []arg{{wa.I32, 4294967292}, {wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store:119", func(t *testing.T) {
		x1.assertTrap(t, "i64.store", []arg{{wa.I32, 65536}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store:120", func(t *testing.T) {
		x1.assertTrap(t, "i64.store", []arg{{wa.I32, 65535}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store:121", func(t *testing.T) {
		x1.assertTrap(t, "i64.store", []arg{{wa.I32, 65534}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store:122", func(t *testing.T) {
		x1.assertTrap(t, "i64.store", []arg{{wa.I32, 65533}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store:123", func(t *testing.T) {
		x1.assertTrap(t, "i64.store", []arg{{wa.I32, 65532}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store:124", func(t *testing.T) {
		x1.assertTrap(t, "i64.store", []arg{{wa.I32, 65531}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store:125", func(t *testing.T) {
		x1.assertTrap(t, "i64.store", []arg{{wa.I32, 65530}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store:126", func(t *testing.T) {
		x1.assertTrap(t, "i64.store", []arg{{wa.I32, 65529}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store:127", func(t *testing.T) {
		x1.assertTrap(t, "i64.store", []arg{{wa.I32, 4294967295}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store:128", func(t *testing.T) {
		x1.assertTrap(t, "i64.store", []arg{{wa.I32, 4294967294}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store:129", func(t *testing.T) {
		x1.assertTrap(t, "i64.store", []arg{{wa.I32, 4294967293}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store:130", func(t *testing.T) {
		x1.assertTrap(t, "i64.store", []arg{{wa.I32, 4294967292}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store:131", func(t *testing.T) {
		x1.assertTrap(t, "i64.store", []arg{{wa.I32, 4294967291}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store:132", func(t *testing.T) {
		x1.assertTrap(t, "i64.store", []arg{{wa.I32, 4294967290}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store:133", func(t *testing.T) {
		x1.assertTrap(t, "i64.store", []arg{{wa.I32, 4294967289}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store:134", func(t *testing.T) {
		x1.assertTrap(t, "i64.store", []arg{{wa.I32, 4294967288}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("f32.store:135", func(t *testing.T) {
		x1.assertTrap(t, "f32.store", []arg{{wa.I32, 65536}, {wa.F32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("f32.store:136", func(t *testing.T) {
		x1.assertTrap(t, "f32.store", []arg{{wa.I32, 65535}, {wa.F32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("f32.store:137", func(t *testing.T) {
		x1.assertTrap(t, "f32.store", []arg{{wa.I32, 65534}, {wa.F32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("f32.store:138", func(t *testing.T) {
		x1.assertTrap(t, "f32.store", []arg{{wa.I32, 65533}, {wa.F32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("f32.store:139", func(t *testing.T) {
		x1.assertTrap(t, "f32.store", []arg{{wa.I32, 4294967295}, {wa.F32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("f32.store:140", func(t *testing.T) {
		x1.assertTrap(t, "f32.store", []arg{{wa.I32, 4294967294}, {wa.F32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("f32.store:141", func(t *testing.T) {
		x1.assertTrap(t, "f32.store", []arg{{wa.I32, 4294967293}, {wa.F32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("f32.store:142", func(t *testing.T) {
		x1.assertTrap(t, "f32.store", []arg{{wa.I32, 4294967292}, {wa.F32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("f64.store:143", func(t *testing.T) {
		x1.assertTrap(t, "f64.store", []arg{{wa.I32, 65536}, {wa.F64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("f64.store:144", func(t *testing.T) {
		x1.assertTrap(t, "f64.store", []arg{{wa.I32, 65535}, {wa.F64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("f64.store:145", func(t *testing.T) {
		x1.assertTrap(t, "f64.store", []arg{{wa.I32, 65534}, {wa.F64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("f64.store:146", func(t *testing.T) {
		x1.assertTrap(t, "f64.store", []arg{{wa.I32, 65533}, {wa.F64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("f64.store:147", func(t *testing.T) {
		x1.assertTrap(t, "f64.store", []arg{{wa.I32, 65532}, {wa.F64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("f64.store:148", func(t *testing.T) {
		x1.assertTrap(t, "f64.store", []arg{{wa.I32, 65531}, {wa.F64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("f64.store:149", func(t *testing.T) {
		x1.assertTrap(t, "f64.store", []arg{{wa.I32, 65530}, {wa.F64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("f64.store:150", func(t *testing.T) {
		x1.assertTrap(t, "f64.store", []arg{{wa.I32, 65529}, {wa.F64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("f64.store:151", func(t *testing.T) {
		x1.assertTrap(t, "f64.store", []arg{{wa.I32, 4294967295}, {wa.F64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("f64.store:152", func(t *testing.T) {
		x1.assertTrap(t, "f64.store", []arg{{wa.I32, 4294967294}, {wa.F64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("f64.store:153", func(t *testing.T) {
		x1.assertTrap(t, "f64.store", []arg{{wa.I32, 4294967293}, {wa.F64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("f64.store:154", func(t *testing.T) {
		x1.assertTrap(t, "f64.store", []arg{{wa.I32, 4294967292}, {wa.F64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("f64.store:155", func(t *testing.T) {
		x1.assertTrap(t, "f64.store", []arg{{wa.I32, 4294967291}, {wa.F64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("f64.store:156", func(t *testing.T) {
		x1.assertTrap(t, "f64.store", []arg{{wa.I32, 4294967290}, {wa.F64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("f64.store:157", func(t *testing.T) {
		x1.assertTrap(t, "f64.store", []arg{{wa.I32, 4294967289}, {wa.F64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("f64.store:158", func(t *testing.T) {
		x1.assertTrap(t, "f64.store", []arg{{wa.I32, 4294967288}, {wa.F64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i32.store8:159", func(t *testing.T) {
		x1.assertTrap(t, "i32.store8", []arg{{wa.I32, 65536}, {wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i32.store8:160", func(t *testing.T) {
		x1.assertTrap(t, "i32.store8", []arg{{wa.I32, 4294967295}, {wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i32.store16:161", func(t *testing.T) {
		x1.assertTrap(t, "i32.store16", []arg{{wa.I32, 65536}, {wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i32.store16:162", func(t *testing.T) {
		x1.assertTrap(t, "i32.store16", []arg{{wa.I32, 65535}, {wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i32.store16:163", func(t *testing.T) {
		x1.assertTrap(t, "i32.store16", []arg{{wa.I32, 4294967295}, {wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i32.store16:164", func(t *testing.T) {
		x1.assertTrap(t, "i32.store16", []arg{{wa.I32, 4294967294}, {wa.I32, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store8:165", func(t *testing.T) {
		x1.assertTrap(t, "i64.store8", []arg{{wa.I32, 65536}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store8:166", func(t *testing.T) {
		x1.assertTrap(t, "i64.store8", []arg{{wa.I32, 4294967295}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store16:167", func(t *testing.T) {
		x1.assertTrap(t, "i64.store16", []arg{{wa.I32, 65536}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store16:168", func(t *testing.T) {
		x1.assertTrap(t, "i64.store16", []arg{{wa.I32, 65535}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store16:169", func(t *testing.T) {
		x1.assertTrap(t, "i64.store16", []arg{{wa.I32, 4294967295}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store16:170", func(t *testing.T) {
		x1.assertTrap(t, "i64.store16", []arg{{wa.I32, 4294967294}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store32:171", func(t *testing.T) {
		x1.assertTrap(t, "i64.store32", []arg{{wa.I32, 65536}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store32:172", func(t *testing.T) {
		x1.assertTrap(t, "i64.store32", []arg{{wa.I32, 65535}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store32:173", func(t *testing.T) {
		x1.assertTrap(t, "i64.store32", []arg{{wa.I32, 65534}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store32:174", func(t *testing.T) {
		x1.assertTrap(t, "i64.store32", []arg{{wa.I32, 65533}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store32:175", func(t *testing.T) {
		x1.assertTrap(t, "i64.store32", []arg{{wa.I32, 4294967295}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store32:176", func(t *testing.T) {
		x1.assertTrap(t, "i64.store32", []arg{{wa.I32, 4294967294}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store32:177", func(t *testing.T) {
		x1.assertTrap(t, "i64.store32", []arg{{wa.I32, 4294967293}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i64.store32:178", func(t *testing.T) {
		x1.assertTrap(t, "i64.store32", []arg{{wa.I32, 4294967292}, {wa.I64, 0}}, arg{}, "out of bounds memory access")
	})
	t.Run("i32.load:179", func(t *testing.T) {
		x1.assertTrap(t, "i32.load", []arg{{wa.I32, 65536}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("i32.load:180", func(t *testing.T) {
		x1.assertTrap(t, "i32.load", []arg{{wa.I32, 65535}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("i32.load:181", func(t *testing.T) {
		x1.assertTrap(t, "i32.load", []arg{{wa.I32, 65534}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("i32.load:182", func(t *testing.T) {
		x1.assertTrap(t, "i32.load", []arg{{wa.I32, 65533}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("i32.load:183", func(t *testing.T) {
		x1.assertTrap(t, "i32.load", []arg{{wa.I32, 4294967295}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("i32.load:184", func(t *testing.T) {
		x1.assertTrap(t, "i32.load", []arg{{wa.I32, 4294967294}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("i32.load:185", func(t *testing.T) {
		x1.assertTrap(t, "i32.load", []arg{{wa.I32, 4294967293}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("i32.load:186", func(t *testing.T) {
		x1.assertTrap(t, "i32.load", []arg{{wa.I32, 4294967292}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("i64.load:187", func(t *testing.T) {
		x1.assertTrap(t, "i64.load", []arg{{wa.I32, 65536}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load:188", func(t *testing.T) {
		x1.assertTrap(t, "i64.load", []arg{{wa.I32, 65535}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load:189", func(t *testing.T) {
		x1.assertTrap(t, "i64.load", []arg{{wa.I32, 65534}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load:190", func(t *testing.T) {
		x1.assertTrap(t, "i64.load", []arg{{wa.I32, 65533}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load:191", func(t *testing.T) {
		x1.assertTrap(t, "i64.load", []arg{{wa.I32, 65532}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load:192", func(t *testing.T) {
		x1.assertTrap(t, "i64.load", []arg{{wa.I32, 65531}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load:193", func(t *testing.T) {
		x1.assertTrap(t, "i64.load", []arg{{wa.I32, 65530}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load:194", func(t *testing.T) {
		x1.assertTrap(t, "i64.load", []arg{{wa.I32, 65529}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load:195", func(t *testing.T) {
		x1.assertTrap(t, "i64.load", []arg{{wa.I32, 4294967295}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load:196", func(t *testing.T) {
		x1.assertTrap(t, "i64.load", []arg{{wa.I32, 4294967294}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load:197", func(t *testing.T) {
		x1.assertTrap(t, "i64.load", []arg{{wa.I32, 4294967293}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load:198", func(t *testing.T) {
		x1.assertTrap(t, "i64.load", []arg{{wa.I32, 4294967292}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load:199", func(t *testing.T) {
		x1.assertTrap(t, "i64.load", []arg{{wa.I32, 4294967291}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load:200", func(t *testing.T) {
		x1.assertTrap(t, "i64.load", []arg{{wa.I32, 4294967290}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load:201", func(t *testing.T) {
		x1.assertTrap(t, "i64.load", []arg{{wa.I32, 4294967289}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load:202", func(t *testing.T) {
		x1.assertTrap(t, "i64.load", []arg{{wa.I32, 4294967288}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("f32.load:203", func(t *testing.T) {
		x1.assertTrap(t, "f32.load", []arg{{wa.I32, 65536}}, arg{Type: wa.F32}, "out of bounds memory access")
	})
	t.Run("f32.load:204", func(t *testing.T) {
		x1.assertTrap(t, "f32.load", []arg{{wa.I32, 65535}}, arg{Type: wa.F32}, "out of bounds memory access")
	})
	t.Run("f32.load:205", func(t *testing.T) {
		x1.assertTrap(t, "f32.load", []arg{{wa.I32, 65534}}, arg{Type: wa.F32}, "out of bounds memory access")
	})
	t.Run("f32.load:206", func(t *testing.T) {
		x1.assertTrap(t, "f32.load", []arg{{wa.I32, 65533}}, arg{Type: wa.F32}, "out of bounds memory access")
	})
	t.Run("f32.load:207", func(t *testing.T) {
		x1.assertTrap(t, "f32.load", []arg{{wa.I32, 4294967295}}, arg{Type: wa.F32}, "out of bounds memory access")
	})
	t.Run("f32.load:208", func(t *testing.T) {
		x1.assertTrap(t, "f32.load", []arg{{wa.I32, 4294967294}}, arg{Type: wa.F32}, "out of bounds memory access")
	})
	t.Run("f32.load:209", func(t *testing.T) {
		x1.assertTrap(t, "f32.load", []arg{{wa.I32, 4294967293}}, arg{Type: wa.F32}, "out of bounds memory access")
	})
	t.Run("f32.load:210", func(t *testing.T) {
		x1.assertTrap(t, "f32.load", []arg{{wa.I32, 4294967292}}, arg{Type: wa.F32}, "out of bounds memory access")
	})
	t.Run("f64.load:211", func(t *testing.T) {
		x1.assertTrap(t, "f64.load", []arg{{wa.I32, 65536}}, arg{Type: wa.F64}, "out of bounds memory access")
	})
	t.Run("f64.load:212", func(t *testing.T) {
		x1.assertTrap(t, "f64.load", []arg{{wa.I32, 65535}}, arg{Type: wa.F64}, "out of bounds memory access")
	})
	t.Run("f64.load:213", func(t *testing.T) {
		x1.assertTrap(t, "f64.load", []arg{{wa.I32, 65534}}, arg{Type: wa.F64}, "out of bounds memory access")
	})
	t.Run("f64.load:214", func(t *testing.T) {
		x1.assertTrap(t, "f64.load", []arg{{wa.I32, 65533}}, arg{Type: wa.F64}, "out of bounds memory access")
	})
	t.Run("f64.load:215", func(t *testing.T) {
		x1.assertTrap(t, "f64.load", []arg{{wa.I32, 65532}}, arg{Type: wa.F64}, "out of bounds memory access")
	})
	t.Run("f64.load:216", func(t *testing.T) {
		x1.assertTrap(t, "f64.load", []arg{{wa.I32, 65531}}, arg{Type: wa.F64}, "out of bounds memory access")
	})
	t.Run("f64.load:217", func(t *testing.T) {
		x1.assertTrap(t, "f64.load", []arg{{wa.I32, 65530}}, arg{Type: wa.F64}, "out of bounds memory access")
	})
	t.Run("f64.load:218", func(t *testing.T) {
		x1.assertTrap(t, "f64.load", []arg{{wa.I32, 65529}}, arg{Type: wa.F64}, "out of bounds memory access")
	})
	t.Run("f64.load:219", func(t *testing.T) {
		x1.assertTrap(t, "f64.load", []arg{{wa.I32, 4294967295}}, arg{Type: wa.F64}, "out of bounds memory access")
	})
	t.Run("f64.load:220", func(t *testing.T) {
		x1.assertTrap(t, "f64.load", []arg{{wa.I32, 4294967294}}, arg{Type: wa.F64}, "out of bounds memory access")
	})
	t.Run("f64.load:221", func(t *testing.T) {
		x1.assertTrap(t, "f64.load", []arg{{wa.I32, 4294967293}}, arg{Type: wa.F64}, "out of bounds memory access")
	})
	t.Run("f64.load:222", func(t *testing.T) {
		x1.assertTrap(t, "f64.load", []arg{{wa.I32, 4294967292}}, arg{Type: wa.F64}, "out of bounds memory access")
	})
	t.Run("f64.load:223", func(t *testing.T) {
		x1.assertTrap(t, "f64.load", []arg{{wa.I32, 4294967291}}, arg{Type: wa.F64}, "out of bounds memory access")
	})
	t.Run("f64.load:224", func(t *testing.T) {
		x1.assertTrap(t, "f64.load", []arg{{wa.I32, 4294967290}}, arg{Type: wa.F64}, "out of bounds memory access")
	})
	t.Run("f64.load:225", func(t *testing.T) {
		x1.assertTrap(t, "f64.load", []arg{{wa.I32, 4294967289}}, arg{Type: wa.F64}, "out of bounds memory access")
	})
	t.Run("f64.load:226", func(t *testing.T) {
		x1.assertTrap(t, "f64.load", []arg{{wa.I32, 4294967288}}, arg{Type: wa.F64}, "out of bounds memory access")
	})
	t.Run("i32.load8_s:227", func(t *testing.T) {
		x1.assertTrap(t, "i32.load8_s", []arg{{wa.I32, 65536}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("i32.load8_s:228", func(t *testing.T) {
		x1.assertTrap(t, "i32.load8_s", []arg{{wa.I32, 4294967295}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("i32.load8_u:229", func(t *testing.T) {
		x1.assertTrap(t, "i32.load8_u", []arg{{wa.I32, 65536}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("i32.load8_u:230", func(t *testing.T) {
		x1.assertTrap(t, "i32.load8_u", []arg{{wa.I32, 4294967295}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("i32.load16_s:231", func(t *testing.T) {
		x1.assertTrap(t, "i32.load16_s", []arg{{wa.I32, 65536}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("i32.load16_s:232", func(t *testing.T) {
		x1.assertTrap(t, "i32.load16_s", []arg{{wa.I32, 65535}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("i32.load16_s:233", func(t *testing.T) {
		x1.assertTrap(t, "i32.load16_s", []arg{{wa.I32, 4294967295}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("i32.load16_s:234", func(t *testing.T) {
		x1.assertTrap(t, "i32.load16_s", []arg{{wa.I32, 4294967294}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("i32.load16_u:235", func(t *testing.T) {
		x1.assertTrap(t, "i32.load16_u", []arg{{wa.I32, 65536}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("i32.load16_u:236", func(t *testing.T) {
		x1.assertTrap(t, "i32.load16_u", []arg{{wa.I32, 65535}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("i32.load16_u:237", func(t *testing.T) {
		x1.assertTrap(t, "i32.load16_u", []arg{{wa.I32, 4294967295}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("i32.load16_u:238", func(t *testing.T) {
		x1.assertTrap(t, "i32.load16_u", []arg{{wa.I32, 4294967294}}, arg{Type: wa.I32}, "out of bounds memory access")
	})
	t.Run("i64.load8_s:239", func(t *testing.T) {
		x1.assertTrap(t, "i64.load8_s", []arg{{wa.I32, 65536}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load8_s:240", func(t *testing.T) {
		x1.assertTrap(t, "i64.load8_s", []arg{{wa.I32, 4294967295}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load8_u:241", func(t *testing.T) {
		x1.assertTrap(t, "i64.load8_u", []arg{{wa.I32, 65536}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load8_u:242", func(t *testing.T) {
		x1.assertTrap(t, "i64.load8_u", []arg{{wa.I32, 4294967295}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load16_s:243", func(t *testing.T) {
		x1.assertTrap(t, "i64.load16_s", []arg{{wa.I32, 65536}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load16_s:244", func(t *testing.T) {
		x1.assertTrap(t, "i64.load16_s", []arg{{wa.I32, 65535}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load16_s:245", func(t *testing.T) {
		x1.assertTrap(t, "i64.load16_s", []arg{{wa.I32, 4294967295}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load16_s:246", func(t *testing.T) {
		x1.assertTrap(t, "i64.load16_s", []arg{{wa.I32, 4294967294}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load16_u:247", func(t *testing.T) {
		x1.assertTrap(t, "i64.load16_u", []arg{{wa.I32, 65536}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load16_u:248", func(t *testing.T) {
		x1.assertTrap(t, "i64.load16_u", []arg{{wa.I32, 65535}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load16_u:249", func(t *testing.T) {
		x1.assertTrap(t, "i64.load16_u", []arg{{wa.I32, 4294967295}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load16_u:250", func(t *testing.T) {
		x1.assertTrap(t, "i64.load16_u", []arg{{wa.I32, 4294967294}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load32_s:251", func(t *testing.T) {
		x1.assertTrap(t, "i64.load32_s", []arg{{wa.I32, 65536}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load32_s:252", func(t *testing.T) {
		x1.assertTrap(t, "i64.load32_s", []arg{{wa.I32, 65535}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load32_s:253", func(t *testing.T) {
		x1.assertTrap(t, "i64.load32_s", []arg{{wa.I32, 65534}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load32_s:254", func(t *testing.T) {
		x1.assertTrap(t, "i64.load32_s", []arg{{wa.I32, 65533}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load32_s:255", func(t *testing.T) {
		x1.assertTrap(t, "i64.load32_s", []arg{{wa.I32, 4294967295}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load32_s:256", func(t *testing.T) {
		x1.assertTrap(t, "i64.load32_s", []arg{{wa.I32, 4294967294}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load32_s:257", func(t *testing.T) {
		x1.assertTrap(t, "i64.load32_s", []arg{{wa.I32, 4294967293}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load32_s:258", func(t *testing.T) {
		x1.assertTrap(t, "i64.load32_s", []arg{{wa.I32, 4294967292}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load32_u:259", func(t *testing.T) {
		x1.assertTrap(t, "i64.load32_u", []arg{{wa.I32, 65536}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load32_u:260", func(t *testing.T) {
		x1.assertTrap(t, "i64.load32_u", []arg{{wa.I32, 65535}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load32_u:261", func(t *testing.T) {
		x1.assertTrap(t, "i64.load32_u", []arg{{wa.I32, 65534}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load32_u:262", func(t *testing.T) {
		x1.assertTrap(t, "i64.load32_u", []arg{{wa.I32, 65533}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load32_u:263", func(t *testing.T) {
		x1.assertTrap(t, "i64.load32_u", []arg{{wa.I32, 4294967295}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load32_u:264", func(t *testing.T) {
		x1.assertTrap(t, "i64.load32_u", []arg{{wa.I32, 4294967294}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load32_u:265", func(t *testing.T) {
		x1.assertTrap(t, "i64.load32_u", []arg{{wa.I32, 4294967293}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load32_u:266", func(t *testing.T) {
		x1.assertTrap(t, "i64.load32_u", []arg{{wa.I32, 4294967292}}, arg{Type: wa.I64}, "out of bounds memory access")
	})
	t.Run("i64.load:269", func(t *testing.T) {
		x1.assertReturnInvoke(t, "i64.load", []arg{{wa.I32, 65528}}, arg{wa.I64, 7523094288207667809})
	})
	t.Run("i64.load:270", func(t *testing.T) {
		x1.assertReturnInvoke(t, "i64.load", []arg{{wa.I32, 0}}, arg{wa.I64, 7523094288207667809})
	})
}

func Test_names(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "names.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("foo:8", func(t *testing.T) { x0.assertReturnInvoke(t, "foo", nil, arg{wa.I32, 0}) })
	x1 := instantiateSpecTest(t, "1", "names.1.wasm")
	t.Cleanup(func() { x1.close(t) })
	t.Run("foo:16", func(t *testing.T) { x1.assertReturnInvoke(t, "foo", nil, arg{wa.I32, 1}) })
	x2 := instantiateSpecTest(t, "2", "names.2.wasm")
	t.Cleanup(func() { x2.close(t) })
	t.Run(":615", func(t *testing.T) { x2.assertReturnInvoke(t, "", nil, arg{wa.I32, 0}) })
	t.Run("0:616", func(t *testing.T) { x2.assertReturnInvoke(t, "0", nil, arg{wa.I32, 1}) })
	t.Run("-0:617", func(t *testing.T) { x2.assertReturnInvoke(t, "-0", nil, arg{wa.I32, 2}) })
	t.Run("_:618", func(t *testing.T) { x2.assertReturnInvoke(t, "_", nil, arg{wa.I32, 3}) })
	t.Run("assert_return:619", func(t *testing.T) { x2.assertReturnInvoke(t, "$", nil, arg{wa.I32, 4}) })
	t.Run("assert_return:620", func(t *testing.T) { x2.assertReturnInvoke(t, "@", nil, arg{wa.I32, 5}) })
	t.Run("assert_return:621", func(t *testing.T) {
		x2.assertReturnInvoke(t, "~!@#$%^&*()_+`-={}|[]\\:\";'<>?,./ ", nil, arg{wa.I32, 6})
	})
	t.Run("NaN:622", func(t *testing.T) { x2.assertReturnInvoke(t, "NaN", nil, arg{wa.I32, 7}) })
	t.Run("Infinity:623", func(t *testing.T) { x2.assertReturnInvoke(t, "Infinity", nil, arg{wa.I32, 8}) })
	t.Run("if:624", func(t *testing.T) { x2.assertReturnInvoke(t, "if", nil, arg{wa.I32, 9}) })
	t.Run("malloc:625", func(t *testing.T) { x2.assertReturnInvoke(t, "malloc", nil, arg{wa.I32, 10}) })
	t.Run("_malloc:626", func(t *testing.T) { x2.assertReturnInvoke(t, "_malloc", nil, arg{wa.I32, 11}) })
	t.Run("__malloc:627", func(t *testing.T) { x2.assertReturnInvoke(t, "__malloc", nil, arg{wa.I32, 12}) })
	t.Run("a:628", func(t *testing.T) { x2.assertReturnInvoke(t, "a", nil, arg{wa.I32, 13}) })
	t.Run("A:629", func(t *testing.T) { x2.assertReturnInvoke(t, "A", nil, arg{wa.I32, 14}) })
	t.Run("assert_return:630", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 187, 191}), nil, arg{wa.I32, 15}) })
	t.Run("assert_return:631", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{195, 133}), nil, arg{wa.I32, 16}) })
	t.Run("assert_return:632", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{65, 204, 138}), nil, arg{wa.I32, 17}) })
	t.Run("assert_return:633", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 132, 171}), nil, arg{wa.I32, 18}) })
	t.Run("assert_return:634", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 172, 131}), nil, arg{wa.I32, 19}) })
	t.Run("assert_return:635", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{102, 239, 172, 129}), nil, arg{wa.I32, 20}) })
	t.Run("ffi:636", func(t *testing.T) { x2.assertReturnInvoke(t, "ffi", nil, arg{wa.I32, 21}) })
	t.Run("assert_return:637", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}), nil, arg{wa.I32, 22})
	})
	t.Run("assert_return:638", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31}), nil, arg{wa.I32, 23})
	})
	t.Run("assert_return:639", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{32, 127}), nil, arg{wa.I32, 24}) })
	t.Run("assert_return:640", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{194, 128, 194, 129, 194, 130, 194, 131, 194, 132, 194, 133, 194, 134, 194, 135, 194, 136, 194, 137, 194, 138, 194, 139, 194, 140, 194, 141, 194, 142, 194, 143}), nil, arg{wa.I32, 25})
	})
	t.Run("assert_return:641", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{194, 144, 194, 145, 194, 146, 194, 147, 194, 148, 194, 149, 194, 150, 194, 151, 194, 152, 194, 153, 194, 154, 194, 155, 194, 156, 194, 157, 194, 158, 194, 159}), nil, arg{wa.I32, 26})
	})
	t.Run("assert_return:642", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{239, 191, 176, 239, 191, 177, 239, 191, 178, 239, 191, 179, 239, 191, 180, 239, 191, 181, 239, 191, 182, 239, 191, 183}), nil, arg{wa.I32, 27})
	})
	t.Run("assert_return:643", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{239, 191, 184, 239, 191, 185, 239, 191, 186, 239, 191, 187, 239, 191, 188, 239, 191, 189, 239, 191, 190, 239, 191, 191}), nil, arg{wa.I32, 28})
	})
	t.Run("assert_return:644", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{226, 144, 128, 226, 144, 129, 226, 144, 130, 226, 144, 131, 226, 144, 132, 226, 144, 133, 226, 144, 134, 226, 144, 135, 226, 144, 136, 226, 144, 137, 226, 144, 138, 226, 144, 139, 226, 144, 140, 226, 144, 141, 226, 144, 142, 226, 144, 143}), nil, arg{wa.I32, 29})
	})
	t.Run("assert_return:645", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{226, 144, 144, 226, 144, 145, 226, 144, 146, 226, 144, 147, 226, 144, 148, 226, 144, 149, 226, 144, 150, 226, 144, 151, 226, 144, 152, 226, 144, 153, 226, 144, 154, 226, 144, 155, 226, 144, 156, 226, 144, 157, 226, 144, 158, 226, 144, 159}), nil, arg{wa.I32, 30})
	})
	t.Run("assert_return:646", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{226, 144, 160, 226, 144, 161}), nil, arg{wa.I32, 31})
	})
	t.Run("assert_return:647", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{239, 191, 176, 239, 191, 177, 239, 191, 178, 239, 191, 179, 239, 191, 180, 239, 191, 181, 239, 191, 182, 239, 191, 183, 239, 191, 184, 239, 191, 185, 239, 191, 186, 239, 191, 187, 239, 191, 188, 239, 191, 189}), nil, arg{wa.I32, 32})
	})
	t.Run("assert_return:648", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 128, 141}), nil, arg{wa.I32, 33}) })
	t.Run("assert_return:649", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 128, 140}), nil, arg{wa.I32, 34}) })
	t.Run("assert_return:650", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{205, 143}), nil, arg{wa.I32, 35}) })
	t.Run("assert_return:651", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 129, 160}), nil, arg{wa.I32, 36}) })
	t.Run("assert_return:652", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 181, 191}), nil, arg{wa.I32, 37}) })
	t.Run("assert_return:653", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{240, 145, 129, 191}), nil, arg{wa.I32, 38}) })
	t.Run("assert_return:654", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 160, 142}), nil, arg{wa.I32, 39}) })
	t.Run("assert_return:655", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{239, 191, 175, 226, 128, 139, 194, 160, 194, 173, 226, 129, 160, 225, 154, 128, 226, 128, 174, 226, 128, 173}), nil, arg{wa.I32, 40})
	})
	t.Run("assert_return:656", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{226, 128, 142, 226, 128, 143, 226, 128, 145, 226, 128, 168, 226, 128, 169, 226, 128, 170, 226, 128, 171, 226, 128, 172, 226, 128, 175, 226, 129, 166, 226, 129, 167, 226, 129, 168, 226, 129, 169}), nil, arg{wa.I32, 41})
	})
	t.Run("assert_return:657", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{226, 129, 170, 226, 129, 171, 226, 129, 172, 226, 129, 173, 226, 129, 174, 226, 129, 175}), nil, arg{wa.I32, 42})
	})
	t.Run("assert_return:658", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{226, 129, 161, 226, 129, 162, 226, 129, 163, 226, 129, 164}), nil, arg{wa.I32, 43})
	})
	t.Run("assert_return:659", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 144, 128, 128, 243, 159, 191, 191, 244, 143, 191, 191}), nil, arg{wa.I32, 44})
	})
	t.Run("assert_return:660", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{90, 204, 143, 205, 134, 204, 134, 205, 155, 205, 140, 204, 180, 205, 152, 205, 158, 205, 135, 204, 171, 204, 165, 204, 170, 205, 147, 205, 136, 205, 148, 205, 142, 204, 151, 204, 158, 204, 186, 204, 175, 204, 177, 204, 158, 204, 153, 204, 177, 204, 156, 204, 150, 204, 160, 97, 205, 151, 205, 168, 204, 142, 204, 132, 204, 134, 205, 151, 204, 191, 205, 161, 205, 159, 205, 128, 204, 182, 205, 129, 204, 165, 204, 176, 204, 179, 204, 173, 205, 153, 204, 178, 204, 177, 204, 185, 204, 157, 205, 142, 204, 188, 108, 205, 132, 205, 138, 204, 154, 205, 151, 205, 166, 205, 132, 205, 171, 204, 135, 205, 129, 204, 182, 204, 183, 205, 137, 204, 169, 204, 185, 204, 171, 204, 157, 205, 150, 205, 133, 204, 153, 204, 178, 204, 188, 205, 135, 205, 154, 205, 141, 204, 174, 205, 142, 204, 165, 205, 133, 204, 158, 103, 205, 131, 204, 144, 204, 133, 205, 174, 204, 148, 204, 144, 204, 142, 204, 130, 204, 143, 204, 190, 205, 138, 204, 141, 205, 139, 205, 138, 205, 167, 204, 129, 204, 134, 205, 166, 205, 158, 204, 182, 205, 149, 205, 148, 205, 154, 204, 169, 111, 205, 139, 204, 148, 205, 144, 205, 170, 205, 169, 204, 161, 205, 143, 204, 162, 204, 167, 205, 129, 204, 171, 204, 153, 204, 164, 204, 174, 205, 150, 205, 153, 205, 147, 204, 186, 204, 156, 204, 169, 204, 188, 204, 152, 204, 160}), nil, arg{wa.I32, 45})
	})
	t.Run("assert_return:661", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{225, 133, 159, 225, 133, 160, 227, 133, 164, 239, 190, 160}), nil, arg{wa.I32, 46})
	})
	t.Run("assert_return:662", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 184, 128}), nil, arg{wa.I32, 47}) })
	t.Run("assert_return:663", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 184, 132}), nil, arg{wa.I32, 48}) })
	t.Run("assert_return:664", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{243, 160, 132, 128}), nil, arg{wa.I32, 49}) })
	t.Run("assert_return:665", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{243, 160, 135, 175}), nil, arg{wa.I32, 50}) })
	t.Run("assert_return:666", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{204, 136}), nil, arg{wa.I32, 51}) })
	t.Run("assert_return:667", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{10}), nil, arg{wa.I32, 52}) })
	t.Run("assert_return:668", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 144, 164}), nil, arg{wa.I32, 53}) })
	t.Run("assert_return:669", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 128, 168}), nil, arg{wa.I32, 54}) })
	t.Run("assert_return:670", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{13}), nil, arg{wa.I32, 55}) })
	t.Run("assert_return:671", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{13, 10}), nil, arg{wa.I32, 56}) })
	t.Run("assert_return:672", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{10, 13}), nil, arg{wa.I32, 57}) })
	t.Run("assert_return:673", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{30}), nil, arg{wa.I32, 58}) })
	t.Run("assert_return:674", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{11}), nil, arg{wa.I32, 59}) })
	t.Run("assert_return:675", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{12}), nil, arg{wa.I32, 60}) })
	t.Run("assert_return:676", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{194, 133}), nil, arg{wa.I32, 61}) })
	t.Run("assert_return:677", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 128, 169}), nil, arg{wa.I32, 62}) })
	t.Run("assert_return:678", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 128, 166}), nil, arg{wa.I32, 63}) })
	t.Run("assert_return:679", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 143, 142}), nil, arg{wa.I32, 64}) })
	t.Run("assert_return:680", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{194, 139}), nil, arg{wa.I32, 65}) })
	t.Run("assert_return:681", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{194, 140}), nil, arg{wa.I32, 66}) })
	t.Run("assert_return:682", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{194, 141}), nil, arg{wa.I32, 67}) })
	t.Run("assert_return:683", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 134, 181}), nil, arg{wa.I32, 68}) })
	t.Run("assert_return:684", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 134, 169}), nil, arg{wa.I32, 69}) })
	t.Run("assert_return:685", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 140, 164}), nil, arg{wa.I32, 70}) })
	t.Run("assert_return:686", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 164, 182}), nil, arg{wa.I32, 71}) })
	t.Run("assert_return:687", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 134, 178}), nil, arg{wa.I32, 72}) })
	t.Run("assert_return:688", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 174, 168}), nil, arg{wa.I32, 73}) })
	t.Run("assert_return:689", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 174, 176}), nil, arg{wa.I32, 74}) })
	t.Run("assert_return:690", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 191, 189}), nil, arg{wa.I32, 75}) })
	t.Run("assert_return:691", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 144}), nil, arg{wa.I32, 76}) })
	t.Run("assert_return:692", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 145}), nil, arg{wa.I32, 77}) })
	t.Run("assert_return:693", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 146}), nil, arg{wa.I32, 78}) })
	t.Run("assert_return:694", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 147}), nil, arg{wa.I32, 79}) })
	t.Run("assert_return:695", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 148}), nil, arg{wa.I32, 80}) })
	t.Run("assert_return:696", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 149}), nil, arg{wa.I32, 81}) })
	t.Run("assert_return:697", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 150}), nil, arg{wa.I32, 82}) })
	t.Run("assert_return:698", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 151}), nil, arg{wa.I32, 83}) })
	t.Run("assert_return:699", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 152}), nil, arg{wa.I32, 84}) })
	t.Run("assert_return:700", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 153}), nil, arg{wa.I32, 85}) })
	t.Run("assert_return:701", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 154}), nil, arg{wa.I32, 86}) })
	t.Run("assert_return:702", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 155}), nil, arg{wa.I32, 87}) })
	t.Run("assert_return:703", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 156}), nil, arg{wa.I32, 88}) })
	t.Run("assert_return:704", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 157}), nil, arg{wa.I32, 89}) })
	t.Run("assert_return:705", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 158}), nil, arg{wa.I32, 90}) })
	t.Run("assert_return:706", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 159}), nil, arg{wa.I32, 91}) })
	t.Run("assert_return:707", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 160}), nil, arg{wa.I32, 92}) })
	t.Run("assert_return:708", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 161}), nil, arg{wa.I32, 93}) })
	t.Run("assert_return:709", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 162}), nil, arg{wa.I32, 94}) })
	t.Run("assert_return:710", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 163}), nil, arg{wa.I32, 95}) })
	t.Run("assert_return:711", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 164}), nil, arg{wa.I32, 96}) })
	t.Run("assert_return:712", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 165}), nil, arg{wa.I32, 97}) })
	t.Run("assert_return:713", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 166}), nil, arg{wa.I32, 98}) })
	t.Run("assert_return:714", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 167}), nil, arg{wa.I32, 99}) })
	t.Run("assert_return:715", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 168}), nil, arg{wa.I32, 100}) })
	t.Run("assert_return:716", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 169}), nil, arg{wa.I32, 101}) })
	t.Run("assert_return:717", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 170}), nil, arg{wa.I32, 102}) })
	t.Run("assert_return:718", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 171}), nil, arg{wa.I32, 103}) })
	t.Run("assert_return:719", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 172}), nil, arg{wa.I32, 104}) })
	t.Run("assert_return:720", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 173}), nil, arg{wa.I32, 105}) })
	t.Run("assert_return:721", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 174}), nil, arg{wa.I32, 106}) })
	t.Run("assert_return:722", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 183, 175}), nil, arg{wa.I32, 107}) })
	t.Run("assert_return:723", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 191, 190}), nil, arg{wa.I32, 108}) })
	t.Run("assert_return:724", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 191, 191}), nil, arg{wa.I32, 109}) })
	t.Run("assert_return:725", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 159, 191, 190}), nil, arg{wa.I32, 110})
	})
	t.Run("assert_return:726", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 159, 191, 191}), nil, arg{wa.I32, 111})
	})
	t.Run("assert_return:727", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 175, 191, 190}), nil, arg{wa.I32, 112})
	})
	t.Run("assert_return:728", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 175, 191, 191}), nil, arg{wa.I32, 113})
	})
	t.Run("assert_return:729", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 191, 191, 190}), nil, arg{wa.I32, 114})
	})
	t.Run("assert_return:730", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 191, 191, 191}), nil, arg{wa.I32, 115})
	})
	t.Run("assert_return:731", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{241, 143, 191, 190}), nil, arg{wa.I32, 116})
	})
	t.Run("assert_return:732", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{241, 143, 191, 191}), nil, arg{wa.I32, 117})
	})
	t.Run("assert_return:733", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{241, 159, 191, 190}), nil, arg{wa.I32, 118})
	})
	t.Run("assert_return:734", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{241, 159, 191, 191}), nil, arg{wa.I32, 119})
	})
	t.Run("assert_return:735", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{241, 175, 191, 190}), nil, arg{wa.I32, 120})
	})
	t.Run("assert_return:736", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{241, 175, 191, 191}), nil, arg{wa.I32, 121})
	})
	t.Run("assert_return:737", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{241, 191, 191, 190}), nil, arg{wa.I32, 122})
	})
	t.Run("assert_return:738", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{241, 191, 191, 191}), nil, arg{wa.I32, 123})
	})
	t.Run("assert_return:739", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{242, 143, 191, 190}), nil, arg{wa.I32, 124})
	})
	t.Run("assert_return:740", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{242, 143, 191, 191}), nil, arg{wa.I32, 125})
	})
	t.Run("assert_return:741", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{242, 159, 191, 190}), nil, arg{wa.I32, 126})
	})
	t.Run("assert_return:742", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{242, 159, 191, 191}), nil, arg{wa.I32, 127})
	})
	t.Run("assert_return:743", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{242, 175, 191, 190}), nil, arg{wa.I32, 128})
	})
	t.Run("assert_return:744", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{242, 175, 191, 191}), nil, arg{wa.I32, 129})
	})
	t.Run("assert_return:745", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{242, 191, 191, 190}), nil, arg{wa.I32, 130})
	})
	t.Run("assert_return:746", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{242, 191, 191, 191}), nil, arg{wa.I32, 131})
	})
	t.Run("assert_return:747", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{243, 143, 191, 190}), nil, arg{wa.I32, 132})
	})
	t.Run("assert_return:748", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{243, 143, 191, 191}), nil, arg{wa.I32, 133})
	})
	t.Run("assert_return:749", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{243, 159, 191, 190}), nil, arg{wa.I32, 134})
	})
	t.Run("assert_return:750", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{243, 159, 191, 191}), nil, arg{wa.I32, 135})
	})
	t.Run("assert_return:751", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{243, 175, 191, 190}), nil, arg{wa.I32, 136})
	})
	t.Run("assert_return:752", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{243, 175, 191, 191}), nil, arg{wa.I32, 137})
	})
	t.Run("assert_return:753", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{243, 191, 191, 190}), nil, arg{wa.I32, 138})
	})
	t.Run("assert_return:754", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{243, 191, 191, 191}), nil, arg{wa.I32, 139})
	})
	t.Run("assert_return:755", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{244, 143, 191, 190}), nil, arg{wa.I32, 140})
	})
	t.Run("assert_return:756", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{244, 143, 191, 191}), nil, arg{wa.I32, 141})
	})
	t.Run("assert_return:757", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{204, 136, 226, 128, 189, 204, 136, 204, 137}), nil, arg{wa.I32, 142})
	})
	t.Run("abc:758", func(t *testing.T) { x2.assertReturnInvoke(t, "abc", nil, arg{wa.I32, 143}) })
	t.Run("assert_return:759", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{226, 128, 173, 97, 98, 99}), nil, arg{wa.I32, 144})
	})
	t.Run("assert_return:760", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{226, 128, 174, 99, 98, 97}), nil, arg{wa.I32, 145})
	})
	t.Run("assert_return:761", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{226, 128, 173, 97, 98, 99, 226, 128, 174}), nil, arg{wa.I32, 146})
	})
	t.Run("assert_return:762", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{226, 128, 174, 99, 98, 97, 226, 128, 173}), nil, arg{wa.I32, 147})
	})
	t.Run("assert_return:763", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 157, 145, 168}), nil, arg{wa.I32, 148})
	})
	t.Run("assert_return:764", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 157, 144, 180}), nil, arg{wa.I32, 149})
	})
	t.Run("assert_return:765", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 157, 152, 136}), nil, arg{wa.I32, 150})
	})
	t.Run("assert_return:766", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 157, 152, 188}), nil, arg{wa.I32, 151})
	})
	t.Run("assert_return:767", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 157, 144, 128}), nil, arg{wa.I32, 152})
	})
	t.Run("assert_return:768", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 157, 147, 144}), nil, arg{wa.I32, 153})
	})
	t.Run("assert_return:769", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 157, 149, 172}), nil, arg{wa.I32, 154})
	})
	t.Run("assert_return:770", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 157, 151, 148}), nil, arg{wa.I32, 155})
	})
	t.Run("assert_return:771", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 157, 146, 156}), nil, arg{wa.I32, 156})
	})
	t.Run("assert_return:772", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 157, 148, 132}), nil, arg{wa.I32, 157})
	})
	t.Run("assert_return:773", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 157, 148, 184}), nil, arg{wa.I32, 158})
	})
	t.Run("assert_return:774", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 157, 150, 160}), nil, arg{wa.I32, 159})
	})
	t.Run("assert_return:775", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 157, 153, 176}), nil, arg{wa.I32, 160})
	})
	t.Run("assert_return:776", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 180, 128}), nil, arg{wa.I32, 161}) })
	t.Run("assert_return:777", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 180, 172}), nil, arg{wa.I32, 162}) })
	t.Run("assert_return:778", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 146, 182}), nil, arg{wa.I32, 163}) })
	t.Run("assert_return:779", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 188, 161}), nil, arg{wa.I32, 164}) })
	t.Run("assert_return:780", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 159, 132, 144}), nil, arg{wa.I32, 165})
	})
	t.Run("assert_return:781", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 159, 132, 176}), nil, arg{wa.I32, 166})
	})
	t.Run("assert_return:782", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{243, 160, 129, 129}), nil, arg{wa.I32, 167})
	})
	t.Run("assert_return:783", func(t *testing.T) { x2.assertReturnInvoke(t, "U+0041", nil, arg{wa.I32, 168}) })
	t.Run("assert_return:784", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{65, 226, 128, 139}), nil, arg{wa.I32, 169}) })
	t.Run("assert_return:785", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{208, 144}), nil, arg{wa.I32, 170}) })
	t.Run("assert_return:786", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{234, 153, 150}), nil, arg{wa.I32, 171}) })
	t.Run("assert_return:787", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 183, 188}), nil, arg{wa.I32, 172}) })
	t.Run("assert_return:788", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 183, 182}), nil, arg{wa.I32, 173}) })
	t.Run("assert_return:789", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 177, 175}), nil, arg{wa.I32, 174}) })
	t.Run("assert_return:790", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 159, 133, 144}), nil, arg{wa.I32, 175})
	})
	t.Run("assert_return:791", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 159, 133, 176}), nil, arg{wa.I32, 176})
	})
	t.Run("assert_return:792", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 176, 173}), nil, arg{wa.I32, 177}) })
	t.Run("assert_return:793", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 144, 144, 130}), nil, arg{wa.I32, 178})
	})
	t.Run("assert_return:794", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 144, 144, 136}), nil, arg{wa.I32, 179})
	})
	t.Run("assert_return:795", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 144, 146, 176}), nil, arg{wa.I32, 180})
	})
	t.Run("assert_return:796", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{195, 128}), nil, arg{wa.I32, 181}) })
	t.Run("assert_return:797", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{195, 129}), nil, arg{wa.I32, 182}) })
	t.Run("assert_return:798", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{195, 130}), nil, arg{wa.I32, 183}) })
	t.Run("assert_return:799", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{195, 131}), nil, arg{wa.I32, 184}) })
	t.Run("assert_return:800", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{195, 132}), nil, arg{wa.I32, 185}) })
	t.Run("assert_return:801", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{196, 128}), nil, arg{wa.I32, 186}) })
	t.Run("assert_return:802", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{196, 130}), nil, arg{wa.I32, 187}) })
	t.Run("assert_return:803", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{196, 132}), nil, arg{wa.I32, 188}) })
	t.Run("assert_return:804", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{199, 141}), nil, arg{wa.I32, 189}) })
	t.Run("assert_return:805", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{199, 158}), nil, arg{wa.I32, 190}) })
	t.Run("assert_return:806", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{199, 160}), nil, arg{wa.I32, 191}) })
	t.Run("assert_return:807", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{199, 186}), nil, arg{wa.I32, 192}) })
	t.Run("assert_return:808", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{200, 128}), nil, arg{wa.I32, 193}) })
	t.Run("assert_return:809", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{200, 130}), nil, arg{wa.I32, 194}) })
	t.Run("assert_return:810", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{200, 166}), nil, arg{wa.I32, 195}) })
	t.Run("assert_return:811", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{200, 186}), nil, arg{wa.I32, 196}) })
	t.Run("assert_return:812", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{211, 144}), nil, arg{wa.I32, 197}) })
	t.Run("assert_return:813", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{211, 146}), nil, arg{wa.I32, 198}) })
	t.Run("assert_return:814", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{223, 138}), nil, arg{wa.I32, 199}) })
	t.Run("assert_return:815", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{224, 160, 161}), nil, arg{wa.I32, 200}) })
	t.Run("assert_return:816", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{224, 160, 162}), nil, arg{wa.I32, 201}) })
	t.Run("assert_return:817", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{224, 160, 163}), nil, arg{wa.I32, 202}) })
	t.Run("assert_return:818", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{224, 160, 164}), nil, arg{wa.I32, 203}) })
	t.Run("assert_return:819", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{224, 160, 165}), nil, arg{wa.I32, 204}) })
	t.Run("assert_return:820", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{224, 164, 132}), nil, arg{wa.I32, 205}) })
	t.Run("assert_return:821", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{224, 164, 133}), nil, arg{wa.I32, 206}) })
	t.Run("assert_return:822", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{224, 165, 178}), nil, arg{wa.I32, 207}) })
	t.Run("assert_return:823", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{224, 166, 133}), nil, arg{wa.I32, 208}) })
	t.Run("assert_return:824", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{224, 168, 133}), nil, arg{wa.I32, 209}) })
	t.Run("assert_return:825", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{224, 170, 133}), nil, arg{wa.I32, 210}) })
	t.Run("assert_return:826", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{224, 172, 133}), nil, arg{wa.I32, 211}) })
	t.Run("assert_return:827", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{224, 174, 133}), nil, arg{wa.I32, 212}) })
	t.Run("assert_return:828", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{224, 176, 133}), nil, arg{wa.I32, 213}) })
	t.Run("assert_return:829", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{224, 178, 133}), nil, arg{wa.I32, 214}) })
	t.Run("assert_return:830", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{224, 180, 133}), nil, arg{wa.I32, 215}) })
	t.Run("assert_return:831", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{224, 184, 176}), nil, arg{wa.I32, 216}) })
	t.Run("assert_return:832", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{224, 186, 176}), nil, arg{wa.I32, 217}) })
	t.Run("assert_return:833", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{224, 188, 129}), nil, arg{wa.I32, 218}) })
	t.Run("assert_return:834", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{224, 189, 168}), nil, arg{wa.I32, 219}) })
	t.Run("assert_return:835", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{224, 190, 184}), nil, arg{wa.I32, 220}) })
	t.Run("assert_return:836", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 128, 161}), nil, arg{wa.I32, 221}) })
	t.Run("assert_return:837", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 128, 162}), nil, arg{wa.I32, 222}) })
	t.Run("assert_return:838", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 130, 156}), nil, arg{wa.I32, 223}) })
	t.Run("assert_return:839", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 133, 161}), nil, arg{wa.I32, 224}) })
	t.Run("assert_return:840", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 138, 160}), nil, arg{wa.I32, 225}) })
	t.Run("assert_return:841", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 139, 144}), nil, arg{wa.I32, 226}) })
	t.Run("assert_return:842", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 142, 160}), nil, arg{wa.I32, 227}) })
	t.Run("assert_return:843", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 144, 138}), nil, arg{wa.I32, 228}) })
	t.Run("assert_return:844", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 150, 179}), nil, arg{wa.I32, 229}) })
	t.Run("assert_return:845", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 154, 168}), nil, arg{wa.I32, 230}) })
	t.Run("assert_return:846", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 154, 170}), nil, arg{wa.I32, 231}) })
	t.Run("assert_return:847", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 155, 134}), nil, arg{wa.I32, 232}) })
	t.Run("assert_return:848", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 156, 128}), nil, arg{wa.I32, 233}) })
	t.Run("assert_return:849", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 156, 160}), nil, arg{wa.I32, 234}) })
	t.Run("assert_return:850", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 157, 128}), nil, arg{wa.I32, 235}) })
	t.Run("assert_return:851", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 157, 160}), nil, arg{wa.I32, 236}) })
	t.Run("assert_return:852", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 160, 160}), nil, arg{wa.I32, 237}) })
	t.Run("assert_return:853", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 162, 135}), nil, arg{wa.I32, 238}) })
	t.Run("assert_return:854", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 164, 160}), nil, arg{wa.I32, 239}) })
	t.Run("assert_return:855", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 165, 163}), nil, arg{wa.I32, 240}) })
	t.Run("assert_return:856", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 168, 149}), nil, arg{wa.I32, 241}) })
	t.Run("assert_return:857", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 169, 139}), nil, arg{wa.I32, 242}) })
	t.Run("assert_return:858", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 169, 161}), nil, arg{wa.I32, 243}) })
	t.Run("assert_return:859", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 174, 131}), nil, arg{wa.I32, 244}) })
	t.Run("assert_return:860", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 175, 128}), nil, arg{wa.I32, 245}) })
	t.Run("assert_return:861", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 175, 129}), nil, arg{wa.I32, 246}) })
	t.Run("assert_return:862", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 176, 163}), nil, arg{wa.I32, 247}) })
	t.Run("assert_return:863", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 184, 128}), nil, arg{wa.I32, 248}) })
	t.Run("assert_return:864", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 186, 160}), nil, arg{wa.I32, 249}) })
	t.Run("assert_return:865", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 186, 162}), nil, arg{wa.I32, 250}) })
	t.Run("assert_return:866", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 186, 164}), nil, arg{wa.I32, 251}) })
	t.Run("assert_return:867", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 186, 166}), nil, arg{wa.I32, 252}) })
	t.Run("assert_return:868", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 186, 168}), nil, arg{wa.I32, 253}) })
	t.Run("assert_return:869", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 186, 170}), nil, arg{wa.I32, 254}) })
	t.Run("assert_return:870", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 186, 172}), nil, arg{wa.I32, 255}) })
	t.Run("assert_return:871", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 186, 174}), nil, arg{wa.I32, 256}) })
	t.Run("assert_return:872", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 186, 176}), nil, arg{wa.I32, 257}) })
	t.Run("assert_return:873", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 186, 178}), nil, arg{wa.I32, 258}) })
	t.Run("assert_return:874", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 186, 180}), nil, arg{wa.I32, 259}) })
	t.Run("assert_return:875", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 186, 182}), nil, arg{wa.I32, 260}) })
	t.Run("assert_return:876", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 129, 130}), nil, arg{wa.I32, 261}) })
	t.Run("assert_return:877", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 130, 162}), nil, arg{wa.I32, 262}) })
	t.Run("assert_return:878", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 132, 154}), nil, arg{wa.I32, 263}) })
	t.Run("assert_return:879", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 133, 143}), nil, arg{wa.I32, 264}) })
	t.Run("assert_return:880", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 136, 142}), nil, arg{wa.I32, 265}) })
	t.Run("assert_return:881", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 136, 143}), nil, arg{wa.I32, 266}) })
	t.Run("assert_return:882", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 136, 144}), nil, arg{wa.I32, 267}) })
	t.Run("assert_return:883", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 136, 145}), nil, arg{wa.I32, 268}) })
	t.Run("assert_return:884", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 136, 146}), nil, arg{wa.I32, 269}) })
	t.Run("assert_return:885", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 136, 147}), nil, arg{wa.I32, 270}) })
	t.Run("assert_return:886", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 136, 148}), nil, arg{wa.I32, 271}) })
	t.Run("assert_return:887", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 136, 149}), nil, arg{wa.I32, 272}) })
	t.Run("assert_return:888", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 136, 150}), nil, arg{wa.I32, 273}) })
	t.Run("assert_return:889", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 136, 151}), nil, arg{wa.I32, 274}) })
	t.Run("assert_return:890", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 136, 152}), nil, arg{wa.I32, 275}) })
	t.Run("assert_return:891", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 136, 153}), nil, arg{wa.I32, 276}) })
	t.Run("assert_return:892", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 136, 154}), nil, arg{wa.I32, 277}) })
	t.Run("assert_return:893", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 136, 155}), nil, arg{wa.I32, 278}) })
	t.Run("assert_return:894", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 137, 174}), nil, arg{wa.I32, 279}) })
	t.Run("assert_return:895", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 137, 175}), nil, arg{wa.I32, 280}) })
	t.Run("assert_return:896", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 137, 176}), nil, arg{wa.I32, 281}) })
	t.Run("assert_return:897", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 137, 177}), nil, arg{wa.I32, 282}) })
	t.Run("assert_return:898", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 137, 178}), nil, arg{wa.I32, 283}) })
	t.Run("assert_return:899", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 137, 179}), nil, arg{wa.I32, 284}) })
	t.Run("assert_return:900", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 137, 180}), nil, arg{wa.I32, 285}) })
	t.Run("assert_return:901", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 137, 181}), nil, arg{wa.I32, 286}) })
	t.Run("assert_return:902", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 137, 182}), nil, arg{wa.I32, 287}) })
	t.Run("assert_return:903", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 137, 183}), nil, arg{wa.I32, 288}) })
	t.Run("assert_return:904", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 137, 184}), nil, arg{wa.I32, 289}) })
	t.Run("assert_return:905", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 137, 185}), nil, arg{wa.I32, 290}) })
	t.Run("assert_return:906", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 137, 186}), nil, arg{wa.I32, 291}) })
	t.Run("assert_return:907", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 137, 187}), nil, arg{wa.I32, 292}) })
	t.Run("assert_return:908", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 139, 144}), nil, arg{wa.I32, 293}) })
	t.Run("assert_return:909", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{234, 128, 138}), nil, arg{wa.I32, 294}) })
	t.Run("assert_return:910", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{234, 147, 174}), nil, arg{wa.I32, 295}) })
	t.Run("assert_return:911", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{234, 149, 137}), nil, arg{wa.I32, 296}) })
	t.Run("assert_return:912", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{234, 154, 160}), nil, arg{wa.I32, 297}) })
	t.Run("assert_return:913", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{234, 160, 128}), nil, arg{wa.I32, 298}) })
	t.Run("assert_return:914", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{234, 160, 163}), nil, arg{wa.I32, 299}) })
	t.Run("assert_return:915", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{234, 161, 157}), nil, arg{wa.I32, 300}) })
	t.Run("assert_return:916", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{234, 162, 130}), nil, arg{wa.I32, 301}) })
	t.Run("assert_return:917", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{234, 163, 170}), nil, arg{wa.I32, 302}) })
	t.Run("assert_return:918", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{234, 164, 162}), nil, arg{wa.I32, 303}) })
	t.Run("assert_return:919", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{234, 165, 134}), nil, arg{wa.I32, 304}) })
	t.Run("assert_return:920", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{234, 166, 132}), nil, arg{wa.I32, 305}) })
	t.Run("assert_return:921", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{234, 168, 128}), nil, arg{wa.I32, 306}) })
	t.Run("assert_return:922", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 189, 177}), nil, arg{wa.I32, 307}) })
	t.Run("assert_return:923", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 191, 130}), nil, arg{wa.I32, 308}) })
	t.Run("assert_return:924", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 144, 128, 128}), nil, arg{wa.I32, 309})
	})
	t.Run("assert_return:925", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 144, 138, 128}), nil, arg{wa.I32, 310})
	})
	t.Run("assert_return:926", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 144, 138, 160}), nil, arg{wa.I32, 311})
	})
	t.Run("assert_return:927", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 144, 140, 128}), nil, arg{wa.I32, 312})
	})
	t.Run("assert_return:928", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 144, 142, 160}), nil, arg{wa.I32, 313})
	})
	t.Run("assert_return:929", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 144, 146, 150}), nil, arg{wa.I32, 314})
	})
	t.Run("assert_return:930", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 144, 148, 128}), nil, arg{wa.I32, 315})
	})
	t.Run("assert_return:931", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 144, 157, 128}), nil, arg{wa.I32, 316})
	})
	t.Run("assert_return:932", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 144, 160, 128}), nil, arg{wa.I32, 317})
	})
	t.Run("assert_return:933", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 144, 164, 160}), nil, arg{wa.I32, 318})
	})
	t.Run("assert_return:934", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 144, 166, 128}), nil, arg{wa.I32, 319})
	})
	t.Run("assert_return:935", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 144, 166, 160}), nil, arg{wa.I32, 320})
	})
	t.Run("assert_return:936", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 144, 168, 128}), nil, arg{wa.I32, 321})
	})
	t.Run("assert_return:937", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 144, 172, 128}), nil, arg{wa.I32, 322})
	})
	t.Run("assert_return:938", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 144, 176, 128}), nil, arg{wa.I32, 323})
	})
	t.Run("assert_return:939", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 144, 176, 129}), nil, arg{wa.I32, 324})
	})
	t.Run("assert_return:940", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 144, 178, 128}), nil, arg{wa.I32, 325})
	})
	t.Run("assert_return:941", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 145, 128, 133}), nil, arg{wa.I32, 326})
	})
	t.Run("assert_return:942", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 145, 130, 131}), nil, arg{wa.I32, 327})
	})
	t.Run("assert_return:943", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 145, 132, 167}), nil, arg{wa.I32, 328})
	})
	t.Run("assert_return:944", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 145, 133, 144}), nil, arg{wa.I32, 329})
	})
	t.Run("assert_return:945", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 145, 134, 131}), nil, arg{wa.I32, 330})
	})
	t.Run("assert_return:946", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 145, 136, 128}), nil, arg{wa.I32, 331})
	})
	t.Run("assert_return:947", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 145, 138, 128}), nil, arg{wa.I32, 332})
	})
	t.Run("assert_return:948", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 145, 138, 176}), nil, arg{wa.I32, 333})
	})
	t.Run("assert_return:949", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 145, 140, 133}), nil, arg{wa.I32, 334})
	})
	t.Run("assert_return:950", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 145, 141, 176}), nil, arg{wa.I32, 335})
	})
	t.Run("assert_return:951", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 145, 144, 128}), nil, arg{wa.I32, 336})
	})
	t.Run("assert_return:952", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 145, 146, 129}), nil, arg{wa.I32, 337})
	})
	t.Run("assert_return:953", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 145, 150, 128}), nil, arg{wa.I32, 338})
	})
	t.Run("assert_return:954", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 145, 152, 128}), nil, arg{wa.I32, 339})
	})
	t.Run("assert_return:955", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 145, 154, 128}), nil, arg{wa.I32, 340})
	})
	t.Run("assert_return:956", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 145, 156, 146}), nil, arg{wa.I32, 341})
	})
	t.Run("assert_return:957", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 145, 156, 160}), nil, arg{wa.I32, 342})
	})
	t.Run("assert_return:958", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 145, 162, 161}), nil, arg{wa.I32, 343})
	})
	t.Run("assert_return:959", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 145, 171, 149}), nil, arg{wa.I32, 344})
	})
	t.Run("assert_return:960", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 145, 176, 128}), nil, arg{wa.I32, 345})
	})
	t.Run("assert_return:961", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 145, 178, 143}), nil, arg{wa.I32, 346})
	})
	t.Run("assert_return:962", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 145, 178, 175}), nil, arg{wa.I32, 347})
	})
	t.Run("assert_return:963", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 146, 128, 128}), nil, arg{wa.I32, 348})
	})
	t.Run("assert_return:964", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 150, 167, 149}), nil, arg{wa.I32, 349})
	})
	t.Run("assert_return:965", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 150, 169, 134}), nil, arg{wa.I32, 350})
	})
	t.Run("assert_return:966", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 150, 171, 167}), nil, arg{wa.I32, 351})
	})
	t.Run("assert_return:967", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 150, 189, 148}), nil, arg{wa.I32, 352})
	})
	t.Run("assert_return:968", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 155, 177, 129}), nil, arg{wa.I32, 353})
	})
	t.Run("assert_return:969", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 155, 177, 164}), nil, arg{wa.I32, 354})
	})
	t.Run("assert_return:970", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 158, 160, 163}), nil, arg{wa.I32, 355})
	})
	t.Run("assert_return:971", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 159, 135, 166}), nil, arg{wa.I32, 356})
	})
	t.Run("assert_return:972", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 177, 173}), nil, arg{wa.I32, 357}) })
	t.Run("assert_return:973", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{206, 155}), nil, arg{wa.I32, 358}) })
	t.Run("assert_return:974", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 177, 176}), nil, arg{wa.I32, 359}) })
	t.Run("assert_return:975", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{194, 170}), nil, arg{wa.I32, 360}) })
	t.Run("assert_return:976", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 136, 128}), nil, arg{wa.I32, 361}) })
	t.Run("assert_return:977", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 130, 179}), nil, arg{wa.I32, 362}) })
	t.Run("assert_return:978", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 144, 164, 128}), nil, arg{wa.I32, 363})
	})
	t.Run("assert_return:979", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 178, 128}), nil, arg{wa.I32, 364}) })
	t.Run("assert_return:980", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 144, 140, 176}), nil, arg{wa.I32, 365})
	})
	t.Run("assert_return:981", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{206, 134}), nil, arg{wa.I32, 366}) })
	t.Run("assert_return:982", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{206, 145}), nil, arg{wa.I32, 367}) })
	t.Run("assert_return:983", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 188, 136}), nil, arg{wa.I32, 368}) })
	t.Run("assert_return:984", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 188, 137}), nil, arg{wa.I32, 369}) })
	t.Run("assert_return:985", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 188, 138}), nil, arg{wa.I32, 370}) })
	t.Run("assert_return:986", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 188, 139}), nil, arg{wa.I32, 371}) })
	t.Run("assert_return:987", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 188, 140}), nil, arg{wa.I32, 372}) })
	t.Run("assert_return:988", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 188, 141}), nil, arg{wa.I32, 373}) })
	t.Run("assert_return:989", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 188, 142}), nil, arg{wa.I32, 374}) })
	t.Run("assert_return:990", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 188, 143}), nil, arg{wa.I32, 375}) })
	t.Run("assert_return:991", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 190, 136}), nil, arg{wa.I32, 376}) })
	t.Run("assert_return:992", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 190, 137}), nil, arg{wa.I32, 377}) })
	t.Run("assert_return:993", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 190, 138}), nil, arg{wa.I32, 378}) })
	t.Run("assert_return:994", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 190, 139}), nil, arg{wa.I32, 379}) })
	t.Run("assert_return:995", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 190, 140}), nil, arg{wa.I32, 380}) })
	t.Run("assert_return:996", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 190, 141}), nil, arg{wa.I32, 381}) })
	t.Run("assert_return:997", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 190, 142}), nil, arg{wa.I32, 382}) })
	t.Run("assert_return:998", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 190, 143}), nil, arg{wa.I32, 383}) })
	t.Run("assert_return:999", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 190, 184}), nil, arg{wa.I32, 384}) })
	t.Run("assert_return:1000", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 190, 185}), nil, arg{wa.I32, 385}) })
	t.Run("assert_return:1001", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 190, 186}), nil, arg{wa.I32, 386}) })
	t.Run("assert_return:1002", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 190, 187}), nil, arg{wa.I32, 387}) })
	t.Run("assert_return:1003", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 190, 188}), nil, arg{wa.I32, 388}) })
	t.Run("assert_return:1004", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 157, 154, 168}), nil, arg{wa.I32, 389})
	})
	t.Run("assert_return:1005", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 157, 155, 162}), nil, arg{wa.I32, 390})
	})
	t.Run("assert_return:1006", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 157, 156, 156}), nil, arg{wa.I32, 391})
	})
	t.Run("assert_return:1007", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 157, 157, 150}), nil, arg{wa.I32, 392})
	})
	t.Run("assert_return:1008", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 157, 158, 144}), nil, arg{wa.I32, 393})
	})
	t.Run("assert_return:1009", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 141, 182}), nil, arg{wa.I32, 394}) })
	t.Run("assert_return:1010", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 141, 186}), nil, arg{wa.I32, 395}) })
	t.Run("assert_return:1011", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 169, 156}), nil, arg{wa.I32, 396}) })
	t.Run("assert_return:1012", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 151, 133}), nil, arg{wa.I32, 397}) })
	t.Run("assert_return:1013", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 142, 170}), nil, arg{wa.I32, 398}) })
	t.Run("assert_return:1014", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{41, 203, 186, 203, 188, 240, 148, 151, 143, 240, 157, 133, 180, 240, 157, 133, 182, 240, 157, 133, 184, 240, 157, 133, 186, 226, 129, 190, 226, 130, 142, 226, 157, 169, 226, 157, 171, 226, 159, 175, 239, 180, 191, 239, 184, 182, 239, 185, 154, 239, 188, 137, 239, 189, 160, 243, 160, 128, 169, 226, 157, 179, 226, 157, 181, 226, 159, 167, 226, 159, 169, 226, 159, 171, 226, 159, 173, 226, 166, 136, 226, 166, 138, 226, 166, 150, 226, 184, 163, 226, 184, 165, 239, 184, 152, 239, 184, 184, 239, 184, 186, 239, 184, 188, 239, 184, 190, 239, 185, 128, 239, 185, 130, 239, 185, 132, 239, 185, 136, 239, 185, 156, 239, 185, 158, 239, 188, 189, 239, 189, 157, 239, 189, 163, 243, 160, 129, 157, 243, 160, 129, 189, 194, 187, 226, 128, 153, 226, 128, 157, 226, 128, 186, 226, 157, 175}), nil, arg{wa.I32, 399})
	})
	t.Run("assert_return:1015", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{40, 203, 185, 203, 187, 240, 148, 151, 142, 240, 157, 133, 179, 240, 157, 133, 181, 240, 157, 133, 183, 240, 157, 133, 185, 226, 129, 189, 226, 130, 141, 226, 157, 168, 226, 157, 170, 226, 159, 174, 239, 180, 190, 239, 184, 181, 239, 185, 153, 239, 188, 136, 239, 189, 159, 243, 160, 128, 168, 226, 157, 178, 226, 157, 180, 226, 159, 166, 226, 159, 168, 226, 159, 170, 226, 159, 172, 226, 166, 135, 226, 166, 137, 226, 166, 149, 226, 184, 162, 226, 184, 164, 239, 184, 151, 239, 184, 183, 239, 184, 185, 239, 184, 187, 239, 184, 189, 239, 184, 191, 239, 185, 129, 239, 185, 131, 239, 185, 135, 239, 185, 155, 239, 185, 157, 239, 188, 187, 239, 189, 155, 239, 189, 162, 243, 160, 129, 155, 243, 160, 129, 187, 194, 171, 226, 128, 152, 226, 128, 156, 226, 128, 185, 226, 157, 174}), nil, arg{wa.I32, 400})
	})
	t.Run("assert_return:1016", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 157, 170, 139, 240, 157, 170, 164}), nil, arg{wa.I32, 401})
	})
	t.Run("assert_return:1017", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 157, 170, 139}), nil, arg{wa.I32, 402})
	})
	t.Run("assert_return:1018", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{194, 189}), nil, arg{wa.I32, 403}) })
	t.Run("assert_return:1019", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{49, 226, 129, 132, 50}), nil, arg{wa.I32, 404})
	})
	t.Run("assert_return:1020", func(t *testing.T) { x2.assertReturnInvoke(t, "1/2", nil, arg{wa.I32, 405}) })
	t.Run("assert_return:1021", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{224, 173, 179}), nil, arg{wa.I32, 406}) })
	t.Run("assert_return:1022", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{224, 181, 180}), nil, arg{wa.I32, 407}) })
	t.Run("assert_return:1023", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 179, 189}), nil, arg{wa.I32, 408}) })
	t.Run("assert_return:1024", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{234, 160, 177}), nil, arg{wa.I32, 409}) })
	t.Run("assert_return:1025", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 144, 133, 129}), nil, arg{wa.I32, 410})
	})
	t.Run("assert_return:1026", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 144, 133, 181}), nil, arg{wa.I32, 411})
	})
	t.Run("assert_return:1027", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 144, 133, 182}), nil, arg{wa.I32, 412})
	})
	t.Run("assert_return:1028", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 144, 166, 189}), nil, arg{wa.I32, 413})
	})
	t.Run("assert_return:1029", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 144, 185, 187}), nil, arg{wa.I32, 414})
	})
	t.Run("assert_return:1030", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 188, 130}), nil, arg{wa.I32, 415}) })
	t.Run("assert_return:1031", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{127}), nil, arg{wa.I32, 416}) })
	t.Run("assert_return:1032", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{8}), nil, arg{wa.I32, 417}) })
	t.Run("assert_return:1033", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 140, 171}), nil, arg{wa.I32, 418}) })
	t.Run("assert_return:1034", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 140, 166}), nil, arg{wa.I32, 419}) })
	t.Run("assert_return:1035", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 144, 136}), nil, arg{wa.I32, 420}) })
	t.Run("assert_return:1036", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 144, 161}), nil, arg{wa.I32, 421}) })
	t.Run("assert_return:1037", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 183, 187}), nil, arg{wa.I32, 422}) })
	t.Run("assert_return:1038", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{15}), nil, arg{wa.I32, 423}) })
	t.Run("assert_return:1039", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 134, 144}), nil, arg{wa.I32, 424}) })
	t.Run("assert_return:1040", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 140, 167}), nil, arg{wa.I32, 425}) })
	t.Run("assert_return:1041", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 141, 146}), nil, arg{wa.I32, 426}) })
	t.Run("assert_return:1042", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 141, 148}), nil, arg{wa.I32, 427}) })
	t.Run("assert_return:1043", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 141, 162}), nil, arg{wa.I32, 428}) })
	t.Run("assert_return:1044", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 141, 171}), nil, arg{wa.I32, 429}) })
	t.Run("assert_return:1045", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{26}), nil, arg{wa.I32, 430}) })
	t.Run("assert_return:1046", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 144, 166}), nil, arg{wa.I32, 431}) })
	t.Run("assert_return:1047", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 144, 154}), nil, arg{wa.I32, 432}) })
	t.Run("assert_return:1048", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 191, 188}), nil, arg{wa.I32, 433}) })
	t.Run("assert_return:1049", func(t *testing.T) { x2.assertReturnInvoke(t, "?", nil, arg{wa.I32, 434}) })
	t.Run("assert_return:1050", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{194, 191}), nil, arg{wa.I32, 435}) })
	t.Run("assert_return:1051", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 165, 133}), nil, arg{wa.I32, 436}) })
	t.Run("assert_return:1052", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{205, 190}), nil, arg{wa.I32, 437}) })
	t.Run("assert_return:1053", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{213, 158}), nil, arg{wa.I32, 438}) })
	t.Run("assert_return:1054", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{216, 159}), nil, arg{wa.I32, 439}) })
	t.Run("assert_return:1055", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 141, 167}), nil, arg{wa.I32, 440}) })
	t.Run("assert_return:1056", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 129, 135}), nil, arg{wa.I32, 441}) })
	t.Run("assert_return:1057", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 141, 176}), nil, arg{wa.I32, 442}) })
	t.Run("assert_return:1058", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 157, 147}), nil, arg{wa.I32, 443}) })
	t.Run("assert_return:1059", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 157, 148}), nil, arg{wa.I32, 444}) })
	t.Run("assert_return:1060", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 179, 186}), nil, arg{wa.I32, 445}) })
	t.Run("assert_return:1061", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 179, 187}), nil, arg{wa.I32, 446}) })
	t.Run("assert_return:1062", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 184, 174}), nil, arg{wa.I32, 447}) })
	t.Run("assert_return:1063", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 137, 132}), nil, arg{wa.I32, 448}) })
	t.Run("assert_return:1064", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{234, 152, 143}), nil, arg{wa.I32, 449}) })
	t.Run("assert_return:1065", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{234, 155, 183}), nil, arg{wa.I32, 450}) })
	t.Run("assert_return:1066", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 184, 150}), nil, arg{wa.I32, 451}) })
	t.Run("assert_return:1067", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 185, 150}), nil, arg{wa.I32, 452}) })
	t.Run("assert_return:1068", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{239, 188, 159}), nil, arg{wa.I32, 453}) })
	t.Run("assert_return:1069", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 145, 133, 131}), nil, arg{wa.I32, 454})
	})
	t.Run("assert_return:1070", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 158, 165, 159}), nil, arg{wa.I32, 455})
	})
	t.Run("assert_return:1071", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{243, 160, 128, 191}), nil, arg{wa.I32, 456})
	})
	t.Run("assert_return:1072", func(t *testing.T) {
		x2.assertReturnInvoke(t, string([]byte{240, 150, 161, 132}), nil, arg{wa.I32, 457})
	})
	t.Run("assert_return:1073", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 175, 145}), nil, arg{wa.I32, 458}) })
	t.Run("assert_return:1074", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{194, 182}), nil, arg{wa.I32, 459}) })
	t.Run("assert_return:1075", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 129, 139}), nil, arg{wa.I32, 460}) })
	t.Run("assert_return:1076", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{220, 128}), nil, arg{wa.I32, 461}) })
	t.Run("assert_return:1077", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 131, 187}), nil, arg{wa.I32, 462}) })
	t.Run("assert_return:1078", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 141, 168}), nil, arg{wa.I32, 463}) })
	t.Run("assert_return:1079", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 128, 183}), nil, arg{wa.I32, 464}) })
	t.Run("assert_return:1080", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 157, 161}), nil, arg{wa.I32, 465}) })
	t.Run("assert_return:1081", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 184, 143}), nil, arg{wa.I32, 466}) })
	t.Run("assert_return:1082", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 184, 144}), nil, arg{wa.I32, 467}) })
	t.Run("assert_return:1083", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 184, 145}), nil, arg{wa.I32, 468}) })
	t.Run("assert_return:1084", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 184, 142}), nil, arg{wa.I32, 469}) })
	t.Run("assert_return:1085", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{20}), nil, arg{wa.I32, 470}) })
	t.Run("assert_return:1086", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 152, 153}), nil, arg{wa.I32, 471}) })
	t.Run("assert_return:1087", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{226, 184, 191}), nil, arg{wa.I32, 472}) })
	t.Run("assert_return:1088", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{227, 128, 135}), nil, arg{wa.I32, 473}) })
	t.Run("assert_return:1089", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{224, 185, 155}), nil, arg{wa.I32, 474}) })
	t.Run("assert_return:1090", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{234, 153, 174}), nil, arg{wa.I32, 475}) })
	t.Run("assert_return:1091", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{207, 147}), nil, arg{wa.I32, 476}) })
	t.Run("assert_return:1092", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{207, 148}), nil, arg{wa.I32, 477}) })
	t.Run("assert_return:1093", func(t *testing.T) { x2.assertReturnInvoke(t, string([]byte{225, 186, 155}), nil, arg{wa.I32, 478}) })
	x3 := instantiateSpecTest(t, "3", "names.3.wasm")
	t.Cleanup(func() { x3.close(t) })
	t.Run("print32:1107", func(t *testing.T) { x3.assertReturnInvoke(t, "print32", []arg{{wa.I32, 42}, {wa.I32, 123}}, arg{}) })
}

func Test_nop(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "nop.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("as-func-first:306", func(t *testing.T) { x0.assertReturnInvoke(t, "as-func-first", nil, arg{wa.I32, 1}) })
	t.Run("as-func-mid:307", func(t *testing.T) { x0.assertReturnInvoke(t, "as-func-mid", nil, arg{wa.I32, 2}) })
	t.Run("as-func-last:308", func(t *testing.T) { x0.assertReturnInvoke(t, "as-func-last", nil, arg{wa.I32, 3}) })
	t.Run("as-func-everywhere:309", func(t *testing.T) { x0.assertReturnInvoke(t, "as-func-everywhere", nil, arg{wa.I32, 4}) })
	t.Run("as-drop-first:311", func(t *testing.T) { x0.assertReturnInvoke(t, "as-drop-first", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("as-drop-last:312", func(t *testing.T) { x0.assertReturnInvoke(t, "as-drop-last", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("as-drop-everywhere:313", func(t *testing.T) { x0.assertReturnInvoke(t, "as-drop-everywhere", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("as-select-first:315", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-first", []arg{{wa.I32, 3}}, arg{wa.I32, 3}) })
	t.Run("as-select-mid1:316", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-mid1", []arg{{wa.I32, 3}}, arg{wa.I32, 3}) })
	t.Run("as-select-mid2:317", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-mid2", []arg{{wa.I32, 3}}, arg{wa.I32, 3}) })
	t.Run("as-select-last:318", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-last", []arg{{wa.I32, 3}}, arg{wa.I32, 3}) })
	t.Run("as-select-everywhere:319", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-select-everywhere", []arg{{wa.I32, 3}}, arg{wa.I32, 3})
	})
	t.Run("as-block-first:321", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-first", nil, arg{wa.I32, 2}) })
	t.Run("as-block-mid:322", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-mid", nil, arg{wa.I32, 2}) })
	t.Run("as-block-last:323", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-last", nil, arg{wa.I32, 3}) })
	t.Run("as-block-everywhere:324", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-everywhere", nil, arg{wa.I32, 4}) })
	t.Run("as-loop-first:326", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-first", nil, arg{wa.I32, 2}) })
	t.Run("as-loop-mid:327", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-mid", nil, arg{wa.I32, 2}) })
	t.Run("as-loop-last:328", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-last", nil, arg{wa.I32, 3}) })
	t.Run("as-loop-everywhere:329", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-everywhere", nil, arg{wa.I32, 4}) })
	t.Run("as-if-condition:331", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-condition", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("as-if-condition:332", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-condition", []arg{{wa.I32, 4294967295}}, arg{}) })
	t.Run("as-if-then:333", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-then", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("as-if-then:334", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-then", []arg{{wa.I32, 4}}, arg{}) })
	t.Run("as-if-else:335", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-else", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("as-if-else:336", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-else", []arg{{wa.I32, 3}}, arg{}) })
	t.Run("as-br-first:338", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br-first", []arg{{wa.I32, 5}}, arg{wa.I32, 5}) })
	t.Run("as-br-last:339", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br-last", []arg{{wa.I32, 6}}, arg{wa.I32, 6}) })
	t.Run("as-br-everywhere:340", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br-everywhere", []arg{{wa.I32, 7}}, arg{wa.I32, 7}) })
	t.Run("as-br_if-first:342", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-first", []arg{{wa.I32, 4}}, arg{wa.I32, 4}) })
	t.Run("as-br_if-mid:343", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-mid", []arg{{wa.I32, 5}}, arg{wa.I32, 5}) })
	t.Run("as-br_if-last:344", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-last", []arg{{wa.I32, 6}}, arg{wa.I32, 6}) })
	t.Run("as-br_if-everywhere:345", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-br_if-everywhere", []arg{{wa.I32, 7}}, arg{wa.I32, 7})
	})
	t.Run("as-br_table-first:347", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-first", []arg{{wa.I32, 4}}, arg{wa.I32, 4}) })
	t.Run("as-br_table-mid:348", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-mid", []arg{{wa.I32, 5}}, arg{wa.I32, 5}) })
	t.Run("as-br_table-last:349", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-last", []arg{{wa.I32, 6}}, arg{wa.I32, 6}) })
	t.Run("as-br_table-everywhere:350", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-br_table-everywhere", []arg{{wa.I32, 7}}, arg{wa.I32, 7})
	})
	t.Run("as-return-first:352", func(t *testing.T) { x0.assertReturnInvoke(t, "as-return-first", []arg{{wa.I32, 5}}, arg{wa.I32, 5}) })
	t.Run("as-return-last:353", func(t *testing.T) { x0.assertReturnInvoke(t, "as-return-last", []arg{{wa.I32, 6}}, arg{wa.I32, 6}) })
	t.Run("as-return-everywhere:354", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-return-everywhere", []arg{{wa.I32, 7}}, arg{wa.I32, 7})
	})
	t.Run("as-call-first:356", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-call-first", []arg{{wa.I32, 3}, {wa.I32, 1}, {wa.I32, 2}}, arg{wa.I32, 2})
	})
	t.Run("as-call-mid1:357", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-call-mid1", []arg{{wa.I32, 3}, {wa.I32, 1}, {wa.I32, 2}}, arg{wa.I32, 2})
	})
	t.Run("as-call-mid2:358", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-call-mid2", []arg{{wa.I32, 0}, {wa.I32, 3}, {wa.I32, 1}}, arg{wa.I32, 2})
	})
	t.Run("as-call-last:359", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-call-last", []arg{{wa.I32, 10}, {wa.I32, 9}, {wa.I32, 4294967295}}, arg{wa.I32, 20})
	})
	t.Run("as-call-everywhere:360", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-call-everywhere", []arg{{wa.I32, 2}, {wa.I32, 1}, {wa.I32, 5}}, arg{wa.I32, 4294967294})
	})
	t.Run("as-unary-first:362", func(t *testing.T) { x0.assertReturnInvoke(t, "as-unary-first", []arg{{wa.I32, 30}}, arg{wa.I32, 1}) })
	t.Run("as-unary-last:363", func(t *testing.T) { x0.assertReturnInvoke(t, "as-unary-last", []arg{{wa.I32, 30}}, arg{wa.I32, 1}) })
	t.Run("as-unary-everywhere:364", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-unary-everywhere", []arg{{wa.I32, 12}}, arg{wa.I32, 2})
	})
	t.Run("as-binary-first:366", func(t *testing.T) { x0.assertReturnInvoke(t, "as-binary-first", []arg{{wa.I32, 3}}, arg{wa.I32, 6}) })
	t.Run("as-binary-mid:367", func(t *testing.T) { x0.assertReturnInvoke(t, "as-binary-mid", []arg{{wa.I32, 3}}, arg{wa.I32, 6}) })
	t.Run("as-binary-last:368", func(t *testing.T) { x0.assertReturnInvoke(t, "as-binary-last", []arg{{wa.I32, 3}}, arg{wa.I32, 6}) })
	t.Run("as-binary-everywhere:369", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-binary-everywhere", []arg{{wa.I32, 3}}, arg{wa.I32, 6})
	})
	t.Run("as-test-first:371", func(t *testing.T) { x0.assertReturnInvoke(t, "as-test-first", []arg{{wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("as-test-last:372", func(t *testing.T) { x0.assertReturnInvoke(t, "as-test-last", []arg{{wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("as-test-everywhere:373", func(t *testing.T) { x0.assertReturnInvoke(t, "as-test-everywhere", []arg{{wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("as-compare-first:375", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-first", []arg{{wa.I32, 3}}, arg{wa.I32, 0}) })
	t.Run("as-compare-mid:376", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-mid", []arg{{wa.I32, 3}}, arg{wa.I32, 0}) })
	t.Run("as-compare-last:377", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-last", []arg{{wa.I32, 3}}, arg{wa.I32, 0}) })
	t.Run("as-compare-everywhere:378", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-compare-everywhere", []arg{{wa.I32, 3}}, arg{wa.I32, 1})
	})
	t.Run("as-memory.grow-first:380", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-memory.grow-first", []arg{{wa.I32, 0}}, arg{wa.I32, 1})
	})
	t.Run("as-memory.grow-last:381", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-memory.grow-last", []arg{{wa.I32, 2}}, arg{wa.I32, 1})
	})
	t.Run("as-memory.grow-everywhere:382", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-memory.grow-everywhere", []arg{{wa.I32, 12}}, arg{wa.I32, 3})
	})
	t.Run("as-call_indirect-first:384", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-first", nil, arg{wa.I32, 1}) })
	t.Run("as-call_indirect-mid1:385", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-mid1", nil, arg{wa.I32, 1}) })
	t.Run("as-call_indirect-mid2:386", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-mid2", nil, arg{wa.I32, 1}) })
	t.Run("as-call_indirect-last:387", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-last", nil, arg{wa.I32, 1}) })
	t.Run("as-call_indirect-everywhere:388", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-everywhere", nil, arg{wa.I32, 1}) })
	t.Run("as-local.set-first:390", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.set-first", []arg{{wa.I32, 1}}, arg{wa.I32, 2}) })
	t.Run("as-local.set-last:391", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.set-last", []arg{{wa.I32, 1}}, arg{wa.I32, 2}) })
	t.Run("as-local.set-everywhere:392", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-local.set-everywhere", []arg{{wa.I32, 1}}, arg{wa.I32, 2})
	})
	t.Run("as-local.tee-first:394", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.tee-first", []arg{{wa.I32, 1}}, arg{wa.I32, 2}) })
	t.Run("as-local.tee-last:395", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.tee-last", []arg{{wa.I32, 1}}, arg{wa.I32, 2}) })
	t.Run("as-local.tee-everywhere:396", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-local.tee-everywhere", []arg{{wa.I32, 1}}, arg{wa.I32, 2})
	})
	t.Run("as-global.set-first:398", func(t *testing.T) { x0.assertReturnInvoke(t, "as-global.set-first", nil, arg{wa.I32, 2}) })
	t.Run("as-global.set-last:399", func(t *testing.T) { x0.assertReturnInvoke(t, "as-global.set-last", nil, arg{wa.I32, 2}) })
	t.Run("as-global.set-everywhere:400", func(t *testing.T) { x0.assertReturnInvoke(t, "as-global.set-everywhere", nil, arg{wa.I32, 2}) })
	t.Run("as-load-first:402", func(t *testing.T) { x0.assertReturnInvoke(t, "as-load-first", []arg{{wa.I32, 100}}, arg{wa.I32, 0}) })
	t.Run("as-load-last:403", func(t *testing.T) { x0.assertReturnInvoke(t, "as-load-last", []arg{{wa.I32, 100}}, arg{wa.I32, 0}) })
	t.Run("as-load-everywhere:404", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-load-everywhere", []arg{{wa.I32, 100}}, arg{wa.I32, 0})
	})
	t.Run("as-store-first:406", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-first", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{}) })
	t.Run("as-store-mid:407", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-mid", []arg{{wa.I32, 0}, {wa.I32, 2}}, arg{}) })
	t.Run("as-store-last:408", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-last", []arg{{wa.I32, 0}, {wa.I32, 3}}, arg{}) })
	t.Run("as-store-everywhere:409", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-store-everywhere", []arg{{wa.I32, 0}, {wa.I32, 4}}, arg{})
	})
	t.Run("assert_invalid:412", func(t *testing.T) { assertInvalidSpec(t, "nop.1.wasm", "type mismatch") })
	t.Run("assert_invalid:416", func(t *testing.T) { assertInvalidSpec(t, "nop.2.wasm", "type mismatch") })
	t.Run("assert_invalid:420", func(t *testing.T) { assertInvalidSpec(t, "nop.3.wasm", "type mismatch") })
	t.Run("assert_invalid:424", func(t *testing.T) { assertInvalidSpec(t, "nop.4.wasm", "type mismatch") })
}

func Test_ref_func(t *testing.T) { t.Skip("ref_func not supported") }

func Test_ref_is_null(t *testing.T) { t.Skip("ref_is_null not supported") }

func Test_ref_null(t *testing.T) { t.Skip("ref_null not supported") }

func Test_return(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "return.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("type-i32:224", func(t *testing.T) { x0.assertReturnInvoke(t, "type-i32", nil, arg{}) })
	t.Run("type-i64:225", func(t *testing.T) { x0.assertReturnInvoke(t, "type-i64", nil, arg{}) })
	t.Run("type-f32:226", func(t *testing.T) { x0.assertReturnInvoke(t, "type-f32", nil, arg{}) })
	t.Run("type-f64:227", func(t *testing.T) { x0.assertReturnInvoke(t, "type-f64", nil, arg{}) })
	t.Run("type-i32-value:229", func(t *testing.T) { x0.assertReturnInvoke(t, "type-i32-value", nil, arg{wa.I32, 1}) })
	t.Run("type-i64-value:230", func(t *testing.T) { x0.assertReturnInvoke(t, "type-i64-value", nil, arg{wa.I64, 2}) })
	t.Run("type-f32-value:231", func(t *testing.T) { x0.assertReturnInvoke(t, "type-f32-value", nil, arg{wa.F32, 1077936128}) })
	t.Run("type-f64-value:232", func(t *testing.T) { x0.assertReturnInvoke(t, "type-f64-value", nil, arg{wa.F64, 4616189618054758400}) })
	t.Run("nullary:234", func(t *testing.T) { x0.assertReturnInvoke(t, "nullary", nil, arg{}) })
	t.Run("unary:235", func(t *testing.T) { x0.assertReturnInvoke(t, "unary", nil, arg{wa.F64, 4613937818241073152}) })
	t.Run("as-func-first:237", func(t *testing.T) { x0.assertReturnInvoke(t, "as-func-first", nil, arg{wa.I32, 1}) })
	t.Run("as-func-mid:238", func(t *testing.T) { x0.assertReturnInvoke(t, "as-func-mid", nil, arg{wa.I32, 2}) })
	t.Run("as-func-last:239", func(t *testing.T) { x0.assertReturnInvoke(t, "as-func-last", nil, arg{}) })
	t.Run("as-func-value:240", func(t *testing.T) { x0.assertReturnInvoke(t, "as-func-value", nil, arg{wa.I32, 3}) })
	t.Run("as-block-first:242", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-first", nil, arg{}) })
	t.Run("as-block-mid:243", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-mid", nil, arg{}) })
	t.Run("as-block-last:244", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-last", nil, arg{}) })
	t.Run("as-block-value:245", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-value", nil, arg{wa.I32, 2}) })
	t.Run("as-loop-first:247", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-first", nil, arg{wa.I32, 3}) })
	t.Run("as-loop-mid:248", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-mid", nil, arg{wa.I32, 4}) })
	t.Run("as-loop-last:249", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-last", nil, arg{wa.I32, 5}) })
	t.Run("as-br-value:251", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br-value", nil, arg{wa.I32, 9}) })
	t.Run("as-br_if-cond:253", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-cond", nil, arg{}) })
	t.Run("as-br_if-value:254", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-value", nil, arg{wa.I32, 8}) })
	t.Run("as-br_if-value-cond:255", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-value-cond", nil, arg{wa.I32, 9}) })
	t.Run("as-br_table-index:257", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-index", nil, arg{wa.I64, 9}) })
	t.Run("as-br_table-value:258", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-value", nil, arg{wa.I32, 10}) })
	t.Run("as-br_table-value-index:259", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-value-index", nil, arg{wa.I32, 11}) })
	t.Run("as-return-value:261", func(t *testing.T) { x0.assertReturnInvoke(t, "as-return-value", nil, arg{wa.I64, 7}) })
	t.Run("as-if-cond:263", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-cond", nil, arg{wa.I32, 2}) })
	t.Run("as-if-then:264", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-if-then", []arg{{wa.I32, 1}, {wa.I32, 6}}, arg{wa.I32, 3})
	})
	t.Run("as-if-then:265", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-if-then", []arg{{wa.I32, 0}, {wa.I32, 6}}, arg{wa.I32, 6})
	})
	t.Run("as-if-else:266", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-if-else", []arg{{wa.I32, 0}, {wa.I32, 6}}, arg{wa.I32, 4})
	})
	t.Run("as-if-else:267", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-if-else", []arg{{wa.I32, 1}, {wa.I32, 6}}, arg{wa.I32, 6})
	})
	t.Run("as-select-first:269", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-select-first", []arg{{wa.I32, 0}, {wa.I32, 6}}, arg{wa.I32, 5})
	})
	t.Run("as-select-first:270", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-select-first", []arg{{wa.I32, 1}, {wa.I32, 6}}, arg{wa.I32, 5})
	})
	t.Run("as-select-second:271", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-select-second", []arg{{wa.I32, 0}, {wa.I32, 6}}, arg{wa.I32, 6})
	})
	t.Run("as-select-second:272", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-select-second", []arg{{wa.I32, 1}, {wa.I32, 6}}, arg{wa.I32, 6})
	})
	t.Run("as-select-cond:273", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-cond", nil, arg{wa.I32, 7}) })
	t.Run("as-call-first:275", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call-first", nil, arg{wa.I32, 12}) })
	t.Run("as-call-mid:276", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call-mid", nil, arg{wa.I32, 13}) })
	t.Run("as-call-last:277", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call-last", nil, arg{wa.I32, 14}) })
	t.Run("as-call_indirect-func:279", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-func", nil, arg{wa.I32, 20}) })
	t.Run("as-call_indirect-first:280", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-first", nil, arg{wa.I32, 21}) })
	t.Run("as-call_indirect-mid:281", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-mid", nil, arg{wa.I32, 22}) })
	t.Run("as-call_indirect-last:282", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call_indirect-last", nil, arg{wa.I32, 23}) })
	t.Run("as-local.set-value:284", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.set-value", nil, arg{wa.I32, 17}) })
	t.Run("as-local.tee-value:285", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.tee-value", nil, arg{wa.I32, 1}) })
	t.Run("as-global.set-value:286", func(t *testing.T) { x0.assertReturnInvoke(t, "as-global.set-value", nil, arg{wa.I32, 1}) })
	t.Run("as-load-address:288", func(t *testing.T) { x0.assertReturnInvoke(t, "as-load-address", nil, arg{wa.F32, 1071225242}) })
	t.Run("as-loadN-address:289", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loadN-address", nil, arg{wa.I64, 30}) })
	t.Run("as-store-address:291", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-address", nil, arg{wa.I32, 30}) })
	t.Run("as-store-value:292", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-value", nil, arg{wa.I32, 31}) })
	t.Run("as-storeN-address:293", func(t *testing.T) { x0.assertReturnInvoke(t, "as-storeN-address", nil, arg{wa.I32, 32}) })
	t.Run("as-storeN-value:294", func(t *testing.T) { x0.assertReturnInvoke(t, "as-storeN-value", nil, arg{wa.I32, 33}) })
	t.Run("as-unary-operand:296", func(t *testing.T) { x0.assertReturnInvoke(t, "as-unary-operand", nil, arg{wa.F32, 1079613850}) })
	t.Run("as-binary-left:298", func(t *testing.T) { x0.assertReturnInvoke(t, "as-binary-left", nil, arg{wa.I32, 3}) })
	t.Run("as-binary-right:299", func(t *testing.T) { x0.assertReturnInvoke(t, "as-binary-right", nil, arg{wa.I64, 45}) })
	t.Run("as-test-operand:301", func(t *testing.T) { x0.assertReturnInvoke(t, "as-test-operand", nil, arg{wa.I32, 44}) })
	t.Run("as-compare-left:303", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-left", nil, arg{wa.I32, 43}) })
	t.Run("as-compare-right:304", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-right", nil, arg{wa.I32, 42}) })
	t.Run("as-convert-operand:306", func(t *testing.T) { x0.assertReturnInvoke(t, "as-convert-operand", nil, arg{wa.I32, 41}) })
	t.Run("as-memory.grow-size:308", func(t *testing.T) { x0.assertReturnInvoke(t, "as-memory.grow-size", nil, arg{wa.I32, 40}) })
	t.Run("assert_invalid:311", func(t *testing.T) { assertInvalidSpec(t, "return.1.wasm", "type mismatch") })
	t.Run("assert_invalid:315", func(t *testing.T) { assertInvalidSpec(t, "return.2.wasm", "type mismatch") })
	t.Run("assert_invalid:324", func(t *testing.T) { assertInvalidSpec(t, "return.3.wasm", "type mismatch") })
	t.Run("assert_invalid:333", func(t *testing.T) { assertInvalidSpec(t, "return.4.wasm", "type mismatch") })
	t.Run("assert_invalid:342", func(t *testing.T) { assertInvalidSpec(t, "return.5.wasm", "type mismatch") })
	t.Run("assert_invalid:351", func(t *testing.T) { assertInvalidSpec(t, "return.6.wasm", "type mismatch") })
	t.Run("assert_invalid:360", func(t *testing.T) { assertInvalidSpec(t, "return.7.wasm", "type mismatch") })
	t.Run("assert_invalid:369", func(t *testing.T) { assertInvalidSpec(t, "return.8.wasm", "type mismatch") })
	t.Run("assert_invalid:378", func(t *testing.T) { assertInvalidSpec(t, "return.9.wasm", "type mismatch") })
	t.Run("assert_invalid:386", func(t *testing.T) { assertInvalidSpec(t, "return.10.wasm", "type mismatch") })
	t.Run("assert_invalid:394", func(t *testing.T) { assertInvalidSpec(t, "return.11.wasm", "type mismatch") })
	t.Run("assert_invalid:403", func(t *testing.T) { assertInvalidSpec(t, "return.12.wasm", "type mismatch") })
	t.Run("assert_invalid:418", func(t *testing.T) { assertInvalidSpec(t, "return.13.wasm", "type mismatch") })
	t.Run("assert_invalid:427", func(t *testing.T) { assertInvalidSpec(t, "return.14.wasm", "type mismatch") })
	t.Run("assert_invalid:436", func(t *testing.T) { assertInvalidSpec(t, "return.15.wasm", "type mismatch") })
	t.Run("assert_invalid:445", func(t *testing.T) { assertInvalidSpec(t, "return.16.wasm", "type mismatch") })
	t.Run("assert_invalid:454", func(t *testing.T) { assertInvalidSpec(t, "return.17.wasm", "type mismatch") })
	t.Run("assert_invalid:463", func(t *testing.T) { assertInvalidSpec(t, "return.18.wasm", "type mismatch") })
	t.Run("assert_invalid:472", func(t *testing.T) { assertInvalidSpec(t, "return.19.wasm", "type mismatch") })
	t.Run("assert_invalid:476", func(t *testing.T) { assertInvalidSpec(t, "return.20.wasm", "type mismatch") })
}

func Test_select(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "select.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("select-i32:183", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-i32", []arg{{wa.I32, 1}, {wa.I32, 2}, {wa.I32, 1}}, arg{wa.I32, 1})
	})
	t.Run("select-i64:184", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-i64", []arg{{wa.I64, 2}, {wa.I64, 1}, {wa.I32, 1}}, arg{wa.I64, 2})
	})
	t.Run("select-f32:185", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f32", []arg{{wa.F32, 1065353216}, {wa.F32, 1073741824}, {wa.I32, 1}}, arg{wa.F32, 1065353216})
	})
	t.Run("select-f64:186", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f64", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4611686018427387904}, {wa.I32, 1}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("select-i32:188", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-i32", []arg{{wa.I32, 1}, {wa.I32, 2}, {wa.I32, 0}}, arg{wa.I32, 2})
	})
	t.Run("select-i32:189", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-i32", []arg{{wa.I32, 2}, {wa.I32, 1}, {wa.I32, 0}}, arg{wa.I32, 1})
	})
	t.Run("select-i64:190", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-i64", []arg{{wa.I64, 2}, {wa.I64, 1}, {wa.I32, 4294967295}}, arg{wa.I64, 2})
	})
	t.Run("select-i64:191", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-i64", []arg{{wa.I64, 2}, {wa.I64, 1}, {wa.I32, 4042322160}}, arg{wa.I64, 2})
	})
	t.Run("select-f32:193", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f32", []arg{{wa.F32, 2143289344}, {wa.F32, 1065353216}, {wa.I32, 1}}, arg{wa.F32, 2143289344})
	})
	t.Run("select-f32:194", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f32", []arg{{wa.F32, 2139226884}, {wa.F32, 1065353216}, {wa.I32, 1}}, arg{wa.F32, 2139226884})
	})
	t.Run("select-f32:195", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f32", []arg{{wa.F32, 2143289344}, {wa.F32, 1065353216}, {wa.I32, 0}}, arg{wa.F32, 1065353216})
	})
	t.Run("select-f32:196", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f32", []arg{{wa.F32, 2139226884}, {wa.F32, 1065353216}, {wa.I32, 0}}, arg{wa.F32, 1065353216})
	})
	t.Run("select-f32:197", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f32", []arg{{wa.F32, 1073741824}, {wa.F32, 2143289344}, {wa.I32, 1}}, arg{wa.F32, 1073741824})
	})
	t.Run("select-f32:198", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f32", []arg{{wa.F32, 1073741824}, {wa.F32, 2139226884}, {wa.I32, 1}}, arg{wa.F32, 1073741824})
	})
	t.Run("select-f32:199", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f32", []arg{{wa.F32, 1073741824}, {wa.F32, 2143289344}, {wa.I32, 0}}, arg{wa.F32, 2143289344})
	})
	t.Run("select-f32:200", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f32", []arg{{wa.F32, 1073741824}, {wa.F32, 2139226884}, {wa.I32, 0}}, arg{wa.F32, 2139226884})
	})
	t.Run("select-f64:202", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f64", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4607182418800017408}, {wa.I32, 1}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("select-f64:203", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f64", []arg{{wa.F64, 9218868437227537156}, {wa.F64, 4607182418800017408}, {wa.I32, 1}}, arg{wa.F64, 9218868437227537156})
	})
	t.Run("select-f64:204", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f64", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4607182418800017408}, {wa.I32, 0}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("select-f64:205", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f64", []arg{{wa.F64, 9218868437227537156}, {wa.F64, 4607182418800017408}, {wa.I32, 0}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("select-f64:206", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f64", []arg{{wa.F64, 4611686018427387904}, {wa.F64, 9221120237041090560}, {wa.I32, 1}}, arg{wa.F64, 4611686018427387904})
	})
	t.Run("select-f64:207", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f64", []arg{{wa.F64, 4611686018427387904}, {wa.F64, 9218868437227537156}, {wa.I32, 1}}, arg{wa.F64, 4611686018427387904})
	})
	t.Run("select-f64:208", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f64", []arg{{wa.F64, 4611686018427387904}, {wa.F64, 9221120237041090560}, {wa.I32, 0}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("select-f64:209", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f64", []arg{{wa.F64, 4611686018427387904}, {wa.F64, 9218868437227537156}, {wa.I32, 0}}, arg{wa.F64, 9218868437227537156})
	})
	t.Run("select-i32-t:211", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-i32-t", []arg{{wa.I32, 1}, {wa.I32, 2}, {wa.I32, 1}}, arg{wa.I32, 1})
	})
	t.Run("select-i64-t:212", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-i64-t", []arg{{wa.I64, 2}, {wa.I64, 1}, {wa.I32, 1}}, arg{wa.I64, 2})
	})
	t.Run("select-f32-t:213", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f32-t", []arg{{wa.F32, 1065353216}, {wa.F32, 1073741824}, {wa.I32, 1}}, arg{wa.F32, 1065353216})
	})
	t.Run("select-f64-t:214", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f64-t", []arg{{wa.F64, 4607182418800017408}, {wa.F64, 4611686018427387904}, {wa.I32, 1}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("select-funcref:215", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("select-externref:216", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("select-i32-t:218", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-i32-t", []arg{{wa.I32, 1}, {wa.I32, 2}, {wa.I32, 0}}, arg{wa.I32, 2})
	})
	t.Run("select-i32-t:219", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-i32-t", []arg{{wa.I32, 2}, {wa.I32, 1}, {wa.I32, 0}}, arg{wa.I32, 1})
	})
	t.Run("select-i64-t:220", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-i64-t", []arg{{wa.I64, 2}, {wa.I64, 1}, {wa.I32, 4294967295}}, arg{wa.I64, 2})
	})
	t.Run("select-i64-t:221", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-i64-t", []arg{{wa.I64, 2}, {wa.I64, 1}, {wa.I32, 4042322160}}, arg{wa.I64, 2})
	})
	t.Run("select-externref:222", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("select-externref:223", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("select-f32-t:225", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f32-t", []arg{{wa.F32, 2143289344}, {wa.F32, 1065353216}, {wa.I32, 1}}, arg{wa.F32, 2143289344})
	})
	t.Run("select-f32-t:226", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f32-t", []arg{{wa.F32, 2139226884}, {wa.F32, 1065353216}, {wa.I32, 1}}, arg{wa.F32, 2139226884})
	})
	t.Run("select-f32-t:227", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f32-t", []arg{{wa.F32, 2143289344}, {wa.F32, 1065353216}, {wa.I32, 0}}, arg{wa.F32, 1065353216})
	})
	t.Run("select-f32-t:228", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f32-t", []arg{{wa.F32, 2139226884}, {wa.F32, 1065353216}, {wa.I32, 0}}, arg{wa.F32, 1065353216})
	})
	t.Run("select-f32-t:229", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f32-t", []arg{{wa.F32, 1073741824}, {wa.F32, 2143289344}, {wa.I32, 1}}, arg{wa.F32, 1073741824})
	})
	t.Run("select-f32-t:230", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f32-t", []arg{{wa.F32, 1073741824}, {wa.F32, 2139226884}, {wa.I32, 1}}, arg{wa.F32, 1073741824})
	})
	t.Run("select-f32-t:231", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f32-t", []arg{{wa.F32, 1073741824}, {wa.F32, 2143289344}, {wa.I32, 0}}, arg{wa.F32, 2143289344})
	})
	t.Run("select-f32-t:232", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f32-t", []arg{{wa.F32, 1073741824}, {wa.F32, 2139226884}, {wa.I32, 0}}, arg{wa.F32, 2139226884})
	})
	t.Run("select-f64-t:234", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f64-t", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4607182418800017408}, {wa.I32, 1}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("select-f64-t:235", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f64-t", []arg{{wa.F64, 9218868437227537156}, {wa.F64, 4607182418800017408}, {wa.I32, 1}}, arg{wa.F64, 9218868437227537156})
	})
	t.Run("select-f64-t:236", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f64-t", []arg{{wa.F64, 9221120237041090560}, {wa.F64, 4607182418800017408}, {wa.I32, 0}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("select-f64-t:237", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f64-t", []arg{{wa.F64, 9218868437227537156}, {wa.F64, 4607182418800017408}, {wa.I32, 0}}, arg{wa.F64, 4607182418800017408})
	})
	t.Run("select-f64-t:238", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f64-t", []arg{{wa.F64, 4611686018427387904}, {wa.F64, 9221120237041090560}, {wa.I32, 1}}, arg{wa.F64, 4611686018427387904})
	})
	t.Run("select-f64-t:239", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f64-t", []arg{{wa.F64, 4611686018427387904}, {wa.F64, 9218868437227537156}, {wa.I32, 1}}, arg{wa.F64, 4611686018427387904})
	})
	t.Run("select-f64-t:240", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f64-t", []arg{{wa.F64, 4611686018427387904}, {wa.F64, 9221120237041090560}, {wa.I32, 0}}, arg{wa.F64, 9221120237041090560})
	})
	t.Run("select-f64-t:241", func(t *testing.T) {
		x0.assertReturnInvoke(t, "select-f64-t", []arg{{wa.F64, 4611686018427387904}, {wa.F64, 9218868437227537156}, {wa.I32, 0}}, arg{wa.F64, 9218868437227537156})
	})
	t.Run("as-select-first:243", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-first", []arg{{wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("as-select-first:244", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-first", []arg{{wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("as-select-mid:245", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-mid", []arg{{wa.I32, 0}}, arg{wa.I32, 2}) })
	t.Run("as-select-mid:246", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-mid", []arg{{wa.I32, 1}}, arg{wa.I32, 2}) })
	t.Run("as-select-last:247", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-last", []arg{{wa.I32, 0}}, arg{wa.I32, 2}) })
	t.Run("as-select-last:248", func(t *testing.T) { x0.assertReturnInvoke(t, "as-select-last", []arg{{wa.I32, 1}}, arg{wa.I32, 3}) })
	t.Run("as-loop-first:250", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-first", []arg{{wa.I32, 0}}, arg{wa.I32, 3}) })
	t.Run("as-loop-first:251", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-first", []arg{{wa.I32, 1}}, arg{wa.I32, 2}) })
	t.Run("as-loop-mid:252", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-mid", []arg{{wa.I32, 0}}, arg{wa.I32, 3}) })
	t.Run("as-loop-mid:253", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-mid", []arg{{wa.I32, 1}}, arg{wa.I32, 2}) })
	t.Run("as-loop-last:254", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-last", []arg{{wa.I32, 0}}, arg{wa.I32, 3}) })
	t.Run("as-loop-last:255", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-last", []arg{{wa.I32, 1}}, arg{wa.I32, 2}) })
	t.Run("as-if-condition:257", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-condition", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("as-if-condition:258", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-condition", []arg{{wa.I32, 1}}, arg{}) })
	t.Run("as-if-then:259", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-then", []arg{{wa.I32, 0}}, arg{wa.I32, 3}) })
	t.Run("as-if-then:260", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-then", []arg{{wa.I32, 1}}, arg{wa.I32, 2}) })
	t.Run("as-if-else:261", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-else", []arg{{wa.I32, 0}}, arg{wa.I32, 3}) })
	t.Run("as-if-else:262", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-else", []arg{{wa.I32, 1}}, arg{wa.I32, 2}) })
	t.Run("as-br_if-first:264", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-first", []arg{{wa.I32, 0}}, arg{wa.I32, 3}) })
	t.Run("as-br_if-first:265", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-first", []arg{{wa.I32, 1}}, arg{wa.I32, 2}) })
	t.Run("as-br_if-last:266", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-last", []arg{{wa.I32, 0}}, arg{wa.I32, 2}) })
	t.Run("as-br_if-last:267", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-last", []arg{{wa.I32, 1}}, arg{wa.I32, 2}) })
	t.Run("as-br_table-first:269", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-first", []arg{{wa.I32, 0}}, arg{wa.I32, 3}) })
	t.Run("as-br_table-first:270", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-first", []arg{{wa.I32, 1}}, arg{wa.I32, 2}) })
	t.Run("as-br_table-last:271", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-last", []arg{{wa.I32, 0}}, arg{wa.I32, 2}) })
	t.Run("as-br_table-last:272", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-last", []arg{{wa.I32, 1}}, arg{wa.I32, 2}) })
	t.Run("as-call_indirect-first:274", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-call_indirect-first", []arg{{wa.I32, 0}}, arg{wa.I32, 3})
	})
	t.Run("as-call_indirect-first:275", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-call_indirect-first", []arg{{wa.I32, 1}}, arg{wa.I32, 2})
	})
	t.Run("as-call_indirect-mid:276", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-call_indirect-mid", []arg{{wa.I32, 0}}, arg{wa.I32, 1})
	})
	t.Run("as-call_indirect-mid:277", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-call_indirect-mid", []arg{{wa.I32, 1}}, arg{wa.I32, 1})
	})
	t.Run("as-call_indirect-last:278", func(t *testing.T) {
		x0.assertTrap(t, "as-call_indirect-last", []arg{{wa.I32, 0}}, arg{Type: wa.I32}, "undefined element")
	})
	t.Run("as-call_indirect-last:279", func(t *testing.T) {
		x0.assertTrap(t, "as-call_indirect-last", []arg{{wa.I32, 1}}, arg{Type: wa.I32}, "undefined element")
	})
	t.Run("as-store-first:281", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-first", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("as-store-first:282", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-first", []arg{{wa.I32, 1}}, arg{}) })
	t.Run("as-store-last:283", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-last", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("as-store-last:284", func(t *testing.T) { x0.assertReturnInvoke(t, "as-store-last", []arg{{wa.I32, 1}}, arg{}) })
	t.Run("as-memory.grow-value:286", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-memory.grow-value", []arg{{wa.I32, 0}}, arg{wa.I32, 1})
	})
	t.Run("as-memory.grow-value:287", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-memory.grow-value", []arg{{wa.I32, 1}}, arg{wa.I32, 3})
	})
	t.Run("as-call-value:289", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call-value", []arg{{wa.I32, 0}}, arg{wa.I32, 2}) })
	t.Run("as-call-value:290", func(t *testing.T) { x0.assertReturnInvoke(t, "as-call-value", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("as-return-value:291", func(t *testing.T) { x0.assertReturnInvoke(t, "as-return-value", []arg{{wa.I32, 0}}, arg{wa.I32, 2}) })
	t.Run("as-return-value:292", func(t *testing.T) { x0.assertReturnInvoke(t, "as-return-value", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("as-drop-operand:293", func(t *testing.T) { x0.assertReturnInvoke(t, "as-drop-operand", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("as-drop-operand:294", func(t *testing.T) { x0.assertReturnInvoke(t, "as-drop-operand", []arg{{wa.I32, 1}}, arg{}) })
	t.Run("as-br-value:295", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br-value", []arg{{wa.I32, 0}}, arg{wa.I32, 2}) })
	t.Run("as-br-value:296", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br-value", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("as-local.set-value:297", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.set-value", []arg{{wa.I32, 0}}, arg{wa.I32, 2}) })
	t.Run("as-local.set-value:298", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.set-value", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("as-local.tee-value:299", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.tee-value", []arg{{wa.I32, 0}}, arg{wa.I32, 2}) })
	t.Run("as-local.tee-value:300", func(t *testing.T) { x0.assertReturnInvoke(t, "as-local.tee-value", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("as-global.set-value:301", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-global.set-value", []arg{{wa.I32, 0}}, arg{wa.I32, 2})
	})
	t.Run("as-global.set-value:302", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-global.set-value", []arg{{wa.I32, 1}}, arg{wa.I32, 1})
	})
	t.Run("as-load-operand:303", func(t *testing.T) { x0.assertReturnInvoke(t, "as-load-operand", []arg{{wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("as-load-operand:304", func(t *testing.T) { x0.assertReturnInvoke(t, "as-load-operand", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("as-unary-operand:306", func(t *testing.T) { x0.assertReturnInvoke(t, "as-unary-operand", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("as-unary-operand:307", func(t *testing.T) { x0.assertReturnInvoke(t, "as-unary-operand", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("as-binary-operand:308", func(t *testing.T) { x0.assertReturnInvoke(t, "as-binary-operand", []arg{{wa.I32, 0}}, arg{wa.I32, 4}) })
	t.Run("as-binary-operand:309", func(t *testing.T) { x0.assertReturnInvoke(t, "as-binary-operand", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("as-test-operand:310", func(t *testing.T) { x0.assertReturnInvoke(t, "as-test-operand", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("as-test-operand:311", func(t *testing.T) { x0.assertReturnInvoke(t, "as-test-operand", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("as-compare-left:312", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-left", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("as-compare-left:313", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-left", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("as-compare-right:314", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-right", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("as-compare-right:315", func(t *testing.T) { x0.assertReturnInvoke(t, "as-compare-right", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("as-convert-operand:316", func(t *testing.T) { x0.assertReturnInvoke(t, "as-convert-operand", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("as-convert-operand:317", func(t *testing.T) { x0.assertReturnInvoke(t, "as-convert-operand", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("assert_invalid:320", func(t *testing.T) { assertInvalidSpec(t, "select.1.wasm", "type mismatch") })
	t.Run("assert_invalid:324", func(t *testing.T) { assertInvalidSpec(t, "select.2.wasm", "invalid result arity") })
	t.Run("assert_invalid:328", func(t *testing.T) { assertInvalidSpec(t, "select.3.wasm", "invalid result arity") })
	t.Run("assert_invalid:340", func(t *testing.T) { assertInvalidSpec(t, "select.4.wasm", "type mismatch") })
	t.Run("assert_invalid:347", func(t *testing.T) { assertInvalidSpec(t, "select.5.wasm", "type mismatch") })
	t.Run("assert_invalid:353", func(t *testing.T) { assertInvalidSpec(t, "select.6.wasm", "type mismatch") })
	t.Run("assert_invalid:359", func(t *testing.T) { assertInvalidSpec(t, "select.7.wasm", "type mismatch") })
	t.Run("assert_invalid:366", func(t *testing.T) { assertInvalidSpec(t, "select.8.wasm", "type mismatch") })
	t.Run("assert_invalid:370", func(t *testing.T) { assertInvalidSpec(t, "select.9.wasm", "type mismatch") })
	t.Run("assert_invalid:374", func(t *testing.T) { assertInvalidSpec(t, "select.10.wasm", "type mismatch") })
	t.Run("assert_invalid:378", func(t *testing.T) { assertInvalidSpec(t, "select.11.wasm", "type mismatch") })
	t.Run("assert_invalid:382", func(t *testing.T) { assertInvalidSpec(t, "select.12.wasm", "type mismatch") })
	t.Run("assert_invalid:388", func(t *testing.T) { assertInvalidSpec(t, "select.13.wasm", "type mismatch") })
	t.Run("assert_invalid:396", func(t *testing.T) { assertInvalidSpec(t, "select.14.wasm", "type mismatch") })
	t.Run("assert_invalid:404", func(t *testing.T) { assertInvalidSpec(t, "select.15.wasm", "type mismatch") })
	t.Run("assert_invalid:412", func(t *testing.T) { assertInvalidSpec(t, "select.16.wasm", "type mismatch") })
	t.Run("assert_invalid:421", func(t *testing.T) { assertInvalidSpec(t, "select.17.wasm", "type mismatch") })
	t.Run("assert_invalid:430", func(t *testing.T) { assertInvalidSpec(t, "select.18.wasm", "type mismatch") })
	t.Run("assert_invalid:439", func(t *testing.T) { assertInvalidSpec(t, "select.19.wasm", "type mismatch") })
	t.Run("assert_invalid:448", func(t *testing.T) { assertInvalidSpec(t, "select.20.wasm", "type mismatch") })
	t.Run("assert_invalid:457", func(t *testing.T) { assertInvalidSpec(t, "select.21.wasm", "type mismatch") })
	t.Run("assert_invalid:466", func(t *testing.T) { assertInvalidSpec(t, "select.22.wasm", "type mismatch") })
	t.Run("assert_invalid:475", func(t *testing.T) { assertInvalidSpec(t, "select.23.wasm", "type mismatch") })
	t.Run("assert_invalid:484", func(t *testing.T) { assertInvalidSpec(t, "select.24.wasm", "type mismatch") })
	t.Run("assert_invalid:496", func(t *testing.T) { assertInvalidSpec(t, "select.25.wasm", "type mismatch") })
	t.Run("assert_invalid:500", func(t *testing.T) { assertInvalidSpec(t, "select.26.wasm", "type mismatch") })
	t.Run("assert_invalid:504", func(t *testing.T) { assertInvalidSpec(t, "select.27.wasm", "type mismatch") })
	t.Run("assert_invalid:511", func(t *testing.T) { assertInvalidSpec(t, "select.28.wasm", "type mismatch") })
}

func Test_skip_stack_guard_page(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "skip-stack-guard-page.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("test-guard-page-skip:2275", func(t *testing.T) {
		x0.assertExhaustion(t, "test-guard-page-skip", []arg{{wa.I32, 0}}, arg{}, "call stack exhausted")
	})
	t.Run("test-guard-page-skip:2276", func(t *testing.T) {
		x0.assertExhaustion(t, "test-guard-page-skip", []arg{{wa.I32, 100}}, arg{}, "call stack exhausted")
	})
	t.Run("test-guard-page-skip:2277", func(t *testing.T) {
		x0.assertExhaustion(t, "test-guard-page-skip", []arg{{wa.I32, 200}}, arg{}, "call stack exhausted")
	})
	t.Run("test-guard-page-skip:2278", func(t *testing.T) {
		x0.assertExhaustion(t, "test-guard-page-skip", []arg{{wa.I32, 300}}, arg{}, "call stack exhausted")
	})
	t.Run("test-guard-page-skip:2279", func(t *testing.T) {
		x0.assertExhaustion(t, "test-guard-page-skip", []arg{{wa.I32, 400}}, arg{}, "call stack exhausted")
	})
	t.Run("test-guard-page-skip:2280", func(t *testing.T) {
		x0.assertExhaustion(t, "test-guard-page-skip", []arg{{wa.I32, 500}}, arg{}, "call stack exhausted")
	})
	t.Run("test-guard-page-skip:2281", func(t *testing.T) {
		x0.assertExhaustion(t, "test-guard-page-skip", []arg{{wa.I32, 600}}, arg{}, "call stack exhausted")
	})
	t.Run("test-guard-page-skip:2282", func(t *testing.T) {
		x0.assertExhaustion(t, "test-guard-page-skip", []arg{{wa.I32, 700}}, arg{}, "call stack exhausted")
	})
	t.Run("test-guard-page-skip:2283", func(t *testing.T) {
		x0.assertExhaustion(t, "test-guard-page-skip", []arg{{wa.I32, 800}}, arg{}, "call stack exhausted")
	})
	t.Run("test-guard-page-skip:2284", func(t *testing.T) {
		x0.assertExhaustion(t, "test-guard-page-skip", []arg{{wa.I32, 900}}, arg{}, "call stack exhausted")
	})
}

func Test_stack(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "stack.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("fac-expr:146", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fac-expr", []arg{{wa.I64, 25}}, arg{wa.I64, 7034535277573963776})
	})
	t.Run("fac-stack:147", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fac-stack", []arg{{wa.I64, 25}}, arg{wa.I64, 7034535277573963776})
	})
	t.Run("fac-mixed:148", func(t *testing.T) {
		x0.assertReturnInvoke(t, "fac-mixed", []arg{{wa.I64, 25}}, arg{wa.I64, 7034535277573963776})
	})
	t.Run("not-quite-a-tree:150", func(t *testing.T) { x0.assertReturnInvoke(t, "not-quite-a-tree", nil, arg{wa.I32, 3}) })
	t.Run("not-quite-a-tree:151", func(t *testing.T) { x0.assertReturnInvoke(t, "not-quite-a-tree", nil, arg{wa.I32, 9}) })
	x1 := instantiateSpecTest(t, "1", "stack.1.wasm")
	t.Cleanup(func() { x1.close(t) })
}

func Test_start(t *testing.T) {
	t.Run("assert_invalid:2", func(t *testing.T) { assertInvalidSpec(t, "start.0.wasm", "unknown function") })
	t.Run("assert_invalid:7", func(t *testing.T) { assertInvalidSpec(t, "start.1.wasm", "start function") })
	t.Run("assert_invalid:14", func(t *testing.T) { assertInvalidSpec(t, "start.2.wasm", "start function") })
	x0 := instantiateSpecTest(t, "0", "start.3.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("get:45", func(t *testing.T) { x0.assertReturnInvoke(t, "get", nil, arg{wa.I32, 68}) })
	t.Run("inc:46", func(t *testing.T) { x0.invoke(t, "inc", nil) })
	t.Run("get:47", func(t *testing.T) { x0.assertReturnInvoke(t, "get", nil, arg{wa.I32, 69}) })
	t.Run("inc:48", func(t *testing.T) { x0.invoke(t, "inc", nil) })
	t.Run("get:49", func(t *testing.T) { x0.assertReturnInvoke(t, "get", nil, arg{wa.I32, 70}) })
	x1 := instantiateSpecTest(t, "1", "start.4.wasm")
	t.Cleanup(func() { x1.close(t) })
	t.Run("get:74", func(t *testing.T) { x1.assertReturnInvoke(t, "get", nil, arg{wa.I32, 68}) })
	t.Run("inc:75", func(t *testing.T) { x1.invoke(t, "inc", nil) })
	t.Run("get:76", func(t *testing.T) { x1.assertReturnInvoke(t, "get", nil, arg{wa.I32, 69}) })
	t.Run("inc:77", func(t *testing.T) { x1.invoke(t, "inc", nil) })
	t.Run("get:78", func(t *testing.T) { x1.assertReturnInvoke(t, "get", nil, arg{wa.I32, 70}) })
	x2 := instantiateSpecTest(t, "2", "start.5.wasm")
	t.Cleanup(func() { x2.close(t) })
	x3 := instantiateSpecTest(t, "3", "start.6.wasm")
	t.Cleanup(func() { x3.close(t) })
	x4 := instantiateSpecTest(t, "4", "start.7.wasm")
	t.Cleanup(func() { x4.close(t) })
	t.Run("assert_uninstantiable:98", func(t *testing.T) { assertUninstantiableSpec(t, "start.8.wasm", "unreachable") })
	t.Run("assert_malformed:103", func(t *testing.T) { t.Skip("text format not supported") })
}

func Test_store(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "store.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("as-block-value:44", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-value", nil, arg{}) })
	t.Run("as-loop-value:45", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-value", nil, arg{}) })
	t.Run("as-br-value:47", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br-value", nil, arg{}) })
	t.Run("as-br_if-value:48", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-value", nil, arg{}) })
	t.Run("as-br_if-value-cond:49", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_if-value-cond", nil, arg{}) })
	t.Run("as-br_table-value:50", func(t *testing.T) { x0.assertReturnInvoke(t, "as-br_table-value", nil, arg{}) })
	t.Run("as-return-value:52", func(t *testing.T) { x0.assertReturnInvoke(t, "as-return-value", nil, arg{}) })
	t.Run("as-if-then:54", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-then", nil, arg{}) })
	t.Run("as-if-else:55", func(t *testing.T) { x0.assertReturnInvoke(t, "as-if-else", nil, arg{}) })
	t.Run("assert_malformed:58", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:65", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:73", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:81", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:88", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:96", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:103", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_invalid:112", func(t *testing.T) { assertInvalidSpec(t, "store.8.wasm", "type mismatch") })
	t.Run("assert_invalid:116", func(t *testing.T) { assertInvalidSpec(t, "store.9.wasm", "type mismatch") })
	t.Run("assert_invalid:120", func(t *testing.T) { assertInvalidSpec(t, "store.10.wasm", "type mismatch") })
	t.Run("assert_invalid:124", func(t *testing.T) { assertInvalidSpec(t, "store.11.wasm", "type mismatch") })
	t.Run("assert_invalid:128", func(t *testing.T) { assertInvalidSpec(t, "store.12.wasm", "type mismatch") })
	t.Run("assert_invalid:132", func(t *testing.T) { assertInvalidSpec(t, "store.13.wasm", "type mismatch") })
	t.Run("assert_invalid:136", func(t *testing.T) { assertInvalidSpec(t, "store.14.wasm", "type mismatch") })
	t.Run("assert_invalid:140", func(t *testing.T) { assertInvalidSpec(t, "store.15.wasm", "type mismatch") })
	t.Run("assert_invalid:144", func(t *testing.T) { assertInvalidSpec(t, "store.16.wasm", "type mismatch") })
	t.Run("assert_invalid:150", func(t *testing.T) { assertInvalidSpec(t, "store.17.wasm", "type mismatch") })
	t.Run("assert_invalid:159", func(t *testing.T) { assertInvalidSpec(t, "store.18.wasm", "type mismatch") })
	t.Run("assert_invalid:168", func(t *testing.T) { assertInvalidSpec(t, "store.19.wasm", "type mismatch") })
	t.Run("assert_invalid:178", func(t *testing.T) { assertInvalidSpec(t, "store.20.wasm", "type mismatch") })
	t.Run("assert_invalid:188", func(t *testing.T) { assertInvalidSpec(t, "store.21.wasm", "type mismatch") })
	t.Run("assert_invalid:198", func(t *testing.T) { assertInvalidSpec(t, "store.22.wasm", "type mismatch") })
	t.Run("assert_invalid:208", func(t *testing.T) { assertInvalidSpec(t, "store.23.wasm", "type mismatch") })
	t.Run("assert_invalid:218", func(t *testing.T) { assertInvalidSpec(t, "store.24.wasm", "type mismatch") })
	t.Run("assert_invalid:228", func(t *testing.T) { assertInvalidSpec(t, "store.25.wasm", "type mismatch") })
	t.Run("assert_invalid:238", func(t *testing.T) { assertInvalidSpec(t, "store.26.wasm", "type mismatch") })
	t.Run("assert_invalid:248", func(t *testing.T) { assertInvalidSpec(t, "store.27.wasm", "type mismatch") })
	t.Run("assert_invalid:258", func(t *testing.T) { assertInvalidSpec(t, "store.28.wasm", "type mismatch") })
	t.Run("assert_invalid:268", func(t *testing.T) { assertInvalidSpec(t, "store.29.wasm", "type mismatch") })
	t.Run("assert_invalid:278", func(t *testing.T) { assertInvalidSpec(t, "store.30.wasm", "type mismatch") })
	t.Run("assert_invalid:288", func(t *testing.T) { assertInvalidSpec(t, "store.31.wasm", "type mismatch") })
	t.Run("assert_invalid:298", func(t *testing.T) { assertInvalidSpec(t, "store.32.wasm", "type mismatch") })
	t.Run("assert_invalid:308", func(t *testing.T) { assertInvalidSpec(t, "store.33.wasm", "type mismatch") })
	t.Run("assert_invalid:317", func(t *testing.T) { assertInvalidSpec(t, "store.34.wasm", "type mismatch") })
	t.Run("assert_invalid:326", func(t *testing.T) { assertInvalidSpec(t, "store.35.wasm", "type mismatch") })
	t.Run("assert_invalid:335", func(t *testing.T) { assertInvalidSpec(t, "store.36.wasm", "type mismatch") })
	t.Run("assert_invalid:344", func(t *testing.T) { assertInvalidSpec(t, "store.37.wasm", "type mismatch") })
	t.Run("assert_invalid:354", func(t *testing.T) { assertInvalidSpec(t, "store.38.wasm", "type mismatch") })
	t.Run("assert_invalid:364", func(t *testing.T) { assertInvalidSpec(t, "store.39.wasm", "type mismatch") })
	t.Run("assert_invalid:380", func(t *testing.T) { assertInvalidSpec(t, "store.40.wasm", "type mismatch") })
	t.Run("assert_invalid:399", func(t *testing.T) { assertInvalidSpec(t, "store.41.wasm", "type mismatch") })
	t.Run("assert_invalid:400", func(t *testing.T) { assertInvalidSpec(t, "store.42.wasm", "type mismatch") })
	t.Run("assert_invalid:401", func(t *testing.T) { assertInvalidSpec(t, "store.43.wasm", "type mismatch") })
	t.Run("assert_invalid:402", func(t *testing.T) { assertInvalidSpec(t, "store.44.wasm", "type mismatch") })
	t.Run("assert_invalid:403", func(t *testing.T) { assertInvalidSpec(t, "store.45.wasm", "type mismatch") })
	t.Run("assert_invalid:404", func(t *testing.T) { assertInvalidSpec(t, "store.46.wasm", "type mismatch") })
	t.Run("assert_invalid:405", func(t *testing.T) { assertInvalidSpec(t, "store.47.wasm", "type mismatch") })
	t.Run("assert_invalid:406", func(t *testing.T) { assertInvalidSpec(t, "store.48.wasm", "type mismatch") })
	t.Run("assert_invalid:407", func(t *testing.T) { assertInvalidSpec(t, "store.49.wasm", "type mismatch") })
	t.Run("assert_invalid:409", func(t *testing.T) { assertInvalidSpec(t, "store.50.wasm", "type mismatch") })
	t.Run("assert_invalid:410", func(t *testing.T) { assertInvalidSpec(t, "store.51.wasm", "type mismatch") })
	t.Run("assert_invalid:411", func(t *testing.T) { assertInvalidSpec(t, "store.52.wasm", "type mismatch") })
	t.Run("assert_invalid:412", func(t *testing.T) { assertInvalidSpec(t, "store.53.wasm", "type mismatch") })
	t.Run("assert_invalid:413", func(t *testing.T) { assertInvalidSpec(t, "store.54.wasm", "type mismatch") })
	t.Run("assert_invalid:414", func(t *testing.T) { assertInvalidSpec(t, "store.55.wasm", "type mismatch") })
	t.Run("assert_invalid:415", func(t *testing.T) { assertInvalidSpec(t, "store.56.wasm", "type mismatch") })
	t.Run("assert_invalid:416", func(t *testing.T) { assertInvalidSpec(t, "store.57.wasm", "type mismatch") })
	t.Run("assert_invalid:417", func(t *testing.T) { assertInvalidSpec(t, "store.58.wasm", "type mismatch") })
}

func Test_switch(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "switch.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("stmt:120", func(t *testing.T) { x0.assertReturnInvoke(t, "stmt", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("stmt:121", func(t *testing.T) { x0.assertReturnInvoke(t, "stmt", []arg{{wa.I32, 1}}, arg{wa.I32, 4294967295}) })
	t.Run("stmt:122", func(t *testing.T) { x0.assertReturnInvoke(t, "stmt", []arg{{wa.I32, 2}}, arg{wa.I32, 4294967294}) })
	t.Run("stmt:123", func(t *testing.T) { x0.assertReturnInvoke(t, "stmt", []arg{{wa.I32, 3}}, arg{wa.I32, 4294967293}) })
	t.Run("stmt:124", func(t *testing.T) { x0.assertReturnInvoke(t, "stmt", []arg{{wa.I32, 4}}, arg{wa.I32, 100}) })
	t.Run("stmt:125", func(t *testing.T) { x0.assertReturnInvoke(t, "stmt", []arg{{wa.I32, 5}}, arg{wa.I32, 101}) })
	t.Run("stmt:126", func(t *testing.T) { x0.assertReturnInvoke(t, "stmt", []arg{{wa.I32, 6}}, arg{wa.I32, 102}) })
	t.Run("stmt:127", func(t *testing.T) { x0.assertReturnInvoke(t, "stmt", []arg{{wa.I32, 7}}, arg{wa.I32, 100}) })
	t.Run("stmt:128", func(t *testing.T) { x0.assertReturnInvoke(t, "stmt", []arg{{wa.I32, 4294967286}}, arg{wa.I32, 102}) })
	t.Run("expr:130", func(t *testing.T) { x0.assertReturnInvoke(t, "expr", []arg{{wa.I64, 0}}, arg{wa.I64, 0}) })
	t.Run("expr:131", func(t *testing.T) {
		x0.assertReturnInvoke(t, "expr", []arg{{wa.I64, 1}}, arg{wa.I64, 18446744073709551615})
	})
	t.Run("expr:132", func(t *testing.T) {
		x0.assertReturnInvoke(t, "expr", []arg{{wa.I64, 2}}, arg{wa.I64, 18446744073709551614})
	})
	t.Run("expr:133", func(t *testing.T) {
		x0.assertReturnInvoke(t, "expr", []arg{{wa.I64, 3}}, arg{wa.I64, 18446744073709551613})
	})
	t.Run("expr:134", func(t *testing.T) { x0.assertReturnInvoke(t, "expr", []arg{{wa.I64, 6}}, arg{wa.I64, 101}) })
	t.Run("expr:135", func(t *testing.T) {
		x0.assertReturnInvoke(t, "expr", []arg{{wa.I64, 7}}, arg{wa.I64, 18446744073709551611})
	})
	t.Run("expr:136", func(t *testing.T) {
		x0.assertReturnInvoke(t, "expr", []arg{{wa.I64, 18446744073709551606}}, arg{wa.I64, 100})
	})
	t.Run("arg:138", func(t *testing.T) { x0.assertReturnInvoke(t, "arg", []arg{{wa.I32, 0}}, arg{wa.I32, 110}) })
	t.Run("arg:139", func(t *testing.T) { x0.assertReturnInvoke(t, "arg", []arg{{wa.I32, 1}}, arg{wa.I32, 12}) })
	t.Run("arg:140", func(t *testing.T) { x0.assertReturnInvoke(t, "arg", []arg{{wa.I32, 2}}, arg{wa.I32, 4}) })
	t.Run("arg:141", func(t *testing.T) { x0.assertReturnInvoke(t, "arg", []arg{{wa.I32, 3}}, arg{wa.I32, 1116}) })
	t.Run("arg:142", func(t *testing.T) { x0.assertReturnInvoke(t, "arg", []arg{{wa.I32, 4}}, arg{wa.I32, 118}) })
	t.Run("arg:143", func(t *testing.T) { x0.assertReturnInvoke(t, "arg", []arg{{wa.I32, 5}}, arg{wa.I32, 20}) })
	t.Run("arg:144", func(t *testing.T) { x0.assertReturnInvoke(t, "arg", []arg{{wa.I32, 6}}, arg{wa.I32, 12}) })
	t.Run("arg:145", func(t *testing.T) { x0.assertReturnInvoke(t, "arg", []arg{{wa.I32, 7}}, arg{wa.I32, 1124}) })
	t.Run("arg:146", func(t *testing.T) { x0.assertReturnInvoke(t, "arg", []arg{{wa.I32, 8}}, arg{wa.I32, 126}) })
	t.Run("corner:148", func(t *testing.T) { x0.assertReturnInvoke(t, "corner", nil, arg{wa.I32, 1}) })
	t.Run("assert_invalid:150", func(t *testing.T) { assertInvalidSpec(t, "switch.1.wasm", "unknown label") })
}

func Test_table_sub(t *testing.T) {
	t.Run("assert_invalid:2", func(t *testing.T) { assertInvalidSpec(t, "table-sub.0.wasm", "type mismatch") })
	t.Run("assert_invalid:13", func(t *testing.T) { assertInvalidSpec(t, "table-sub.1.wasm", "type mismatch") })
}

func Test_table(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "table.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	x1 := instantiateSpecTest(t, "1", "table.1.wasm")
	t.Cleanup(func() { x1.close(t) })
	x2 := instantiateSpecTest(t, "2", "table.2.wasm")
	t.Cleanup(func() { x2.close(t) })
	x3 := instantiateSpecTest(t, "3", "table.3.wasm")
	t.Cleanup(func() { x3.close(t) })
	x4 := instantiateSpecTest(t, "4", "table.4.wasm")
	t.Cleanup(func() { x4.close(t) })
	x5 := instantiateSpecTest(t, "5", "table.5.wasm")
	t.Cleanup(func() { x5.close(t) })
	x6 := instantiateSpecTest(t, "6", "table.6.wasm")
	t.Cleanup(func() { x6.close(t) })
	x7 := instantiateSpecTest(t, "7", "table.7.wasm")
	t.Cleanup(func() { x7.close(t) })
	x8 := instantiateSpecTest(t, "8", "table.8.wasm")
	t.Cleanup(func() { x8.close(t) })
	t.Run("assert_invalid:14", func(t *testing.T) { assertInvalidSpec(t, "table.9.wasm", "unknown table") })
	t.Run("assert_invalid:15", func(t *testing.T) { assertInvalidSpec(t, "table.10.wasm", "unknown table") })
	t.Run("assert_invalid:19", func(t *testing.T) {
		assertInvalidSpec(t, "table.11.wasm", "size minimum must not be greater than maximum")
	})
	t.Run("assert_invalid:23", func(t *testing.T) {
		assertInvalidSpec(t, "table.12.wasm", "size minimum must not be greater than maximum")
	})
	t.Run("assert_malformed:28", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:32", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:36", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:43", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:47", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:51", func(t *testing.T) { t.Skip("text format not supported") })
}

func Test_table_copy(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "table_copy.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	x0.register(t)
	x1 := instantiateSpecTest(t, "1", "table_copy.1.wasm")
	t.Cleanup(func() { x1.close(t) })
	t.Run("test:45", func(t *testing.T) { x1.invoke(t, "test", nil) })
	t.Run("check_t0:46", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:47", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:48", func(t *testing.T) { x1.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 2}}, arg{wa.I32, 3}) })
	t.Run("check_t0:49", func(t *testing.T) { x1.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t0:50", func(t *testing.T) { x1.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 4}}, arg{wa.I32, 4}) })
	t.Run("check_t0:51", func(t *testing.T) { x1.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t0:52", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:53", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:54", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:55", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:56", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:57", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:58", func(t *testing.T) { x1.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 12}}, arg{wa.I32, 7}) })
	t.Run("check_t0:59", func(t *testing.T) { x1.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 13}}, arg{wa.I32, 5}) })
	t.Run("check_t0:60", func(t *testing.T) { x1.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 14}}, arg{wa.I32, 2}) })
	t.Run("check_t0:61", func(t *testing.T) { x1.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 15}}, arg{wa.I32, 3}) })
	t.Run("check_t0:62", func(t *testing.T) { x1.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 16}}, arg{wa.I32, 6}) })
	t.Run("check_t0:63", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:64", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:65", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:66", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:67", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:68", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:69", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:70", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:71", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:72", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:73", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:74", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:75", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:76", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:77", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:78", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:79", func(t *testing.T) { x1.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t1:80", func(t *testing.T) { x1.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 4}}, arg{wa.I32, 3}) })
	t.Run("check_t1:81", func(t *testing.T) { x1.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t1:82", func(t *testing.T) { x1.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 6}}, arg{wa.I32, 4}) })
	t.Run("check_t1:83", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:84", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:85", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:86", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:87", func(t *testing.T) { x1.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 11}}, arg{wa.I32, 6}) })
	t.Run("check_t1:88", func(t *testing.T) { x1.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 12}}, arg{wa.I32, 3}) })
	t.Run("check_t1:89", func(t *testing.T) { x1.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 13}}, arg{wa.I32, 2}) })
	t.Run("check_t1:90", func(t *testing.T) { x1.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 14}}, arg{wa.I32, 5}) })
	t.Run("check_t1:91", func(t *testing.T) { x1.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 15}}, arg{wa.I32, 7}) })
	t.Run("check_t1:92", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:93", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:94", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:95", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:96", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:97", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:98", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:99", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:100", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:101", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:102", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:103", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:104", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:105", func(t *testing.T) { t.Skip("linking not supported") })
	x2 := instantiateSpecTest(t, "2", "table_copy.2.wasm")
	t.Cleanup(func() { x2.close(t) })
	t.Run("test:137", func(t *testing.T) { x2.invoke(t, "test", nil) })
	t.Run("check_t0:138", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:139", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:140", func(t *testing.T) { x2.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 2}}, arg{wa.I32, 3}) })
	t.Run("check_t0:141", func(t *testing.T) { x2.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t0:142", func(t *testing.T) { x2.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 4}}, arg{wa.I32, 4}) })
	t.Run("check_t0:143", func(t *testing.T) { x2.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t0:144", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:145", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:146", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:147", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:148", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:149", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:150", func(t *testing.T) { x2.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 12}}, arg{wa.I32, 7}) })
	t.Run("check_t0:151", func(t *testing.T) { x2.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 13}}, arg{wa.I32, 3}) })
	t.Run("check_t0:152", func(t *testing.T) { x2.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 14}}, arg{wa.I32, 1}) })
	t.Run("check_t0:153", func(t *testing.T) { x2.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 15}}, arg{wa.I32, 4}) })
	t.Run("check_t0:154", func(t *testing.T) { x2.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 16}}, arg{wa.I32, 6}) })
	t.Run("check_t0:155", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:156", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:157", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:158", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:159", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:160", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:161", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:162", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:163", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:164", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:165", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:166", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:167", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:168", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:169", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:170", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:171", func(t *testing.T) { x2.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t1:172", func(t *testing.T) { x2.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 4}}, arg{wa.I32, 3}) })
	t.Run("check_t1:173", func(t *testing.T) { x2.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t1:174", func(t *testing.T) { x2.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 6}}, arg{wa.I32, 4}) })
	t.Run("check_t1:175", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:176", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:177", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:178", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:179", func(t *testing.T) { x2.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 11}}, arg{wa.I32, 6}) })
	t.Run("check_t1:180", func(t *testing.T) { x2.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 12}}, arg{wa.I32, 3}) })
	t.Run("check_t1:181", func(t *testing.T) { x2.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 13}}, arg{wa.I32, 2}) })
	t.Run("check_t1:182", func(t *testing.T) { x2.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 14}}, arg{wa.I32, 5}) })
	t.Run("check_t1:183", func(t *testing.T) { x2.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 15}}, arg{wa.I32, 7}) })
	t.Run("check_t1:184", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:185", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:186", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:187", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:188", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:189", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:190", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:191", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:192", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:193", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:194", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:195", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:196", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:197", func(t *testing.T) { t.Skip("linking not supported") })
	x3 := instantiateSpecTest(t, "3", "table_copy.3.wasm")
	t.Cleanup(func() { x3.close(t) })
	t.Run("test:229", func(t *testing.T) { x3.invoke(t, "test", nil) })
	t.Run("check_t0:230", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:231", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:232", func(t *testing.T) { x3.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 2}}, arg{wa.I32, 3}) })
	t.Run("check_t0:233", func(t *testing.T) { x3.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t0:234", func(t *testing.T) { x3.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 4}}, arg{wa.I32, 4}) })
	t.Run("check_t0:235", func(t *testing.T) { x3.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t0:236", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:237", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:238", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:239", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:240", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:241", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:242", func(t *testing.T) { x3.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 12}}, arg{wa.I32, 7}) })
	t.Run("check_t0:243", func(t *testing.T) { x3.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 13}}, arg{wa.I32, 5}) })
	t.Run("check_t0:244", func(t *testing.T) { x3.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 14}}, arg{wa.I32, 2}) })
	t.Run("check_t0:245", func(t *testing.T) { x3.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 15}}, arg{wa.I32, 3}) })
	t.Run("check_t0:246", func(t *testing.T) { x3.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 16}}, arg{wa.I32, 6}) })
	t.Run("check_t0:247", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:248", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:249", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:250", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:251", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:252", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:253", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:254", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:255", func(t *testing.T) { x3.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 25}}, arg{wa.I32, 3}) })
	t.Run("check_t0:256", func(t *testing.T) { x3.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 26}}, arg{wa.I32, 6}) })
	t.Run("check_t0:257", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:258", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:259", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:260", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:261", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:262", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:263", func(t *testing.T) { x3.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t1:264", func(t *testing.T) { x3.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 4}}, arg{wa.I32, 3}) })
	t.Run("check_t1:265", func(t *testing.T) { x3.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t1:266", func(t *testing.T) { x3.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 6}}, arg{wa.I32, 4}) })
	t.Run("check_t1:267", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:268", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:269", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:270", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:271", func(t *testing.T) { x3.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 11}}, arg{wa.I32, 6}) })
	t.Run("check_t1:272", func(t *testing.T) { x3.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 12}}, arg{wa.I32, 3}) })
	t.Run("check_t1:273", func(t *testing.T) { x3.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 13}}, arg{wa.I32, 2}) })
	t.Run("check_t1:274", func(t *testing.T) { x3.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 14}}, arg{wa.I32, 5}) })
	t.Run("check_t1:275", func(t *testing.T) { x3.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 15}}, arg{wa.I32, 7}) })
	t.Run("check_t1:276", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:277", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:278", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:279", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:280", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:281", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:282", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:283", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:284", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:285", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:286", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:287", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:288", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:289", func(t *testing.T) { t.Skip("linking not supported") })
	x4 := instantiateSpecTest(t, "4", "table_copy.4.wasm")
	t.Cleanup(func() { x4.close(t) })
	t.Run("test:321", func(t *testing.T) { x4.invoke(t, "test", nil) })
	t.Run("check_t0:322", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:323", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:324", func(t *testing.T) { x4.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 2}}, arg{wa.I32, 3}) })
	t.Run("check_t0:325", func(t *testing.T) { x4.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t0:326", func(t *testing.T) { x4.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 4}}, arg{wa.I32, 4}) })
	t.Run("check_t0:327", func(t *testing.T) { x4.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t0:328", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:329", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:330", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:331", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:332", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:333", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:334", func(t *testing.T) { x4.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 12}}, arg{wa.I32, 7}) })
	t.Run("check_t0:335", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:336", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:337", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:338", func(t *testing.T) { x4.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 16}}, arg{wa.I32, 6}) })
	t.Run("check_t0:339", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:340", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:341", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:342", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:343", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:344", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:345", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:346", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:347", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:348", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:349", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:350", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:351", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:352", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:353", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:354", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:355", func(t *testing.T) { x4.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t1:356", func(t *testing.T) { x4.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 4}}, arg{wa.I32, 3}) })
	t.Run("check_t1:357", func(t *testing.T) { x4.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t1:358", func(t *testing.T) { x4.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 6}}, arg{wa.I32, 4}) })
	t.Run("check_t1:359", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:360", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:361", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:362", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:363", func(t *testing.T) { x4.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 11}}, arg{wa.I32, 6}) })
	t.Run("check_t1:364", func(t *testing.T) { x4.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 12}}, arg{wa.I32, 3}) })
	t.Run("check_t1:365", func(t *testing.T) { x4.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 13}}, arg{wa.I32, 2}) })
	t.Run("check_t1:366", func(t *testing.T) { x4.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 14}}, arg{wa.I32, 5}) })
	t.Run("check_t1:367", func(t *testing.T) { x4.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 15}}, arg{wa.I32, 7}) })
	t.Run("check_t1:368", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:369", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:370", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:371", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:372", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:373", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:374", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:375", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:376", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:377", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:378", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:379", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:380", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:381", func(t *testing.T) { t.Skip("linking not supported") })
	x5 := instantiateSpecTest(t, "5", "table_copy.5.wasm")
	t.Cleanup(func() { x5.close(t) })
	t.Run("test:413", func(t *testing.T) { x5.invoke(t, "test", nil) })
	t.Run("check_t0:414", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:415", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:416", func(t *testing.T) { x5.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 2}}, arg{wa.I32, 3}) })
	t.Run("check_t0:417", func(t *testing.T) { x5.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t0:418", func(t *testing.T) { x5.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 4}}, arg{wa.I32, 4}) })
	t.Run("check_t0:419", func(t *testing.T) { x5.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t0:420", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:421", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:422", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:423", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:424", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:425", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:426", func(t *testing.T) { x5.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 12}}, arg{wa.I32, 7}) })
	t.Run("check_t0:427", func(t *testing.T) { x5.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 13}}, arg{wa.I32, 5}) })
	t.Run("check_t0:428", func(t *testing.T) { x5.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 14}}, arg{wa.I32, 2}) })
	t.Run("check_t0:429", func(t *testing.T) { x5.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 15}}, arg{wa.I32, 3}) })
	t.Run("check_t0:430", func(t *testing.T) { x5.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 16}}, arg{wa.I32, 6}) })
	t.Run("check_t0:431", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:432", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:433", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:434", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:435", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:436", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:437", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:438", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:439", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:440", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:441", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:442", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:443", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:444", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:445", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:446", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:447", func(t *testing.T) { x5.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t1:448", func(t *testing.T) { x5.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 4}}, arg{wa.I32, 3}) })
	t.Run("check_t1:449", func(t *testing.T) { x5.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t1:450", func(t *testing.T) { x5.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 6}}, arg{wa.I32, 4}) })
	t.Run("check_t1:451", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:452", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:453", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:454", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:455", func(t *testing.T) { x5.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 11}}, arg{wa.I32, 6}) })
	t.Run("check_t1:456", func(t *testing.T) { x5.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 12}}, arg{wa.I32, 3}) })
	t.Run("check_t1:457", func(t *testing.T) { x5.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 13}}, arg{wa.I32, 2}) })
	t.Run("check_t1:458", func(t *testing.T) { x5.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 14}}, arg{wa.I32, 5}) })
	t.Run("check_t1:459", func(t *testing.T) { x5.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 15}}, arg{wa.I32, 7}) })
	t.Run("check_t1:460", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:461", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:462", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:463", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:464", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:465", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:466", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:467", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:468", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:469", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:470", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:471", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:472", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:473", func(t *testing.T) { t.Skip("linking not supported") })
	x6 := instantiateSpecTest(t, "6", "table_copy.6.wasm")
	t.Cleanup(func() { x6.close(t) })
	t.Run("test:505", func(t *testing.T) { x6.invoke(t, "test", nil) })
	t.Run("check_t0:506", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:507", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:508", func(t *testing.T) { x6.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 2}}, arg{wa.I32, 3}) })
	t.Run("check_t0:509", func(t *testing.T) { x6.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t0:510", func(t *testing.T) { x6.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 4}}, arg{wa.I32, 4}) })
	t.Run("check_t0:511", func(t *testing.T) { x6.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t0:512", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:513", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:514", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:515", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:516", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:517", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:518", func(t *testing.T) { x6.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 12}}, arg{wa.I32, 7}) })
	t.Run("check_t0:519", func(t *testing.T) { x6.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 13}}, arg{wa.I32, 5}) })
	t.Run("check_t0:520", func(t *testing.T) { x6.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 14}}, arg{wa.I32, 2}) })
	t.Run("check_t0:521", func(t *testing.T) { x6.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 15}}, arg{wa.I32, 3}) })
	t.Run("check_t0:522", func(t *testing.T) { x6.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 16}}, arg{wa.I32, 6}) })
	t.Run("check_t0:523", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:524", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:525", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:526", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:527", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:528", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:529", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:530", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:531", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:532", func(t *testing.T) { x6.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 26}}, arg{wa.I32, 3}) })
	t.Run("check_t0:533", func(t *testing.T) { x6.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 27}}, arg{wa.I32, 1}) })
	t.Run("check_t0:534", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:535", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:536", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:537", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:538", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:539", func(t *testing.T) { x6.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t1:540", func(t *testing.T) { x6.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 4}}, arg{wa.I32, 3}) })
	t.Run("check_t1:541", func(t *testing.T) { x6.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t1:542", func(t *testing.T) { x6.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 6}}, arg{wa.I32, 4}) })
	t.Run("check_t1:543", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:544", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:545", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:546", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:547", func(t *testing.T) { x6.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 11}}, arg{wa.I32, 6}) })
	t.Run("check_t1:548", func(t *testing.T) { x6.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 12}}, arg{wa.I32, 3}) })
	t.Run("check_t1:549", func(t *testing.T) { x6.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 13}}, arg{wa.I32, 2}) })
	t.Run("check_t1:550", func(t *testing.T) { x6.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 14}}, arg{wa.I32, 5}) })
	t.Run("check_t1:551", func(t *testing.T) { x6.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 15}}, arg{wa.I32, 7}) })
	t.Run("check_t1:552", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:553", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:554", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:555", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:556", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:557", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:558", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:559", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:560", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:561", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:562", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:563", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:564", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:565", func(t *testing.T) { t.Skip("linking not supported") })
	x7 := instantiateSpecTest(t, "7", "table_copy.7.wasm")
	t.Cleanup(func() { x7.close(t) })
	t.Run("test:597", func(t *testing.T) { x7.invoke(t, "test", nil) })
	t.Run("check_t0:598", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:599", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:600", func(t *testing.T) { x7.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 2}}, arg{wa.I32, 3}) })
	t.Run("check_t0:601", func(t *testing.T) { x7.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t0:602", func(t *testing.T) { x7.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 4}}, arg{wa.I32, 4}) })
	t.Run("check_t0:603", func(t *testing.T) { x7.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t0:604", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:605", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:606", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:607", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:608", func(t *testing.T) { x7.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 10}}, arg{wa.I32, 7}) })
	t.Run("check_t0:609", func(t *testing.T) { x7.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 11}}, arg{wa.I32, 5}) })
	t.Run("check_t0:610", func(t *testing.T) { x7.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 12}}, arg{wa.I32, 2}) })
	t.Run("check_t0:611", func(t *testing.T) { x7.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 13}}, arg{wa.I32, 3}) })
	t.Run("check_t0:612", func(t *testing.T) { x7.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 14}}, arg{wa.I32, 6}) })
	t.Run("check_t0:613", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:614", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:615", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:616", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:617", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:618", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:619", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:620", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:621", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:622", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:623", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:624", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:625", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:626", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:627", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:628", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:629", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:630", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:631", func(t *testing.T) { x7.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t1:632", func(t *testing.T) { x7.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 4}}, arg{wa.I32, 3}) })
	t.Run("check_t1:633", func(t *testing.T) { x7.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t1:634", func(t *testing.T) { x7.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 6}}, arg{wa.I32, 4}) })
	t.Run("check_t1:635", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:636", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:637", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:638", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:639", func(t *testing.T) { x7.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 11}}, arg{wa.I32, 6}) })
	t.Run("check_t1:640", func(t *testing.T) { x7.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 12}}, arg{wa.I32, 3}) })
	t.Run("check_t1:641", func(t *testing.T) { x7.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 13}}, arg{wa.I32, 2}) })
	t.Run("check_t1:642", func(t *testing.T) { x7.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 14}}, arg{wa.I32, 5}) })
	t.Run("check_t1:643", func(t *testing.T) { x7.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 15}}, arg{wa.I32, 7}) })
	t.Run("check_t1:644", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:645", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:646", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:647", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:648", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:649", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:650", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:651", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:652", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:653", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:654", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:655", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:656", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:657", func(t *testing.T) { t.Skip("linking not supported") })
	x8 := instantiateSpecTest(t, "8", "table_copy.8.wasm")
	t.Cleanup(func() { x8.close(t) })
	t.Run("test:689", func(t *testing.T) { x8.invoke(t, "test", nil) })
	t.Run("check_t0:690", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:691", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:692", func(t *testing.T) { x8.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 2}}, arg{wa.I32, 3}) })
	t.Run("check_t0:693", func(t *testing.T) { x8.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t0:694", func(t *testing.T) { x8.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 4}}, arg{wa.I32, 4}) })
	t.Run("check_t0:695", func(t *testing.T) { x8.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t0:696", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:697", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:698", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:699", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:700", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:701", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:702", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:703", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:704", func(t *testing.T) { x8.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 14}}, arg{wa.I32, 7}) })
	t.Run("check_t0:705", func(t *testing.T) { x8.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 15}}, arg{wa.I32, 5}) })
	t.Run("check_t0:706", func(t *testing.T) { x8.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 16}}, arg{wa.I32, 2}) })
	t.Run("check_t0:707", func(t *testing.T) { x8.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 17}}, arg{wa.I32, 3}) })
	t.Run("check_t0:708", func(t *testing.T) { x8.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 18}}, arg{wa.I32, 6}) })
	t.Run("check_t0:709", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:710", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:711", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:712", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:713", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:714", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:715", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:716", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:717", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:718", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:719", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:720", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:721", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:722", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:723", func(t *testing.T) { x8.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t1:724", func(t *testing.T) { x8.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 4}}, arg{wa.I32, 3}) })
	t.Run("check_t1:725", func(t *testing.T) { x8.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t1:726", func(t *testing.T) { x8.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 6}}, arg{wa.I32, 4}) })
	t.Run("check_t1:727", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:728", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:729", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:730", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:731", func(t *testing.T) { x8.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 11}}, arg{wa.I32, 6}) })
	t.Run("check_t1:732", func(t *testing.T) { x8.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 12}}, arg{wa.I32, 3}) })
	t.Run("check_t1:733", func(t *testing.T) { x8.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 13}}, arg{wa.I32, 2}) })
	t.Run("check_t1:734", func(t *testing.T) { x8.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 14}}, arg{wa.I32, 5}) })
	t.Run("check_t1:735", func(t *testing.T) { x8.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 15}}, arg{wa.I32, 7}) })
	t.Run("check_t1:736", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:737", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:738", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:739", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:740", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:741", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:742", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:743", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:744", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:745", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:746", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:747", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:748", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:749", func(t *testing.T) { t.Skip("linking not supported") })
	x9 := instantiateSpecTest(t, "9", "table_copy.9.wasm")
	t.Cleanup(func() { x9.close(t) })
	t.Run("test:781", func(t *testing.T) { x9.invoke(t, "test", nil) })
	t.Run("check_t0:782", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:783", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:784", func(t *testing.T) { x9.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 2}}, arg{wa.I32, 3}) })
	t.Run("check_t0:785", func(t *testing.T) { x9.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t0:786", func(t *testing.T) { x9.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 4}}, arg{wa.I32, 4}) })
	t.Run("check_t0:787", func(t *testing.T) { x9.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t0:788", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:789", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:790", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:791", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:792", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:793", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:794", func(t *testing.T) { x9.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 12}}, arg{wa.I32, 7}) })
	t.Run("check_t0:795", func(t *testing.T) { x9.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 13}}, arg{wa.I32, 5}) })
	t.Run("check_t0:796", func(t *testing.T) { x9.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 14}}, arg{wa.I32, 2}) })
	t.Run("check_t0:797", func(t *testing.T) { x9.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 15}}, arg{wa.I32, 3}) })
	t.Run("check_t0:798", func(t *testing.T) { x9.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 16}}, arg{wa.I32, 6}) })
	t.Run("check_t0:799", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:800", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:801", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:802", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:803", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:804", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:805", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:806", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:807", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:808", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:809", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:810", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:811", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:812", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:813", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:814", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:815", func(t *testing.T) { x9.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t1:816", func(t *testing.T) { x9.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 4}}, arg{wa.I32, 3}) })
	t.Run("check_t1:817", func(t *testing.T) { x9.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t1:818", func(t *testing.T) { x9.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 6}}, arg{wa.I32, 4}) })
	t.Run("check_t1:819", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:820", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:821", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:822", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:823", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:824", func(t *testing.T) { x9.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 12}}, arg{wa.I32, 3}) })
	t.Run("check_t1:825", func(t *testing.T) { x9.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 13}}, arg{wa.I32, 1}) })
	t.Run("check_t1:826", func(t *testing.T) { x9.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 14}}, arg{wa.I32, 4}) })
	t.Run("check_t1:827", func(t *testing.T) { x9.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 15}}, arg{wa.I32, 1}) })
	t.Run("check_t1:828", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:829", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:830", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:831", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:832", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:833", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:834", func(t *testing.T) { x9.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 22}}, arg{wa.I32, 7}) })
	t.Run("check_t1:835", func(t *testing.T) { x9.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 23}}, arg{wa.I32, 5}) })
	t.Run("check_t1:836", func(t *testing.T) { x9.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 24}}, arg{wa.I32, 2}) })
	t.Run("check_t1:837", func(t *testing.T) { x9.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 25}}, arg{wa.I32, 3}) })
	t.Run("check_t1:838", func(t *testing.T) { x9.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 26}}, arg{wa.I32, 6}) })
	t.Run("check_t1:839", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:840", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:841", func(t *testing.T) { t.Skip("linking not supported") })
	x10 := instantiateSpecTest(t, "10", "table_copy.10.wasm")
	t.Cleanup(func() { x10.close(t) })
	t.Run("test:873", func(t *testing.T) { x10.invoke(t, "test", nil) })
	t.Run("check_t0:874", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:875", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:876", func(t *testing.T) { x10.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 2}}, arg{wa.I32, 3}) })
	t.Run("check_t0:877", func(t *testing.T) { x10.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t0:878", func(t *testing.T) { x10.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 4}}, arg{wa.I32, 4}) })
	t.Run("check_t0:879", func(t *testing.T) { x10.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t0:880", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:881", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:882", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:883", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:884", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:885", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:886", func(t *testing.T) { x10.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 12}}, arg{wa.I32, 7}) })
	t.Run("check_t0:887", func(t *testing.T) { x10.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 13}}, arg{wa.I32, 5}) })
	t.Run("check_t0:888", func(t *testing.T) { x10.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 14}}, arg{wa.I32, 2}) })
	t.Run("check_t0:889", func(t *testing.T) { x10.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 15}}, arg{wa.I32, 3}) })
	t.Run("check_t0:890", func(t *testing.T) { x10.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 16}}, arg{wa.I32, 6}) })
	t.Run("check_t0:891", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:892", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:893", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:894", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:895", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:896", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:897", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:898", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:899", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:900", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:901", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:902", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:903", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:904", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:905", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:906", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:907", func(t *testing.T) { x10.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t1:908", func(t *testing.T) { x10.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 4}}, arg{wa.I32, 3}) })
	t.Run("check_t1:909", func(t *testing.T) { x10.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t1:910", func(t *testing.T) { x10.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 6}}, arg{wa.I32, 4}) })
	t.Run("check_t1:911", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:912", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:913", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:914", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:915", func(t *testing.T) { x10.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 11}}, arg{wa.I32, 6}) })
	t.Run("check_t1:916", func(t *testing.T) { x10.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 12}}, arg{wa.I32, 3}) })
	t.Run("check_t1:917", func(t *testing.T) { x10.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 13}}, arg{wa.I32, 2}) })
	t.Run("check_t1:918", func(t *testing.T) { x10.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 14}}, arg{wa.I32, 5}) })
	t.Run("check_t1:919", func(t *testing.T) { x10.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 15}}, arg{wa.I32, 7}) })
	t.Run("check_t1:920", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:921", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:922", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:923", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:924", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:925", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:926", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:927", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:928", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:929", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:930", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:931", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:932", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:933", func(t *testing.T) { t.Skip("linking not supported") })
	x11 := instantiateSpecTest(t, "11", "table_copy.11.wasm")
	t.Cleanup(func() { x11.close(t) })
	t.Run("test:965", func(t *testing.T) { x11.invoke(t, "test", nil) })
	t.Run("check_t0:966", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:967", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:968", func(t *testing.T) { x11.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 2}}, arg{wa.I32, 3}) })
	t.Run("check_t0:969", func(t *testing.T) { x11.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t0:970", func(t *testing.T) { x11.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 4}}, arg{wa.I32, 4}) })
	t.Run("check_t0:971", func(t *testing.T) { x11.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t0:972", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:973", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:974", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:975", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:976", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:977", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:978", func(t *testing.T) { x11.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 12}}, arg{wa.I32, 7}) })
	t.Run("check_t0:979", func(t *testing.T) { x11.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 13}}, arg{wa.I32, 3}) })
	t.Run("check_t0:980", func(t *testing.T) { x11.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 14}}, arg{wa.I32, 1}) })
	t.Run("check_t0:981", func(t *testing.T) { x11.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 15}}, arg{wa.I32, 4}) })
	t.Run("check_t0:982", func(t *testing.T) { x11.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 16}}, arg{wa.I32, 6}) })
	t.Run("check_t0:983", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:984", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:985", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:986", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:987", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:988", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:989", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:990", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:991", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:992", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:993", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:994", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:995", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:996", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:997", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:998", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:999", func(t *testing.T) { x11.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t1:1000", func(t *testing.T) { x11.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 4}}, arg{wa.I32, 3}) })
	t.Run("check_t1:1001", func(t *testing.T) { x11.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t1:1002", func(t *testing.T) { x11.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 6}}, arg{wa.I32, 4}) })
	t.Run("check_t1:1003", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1004", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1005", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1006", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1007", func(t *testing.T) { x11.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 11}}, arg{wa.I32, 6}) })
	t.Run("check_t1:1008", func(t *testing.T) { x11.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 12}}, arg{wa.I32, 3}) })
	t.Run("check_t1:1009", func(t *testing.T) { x11.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 13}}, arg{wa.I32, 2}) })
	t.Run("check_t1:1010", func(t *testing.T) { x11.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 14}}, arg{wa.I32, 5}) })
	t.Run("check_t1:1011", func(t *testing.T) { x11.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 15}}, arg{wa.I32, 7}) })
	t.Run("check_t1:1012", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1013", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1014", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1015", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1016", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1017", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1018", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1019", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1020", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1021", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1022", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1023", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1024", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1025", func(t *testing.T) { t.Skip("linking not supported") })
	x12 := instantiateSpecTest(t, "12", "table_copy.12.wasm")
	t.Cleanup(func() { x12.close(t) })
	t.Run("test:1057", func(t *testing.T) { x12.invoke(t, "test", nil) })
	t.Run("check_t0:1058", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1059", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1060", func(t *testing.T) { x12.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 2}}, arg{wa.I32, 3}) })
	t.Run("check_t0:1061", func(t *testing.T) { x12.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t0:1062", func(t *testing.T) { x12.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 4}}, arg{wa.I32, 4}) })
	t.Run("check_t0:1063", func(t *testing.T) { x12.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t0:1064", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1065", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1066", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1067", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1068", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1069", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1070", func(t *testing.T) { x12.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 12}}, arg{wa.I32, 7}) })
	t.Run("check_t0:1071", func(t *testing.T) { x12.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 13}}, arg{wa.I32, 5}) })
	t.Run("check_t0:1072", func(t *testing.T) { x12.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 14}}, arg{wa.I32, 2}) })
	t.Run("check_t0:1073", func(t *testing.T) { x12.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 15}}, arg{wa.I32, 3}) })
	t.Run("check_t0:1074", func(t *testing.T) { x12.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 16}}, arg{wa.I32, 6}) })
	t.Run("check_t0:1075", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1076", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1077", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1078", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1079", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1080", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1081", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1082", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1083", func(t *testing.T) { x12.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 25}}, arg{wa.I32, 3}) })
	t.Run("check_t0:1084", func(t *testing.T) { x12.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 26}}, arg{wa.I32, 6}) })
	t.Run("check_t0:1085", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1086", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1087", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1088", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1089", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1090", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1091", func(t *testing.T) { x12.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t1:1092", func(t *testing.T) { x12.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 4}}, arg{wa.I32, 3}) })
	t.Run("check_t1:1093", func(t *testing.T) { x12.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t1:1094", func(t *testing.T) { x12.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 6}}, arg{wa.I32, 4}) })
	t.Run("check_t1:1095", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1096", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1097", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1098", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1099", func(t *testing.T) { x12.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 11}}, arg{wa.I32, 6}) })
	t.Run("check_t1:1100", func(t *testing.T) { x12.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 12}}, arg{wa.I32, 3}) })
	t.Run("check_t1:1101", func(t *testing.T) { x12.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 13}}, arg{wa.I32, 2}) })
	t.Run("check_t1:1102", func(t *testing.T) { x12.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 14}}, arg{wa.I32, 5}) })
	t.Run("check_t1:1103", func(t *testing.T) { x12.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 15}}, arg{wa.I32, 7}) })
	t.Run("check_t1:1104", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1105", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1106", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1107", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1108", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1109", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1110", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1111", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1112", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1113", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1114", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1115", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1116", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1117", func(t *testing.T) { t.Skip("linking not supported") })
	x13 := instantiateSpecTest(t, "13", "table_copy.13.wasm")
	t.Cleanup(func() { x13.close(t) })
	t.Run("test:1149", func(t *testing.T) { x13.invoke(t, "test", nil) })
	t.Run("check_t0:1150", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1151", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1152", func(t *testing.T) { x13.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 2}}, arg{wa.I32, 3}) })
	t.Run("check_t0:1153", func(t *testing.T) { x13.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t0:1154", func(t *testing.T) { x13.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 4}}, arg{wa.I32, 4}) })
	t.Run("check_t0:1155", func(t *testing.T) { x13.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t0:1156", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1157", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1158", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1159", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1160", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1161", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1162", func(t *testing.T) { x13.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 12}}, arg{wa.I32, 7}) })
	t.Run("check_t0:1163", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1164", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1165", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1166", func(t *testing.T) { x13.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 16}}, arg{wa.I32, 6}) })
	t.Run("check_t0:1167", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1168", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1169", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1170", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1171", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1172", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1173", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1174", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1175", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1176", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1177", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1178", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1179", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1180", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1181", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1182", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1183", func(t *testing.T) { x13.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t1:1184", func(t *testing.T) { x13.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 4}}, arg{wa.I32, 3}) })
	t.Run("check_t1:1185", func(t *testing.T) { x13.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t1:1186", func(t *testing.T) { x13.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 6}}, arg{wa.I32, 4}) })
	t.Run("check_t1:1187", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1188", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1189", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1190", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1191", func(t *testing.T) { x13.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 11}}, arg{wa.I32, 6}) })
	t.Run("check_t1:1192", func(t *testing.T) { x13.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 12}}, arg{wa.I32, 3}) })
	t.Run("check_t1:1193", func(t *testing.T) { x13.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 13}}, arg{wa.I32, 2}) })
	t.Run("check_t1:1194", func(t *testing.T) { x13.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 14}}, arg{wa.I32, 5}) })
	t.Run("check_t1:1195", func(t *testing.T) { x13.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 15}}, arg{wa.I32, 7}) })
	t.Run("check_t1:1196", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1197", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1198", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1199", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1200", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1201", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1202", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1203", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1204", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1205", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1206", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1207", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1208", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1209", func(t *testing.T) { t.Skip("linking not supported") })
	x14 := instantiateSpecTest(t, "14", "table_copy.14.wasm")
	t.Cleanup(func() { x14.close(t) })
	t.Run("test:1241", func(t *testing.T) { x14.invoke(t, "test", nil) })
	t.Run("check_t0:1242", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1243", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1244", func(t *testing.T) { x14.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 2}}, arg{wa.I32, 3}) })
	t.Run("check_t0:1245", func(t *testing.T) { x14.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t0:1246", func(t *testing.T) { x14.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 4}}, arg{wa.I32, 4}) })
	t.Run("check_t0:1247", func(t *testing.T) { x14.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t0:1248", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1249", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1250", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1251", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1252", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1253", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1254", func(t *testing.T) { x14.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 12}}, arg{wa.I32, 7}) })
	t.Run("check_t0:1255", func(t *testing.T) { x14.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 13}}, arg{wa.I32, 5}) })
	t.Run("check_t0:1256", func(t *testing.T) { x14.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 14}}, arg{wa.I32, 2}) })
	t.Run("check_t0:1257", func(t *testing.T) { x14.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 15}}, arg{wa.I32, 3}) })
	t.Run("check_t0:1258", func(t *testing.T) { x14.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 16}}, arg{wa.I32, 6}) })
	t.Run("check_t0:1259", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1260", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1261", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1262", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1263", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1264", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1265", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1266", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1267", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1268", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1269", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1270", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1271", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1272", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1273", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1274", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1275", func(t *testing.T) { x14.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t1:1276", func(t *testing.T) { x14.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 4}}, arg{wa.I32, 3}) })
	t.Run("check_t1:1277", func(t *testing.T) { x14.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t1:1278", func(t *testing.T) { x14.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 6}}, arg{wa.I32, 4}) })
	t.Run("check_t1:1279", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1280", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1281", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1282", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1283", func(t *testing.T) { x14.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 11}}, arg{wa.I32, 6}) })
	t.Run("check_t1:1284", func(t *testing.T) { x14.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 12}}, arg{wa.I32, 3}) })
	t.Run("check_t1:1285", func(t *testing.T) { x14.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 13}}, arg{wa.I32, 2}) })
	t.Run("check_t1:1286", func(t *testing.T) { x14.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 14}}, arg{wa.I32, 5}) })
	t.Run("check_t1:1287", func(t *testing.T) { x14.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 15}}, arg{wa.I32, 7}) })
	t.Run("check_t1:1288", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1289", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1290", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1291", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1292", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1293", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1294", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1295", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1296", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1297", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1298", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1299", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1300", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1301", func(t *testing.T) { t.Skip("linking not supported") })
	x15 := instantiateSpecTest(t, "15", "table_copy.15.wasm")
	t.Cleanup(func() { x15.close(t) })
	t.Run("test:1333", func(t *testing.T) { x15.invoke(t, "test", nil) })
	t.Run("check_t0:1334", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1335", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1336", func(t *testing.T) { x15.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 2}}, arg{wa.I32, 3}) })
	t.Run("check_t0:1337", func(t *testing.T) { x15.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t0:1338", func(t *testing.T) { x15.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 4}}, arg{wa.I32, 4}) })
	t.Run("check_t0:1339", func(t *testing.T) { x15.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t0:1340", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1341", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1342", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1343", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1344", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1345", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1346", func(t *testing.T) { x15.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 12}}, arg{wa.I32, 7}) })
	t.Run("check_t0:1347", func(t *testing.T) { x15.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 13}}, arg{wa.I32, 5}) })
	t.Run("check_t0:1348", func(t *testing.T) { x15.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 14}}, arg{wa.I32, 2}) })
	t.Run("check_t0:1349", func(t *testing.T) { x15.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 15}}, arg{wa.I32, 3}) })
	t.Run("check_t0:1350", func(t *testing.T) { x15.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 16}}, arg{wa.I32, 6}) })
	t.Run("check_t0:1351", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1352", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1353", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1354", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1355", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1356", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1357", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1358", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1359", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1360", func(t *testing.T) { x15.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 26}}, arg{wa.I32, 3}) })
	t.Run("check_t0:1361", func(t *testing.T) { x15.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 27}}, arg{wa.I32, 1}) })
	t.Run("check_t0:1362", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1363", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1364", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1365", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1366", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1367", func(t *testing.T) { x15.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t1:1368", func(t *testing.T) { x15.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 4}}, arg{wa.I32, 3}) })
	t.Run("check_t1:1369", func(t *testing.T) { x15.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t1:1370", func(t *testing.T) { x15.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 6}}, arg{wa.I32, 4}) })
	t.Run("check_t1:1371", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1372", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1373", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1374", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1375", func(t *testing.T) { x15.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 11}}, arg{wa.I32, 6}) })
	t.Run("check_t1:1376", func(t *testing.T) { x15.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 12}}, arg{wa.I32, 3}) })
	t.Run("check_t1:1377", func(t *testing.T) { x15.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 13}}, arg{wa.I32, 2}) })
	t.Run("check_t1:1378", func(t *testing.T) { x15.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 14}}, arg{wa.I32, 5}) })
	t.Run("check_t1:1379", func(t *testing.T) { x15.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 15}}, arg{wa.I32, 7}) })
	t.Run("check_t1:1380", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1381", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1382", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1383", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1384", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1385", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1386", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1387", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1388", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1389", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1390", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1391", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1392", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1393", func(t *testing.T) { t.Skip("linking not supported") })
	x16 := instantiateSpecTest(t, "16", "table_copy.16.wasm")
	t.Cleanup(func() { x16.close(t) })
	t.Run("test:1425", func(t *testing.T) { x16.invoke(t, "test", nil) })
	t.Run("check_t0:1426", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1427", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1428", func(t *testing.T) { x16.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 2}}, arg{wa.I32, 3}) })
	t.Run("check_t0:1429", func(t *testing.T) { x16.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t0:1430", func(t *testing.T) { x16.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 4}}, arg{wa.I32, 4}) })
	t.Run("check_t0:1431", func(t *testing.T) { x16.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t0:1432", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1433", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1434", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1435", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1436", func(t *testing.T) { x16.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 10}}, arg{wa.I32, 7}) })
	t.Run("check_t0:1437", func(t *testing.T) { x16.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 11}}, arg{wa.I32, 5}) })
	t.Run("check_t0:1438", func(t *testing.T) { x16.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 12}}, arg{wa.I32, 2}) })
	t.Run("check_t0:1439", func(t *testing.T) { x16.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 13}}, arg{wa.I32, 3}) })
	t.Run("check_t0:1440", func(t *testing.T) { x16.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 14}}, arg{wa.I32, 6}) })
	t.Run("check_t0:1441", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1442", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1443", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1444", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1445", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1446", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1447", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1448", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1449", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1450", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1451", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1452", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1453", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1454", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1455", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1456", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1457", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1458", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1459", func(t *testing.T) { x16.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t1:1460", func(t *testing.T) { x16.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 4}}, arg{wa.I32, 3}) })
	t.Run("check_t1:1461", func(t *testing.T) { x16.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t1:1462", func(t *testing.T) { x16.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 6}}, arg{wa.I32, 4}) })
	t.Run("check_t1:1463", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1464", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1465", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1466", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1467", func(t *testing.T) { x16.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 11}}, arg{wa.I32, 6}) })
	t.Run("check_t1:1468", func(t *testing.T) { x16.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 12}}, arg{wa.I32, 3}) })
	t.Run("check_t1:1469", func(t *testing.T) { x16.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 13}}, arg{wa.I32, 2}) })
	t.Run("check_t1:1470", func(t *testing.T) { x16.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 14}}, arg{wa.I32, 5}) })
	t.Run("check_t1:1471", func(t *testing.T) { x16.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 15}}, arg{wa.I32, 7}) })
	t.Run("check_t1:1472", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1473", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1474", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1475", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1476", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1477", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1478", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1479", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1480", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1481", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1482", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1483", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1484", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1485", func(t *testing.T) { t.Skip("linking not supported") })
	x17 := instantiateSpecTest(t, "17", "table_copy.17.wasm")
	t.Cleanup(func() { x17.close(t) })
	t.Run("test:1517", func(t *testing.T) { x17.invoke(t, "test", nil) })
	t.Run("check_t0:1518", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1519", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1520", func(t *testing.T) { x17.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 2}}, arg{wa.I32, 3}) })
	t.Run("check_t0:1521", func(t *testing.T) { x17.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t0:1522", func(t *testing.T) { x17.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 4}}, arg{wa.I32, 4}) })
	t.Run("check_t0:1523", func(t *testing.T) { x17.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t0:1524", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1525", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1526", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1527", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1528", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1529", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1530", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1531", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1532", func(t *testing.T) { x17.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 14}}, arg{wa.I32, 7}) })
	t.Run("check_t0:1533", func(t *testing.T) { x17.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 15}}, arg{wa.I32, 5}) })
	t.Run("check_t0:1534", func(t *testing.T) { x17.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 16}}, arg{wa.I32, 2}) })
	t.Run("check_t0:1535", func(t *testing.T) { x17.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 17}}, arg{wa.I32, 3}) })
	t.Run("check_t0:1536", func(t *testing.T) { x17.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 18}}, arg{wa.I32, 6}) })
	t.Run("check_t0:1537", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1538", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1539", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1540", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1541", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1542", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1543", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1544", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1545", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1546", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1547", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1548", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1549", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1550", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1551", func(t *testing.T) { x17.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t1:1552", func(t *testing.T) { x17.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 4}}, arg{wa.I32, 3}) })
	t.Run("check_t1:1553", func(t *testing.T) { x17.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t1:1554", func(t *testing.T) { x17.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 6}}, arg{wa.I32, 4}) })
	t.Run("check_t1:1555", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1556", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1557", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1558", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1559", func(t *testing.T) { x17.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 11}}, arg{wa.I32, 6}) })
	t.Run("check_t1:1560", func(t *testing.T) { x17.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 12}}, arg{wa.I32, 3}) })
	t.Run("check_t1:1561", func(t *testing.T) { x17.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 13}}, arg{wa.I32, 2}) })
	t.Run("check_t1:1562", func(t *testing.T) { x17.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 14}}, arg{wa.I32, 5}) })
	t.Run("check_t1:1563", func(t *testing.T) { x17.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 15}}, arg{wa.I32, 7}) })
	t.Run("check_t1:1564", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1565", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1566", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1567", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1568", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1569", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1570", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1571", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1572", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1573", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1574", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1575", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1576", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1577", func(t *testing.T) { t.Skip("linking not supported") })
	x18 := instantiateSpecTest(t, "18", "table_copy.18.wasm")
	t.Cleanup(func() { x18.close(t) })
	t.Run("test:1609", func(t *testing.T) { x18.invoke(t, "test", nil) })
	t.Run("check_t0:1610", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1611", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1612", func(t *testing.T) { x18.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 2}}, arg{wa.I32, 3}) })
	t.Run("check_t0:1613", func(t *testing.T) { x18.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t0:1614", func(t *testing.T) { x18.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 4}}, arg{wa.I32, 4}) })
	t.Run("check_t0:1615", func(t *testing.T) { x18.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t0:1616", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1617", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1618", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1619", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1620", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1621", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1622", func(t *testing.T) { x18.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 12}}, arg{wa.I32, 7}) })
	t.Run("check_t0:1623", func(t *testing.T) { x18.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 13}}, arg{wa.I32, 5}) })
	t.Run("check_t0:1624", func(t *testing.T) { x18.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 14}}, arg{wa.I32, 2}) })
	t.Run("check_t0:1625", func(t *testing.T) { x18.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 15}}, arg{wa.I32, 3}) })
	t.Run("check_t0:1626", func(t *testing.T) { x18.assertReturnInvoke(t, "check_t0", []arg{{wa.I32, 16}}, arg{wa.I32, 6}) })
	t.Run("check_t0:1627", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1628", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1629", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1630", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1631", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1632", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1633", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1634", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1635", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1636", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1637", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1638", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t0:1639", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1640", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1641", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1642", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1643", func(t *testing.T) { x18.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 3}}, arg{wa.I32, 1}) })
	t.Run("check_t1:1644", func(t *testing.T) { x18.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 4}}, arg{wa.I32, 3}) })
	t.Run("check_t1:1645", func(t *testing.T) { x18.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 5}}, arg{wa.I32, 1}) })
	t.Run("check_t1:1646", func(t *testing.T) { x18.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 6}}, arg{wa.I32, 4}) })
	t.Run("check_t1:1647", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1648", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1649", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1650", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1651", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1652", func(t *testing.T) { x18.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 12}}, arg{wa.I32, 3}) })
	t.Run("check_t1:1653", func(t *testing.T) { x18.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 13}}, arg{wa.I32, 1}) })
	t.Run("check_t1:1654", func(t *testing.T) { x18.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 14}}, arg{wa.I32, 4}) })
	t.Run("check_t1:1655", func(t *testing.T) { x18.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 15}}, arg{wa.I32, 1}) })
	t.Run("check_t1:1656", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1657", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1658", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1659", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1660", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1661", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1662", func(t *testing.T) { x18.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 22}}, arg{wa.I32, 7}) })
	t.Run("check_t1:1663", func(t *testing.T) { x18.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 23}}, arg{wa.I32, 5}) })
	t.Run("check_t1:1664", func(t *testing.T) { x18.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 24}}, arg{wa.I32, 2}) })
	t.Run("check_t1:1665", func(t *testing.T) { x18.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 25}}, arg{wa.I32, 3}) })
	t.Run("check_t1:1666", func(t *testing.T) { x18.assertReturnInvoke(t, "check_t1", []arg{{wa.I32, 26}}, arg{wa.I32, 6}) })
	t.Run("check_t1:1667", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1668", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("check_t1:1669", func(t *testing.T) { t.Skip("linking not supported") })
	x19 := instantiateSpecTest(t, "19", "table_copy.19.wasm")
	t.Cleanup(func() { x19.close(t) })
	t.Run("test:1694", func(t *testing.T) { x19.assertTrap(t, "test", nil, arg{}, "out of bounds table access") })
	x20 := instantiateSpecTest(t, "20", "table_copy.20.wasm")
	t.Cleanup(func() { x20.close(t) })
	t.Run("test:1719", func(t *testing.T) { x20.assertTrap(t, "test", nil, arg{}, "out of bounds table access") })
	x21 := instantiateSpecTest(t, "21", "table_copy.21.wasm")
	t.Cleanup(func() { x21.close(t) })
	t.Run("test:1744", func(t *testing.T) { x21.assertTrap(t, "test", nil, arg{}, "out of bounds table access") })
	x22 := instantiateSpecTest(t, "22", "table_copy.22.wasm")
	t.Cleanup(func() { x22.close(t) })
	t.Run("test:1769", func(t *testing.T) { x22.assertTrap(t, "test", nil, arg{}, "out of bounds table access") })
	x23 := instantiateSpecTest(t, "23", "table_copy.23.wasm")
	t.Cleanup(func() { x23.close(t) })
	t.Run("test:1794", func(t *testing.T) { x23.invoke(t, "test", nil) })
	x24 := instantiateSpecTest(t, "24", "table_copy.24.wasm")
	t.Cleanup(func() { x24.close(t) })
	t.Run("test:1819", func(t *testing.T) { x24.invoke(t, "test", nil) })
	x25 := instantiateSpecTest(t, "25", "table_copy.25.wasm")
	t.Cleanup(func() { x25.close(t) })
	t.Run("test:1844", func(t *testing.T) { x25.assertTrap(t, "test", nil, arg{}, "out of bounds table access") })
	x26 := instantiateSpecTest(t, "26", "table_copy.26.wasm")
	t.Cleanup(func() { x26.close(t) })
	t.Run("test:1869", func(t *testing.T) { x26.invoke(t, "test", nil) })
	x27 := instantiateSpecTest(t, "27", "table_copy.27.wasm")
	t.Cleanup(func() { x27.close(t) })
	t.Run("test:1894", func(t *testing.T) { x27.assertTrap(t, "test", nil, arg{}, "out of bounds table access") })
	x28 := instantiateSpecTest(t, "28", "table_copy.28.wasm")
	t.Cleanup(func() { x28.close(t) })
	t.Run("test:1919", func(t *testing.T) { x28.invoke(t, "test", nil) })
	x29 := instantiateSpecTest(t, "29", "table_copy.29.wasm")
	t.Cleanup(func() { x29.close(t) })
	t.Run("test:1944", func(t *testing.T) { x29.assertTrap(t, "test", nil, arg{}, "out of bounds table access") })
	x30 := instantiateSpecTest(t, "30", "table_copy.30.wasm")
	t.Cleanup(func() { x30.close(t) })
	t.Run("test:1969", func(t *testing.T) { x30.assertTrap(t, "test", nil, arg{}, "out of bounds table access") })
	x31 := instantiateSpecTest(t, "31", "table_copy.31.wasm")
	t.Cleanup(func() { x31.close(t) })
	t.Run("test:1994", func(t *testing.T) { x31.assertTrap(t, "test", nil, arg{}, "out of bounds table access") })
	x32 := instantiateSpecTest(t, "32", "table_copy.32.wasm")
	t.Cleanup(func() { x32.close(t) })
	t.Run("test:2019", func(t *testing.T) { x32.assertTrap(t, "test", nil, arg{}, "out of bounds table access") })
	x33 := instantiateSpecTest(t, "33", "table_copy.33.wasm")
	t.Cleanup(func() { x33.close(t) })
	t.Run("test:2044", func(t *testing.T) { x33.assertTrap(t, "test", nil, arg{}, "out of bounds table access") })
	x34 := instantiateSpecTest(t, "34", "table_copy.34.wasm")
	t.Cleanup(func() { x34.close(t) })
	t.Run("test:2069", func(t *testing.T) { x34.invoke(t, "test", nil) })
	x35 := instantiateSpecTest(t, "35", "table_copy.35.wasm")
	t.Cleanup(func() { x35.close(t) })
	t.Run("test:2094", func(t *testing.T) { x35.invoke(t, "test", nil) })
	x36 := instantiateSpecTest(t, "36", "table_copy.36.wasm")
	t.Cleanup(func() { x36.close(t) })
	t.Run("test:2119", func(t *testing.T) { x36.assertTrap(t, "test", nil, arg{}, "out of bounds table access") })
	x37 := instantiateSpecTest(t, "37", "table_copy.37.wasm")
	t.Cleanup(func() { x37.close(t) })
	t.Run("test:2144", func(t *testing.T) { x37.invoke(t, "test", nil) })
	x38 := instantiateSpecTest(t, "38", "table_copy.38.wasm")
	t.Cleanup(func() { x38.close(t) })
	t.Run("test:2169", func(t *testing.T) { x38.assertTrap(t, "test", nil, arg{}, "out of bounds table access") })
	x39 := instantiateSpecTest(t, "39", "table_copy.39.wasm")
	t.Cleanup(func() { x39.close(t) })
	t.Run("test:2194", func(t *testing.T) { x39.invoke(t, "test", nil) })
	x40 := instantiateSpecTest(t, "40", "table_copy.40.wasm")
	t.Cleanup(func() { x40.close(t) })
	t.Run("test:2219", func(t *testing.T) { x40.assertTrap(t, "test", nil, arg{}, "out of bounds table access") })
	x41 := instantiateSpecTest(t, "41", "table_copy.41.wasm")
	t.Cleanup(func() { x41.close(t) })
	t.Run("run:2247", func(t *testing.T) {
		x41.assertTrap(t, "run", []arg{{wa.I32, 24}, {wa.I32, 0}, {wa.I32, 16}}, arg{}, "out of bounds table access")
	})
	t.Run("test:2249", func(t *testing.T) { x41.assertReturnInvoke(t, "test", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("test:2250", func(t *testing.T) { x41.assertReturnInvoke(t, "test", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("test:2251", func(t *testing.T) { x41.assertReturnInvoke(t, "test", []arg{{wa.I32, 2}}, arg{wa.I32, 2}) })
	t.Run("test:2252", func(t *testing.T) { x41.assertReturnInvoke(t, "test", []arg{{wa.I32, 3}}, arg{wa.I32, 3}) })
	t.Run("test:2253", func(t *testing.T) { x41.assertReturnInvoke(t, "test", []arg{{wa.I32, 4}}, arg{wa.I32, 4}) })
	t.Run("test:2254", func(t *testing.T) { x41.assertReturnInvoke(t, "test", []arg{{wa.I32, 5}}, arg{wa.I32, 5}) })
	t.Run("test:2255", func(t *testing.T) { x41.assertReturnInvoke(t, "test", []arg{{wa.I32, 6}}, arg{wa.I32, 6}) })
	t.Run("test:2256", func(t *testing.T) { x41.assertReturnInvoke(t, "test", []arg{{wa.I32, 7}}, arg{wa.I32, 7}) })
	t.Run("test:2257", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2258", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2259", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2260", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2261", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2262", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2263", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2264", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2265", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2266", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2267", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2268", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2269", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2270", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2271", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2272", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2273", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2274", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2275", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2276", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2277", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2278", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2279", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2280", func(t *testing.T) { t.Skip("linking not supported") })
	x42 := instantiateSpecTest(t, "42", "table_copy.42.wasm")
	t.Cleanup(func() { x42.close(t) })
	t.Run("run:2308", func(t *testing.T) {
		x42.assertTrap(t, "run", []arg{{wa.I32, 23}, {wa.I32, 0}, {wa.I32, 15}}, arg{}, "out of bounds table access")
	})
	t.Run("test:2310", func(t *testing.T) { x42.assertReturnInvoke(t, "test", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("test:2311", func(t *testing.T) { x42.assertReturnInvoke(t, "test", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("test:2312", func(t *testing.T) { x42.assertReturnInvoke(t, "test", []arg{{wa.I32, 2}}, arg{wa.I32, 2}) })
	t.Run("test:2313", func(t *testing.T) { x42.assertReturnInvoke(t, "test", []arg{{wa.I32, 3}}, arg{wa.I32, 3}) })
	t.Run("test:2314", func(t *testing.T) { x42.assertReturnInvoke(t, "test", []arg{{wa.I32, 4}}, arg{wa.I32, 4}) })
	t.Run("test:2315", func(t *testing.T) { x42.assertReturnInvoke(t, "test", []arg{{wa.I32, 5}}, arg{wa.I32, 5}) })
	t.Run("test:2316", func(t *testing.T) { x42.assertReturnInvoke(t, "test", []arg{{wa.I32, 6}}, arg{wa.I32, 6}) })
	t.Run("test:2317", func(t *testing.T) { x42.assertReturnInvoke(t, "test", []arg{{wa.I32, 7}}, arg{wa.I32, 7}) })
	t.Run("test:2318", func(t *testing.T) { x42.assertReturnInvoke(t, "test", []arg{{wa.I32, 8}}, arg{wa.I32, 8}) })
	t.Run("test:2319", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2320", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2321", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2322", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2323", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2324", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2325", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2326", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2327", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2328", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2329", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2330", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2331", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2332", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2333", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2334", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2335", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2336", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2337", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2338", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2339", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2340", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2341", func(t *testing.T) { t.Skip("linking not supported") })
	x43 := instantiateSpecTest(t, "43", "table_copy.43.wasm")
	t.Cleanup(func() { x43.close(t) })
	t.Run("run:2369", func(t *testing.T) {
		x43.assertTrap(t, "run", []arg{{wa.I32, 0}, {wa.I32, 24}, {wa.I32, 16}}, arg{}, "out of bounds table access")
	})
	t.Run("test:2371", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2372", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2373", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2374", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2375", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2376", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2377", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2378", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2379", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2380", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2381", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2382", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2383", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2384", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2385", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2386", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2387", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2388", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2389", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2390", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2391", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2392", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2393", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2394", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2395", func(t *testing.T) { x43.assertReturnInvoke(t, "test", []arg{{wa.I32, 24}}, arg{wa.I32, 0}) })
	t.Run("test:2396", func(t *testing.T) { x43.assertReturnInvoke(t, "test", []arg{{wa.I32, 25}}, arg{wa.I32, 1}) })
	t.Run("test:2397", func(t *testing.T) { x43.assertReturnInvoke(t, "test", []arg{{wa.I32, 26}}, arg{wa.I32, 2}) })
	t.Run("test:2398", func(t *testing.T) { x43.assertReturnInvoke(t, "test", []arg{{wa.I32, 27}}, arg{wa.I32, 3}) })
	t.Run("test:2399", func(t *testing.T) { x43.assertReturnInvoke(t, "test", []arg{{wa.I32, 28}}, arg{wa.I32, 4}) })
	t.Run("test:2400", func(t *testing.T) { x43.assertReturnInvoke(t, "test", []arg{{wa.I32, 29}}, arg{wa.I32, 5}) })
	t.Run("test:2401", func(t *testing.T) { x43.assertReturnInvoke(t, "test", []arg{{wa.I32, 30}}, arg{wa.I32, 6}) })
	t.Run("test:2402", func(t *testing.T) { x43.assertReturnInvoke(t, "test", []arg{{wa.I32, 31}}, arg{wa.I32, 7}) })
	x44 := instantiateSpecTest(t, "44", "table_copy.44.wasm")
	t.Cleanup(func() { x44.close(t) })
	t.Run("run:2430", func(t *testing.T) {
		x44.assertTrap(t, "run", []arg{{wa.I32, 0}, {wa.I32, 23}, {wa.I32, 15}}, arg{}, "out of bounds table access")
	})
	t.Run("test:2432", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2433", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2434", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2435", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2436", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2437", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2438", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2439", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2440", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2441", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2442", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2443", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2444", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2445", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2446", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2447", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2448", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2449", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2450", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2451", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2452", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2453", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2454", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2455", func(t *testing.T) { x44.assertReturnInvoke(t, "test", []arg{{wa.I32, 23}}, arg{wa.I32, 0}) })
	t.Run("test:2456", func(t *testing.T) { x44.assertReturnInvoke(t, "test", []arg{{wa.I32, 24}}, arg{wa.I32, 1}) })
	t.Run("test:2457", func(t *testing.T) { x44.assertReturnInvoke(t, "test", []arg{{wa.I32, 25}}, arg{wa.I32, 2}) })
	t.Run("test:2458", func(t *testing.T) { x44.assertReturnInvoke(t, "test", []arg{{wa.I32, 26}}, arg{wa.I32, 3}) })
	t.Run("test:2459", func(t *testing.T) { x44.assertReturnInvoke(t, "test", []arg{{wa.I32, 27}}, arg{wa.I32, 4}) })
	t.Run("test:2460", func(t *testing.T) { x44.assertReturnInvoke(t, "test", []arg{{wa.I32, 28}}, arg{wa.I32, 5}) })
	t.Run("test:2461", func(t *testing.T) { x44.assertReturnInvoke(t, "test", []arg{{wa.I32, 29}}, arg{wa.I32, 6}) })
	t.Run("test:2462", func(t *testing.T) { x44.assertReturnInvoke(t, "test", []arg{{wa.I32, 30}}, arg{wa.I32, 7}) })
	t.Run("test:2463", func(t *testing.T) { x44.assertReturnInvoke(t, "test", []arg{{wa.I32, 31}}, arg{wa.I32, 8}) })
	x45 := instantiateSpecTest(t, "45", "table_copy.45.wasm")
	t.Cleanup(func() { x45.close(t) })
	t.Run("run:2491", func(t *testing.T) {
		x45.assertTrap(t, "run", []arg{{wa.I32, 24}, {wa.I32, 11}, {wa.I32, 16}}, arg{}, "out of bounds table access")
	})
	t.Run("test:2493", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2494", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2495", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2496", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2497", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2498", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2499", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2500", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2501", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2502", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2503", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2504", func(t *testing.T) { x45.assertReturnInvoke(t, "test", []arg{{wa.I32, 11}}, arg{wa.I32, 0}) })
	t.Run("test:2505", func(t *testing.T) { x45.assertReturnInvoke(t, "test", []arg{{wa.I32, 12}}, arg{wa.I32, 1}) })
	t.Run("test:2506", func(t *testing.T) { x45.assertReturnInvoke(t, "test", []arg{{wa.I32, 13}}, arg{wa.I32, 2}) })
	t.Run("test:2507", func(t *testing.T) { x45.assertReturnInvoke(t, "test", []arg{{wa.I32, 14}}, arg{wa.I32, 3}) })
	t.Run("test:2508", func(t *testing.T) { x45.assertReturnInvoke(t, "test", []arg{{wa.I32, 15}}, arg{wa.I32, 4}) })
	t.Run("test:2509", func(t *testing.T) { x45.assertReturnInvoke(t, "test", []arg{{wa.I32, 16}}, arg{wa.I32, 5}) })
	t.Run("test:2510", func(t *testing.T) { x45.assertReturnInvoke(t, "test", []arg{{wa.I32, 17}}, arg{wa.I32, 6}) })
	t.Run("test:2511", func(t *testing.T) { x45.assertReturnInvoke(t, "test", []arg{{wa.I32, 18}}, arg{wa.I32, 7}) })
	t.Run("test:2512", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2513", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2514", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2515", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2516", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2517", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2518", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2519", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2520", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2521", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2522", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2523", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2524", func(t *testing.T) { t.Skip("linking not supported") })
	x46 := instantiateSpecTest(t, "46", "table_copy.46.wasm")
	t.Cleanup(func() { x46.close(t) })
	t.Run("run:2552", func(t *testing.T) {
		x46.assertTrap(t, "run", []arg{{wa.I32, 11}, {wa.I32, 24}, {wa.I32, 16}}, arg{}, "out of bounds table access")
	})
	t.Run("test:2554", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2555", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2556", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2557", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2558", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2559", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2560", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2561", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2562", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2563", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2564", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2565", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2566", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2567", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2568", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2569", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2570", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2571", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2572", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2573", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2574", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2575", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2576", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2577", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2578", func(t *testing.T) { x46.assertReturnInvoke(t, "test", []arg{{wa.I32, 24}}, arg{wa.I32, 0}) })
	t.Run("test:2579", func(t *testing.T) { x46.assertReturnInvoke(t, "test", []arg{{wa.I32, 25}}, arg{wa.I32, 1}) })
	t.Run("test:2580", func(t *testing.T) { x46.assertReturnInvoke(t, "test", []arg{{wa.I32, 26}}, arg{wa.I32, 2}) })
	t.Run("test:2581", func(t *testing.T) { x46.assertReturnInvoke(t, "test", []arg{{wa.I32, 27}}, arg{wa.I32, 3}) })
	t.Run("test:2582", func(t *testing.T) { x46.assertReturnInvoke(t, "test", []arg{{wa.I32, 28}}, arg{wa.I32, 4}) })
	t.Run("test:2583", func(t *testing.T) { x46.assertReturnInvoke(t, "test", []arg{{wa.I32, 29}}, arg{wa.I32, 5}) })
	t.Run("test:2584", func(t *testing.T) { x46.assertReturnInvoke(t, "test", []arg{{wa.I32, 30}}, arg{wa.I32, 6}) })
	t.Run("test:2585", func(t *testing.T) { x46.assertReturnInvoke(t, "test", []arg{{wa.I32, 31}}, arg{wa.I32, 7}) })
	x47 := instantiateSpecTest(t, "47", "table_copy.47.wasm")
	t.Cleanup(func() { x47.close(t) })
	t.Run("run:2613", func(t *testing.T) {
		x47.assertTrap(t, "run", []arg{{wa.I32, 24}, {wa.I32, 21}, {wa.I32, 16}}, arg{}, "out of bounds table access")
	})
	t.Run("test:2615", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2616", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2617", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2618", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2619", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2620", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2621", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2622", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2623", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2624", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2625", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2626", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2627", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2628", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2629", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2630", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2631", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2632", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2633", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2634", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2635", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2636", func(t *testing.T) { x47.assertReturnInvoke(t, "test", []arg{{wa.I32, 21}}, arg{wa.I32, 0}) })
	t.Run("test:2637", func(t *testing.T) { x47.assertReturnInvoke(t, "test", []arg{{wa.I32, 22}}, arg{wa.I32, 1}) })
	t.Run("test:2638", func(t *testing.T) { x47.assertReturnInvoke(t, "test", []arg{{wa.I32, 23}}, arg{wa.I32, 2}) })
	t.Run("test:2639", func(t *testing.T) { x47.assertReturnInvoke(t, "test", []arg{{wa.I32, 24}}, arg{wa.I32, 3}) })
	t.Run("test:2640", func(t *testing.T) { x47.assertReturnInvoke(t, "test", []arg{{wa.I32, 25}}, arg{wa.I32, 4}) })
	t.Run("test:2641", func(t *testing.T) { x47.assertReturnInvoke(t, "test", []arg{{wa.I32, 26}}, arg{wa.I32, 5}) })
	t.Run("test:2642", func(t *testing.T) { x47.assertReturnInvoke(t, "test", []arg{{wa.I32, 27}}, arg{wa.I32, 6}) })
	t.Run("test:2643", func(t *testing.T) { x47.assertReturnInvoke(t, "test", []arg{{wa.I32, 28}}, arg{wa.I32, 7}) })
	t.Run("test:2644", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2645", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2646", func(t *testing.T) { t.Skip("linking not supported") })
	x48 := instantiateSpecTest(t, "48", "table_copy.48.wasm")
	t.Cleanup(func() { x48.close(t) })
	t.Run("run:2674", func(t *testing.T) {
		x48.assertTrap(t, "run", []arg{{wa.I32, 21}, {wa.I32, 24}, {wa.I32, 16}}, arg{}, "out of bounds table access")
	})
	t.Run("test:2676", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2677", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2678", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2679", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2680", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2681", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2682", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2683", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2684", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2685", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2686", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2687", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2688", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2689", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2690", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2691", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2692", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2693", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2694", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2695", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2696", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2697", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2698", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2699", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2700", func(t *testing.T) { x48.assertReturnInvoke(t, "test", []arg{{wa.I32, 24}}, arg{wa.I32, 0}) })
	t.Run("test:2701", func(t *testing.T) { x48.assertReturnInvoke(t, "test", []arg{{wa.I32, 25}}, arg{wa.I32, 1}) })
	t.Run("test:2702", func(t *testing.T) { x48.assertReturnInvoke(t, "test", []arg{{wa.I32, 26}}, arg{wa.I32, 2}) })
	t.Run("test:2703", func(t *testing.T) { x48.assertReturnInvoke(t, "test", []arg{{wa.I32, 27}}, arg{wa.I32, 3}) })
	t.Run("test:2704", func(t *testing.T) { x48.assertReturnInvoke(t, "test", []arg{{wa.I32, 28}}, arg{wa.I32, 4}) })
	t.Run("test:2705", func(t *testing.T) { x48.assertReturnInvoke(t, "test", []arg{{wa.I32, 29}}, arg{wa.I32, 5}) })
	t.Run("test:2706", func(t *testing.T) { x48.assertReturnInvoke(t, "test", []arg{{wa.I32, 30}}, arg{wa.I32, 6}) })
	t.Run("test:2707", func(t *testing.T) { x48.assertReturnInvoke(t, "test", []arg{{wa.I32, 31}}, arg{wa.I32, 7}) })
	x49 := instantiateSpecTest(t, "49", "table_copy.49.wasm")
	t.Cleanup(func() { x49.close(t) })
	t.Run("run:2735", func(t *testing.T) {
		x49.assertTrap(t, "run", []arg{{wa.I32, 21}, {wa.I32, 21}, {wa.I32, 16}}, arg{}, "out of bounds table access")
	})
	t.Run("test:2737", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2738", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2739", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2740", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2741", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2742", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2743", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2744", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2745", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2746", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2747", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2748", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2749", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2750", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2751", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2752", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2753", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2754", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2755", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2756", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2757", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2758", func(t *testing.T) { x49.assertReturnInvoke(t, "test", []arg{{wa.I32, 21}}, arg{wa.I32, 0}) })
	t.Run("test:2759", func(t *testing.T) { x49.assertReturnInvoke(t, "test", []arg{{wa.I32, 22}}, arg{wa.I32, 1}) })
	t.Run("test:2760", func(t *testing.T) { x49.assertReturnInvoke(t, "test", []arg{{wa.I32, 23}}, arg{wa.I32, 2}) })
	t.Run("test:2761", func(t *testing.T) { x49.assertReturnInvoke(t, "test", []arg{{wa.I32, 24}}, arg{wa.I32, 3}) })
	t.Run("test:2762", func(t *testing.T) { x49.assertReturnInvoke(t, "test", []arg{{wa.I32, 25}}, arg{wa.I32, 4}) })
	t.Run("test:2763", func(t *testing.T) { x49.assertReturnInvoke(t, "test", []arg{{wa.I32, 26}}, arg{wa.I32, 5}) })
	t.Run("test:2764", func(t *testing.T) { x49.assertReturnInvoke(t, "test", []arg{{wa.I32, 27}}, arg{wa.I32, 6}) })
	t.Run("test:2765", func(t *testing.T) { x49.assertReturnInvoke(t, "test", []arg{{wa.I32, 28}}, arg{wa.I32, 7}) })
	t.Run("test:2766", func(t *testing.T) { x49.assertReturnInvoke(t, "test", []arg{{wa.I32, 29}}, arg{wa.I32, 8}) })
	t.Run("test:2767", func(t *testing.T) { x49.assertReturnInvoke(t, "test", []arg{{wa.I32, 30}}, arg{wa.I32, 9}) })
	t.Run("test:2768", func(t *testing.T) { x49.assertReturnInvoke(t, "test", []arg{{wa.I32, 31}}, arg{wa.I32, 10}) })
	x50 := instantiateSpecTest(t, "50", "table_copy.50.wasm")
	t.Cleanup(func() { x50.close(t) })
	t.Run("run:2796", func(t *testing.T) {
		x50.assertTrap(t, "run", []arg{{wa.I32, 0}, {wa.I32, 112}, {wa.I32, 4294967264}}, arg{}, "out of bounds table access")
	})
	t.Run("test:2798", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2799", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2800", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2801", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2802", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2803", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2804", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2805", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2806", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2807", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2808", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2809", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2810", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2811", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2812", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2813", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2814", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2815", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2816", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2817", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2818", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2819", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2820", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2821", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2822", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2823", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2824", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2825", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2826", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2827", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2828", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2829", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2830", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2831", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2832", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2833", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2834", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2835", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2836", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2837", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2838", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2839", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2840", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2841", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2842", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2843", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2844", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2845", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2846", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2847", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2848", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2849", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2850", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2851", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2852", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2853", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2854", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2855", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2856", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2857", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2858", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2859", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2860", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2861", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2862", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2863", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2864", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2865", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2866", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2867", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2868", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2869", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2870", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2871", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2872", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2873", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2874", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2875", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2876", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2877", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2878", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2879", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2880", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2881", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2882", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2883", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2884", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2885", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2886", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2887", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2888", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2889", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2890", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2891", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2892", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2893", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2894", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2895", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2896", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2897", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2898", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2899", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2900", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2901", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2902", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2903", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2904", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2905", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2906", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2907", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2908", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2909", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2910", func(t *testing.T) { x50.assertReturnInvoke(t, "test", []arg{{wa.I32, 112}}, arg{wa.I32, 0}) })
	t.Run("test:2911", func(t *testing.T) { x50.assertReturnInvoke(t, "test", []arg{{wa.I32, 113}}, arg{wa.I32, 1}) })
	t.Run("test:2912", func(t *testing.T) { x50.assertReturnInvoke(t, "test", []arg{{wa.I32, 114}}, arg{wa.I32, 2}) })
	t.Run("test:2913", func(t *testing.T) { x50.assertReturnInvoke(t, "test", []arg{{wa.I32, 115}}, arg{wa.I32, 3}) })
	t.Run("test:2914", func(t *testing.T) { x50.assertReturnInvoke(t, "test", []arg{{wa.I32, 116}}, arg{wa.I32, 4}) })
	t.Run("test:2915", func(t *testing.T) { x50.assertReturnInvoke(t, "test", []arg{{wa.I32, 117}}, arg{wa.I32, 5}) })
	t.Run("test:2916", func(t *testing.T) { x50.assertReturnInvoke(t, "test", []arg{{wa.I32, 118}}, arg{wa.I32, 6}) })
	t.Run("test:2917", func(t *testing.T) { x50.assertReturnInvoke(t, "test", []arg{{wa.I32, 119}}, arg{wa.I32, 7}) })
	t.Run("test:2918", func(t *testing.T) { x50.assertReturnInvoke(t, "test", []arg{{wa.I32, 120}}, arg{wa.I32, 8}) })
	t.Run("test:2919", func(t *testing.T) { x50.assertReturnInvoke(t, "test", []arg{{wa.I32, 121}}, arg{wa.I32, 9}) })
	t.Run("test:2920", func(t *testing.T) { x50.assertReturnInvoke(t, "test", []arg{{wa.I32, 122}}, arg{wa.I32, 10}) })
	t.Run("test:2921", func(t *testing.T) { x50.assertReturnInvoke(t, "test", []arg{{wa.I32, 123}}, arg{wa.I32, 11}) })
	t.Run("test:2922", func(t *testing.T) { x50.assertReturnInvoke(t, "test", []arg{{wa.I32, 124}}, arg{wa.I32, 12}) })
	t.Run("test:2923", func(t *testing.T) { x50.assertReturnInvoke(t, "test", []arg{{wa.I32, 125}}, arg{wa.I32, 13}) })
	t.Run("test:2924", func(t *testing.T) { x50.assertReturnInvoke(t, "test", []arg{{wa.I32, 126}}, arg{wa.I32, 14}) })
	t.Run("test:2925", func(t *testing.T) { x50.assertReturnInvoke(t, "test", []arg{{wa.I32, 127}}, arg{wa.I32, 15}) })
	x51 := instantiateSpecTest(t, "51", "table_copy.51.wasm")
	t.Cleanup(func() { x51.close(t) })
	t.Run("run:2953", func(t *testing.T) {
		x51.assertTrap(t, "run", []arg{{wa.I32, 112}, {wa.I32, 0}, {wa.I32, 4294967264}}, arg{}, "out of bounds table access")
	})
	t.Run("test:2955", func(t *testing.T) { x51.assertReturnInvoke(t, "test", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("test:2956", func(t *testing.T) { x51.assertReturnInvoke(t, "test", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("test:2957", func(t *testing.T) { x51.assertReturnInvoke(t, "test", []arg{{wa.I32, 2}}, arg{wa.I32, 2}) })
	t.Run("test:2958", func(t *testing.T) { x51.assertReturnInvoke(t, "test", []arg{{wa.I32, 3}}, arg{wa.I32, 3}) })
	t.Run("test:2959", func(t *testing.T) { x51.assertReturnInvoke(t, "test", []arg{{wa.I32, 4}}, arg{wa.I32, 4}) })
	t.Run("test:2960", func(t *testing.T) { x51.assertReturnInvoke(t, "test", []arg{{wa.I32, 5}}, arg{wa.I32, 5}) })
	t.Run("test:2961", func(t *testing.T) { x51.assertReturnInvoke(t, "test", []arg{{wa.I32, 6}}, arg{wa.I32, 6}) })
	t.Run("test:2962", func(t *testing.T) { x51.assertReturnInvoke(t, "test", []arg{{wa.I32, 7}}, arg{wa.I32, 7}) })
	t.Run("test:2963", func(t *testing.T) { x51.assertReturnInvoke(t, "test", []arg{{wa.I32, 8}}, arg{wa.I32, 8}) })
	t.Run("test:2964", func(t *testing.T) { x51.assertReturnInvoke(t, "test", []arg{{wa.I32, 9}}, arg{wa.I32, 9}) })
	t.Run("test:2965", func(t *testing.T) { x51.assertReturnInvoke(t, "test", []arg{{wa.I32, 10}}, arg{wa.I32, 10}) })
	t.Run("test:2966", func(t *testing.T) { x51.assertReturnInvoke(t, "test", []arg{{wa.I32, 11}}, arg{wa.I32, 11}) })
	t.Run("test:2967", func(t *testing.T) { x51.assertReturnInvoke(t, "test", []arg{{wa.I32, 12}}, arg{wa.I32, 12}) })
	t.Run("test:2968", func(t *testing.T) { x51.assertReturnInvoke(t, "test", []arg{{wa.I32, 13}}, arg{wa.I32, 13}) })
	t.Run("test:2969", func(t *testing.T) { x51.assertReturnInvoke(t, "test", []arg{{wa.I32, 14}}, arg{wa.I32, 14}) })
	t.Run("test:2970", func(t *testing.T) { x51.assertReturnInvoke(t, "test", []arg{{wa.I32, 15}}, arg{wa.I32, 15}) })
	t.Run("test:2971", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2972", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2973", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2974", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2975", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2976", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2977", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2978", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2979", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2980", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2981", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2982", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2983", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2984", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2985", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2986", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2987", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2988", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2989", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2990", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2991", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2992", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2993", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2994", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2995", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2996", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2997", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2998", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:2999", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3000", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3001", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3002", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3003", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3004", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3005", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3006", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3007", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3008", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3009", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3010", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3011", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3012", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3013", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3014", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3015", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3016", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3017", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3018", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3019", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3020", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3021", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3022", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3023", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3024", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3025", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3026", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3027", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3028", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3029", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3030", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3031", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3032", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3033", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3034", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3035", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3036", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3037", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3038", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3039", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3040", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3041", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3042", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3043", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3044", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3045", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3046", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3047", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3048", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3049", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3050", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3051", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3052", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3053", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3054", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3055", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3056", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3057", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3058", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3059", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3060", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3061", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3062", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3063", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3064", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3065", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3066", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3067", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3068", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3069", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3070", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3071", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3072", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3073", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3074", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3075", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3076", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3077", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3078", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3079", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3080", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3081", func(t *testing.T) { t.Skip("linking not supported") })
	t.Run("test:3082", func(t *testing.T) { t.Skip("linking not supported") })
}

func Test_table_fill(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "table_fill.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("get:13", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:14", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:15", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:16", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:17", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("fill:19", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:20", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:21", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:22", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:23", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:24", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("fill:26", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:27", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:28", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:29", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:30", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("fill:32", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:33", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:34", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:35", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("fill:37", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:38", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:39", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:40", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("fill:42", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:43", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:44", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("fill:46", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:47", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("fill:50", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:53", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:54", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:55", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("fill:58", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("fill:63", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("assert_invalid:71", func(t *testing.T) { assertInvalidSpec(t, "table_fill.1.wasm", "type mismatch") })
	t.Run("assert_invalid:80", func(t *testing.T) { assertInvalidSpec(t, "table_fill.2.wasm", "type mismatch") })
	t.Run("assert_invalid:89", func(t *testing.T) { assertInvalidSpec(t, "table_fill.3.wasm", "type mismatch") })
	t.Run("assert_invalid:98", func(t *testing.T) { assertInvalidSpec(t, "table_fill.4.wasm", "type mismatch") })
	t.Run("assert_invalid:107", func(t *testing.T) { assertInvalidSpec(t, "table_fill.5.wasm", "type mismatch") })
	t.Run("assert_invalid:116", func(t *testing.T) { assertInvalidSpec(t, "table_fill.6.wasm", "type mismatch") })
	t.Run("assert_invalid:125", func(t *testing.T) { assertInvalidSpec(t, "table_fill.7.wasm", "type mismatch") })
	t.Run("assert_invalid:135", func(t *testing.T) { assertInvalidSpec(t, "table_fill.8.wasm", "type mismatch") })
	t.Run("assert_invalid:146", func(t *testing.T) { assertInvalidSpec(t, "table_fill.9.wasm", "type mismatch") })
}

func Test_table_get(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "table_get.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("init:24", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get-externref:26", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get-externref:27", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get-funcref:29", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("is_null-funcref:30", func(t *testing.T) { x0.assertReturnInvoke(t, "is_null-funcref", []arg{{wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("is_null-funcref:31", func(t *testing.T) { x0.assertReturnInvoke(t, "is_null-funcref", []arg{{wa.I32, 2}}, arg{wa.I32, 0}) })
	t.Run("get-externref:33", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get-funcref:34", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get-externref:35", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get-funcref:36", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("assert_invalid:42", func(t *testing.T) { assertInvalidSpec(t, "table_get.1.wasm", "type mismatch") })
	t.Run("assert_invalid:51", func(t *testing.T) { assertInvalidSpec(t, "table_get.2.wasm", "type mismatch") })
	t.Run("assert_invalid:61", func(t *testing.T) { assertInvalidSpec(t, "table_get.3.wasm", "type mismatch") })
	t.Run("assert_invalid:70", func(t *testing.T) { assertInvalidSpec(t, "table_get.4.wasm", "type mismatch") })
	t.Run("assert_invalid:80", func(t *testing.T) { assertInvalidSpec(t, "table_get.5.wasm", "type mismatch") })
}

func Test_table_grow(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "table_grow.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("size:13", func(t *testing.T) { x0.assertReturnInvoke(t, "size", nil, arg{wa.I32, 0}) })
	t.Run("set:14", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:15", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("grow:17", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("size:18", func(t *testing.T) { x0.assertReturnInvoke(t, "size", nil, arg{wa.I32, 1}) })
	t.Run("get:19", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("set:20", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:21", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("set:22", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:23", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("grow:25", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("size:26", func(t *testing.T) { x0.assertReturnInvoke(t, "size", nil, arg{wa.I32, 5}) })
	t.Run("get:27", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("set:28", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:29", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:30", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:31", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("set:32", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:33", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("set:34", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get:35", func(t *testing.T) { t.Skip("reference types not supported") })
	x1 := instantiateSpecTest(t, "1", "table_grow.1.wasm")
	t.Cleanup(func() { x1.close(t) })
	t.Run("grow:47", func(t *testing.T) { x1.assertReturnInvoke(t, "grow", nil, arg{wa.I32, 4294967295}) })
	x2 := instantiateSpecTest(t, "2", "table_grow.2.wasm")
	t.Cleanup(func() { x2.close(t) })
	t.Run("grow:57", func(t *testing.T) { x2.assertReturnInvoke(t, "grow", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("grow:58", func(t *testing.T) { x2.assertReturnInvoke(t, "grow", []arg{{wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("grow:59", func(t *testing.T) { x2.assertReturnInvoke(t, "grow", []arg{{wa.I32, 0}}, arg{wa.I32, 1}) })
	t.Run("grow:60", func(t *testing.T) { x2.assertReturnInvoke(t, "grow", []arg{{wa.I32, 2}}, arg{wa.I32, 1}) })
	t.Run("grow:61", func(t *testing.T) { x2.assertReturnInvoke(t, "grow", []arg{{wa.I32, 800}}, arg{wa.I32, 3}) })
	x3 := instantiateSpecTest(t, "3", "table_grow.3.wasm")
	t.Cleanup(func() { x3.close(t) })
	t.Run("grow:71", func(t *testing.T) { x3.assertReturnInvoke(t, "grow", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("grow:72", func(t *testing.T) { x3.assertReturnInvoke(t, "grow", []arg{{wa.I32, 1}}, arg{wa.I32, 0}) })
	t.Run("grow:73", func(t *testing.T) { x3.assertReturnInvoke(t, "grow", []arg{{wa.I32, 1}}, arg{wa.I32, 1}) })
	t.Run("grow:74", func(t *testing.T) { x3.assertReturnInvoke(t, "grow", []arg{{wa.I32, 2}}, arg{wa.I32, 2}) })
	t.Run("grow:75", func(t *testing.T) { x3.assertReturnInvoke(t, "grow", []arg{{wa.I32, 6}}, arg{wa.I32, 4}) })
	t.Run("grow:76", func(t *testing.T) { x3.assertReturnInvoke(t, "grow", []arg{{wa.I32, 0}}, arg{wa.I32, 10}) })
	t.Run("grow:77", func(t *testing.T) { x3.assertReturnInvoke(t, "grow", []arg{{wa.I32, 1}}, arg{wa.I32, 4294967295}) })
	t.Run("grow:78", func(t *testing.T) { x3.assertReturnInvoke(t, "grow", []arg{{wa.I32, 65536}}, arg{wa.I32, 4294967295}) })
	x4 := instantiateSpecTest(t, "4", "table_grow.4.wasm")
	t.Cleanup(func() { x4.close(t) })
	t.Run("check-table-null:103", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("grow:104", func(t *testing.T) { x4.assertReturnInvoke(t, "grow", []arg{{wa.I32, 10}}, arg{wa.I32, 10}) })
	t.Run("check-table-null:105", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("assert_invalid:111", func(t *testing.T) { assertInvalidSpec(t, "table_grow.5.wasm", "type mismatch") })
	t.Run("assert_invalid:120", func(t *testing.T) { assertInvalidSpec(t, "table_grow.6.wasm", "type mismatch") })
	t.Run("assert_invalid:129", func(t *testing.T) { assertInvalidSpec(t, "table_grow.7.wasm", "type mismatch") })
	t.Run("assert_invalid:138", func(t *testing.T) { assertInvalidSpec(t, "table_grow.8.wasm", "type mismatch") })
	t.Run("assert_invalid:147", func(t *testing.T) { assertInvalidSpec(t, "table_grow.9.wasm", "type mismatch") })
	t.Run("assert_invalid:157", func(t *testing.T) { assertInvalidSpec(t, "table_grow.10.wasm", "type mismatch") })
	t.Run("assert_invalid:166", func(t *testing.T) { assertInvalidSpec(t, "table_grow.11.wasm", "type mismatch") })
}

func Test_table_init(t *testing.T) { t.Skip("table_init not supported") }

func Test_table_set(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "table_set.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("get-externref:29", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("set-externref:30", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get-externref:31", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("set-externref:32", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get-externref:33", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get-funcref:35", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("set-funcref-from:36", func(t *testing.T) {
		x0.assertReturnInvoke(t, "set-funcref-from", []arg{{wa.I32, 0}, {wa.I32, 1}}, arg{})
	})
	t.Run("is_null-funcref:37", func(t *testing.T) { x0.assertReturnInvoke(t, "is_null-funcref", []arg{{wa.I32, 0}}, arg{wa.I32, 0}) })
	t.Run("set-funcref:38", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("get-funcref:39", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("set-externref:41", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("set-funcref:42", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("set-externref:43", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("set-funcref:44", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("set-externref:46", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("set-funcref-from:47", func(t *testing.T) {
		x0.assertTrap(t, "set-funcref-from", []arg{{wa.I32, 3}, {wa.I32, 1}}, arg{}, "out of bounds table access")
	})
	t.Run("set-externref:48", func(t *testing.T) { t.Skip("reference types not supported") })
	t.Run("set-funcref-from:49", func(t *testing.T) {
		x0.assertTrap(t, "set-funcref-from", []arg{{wa.I32, 4294967295}, {wa.I32, 1}}, arg{}, "out of bounds table access")
	})
	t.Run("assert_invalid:55", func(t *testing.T) { assertInvalidSpec(t, "table_set.1.wasm", "type mismatch") })
	t.Run("assert_invalid:64", func(t *testing.T) { assertInvalidSpec(t, "table_set.2.wasm", "type mismatch") })
	t.Run("assert_invalid:73", func(t *testing.T) { assertInvalidSpec(t, "table_set.3.wasm", "type mismatch") })
	t.Run("assert_invalid:82", func(t *testing.T) { assertInvalidSpec(t, "table_set.4.wasm", "type mismatch") })
	t.Run("assert_invalid:91", func(t *testing.T) { assertInvalidSpec(t, "table_set.5.wasm", "type mismatch") })
	t.Run("assert_invalid:101", func(t *testing.T) { assertInvalidSpec(t, "table_set.6.wasm", "type mismatch") })
	t.Run("assert_invalid:112", func(t *testing.T) { assertInvalidSpec(t, "table_set.7.wasm", "type mismatch") })
}

func Test_table_size(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "table_size.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("size-t0:26", func(t *testing.T) { x0.assertReturnInvoke(t, "size-t0", nil, arg{wa.I32, 0}) })
	t.Run("grow-t0:27", func(t *testing.T) { x0.assertReturnInvoke(t, "grow-t0", []arg{{wa.I32, 1}}, arg{}) })
	t.Run("size-t0:28", func(t *testing.T) { x0.assertReturnInvoke(t, "size-t0", nil, arg{wa.I32, 1}) })
	t.Run("grow-t0:29", func(t *testing.T) { x0.assertReturnInvoke(t, "grow-t0", []arg{{wa.I32, 4}}, arg{}) })
	t.Run("size-t0:30", func(t *testing.T) { x0.assertReturnInvoke(t, "size-t0", nil, arg{wa.I32, 5}) })
	t.Run("grow-t0:31", func(t *testing.T) { x0.assertReturnInvoke(t, "grow-t0", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("size-t0:32", func(t *testing.T) { x0.assertReturnInvoke(t, "size-t0", nil, arg{wa.I32, 5}) })
	t.Run("size-t1:34", func(t *testing.T) { x0.assertReturnInvoke(t, "size-t1", nil, arg{wa.I32, 1}) })
	t.Run("grow-t1:35", func(t *testing.T) { x0.assertReturnInvoke(t, "grow-t1", []arg{{wa.I32, 1}}, arg{}) })
	t.Run("size-t1:36", func(t *testing.T) { x0.assertReturnInvoke(t, "size-t1", nil, arg{wa.I32, 2}) })
	t.Run("grow-t1:37", func(t *testing.T) { x0.assertReturnInvoke(t, "grow-t1", []arg{{wa.I32, 4}}, arg{}) })
	t.Run("size-t1:38", func(t *testing.T) { x0.assertReturnInvoke(t, "size-t1", nil, arg{wa.I32, 6}) })
	t.Run("grow-t1:39", func(t *testing.T) { x0.assertReturnInvoke(t, "grow-t1", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("size-t1:40", func(t *testing.T) { x0.assertReturnInvoke(t, "size-t1", nil, arg{wa.I32, 6}) })
	t.Run("size-t2:42", func(t *testing.T) { x0.assertReturnInvoke(t, "size-t2", nil, arg{wa.I32, 0}) })
	t.Run("grow-t2:43", func(t *testing.T) { x0.assertReturnInvoke(t, "grow-t2", []arg{{wa.I32, 3}}, arg{}) })
	t.Run("size-t2:44", func(t *testing.T) { x0.assertReturnInvoke(t, "size-t2", nil, arg{wa.I32, 0}) })
	t.Run("grow-t2:45", func(t *testing.T) { x0.assertReturnInvoke(t, "grow-t2", []arg{{wa.I32, 1}}, arg{}) })
	t.Run("size-t2:46", func(t *testing.T) { x0.assertReturnInvoke(t, "size-t2", nil, arg{wa.I32, 1}) })
	t.Run("grow-t2:47", func(t *testing.T) { x0.assertReturnInvoke(t, "grow-t2", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("size-t2:48", func(t *testing.T) { x0.assertReturnInvoke(t, "size-t2", nil, arg{wa.I32, 1}) })
	t.Run("grow-t2:49", func(t *testing.T) { x0.assertReturnInvoke(t, "grow-t2", []arg{{wa.I32, 4}}, arg{}) })
	t.Run("size-t2:50", func(t *testing.T) { x0.assertReturnInvoke(t, "size-t2", nil, arg{wa.I32, 1}) })
	t.Run("grow-t2:51", func(t *testing.T) { x0.assertReturnInvoke(t, "grow-t2", []arg{{wa.I32, 1}}, arg{}) })
	t.Run("size-t2:52", func(t *testing.T) { x0.assertReturnInvoke(t, "size-t2", nil, arg{wa.I32, 2}) })
	t.Run("size-t3:54", func(t *testing.T) { x0.assertReturnInvoke(t, "size-t3", nil, arg{wa.I32, 3}) })
	t.Run("grow-t3:55", func(t *testing.T) { x0.assertReturnInvoke(t, "grow-t3", []arg{{wa.I32, 1}}, arg{}) })
	t.Run("size-t3:56", func(t *testing.T) { x0.assertReturnInvoke(t, "size-t3", nil, arg{wa.I32, 4}) })
	t.Run("grow-t3:57", func(t *testing.T) { x0.assertReturnInvoke(t, "grow-t3", []arg{{wa.I32, 3}}, arg{}) })
	t.Run("size-t3:58", func(t *testing.T) { x0.assertReturnInvoke(t, "size-t3", nil, arg{wa.I32, 7}) })
	t.Run("grow-t3:59", func(t *testing.T) { x0.assertReturnInvoke(t, "grow-t3", []arg{{wa.I32, 0}}, arg{}) })
	t.Run("size-t3:60", func(t *testing.T) { x0.assertReturnInvoke(t, "size-t3", nil, arg{wa.I32, 7}) })
	t.Run("grow-t3:61", func(t *testing.T) { x0.assertReturnInvoke(t, "grow-t3", []arg{{wa.I32, 2}}, arg{}) })
	t.Run("size-t3:62", func(t *testing.T) { x0.assertReturnInvoke(t, "size-t3", nil, arg{wa.I32, 7}) })
	t.Run("grow-t3:63", func(t *testing.T) { x0.assertReturnInvoke(t, "grow-t3", []arg{{wa.I32, 1}}, arg{}) })
	t.Run("size-t3:64", func(t *testing.T) { x0.assertReturnInvoke(t, "size-t3", nil, arg{wa.I32, 8}) })
	t.Run("assert_invalid:70", func(t *testing.T) { assertInvalidSpec(t, "table_size.1.wasm", "type mismatch") })
	t.Run("assert_invalid:79", func(t *testing.T) { assertInvalidSpec(t, "table_size.2.wasm", "type mismatch") })
}

func Test_token(t *testing.T) {
	t.Run("assert_malformed:4", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:8", func(t *testing.T) { t.Skip("text format not supported") })
}

func Test_traps(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "traps.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("no_dce.i32.div_s:16", func(t *testing.T) {
		x0.assertTrap(t, "no_dce.i32.div_s", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{}, "integer divide by zero")
	})
	t.Run("no_dce.i32.div_u:17", func(t *testing.T) {
		x0.assertTrap(t, "no_dce.i32.div_u", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{}, "integer divide by zero")
	})
	t.Run("no_dce.i64.div_s:18", func(t *testing.T) {
		x0.assertTrap(t, "no_dce.i64.div_s", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{}, "integer divide by zero")
	})
	t.Run("no_dce.i64.div_u:19", func(t *testing.T) {
		x0.assertTrap(t, "no_dce.i64.div_u", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{}, "integer divide by zero")
	})
	t.Run("no_dce.i32.div_s:20", func(t *testing.T) {
		x0.assertTrap(t, "no_dce.i32.div_s", []arg{{wa.I32, 2147483648}, {wa.I32, 4294967295}}, arg{}, "integer overflow")
	})
	t.Run("no_dce.i64.div_s:21", func(t *testing.T) {
		x0.assertTrap(t, "no_dce.i64.div_s", []arg{{wa.I64, 9223372036854775808}, {wa.I64, 18446744073709551615}}, arg{}, "integer overflow")
	})
	x1 := instantiateSpecTest(t, "1", "traps.1.wasm")
	t.Cleanup(func() { x1.close(t) })
	t.Run("no_dce.i32.rem_s:34", func(t *testing.T) {
		x1.assertTrap(t, "no_dce.i32.rem_s", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{}, "integer divide by zero")
	})
	t.Run("no_dce.i32.rem_u:35", func(t *testing.T) {
		x1.assertTrap(t, "no_dce.i32.rem_u", []arg{{wa.I32, 1}, {wa.I32, 0}}, arg{}, "integer divide by zero")
	})
	t.Run("no_dce.i64.rem_s:36", func(t *testing.T) {
		x1.assertTrap(t, "no_dce.i64.rem_s", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{}, "integer divide by zero")
	})
	t.Run("no_dce.i64.rem_u:37", func(t *testing.T) {
		x1.assertTrap(t, "no_dce.i64.rem_u", []arg{{wa.I64, 1}, {wa.I64, 0}}, arg{}, "integer divide by zero")
	})
	x2 := instantiateSpecTest(t, "2", "traps.2.wasm")
	t.Cleanup(func() { x2.close(t) })
	t.Run("no_dce.i32.trunc_f32_s:50", func(t *testing.T) {
		x2.assertTrap(t, "no_dce.i32.trunc_f32_s", []arg{{wa.F32, 2143289344}}, arg{}, "invalid conversion to integer")
	})
	t.Run("no_dce.i32.trunc_f32_u:51", func(t *testing.T) {
		x2.assertTrap(t, "no_dce.i32.trunc_f32_u", []arg{{wa.F32, 2143289344}}, arg{}, "invalid conversion to integer")
	})
	t.Run("no_dce.i32.trunc_f64_s:52", func(t *testing.T) {
		x2.assertTrap(t, "no_dce.i32.trunc_f64_s", []arg{{wa.F64, 9221120237041090560}}, arg{}, "invalid conversion to integer")
	})
	t.Run("no_dce.i32.trunc_f64_u:53", func(t *testing.T) {
		x2.assertTrap(t, "no_dce.i32.trunc_f64_u", []arg{{wa.F64, 9221120237041090560}}, arg{}, "invalid conversion to integer")
	})
	t.Run("no_dce.i64.trunc_f32_s:54", func(t *testing.T) {
		x2.assertTrap(t, "no_dce.i64.trunc_f32_s", []arg{{wa.F32, 2143289344}}, arg{}, "invalid conversion to integer")
	})
	t.Run("no_dce.i64.trunc_f32_u:55", func(t *testing.T) {
		x2.assertTrap(t, "no_dce.i64.trunc_f32_u", []arg{{wa.F32, 2143289344}}, arg{}, "invalid conversion to integer")
	})
	t.Run("no_dce.i64.trunc_f64_s:56", func(t *testing.T) {
		x2.assertTrap(t, "no_dce.i64.trunc_f64_s", []arg{{wa.F64, 9221120237041090560}}, arg{}, "invalid conversion to integer")
	})
	t.Run("no_dce.i64.trunc_f64_u:57", func(t *testing.T) {
		x2.assertTrap(t, "no_dce.i64.trunc_f64_u", []arg{{wa.F64, 9221120237041090560}}, arg{}, "invalid conversion to integer")
	})
	x3 := instantiateSpecTest(t, "3", "traps.3.wasm")
	t.Cleanup(func() { x3.close(t) })
	t.Run("no_dce.i32.load:78", func(t *testing.T) {
		x3.assertTrap(t, "no_dce.i32.load", []arg{{wa.I32, 65536}}, arg{}, "out of bounds memory access")
	})
	t.Run("no_dce.i32.load16_s:79", func(t *testing.T) {
		x3.assertTrap(t, "no_dce.i32.load16_s", []arg{{wa.I32, 65536}}, arg{}, "out of bounds memory access")
	})
	t.Run("no_dce.i32.load16_u:80", func(t *testing.T) {
		x3.assertTrap(t, "no_dce.i32.load16_u", []arg{{wa.I32, 65536}}, arg{}, "out of bounds memory access")
	})
	t.Run("no_dce.i32.load8_s:81", func(t *testing.T) {
		x3.assertTrap(t, "no_dce.i32.load8_s", []arg{{wa.I32, 65536}}, arg{}, "out of bounds memory access")
	})
	t.Run("no_dce.i32.load8_u:82", func(t *testing.T) {
		x3.assertTrap(t, "no_dce.i32.load8_u", []arg{{wa.I32, 65536}}, arg{}, "out of bounds memory access")
	})
	t.Run("no_dce.i64.load:83", func(t *testing.T) {
		x3.assertTrap(t, "no_dce.i64.load", []arg{{wa.I32, 65536}}, arg{}, "out of bounds memory access")
	})
	t.Run("no_dce.i64.load32_s:84", func(t *testing.T) {
		x3.assertTrap(t, "no_dce.i64.load32_s", []arg{{wa.I32, 65536}}, arg{}, "out of bounds memory access")
	})
	t.Run("no_dce.i64.load32_u:85", func(t *testing.T) {
		x3.assertTrap(t, "no_dce.i64.load32_u", []arg{{wa.I32, 65536}}, arg{}, "out of bounds memory access")
	})
	t.Run("no_dce.i64.load16_s:86", func(t *testing.T) {
		x3.assertTrap(t, "no_dce.i64.load16_s", []arg{{wa.I32, 65536}}, arg{}, "out of bounds memory access")
	})
	t.Run("no_dce.i64.load16_u:87", func(t *testing.T) {
		x3.assertTrap(t, "no_dce.i64.load16_u", []arg{{wa.I32, 65536}}, arg{}, "out of bounds memory access")
	})
	t.Run("no_dce.i64.load8_s:88", func(t *testing.T) {
		x3.assertTrap(t, "no_dce.i64.load8_s", []arg{{wa.I32, 65536}}, arg{}, "out of bounds memory access")
	})
	t.Run("no_dce.i64.load8_u:89", func(t *testing.T) {
		x3.assertTrap(t, "no_dce.i64.load8_u", []arg{{wa.I32, 65536}}, arg{}, "out of bounds memory access")
	})
	t.Run("no_dce.f32.load:90", func(t *testing.T) {
		x3.assertTrap(t, "no_dce.f32.load", []arg{{wa.I32, 65536}}, arg{}, "out of bounds memory access")
	})
	t.Run("no_dce.f64.load:91", func(t *testing.T) {
		x3.assertTrap(t, "no_dce.f64.load", []arg{{wa.I32, 65536}}, arg{}, "out of bounds memory access")
	})
}

func Test_type(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "type.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("assert_malformed:44", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:48", func(t *testing.T) { t.Skip("text format not supported") })
}

func Test_unreachable(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "unreachable.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("type-i32:221", func(t *testing.T) { x0.assertTrap(t, "type-i32", nil, arg{Type: wa.I32}, "unreachable") })
	t.Run("type-i64:222", func(t *testing.T) { x0.assertTrap(t, "type-i64", nil, arg{Type: wa.I32}, "unreachable") })
	t.Run("type-f32:223", func(t *testing.T) { x0.assertTrap(t, "type-f32", nil, arg{Type: wa.F64}, "unreachable") })
	t.Run("type-f64:224", func(t *testing.T) { x0.assertTrap(t, "type-f64", nil, arg{Type: wa.F64}, "unreachable") })
	t.Run("as-func-first:226", func(t *testing.T) { x0.assertTrap(t, "as-func-first", nil, arg{Type: wa.I32}, "unreachable") })
	t.Run("as-func-mid:227", func(t *testing.T) { x0.assertTrap(t, "as-func-mid", nil, arg{Type: wa.I32}, "unreachable") })
	t.Run("as-func-last:228", func(t *testing.T) { x0.assertTrap(t, "as-func-last", nil, arg{}, "unreachable") })
	t.Run("as-func-value:229", func(t *testing.T) { x0.assertTrap(t, "as-func-value", nil, arg{Type: wa.I32}, "unreachable") })
	t.Run("as-block-first:231", func(t *testing.T) { x0.assertTrap(t, "as-block-first", nil, arg{Type: wa.I32}, "unreachable") })
	t.Run("as-block-mid:232", func(t *testing.T) { x0.assertTrap(t, "as-block-mid", nil, arg{Type: wa.I32}, "unreachable") })
	t.Run("as-block-last:233", func(t *testing.T) { x0.assertTrap(t, "as-block-last", nil, arg{}, "unreachable") })
	t.Run("as-block-value:234", func(t *testing.T) { x0.assertTrap(t, "as-block-value", nil, arg{Type: wa.I32}, "unreachable") })
	t.Run("as-block-broke:235", func(t *testing.T) { x0.assertReturnInvoke(t, "as-block-broke", nil, arg{wa.I32, 1}) })
	t.Run("as-loop-first:237", func(t *testing.T) { x0.assertTrap(t, "as-loop-first", nil, arg{Type: wa.I32}, "unreachable") })
	t.Run("as-loop-mid:238", func(t *testing.T) { x0.assertTrap(t, "as-loop-mid", nil, arg{Type: wa.I32}, "unreachable") })
	t.Run("as-loop-last:239", func(t *testing.T) { x0.assertTrap(t, "as-loop-last", nil, arg{}, "unreachable") })
	t.Run("as-loop-broke:240", func(t *testing.T) { x0.assertReturnInvoke(t, "as-loop-broke", nil, arg{wa.I32, 1}) })
	t.Run("as-br-value:242", func(t *testing.T) { x0.assertTrap(t, "as-br-value", nil, arg{Type: wa.I32}, "unreachable") })
	t.Run("as-br_if-cond:244", func(t *testing.T) { x0.assertTrap(t, "as-br_if-cond", nil, arg{}, "unreachable") })
	t.Run("as-br_if-value:245", func(t *testing.T) { x0.assertTrap(t, "as-br_if-value", nil, arg{Type: wa.I32}, "unreachable") })
	t.Run("as-br_if-value-cond:246", func(t *testing.T) { x0.assertTrap(t, "as-br_if-value-cond", nil, arg{Type: wa.I32}, "unreachable") })
	t.Run("as-br_table-index:248", func(t *testing.T) { x0.assertTrap(t, "as-br_table-index", nil, arg{}, "unreachable") })
	t.Run("as-br_table-value:249", func(t *testing.T) { x0.assertTrap(t, "as-br_table-value", nil, arg{Type: wa.I32}, "unreachable") })
	t.Run("as-br_table-value-2:250", func(t *testing.T) { x0.assertTrap(t, "as-br_table-value-2", nil, arg{Type: wa.I32}, "unreachable") })
	t.Run("as-br_table-value-index:251", func(t *testing.T) { x0.assertTrap(t, "as-br_table-value-index", nil, arg{Type: wa.I32}, "unreachable") })
	t.Run("as-br_table-value-and-index:252", func(t *testing.T) {
		x0.assertTrap(t, "as-br_table-value-and-index", nil, arg{Type: wa.I32}, "unreachable")
	})
	t.Run("as-return-value:254", func(t *testing.T) { x0.assertTrap(t, "as-return-value", nil, arg{Type: wa.I64}, "unreachable") })
	t.Run("as-if-cond:256", func(t *testing.T) { x0.assertTrap(t, "as-if-cond", nil, arg{Type: wa.I32}, "unreachable") })
	t.Run("as-if-then:257", func(t *testing.T) {
		x0.assertTrap(t, "as-if-then", []arg{{wa.I32, 1}, {wa.I32, 6}}, arg{Type: wa.I32}, "unreachable")
	})
	t.Run("as-if-then:258", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-if-then", []arg{{wa.I32, 0}, {wa.I32, 6}}, arg{wa.I32, 6})
	})
	t.Run("as-if-else:259", func(t *testing.T) {
		x0.assertTrap(t, "as-if-else", []arg{{wa.I32, 0}, {wa.I32, 6}}, arg{Type: wa.I32}, "unreachable")
	})
	t.Run("as-if-else:260", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-if-else", []arg{{wa.I32, 1}, {wa.I32, 6}}, arg{wa.I32, 6})
	})
	t.Run("as-if-then-no-else:261", func(t *testing.T) {
		x0.assertTrap(t, "as-if-then-no-else", []arg{{wa.I32, 1}, {wa.I32, 6}}, arg{Type: wa.I32}, "unreachable")
	})
	t.Run("as-if-then-no-else:262", func(t *testing.T) {
		x0.assertReturnInvoke(t, "as-if-then-no-else", []arg{{wa.I32, 0}, {wa.I32, 6}}, arg{wa.I32, 6})
	})
	t.Run("as-select-first:264", func(t *testing.T) {
		x0.assertTrap(t, "as-select-first", []arg{{wa.I32, 0}, {wa.I32, 6}}, arg{Type: wa.I32}, "unreachable")
	})
	t.Run("as-select-first:265", func(t *testing.T) {
		x0.assertTrap(t, "as-select-first", []arg{{wa.I32, 1}, {wa.I32, 6}}, arg{Type: wa.I32}, "unreachable")
	})
	t.Run("as-select-second:266", func(t *testing.T) {
		x0.assertTrap(t, "as-select-second", []arg{{wa.I32, 0}, {wa.I32, 6}}, arg{Type: wa.I32}, "unreachable")
	})
	t.Run("as-select-second:267", func(t *testing.T) {
		x0.assertTrap(t, "as-select-second", []arg{{wa.I32, 1}, {wa.I32, 6}}, arg{Type: wa.I32}, "unreachable")
	})
	t.Run("as-select-cond:268", func(t *testing.T) { x0.assertTrap(t, "as-select-cond", nil, arg{Type: wa.I32}, "unreachable") })
	t.Run("as-call-first:270", func(t *testing.T) { x0.assertTrap(t, "as-call-first", nil, arg{}, "unreachable") })
	t.Run("as-call-mid:271", func(t *testing.T) { x0.assertTrap(t, "as-call-mid", nil, arg{}, "unreachable") })
	t.Run("as-call-last:272", func(t *testing.T) { x0.assertTrap(t, "as-call-last", nil, arg{}, "unreachable") })
	t.Run("as-call_indirect-func:274", func(t *testing.T) { x0.assertTrap(t, "as-call_indirect-func", nil, arg{}, "unreachable") })
	t.Run("as-call_indirect-first:275", func(t *testing.T) { x0.assertTrap(t, "as-call_indirect-first", nil, arg{}, "unreachable") })
	t.Run("as-call_indirect-mid:276", func(t *testing.T) { x0.assertTrap(t, "as-call_indirect-mid", nil, arg{}, "unreachable") })
	t.Run("as-call_indirect-last:277", func(t *testing.T) { x0.assertTrap(t, "as-call_indirect-last", nil, arg{}, "unreachable") })
	t.Run("as-local.set-value:279", func(t *testing.T) { x0.assertTrap(t, "as-local.set-value", nil, arg{}, "unreachable") })
	t.Run("as-local.tee-value:280", func(t *testing.T) { x0.assertTrap(t, "as-local.tee-value", nil, arg{Type: wa.F32}, "unreachable") })
	t.Run("as-global.set-value:281", func(t *testing.T) { x0.assertTrap(t, "as-global.set-value", nil, arg{Type: wa.F32}, "unreachable") })
	t.Run("as-load-address:283", func(t *testing.T) { x0.assertTrap(t, "as-load-address", nil, arg{Type: wa.F32}, "unreachable") })
	t.Run("as-loadN-address:284", func(t *testing.T) { x0.assertTrap(t, "as-loadN-address", nil, arg{Type: wa.I64}, "unreachable") })
	t.Run("as-store-address:286", func(t *testing.T) { x0.assertTrap(t, "as-store-address", nil, arg{}, "unreachable") })
	t.Run("as-store-value:287", func(t *testing.T) { x0.assertTrap(t, "as-store-value", nil, arg{}, "unreachable") })
	t.Run("as-storeN-address:288", func(t *testing.T) { x0.assertTrap(t, "as-storeN-address", nil, arg{}, "unreachable") })
	t.Run("as-storeN-value:289", func(t *testing.T) { x0.assertTrap(t, "as-storeN-value", nil, arg{}, "unreachable") })
	t.Run("as-unary-operand:291", func(t *testing.T) { x0.assertTrap(t, "as-unary-operand", nil, arg{Type: wa.F32}, "unreachable") })
	t.Run("as-binary-left:293", func(t *testing.T) { x0.assertTrap(t, "as-binary-left", nil, arg{Type: wa.I32}, "unreachable") })
	t.Run("as-binary-right:294", func(t *testing.T) { x0.assertTrap(t, "as-binary-right", nil, arg{Type: wa.I64}, "unreachable") })
	t.Run("as-test-operand:296", func(t *testing.T) { x0.assertTrap(t, "as-test-operand", nil, arg{Type: wa.I32}, "unreachable") })
	t.Run("as-compare-left:298", func(t *testing.T) { x0.assertTrap(t, "as-compare-left", nil, arg{Type: wa.I32}, "unreachable") })
	t.Run("as-compare-right:299", func(t *testing.T) { x0.assertTrap(t, "as-compare-right", nil, arg{Type: wa.I32}, "unreachable") })
	t.Run("as-convert-operand:301", func(t *testing.T) { x0.assertTrap(t, "as-convert-operand", nil, arg{Type: wa.I32}, "unreachable") })
	t.Run("as-memory.grow-size:303", func(t *testing.T) { x0.assertTrap(t, "as-memory.grow-size", nil, arg{Type: wa.I32}, "unreachable") })
}

func Test_unreached_invalid(t *testing.T) {
	t.Run("assert_invalid:4", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.0.wasm", "unknown local") })
	t.Run("assert_invalid:8", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.1.wasm", "unknown global") })
	t.Run("assert_invalid:12", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.2.wasm", "unknown function") })
	t.Run("assert_invalid:16", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.3.wasm", "unknown label") })
	t.Run("assert_invalid:21", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.4.wasm", "type mismatch") })
	t.Run("assert_invalid:27", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.5.wasm", "type mismatch") })
	t.Run("assert_invalid:33", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.6.wasm", "type mismatch") })
	t.Run("assert_invalid:42", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.7.wasm", "type mismatch") })
	t.Run("assert_invalid:46", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.8.wasm", "type mismatch") })
	t.Run("assert_invalid:50", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.9.wasm", "type mismatch") })
	t.Run("assert_invalid:56", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.10.wasm", "type mismatch") })
	t.Run("assert_invalid:60", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.11.wasm", "type mismatch") })
	t.Run("assert_invalid:64", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.12.wasm", "type mismatch") })
	t.Run("assert_invalid:71", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.13.wasm", "type mismatch") })
	t.Run("assert_invalid:77", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.14.wasm", "type mismatch") })
	t.Run("assert_invalid:83", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.15.wasm", "type mismatch") })
	t.Run("assert_invalid:89", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.16.wasm", "type mismatch") })
	t.Run("assert_invalid:95", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.17.wasm", "type mismatch") })
	t.Run("assert_invalid:101", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.18.wasm", "type mismatch") })
	t.Run("assert_invalid:107", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.19.wasm", "type mismatch") })
	t.Run("assert_invalid:113", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.20.wasm", "type mismatch") })
	t.Run("assert_invalid:119", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.21.wasm", "type mismatch") })
	t.Run("assert_invalid:125", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.22.wasm", "type mismatch") })
	t.Run("assert_invalid:132", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.23.wasm", "type mismatch") })
	t.Run("assert_invalid:138", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.24.wasm", "type mismatch") })
	t.Run("assert_invalid:144", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.25.wasm", "type mismatch") })
	t.Run("assert_invalid:150", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.26.wasm", "type mismatch") })
	t.Run("assert_invalid:156", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.27.wasm", "type mismatch") })
	t.Run("assert_invalid:162", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.28.wasm", "type mismatch") })
	t.Run("assert_invalid:168", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.29.wasm", "type mismatch") })
	t.Run("assert_invalid:174", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.30.wasm", "type mismatch") })
	t.Run("assert_invalid:180", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.31.wasm", "type mismatch") })
	t.Run("assert_invalid:186", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.32.wasm", "type mismatch") })
	t.Run("assert_invalid:193", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.33.wasm", "type mismatch") })
	t.Run("assert_invalid:199", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.34.wasm", "type mismatch") })
	t.Run("assert_invalid:205", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.35.wasm", "type mismatch") })
	t.Run("assert_invalid:211", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.36.wasm", "type mismatch") })
	t.Run("assert_invalid:217", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.37.wasm", "type mismatch") })
	t.Run("assert_invalid:223", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.38.wasm", "type mismatch") })
	t.Run("assert_invalid:229", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.39.wasm", "type mismatch") })
	t.Run("assert_invalid:235", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.40.wasm", "type mismatch") })
	t.Run("assert_invalid:241", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.41.wasm", "type mismatch") })
	t.Run("assert_invalid:247", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.42.wasm", "type mismatch") })
	t.Run("assert_invalid:253", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.43.wasm", "type mismatch") })
	t.Run("assert_invalid:259", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.44.wasm", "type mismatch") })
	t.Run("assert_invalid:265", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.45.wasm", "type mismatch") })
	t.Run("assert_invalid:271", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.46.wasm", "type mismatch") })
	t.Run("assert_invalid:277", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.47.wasm", "type mismatch") })
	t.Run("assert_invalid:284", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.48.wasm", "type mismatch") })
	t.Run("assert_invalid:290", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.49.wasm", "type mismatch") })
	t.Run("assert_invalid:296", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.50.wasm", "type mismatch") })
	t.Run("assert_invalid:302", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.51.wasm", "type mismatch") })
	t.Run("assert_invalid:308", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.52.wasm", "type mismatch") })
	t.Run("assert_invalid:314", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.53.wasm", "type mismatch") })
	t.Run("assert_invalid:321", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.54.wasm", "type mismatch") })
	t.Run("assert_invalid:327", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.55.wasm", "type mismatch") })
	t.Run("assert_invalid:334", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.56.wasm", "type mismatch") })
	t.Run("assert_invalid:340", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.57.wasm", "type mismatch") })
	t.Run("assert_invalid:348", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.58.wasm", "type mismatch") })
	t.Run("assert_invalid:354", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.59.wasm", "type mismatch") })
	t.Run("assert_invalid:360", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.60.wasm", "type mismatch") })
	t.Run("assert_invalid:366", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.61.wasm", "type mismatch") })
	t.Run("assert_invalid:372", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.62.wasm", "type mismatch") })
	t.Run("assert_invalid:378", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.63.wasm", "type mismatch") })
	t.Run("assert_invalid:384", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.64.wasm", "type mismatch") })
	t.Run("assert_invalid:390", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.65.wasm", "type mismatch") })
	t.Run("assert_invalid:396", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.66.wasm", "type mismatch") })
	t.Run("assert_invalid:402", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.67.wasm", "type mismatch") })
	t.Run("assert_invalid:409", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.68.wasm", "type mismatch") })
	t.Run("assert_invalid:415", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.69.wasm", "type mismatch") })
	t.Run("assert_invalid:421", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.70.wasm", "type mismatch") })
	t.Run("assert_invalid:427", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.71.wasm", "type mismatch") })
	t.Run("assert_invalid:433", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.72.wasm", "type mismatch") })
	t.Run("assert_invalid:439", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.73.wasm", "type mismatch") })
	t.Run("assert_invalid:445", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.74.wasm", "type mismatch") })
	t.Run("assert_invalid:451", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.75.wasm", "type mismatch") })
	t.Run("assert_invalid:457", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.76.wasm", "type mismatch") })
	t.Run("assert_invalid:463", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.77.wasm", "type mismatch") })
	t.Run("assert_invalid:470", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.78.wasm", "type mismatch") })
	t.Run("assert_invalid:477", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.79.wasm", "type mismatch") })
	t.Run("assert_invalid:484", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.80.wasm", "type mismatch") })
	t.Run("assert_invalid:490", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.81.wasm", "type mismatch") })
	t.Run("assert_invalid:498", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.82.wasm", "type mismatch") })
	t.Run("assert_invalid:507", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.83.wasm", "type mismatch") })
	t.Run("assert_invalid:515", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.84.wasm", "type mismatch") })
	t.Run("assert_invalid:521", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.85.wasm", "type mismatch") })
	t.Run("assert_invalid:527", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.86.wasm", "type mismatch") })
	t.Run("assert_invalid:540", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.87.wasm", "type mismatch") })
	t.Run("assert_invalid:546", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.88.wasm", "type mismatch") })
	t.Run("assert_invalid:552", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.89.wasm", "type mismatch") })
	t.Run("assert_invalid:558", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.90.wasm", "type mismatch") })
	t.Run("assert_invalid:565", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.91.wasm", "type mismatch") })
	t.Run("assert_invalid:571", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.92.wasm", "type mismatch") })
	t.Run("assert_invalid:577", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.93.wasm", "type mismatch") })
	t.Run("assert_invalid:584", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.94.wasm", "type mismatch") })
	t.Run("assert_invalid:590", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.95.wasm", "type mismatch") })
	t.Run("assert_invalid:596", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.96.wasm", "type mismatch") })
	t.Run("assert_invalid:604", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.97.wasm", "type mismatch") })
	t.Run("assert_invalid:611", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.98.wasm", "type mismatch") })
	t.Run("assert_invalid:617", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.99.wasm", "type mismatch") })
	t.Run("assert_invalid:623", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.100.wasm", "type mismatch") })
	t.Run("assert_invalid:629", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.101.wasm", "type mismatch") })
	t.Run("assert_invalid:637", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.102.wasm", "type mismatch") })
	t.Run("assert_invalid:643", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.103.wasm", "type mismatch") })
	t.Run("assert_invalid:649", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.104.wasm", "type mismatch") })
	t.Run("assert_invalid:656", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.105.wasm", "type mismatch") })
	t.Run("assert_invalid:662", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.106.wasm", "type mismatch") })
	t.Run("assert_invalid:669", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.107.wasm", "type mismatch") })
	t.Run("assert_invalid:676", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.108.wasm", "type mismatch") })
	t.Run("assert_invalid:687", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.109.wasm", "type mismatch") })
	t.Run("assert_invalid:699", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.110.wasm", "type mismatch") })
	t.Run("assert_invalid:704", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.111.wasm", "type mismatch") })
	t.Run("assert_invalid:710", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.112.wasm", "type mismatch") })
	t.Run("assert_invalid:715", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.113.wasm", "type mismatch") })
	t.Run("assert_invalid:720", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.114.wasm", "type mismatch") })
	t.Run("assert_invalid:726", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.115.wasm", "type mismatch") })
	t.Run("assert_invalid:733", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.116.wasm", "type mismatch") })
	t.Run("assert_invalid:738", func(t *testing.T) { assertInvalidSpec(t, "unreached-invalid.117.wasm", "type mismatch") })
}

func Test_unreached_valid(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "unreached-valid.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("select-trap-left:42", func(t *testing.T) {
		x0.assertTrap(t, "select-trap-left", []arg{{wa.I32, 1}}, arg{Type: wa.I32}, "unreachable")
	})
	t.Run("select-trap-left:43", func(t *testing.T) {
		x0.assertTrap(t, "select-trap-left", []arg{{wa.I32, 0}}, arg{Type: wa.I32}, "unreachable")
	})
	t.Run("select-trap-right:44", func(t *testing.T) {
		x0.assertTrap(t, "select-trap-right", []arg{{wa.I32, 1}}, arg{Type: wa.I32}, "unreachable")
	})
	t.Run("select-trap-right:45", func(t *testing.T) {
		x0.assertTrap(t, "select-trap-right", []arg{{wa.I32, 0}}, arg{Type: wa.I32}, "unreachable")
	})
	x1 := instantiateSpecTest(t, "1", "unreached-valid.1.wasm")
	t.Cleanup(func() { x1.close(t) })
}

func Test_unwind(t *testing.T) {
	x0 := instantiateSpecTest(t, "0", "unwind.0.wasm")
	t.Cleanup(func() { x0.close(t) })
	t.Run("func-unwind-by-unreachable:212", func(t *testing.T) { x0.assertTrap(t, "func-unwind-by-unreachable", nil, arg{}, "unreachable") })
	t.Run("func-unwind-by-br:213", func(t *testing.T) { x0.assertReturnInvoke(t, "func-unwind-by-br", nil, arg{}) })
	t.Run("func-unwind-by-br-value:214", func(t *testing.T) { x0.assertReturnInvoke(t, "func-unwind-by-br-value", nil, arg{wa.I32, 9}) })
	t.Run("func-unwind-by-br_if:215", func(t *testing.T) { x0.assertReturnInvoke(t, "func-unwind-by-br_if", nil, arg{}) })
	t.Run("func-unwind-by-br_if-value:216", func(t *testing.T) { x0.assertReturnInvoke(t, "func-unwind-by-br_if-value", nil, arg{wa.I32, 9}) })
	t.Run("func-unwind-by-br_table:217", func(t *testing.T) { x0.assertReturnInvoke(t, "func-unwind-by-br_table", nil, arg{}) })
	t.Run("func-unwind-by-br_table-value:218", func(t *testing.T) { x0.assertReturnInvoke(t, "func-unwind-by-br_table-value", nil, arg{wa.I32, 9}) })
	t.Run("func-unwind-by-return:219", func(t *testing.T) { x0.assertReturnInvoke(t, "func-unwind-by-return", nil, arg{wa.I32, 9}) })
	t.Run("block-unwind-by-unreachable:221", func(t *testing.T) { x0.assertTrap(t, "block-unwind-by-unreachable", nil, arg{}, "unreachable") })
	t.Run("block-unwind-by-br:222", func(t *testing.T) { x0.assertReturnInvoke(t, "block-unwind-by-br", nil, arg{wa.I32, 9}) })
	t.Run("block-unwind-by-br-value:223", func(t *testing.T) { x0.assertReturnInvoke(t, "block-unwind-by-br-value", nil, arg{wa.I32, 9}) })
	t.Run("block-unwind-by-br_if:224", func(t *testing.T) { x0.assertReturnInvoke(t, "block-unwind-by-br_if", nil, arg{wa.I32, 9}) })
	t.Run("block-unwind-by-br_if-value:225", func(t *testing.T) { x0.assertReturnInvoke(t, "block-unwind-by-br_if-value", nil, arg{wa.I32, 9}) })
	t.Run("block-unwind-by-br_table:226", func(t *testing.T) { x0.assertReturnInvoke(t, "block-unwind-by-br_table", nil, arg{wa.I32, 9}) })
	t.Run("block-unwind-by-br_table-value:227", func(t *testing.T) { x0.assertReturnInvoke(t, "block-unwind-by-br_table-value", nil, arg{wa.I32, 9}) })
	t.Run("block-unwind-by-return:228", func(t *testing.T) { x0.assertReturnInvoke(t, "block-unwind-by-return", nil, arg{wa.I32, 9}) })
	t.Run("block-nested-unwind-by-unreachable:230", func(t *testing.T) {
		x0.assertTrap(t, "block-nested-unwind-by-unreachable", nil, arg{Type: wa.I32}, "unreachable")
	})
	t.Run("block-nested-unwind-by-br:231", func(t *testing.T) { x0.assertReturnInvoke(t, "block-nested-unwind-by-br", nil, arg{wa.I32, 9}) })
	t.Run("block-nested-unwind-by-br-value:232", func(t *testing.T) { x0.assertReturnInvoke(t, "block-nested-unwind-by-br-value", nil, arg{wa.I32, 9}) })
	t.Run("block-nested-unwind-by-br_if:233", func(t *testing.T) { x0.assertReturnInvoke(t, "block-nested-unwind-by-br_if", nil, arg{wa.I32, 9}) })
	t.Run("block-nested-unwind-by-br_if-value:234", func(t *testing.T) {
		x0.assertReturnInvoke(t, "block-nested-unwind-by-br_if-value", nil, arg{wa.I32, 9})
	})
	t.Run("block-nested-unwind-by-br_table:235", func(t *testing.T) { x0.assertReturnInvoke(t, "block-nested-unwind-by-br_table", nil, arg{wa.I32, 9}) })
	t.Run("block-nested-unwind-by-br_table-value:236", func(t *testing.T) {
		x0.assertReturnInvoke(t, "block-nested-unwind-by-br_table-value", nil, arg{wa.I32, 9})
	})
	t.Run("block-nested-unwind-by-return:237", func(t *testing.T) { x0.assertReturnInvoke(t, "block-nested-unwind-by-return", nil, arg{wa.I32, 9}) })
	t.Run("unary-after-unreachable:239", func(t *testing.T) { x0.assertTrap(t, "unary-after-unreachable", nil, arg{Type: wa.I32}, "unreachable") })
	t.Run("unary-after-br:240", func(t *testing.T) { x0.assertReturnInvoke(t, "unary-after-br", nil, arg{wa.I32, 9}) })
	t.Run("unary-after-br_if:241", func(t *testing.T) { x0.assertReturnInvoke(t, "unary-after-br_if", nil, arg{wa.I32, 9}) })
	t.Run("unary-after-br_table:242", func(t *testing.T) { x0.assertReturnInvoke(t, "unary-after-br_table", nil, arg{wa.I32, 9}) })
	t.Run("unary-after-return:243", func(t *testing.T) { x0.assertReturnInvoke(t, "unary-after-return", nil, arg{wa.I32, 9}) })
	t.Run("binary-after-unreachable:245", func(t *testing.T) {
		x0.assertTrap(t, "binary-after-unreachable", nil, arg{Type: wa.I32}, "unreachable")
	})
	t.Run("binary-after-br:246", func(t *testing.T) { x0.assertReturnInvoke(t, "binary-after-br", nil, arg{wa.I32, 9}) })
	t.Run("binary-after-br_if:247", func(t *testing.T) { x0.assertReturnInvoke(t, "binary-after-br_if", nil, arg{wa.I32, 9}) })
	t.Run("binary-after-br_table:248", func(t *testing.T) { x0.assertReturnInvoke(t, "binary-after-br_table", nil, arg{wa.I32, 9}) })
	t.Run("binary-after-return:249", func(t *testing.T) { x0.assertReturnInvoke(t, "binary-after-return", nil, arg{wa.I32, 9}) })
	t.Run("select-after-unreachable:251", func(t *testing.T) {
		x0.assertTrap(t, "select-after-unreachable", nil, arg{Type: wa.I32}, "unreachable")
	})
	t.Run("select-after-br:252", func(t *testing.T) { x0.assertReturnInvoke(t, "select-after-br", nil, arg{wa.I32, 9}) })
	t.Run("select-after-br_if:253", func(t *testing.T) { x0.assertReturnInvoke(t, "select-after-br_if", nil, arg{wa.I32, 9}) })
	t.Run("select-after-br_table:254", func(t *testing.T) { x0.assertReturnInvoke(t, "select-after-br_table", nil, arg{wa.I32, 9}) })
	t.Run("select-after-return:255", func(t *testing.T) { x0.assertReturnInvoke(t, "select-after-return", nil, arg{wa.I32, 9}) })
	t.Run("block-value-after-unreachable:257", func(t *testing.T) {
		x0.assertTrap(t, "block-value-after-unreachable", nil, arg{Type: wa.I32}, "unreachable")
	})
	t.Run("block-value-after-br:258", func(t *testing.T) { x0.assertReturnInvoke(t, "block-value-after-br", nil, arg{wa.I32, 9}) })
	t.Run("block-value-after-br_if:259", func(t *testing.T) { x0.assertReturnInvoke(t, "block-value-after-br_if", nil, arg{wa.I32, 9}) })
	t.Run("block-value-after-br_table:260", func(t *testing.T) { x0.assertReturnInvoke(t, "block-value-after-br_table", nil, arg{wa.I32, 9}) })
	t.Run("block-value-after-return:261", func(t *testing.T) { x0.assertReturnInvoke(t, "block-value-after-return", nil, arg{wa.I32, 9}) })
	t.Run("loop-value-after-unreachable:263", func(t *testing.T) {
		x0.assertTrap(t, "loop-value-after-unreachable", nil, arg{Type: wa.I32}, "unreachable")
	})
	t.Run("loop-value-after-br:264", func(t *testing.T) { x0.assertReturnInvoke(t, "loop-value-after-br", nil, arg{wa.I32, 9}) })
	t.Run("loop-value-after-br_if:265", func(t *testing.T) { x0.assertReturnInvoke(t, "loop-value-after-br_if", nil, arg{wa.I32, 9}) })
	t.Run("loop-value-after-br_table:266", func(t *testing.T) { x0.assertReturnInvoke(t, "loop-value-after-br_table", nil, arg{wa.I32, 9}) })
	t.Run("loop-value-after-return:267", func(t *testing.T) { x0.assertReturnInvoke(t, "loop-value-after-return", nil, arg{wa.I32, 9}) })
}

func Test_utf8_custom_section_id(t *testing.T) {
	t.Run("assert_malformed:7", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.0.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:17", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.1.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:27", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.2.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:37", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.3.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:47", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.4.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:57", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.5.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:69", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.6.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:79", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.7.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:89", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.8.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:101", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.9.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:111", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.10.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:121", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.11.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:131", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.12.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:141", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.13.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:151", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.14.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:161", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.15.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:171", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.16.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:181", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.17.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:191", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.18.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:201", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.19.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:211", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.20.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:223", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.21.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:233", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.22.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:243", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.23.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:253", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.24.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:263", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.25.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:275", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.26.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:285", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.27.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:295", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.28.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:305", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.29.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:315", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.30.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:325", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.31.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:335", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.32.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:345", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.33.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:355", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.34.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:365", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.35.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:375", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.36.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:385", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.37.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:395", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.38.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:405", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.39.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:415", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.40.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:425", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.41.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:435", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.42.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:445", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.43.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:455", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.44.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:465", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.45.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:475", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.46.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:485", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.47.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:495", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.48.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:505", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.49.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:515", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.50.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:525", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.51.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:535", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.52.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:545", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.53.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:555", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.54.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:565", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.55.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:575", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.56.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:585", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.57.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:597", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.58.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:607", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.59.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:617", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.60.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:627", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.61.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:637", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.62.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:647", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.63.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:657", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.64.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:667", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.65.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:677", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.66.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:687", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.67.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:697", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.68.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:707", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.69.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:717", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.70.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:727", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.71.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:737", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.72.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:747", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.73.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:757", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.74.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:767", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.75.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:777", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.76.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:787", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.77.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:797", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.78.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:807", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.79.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:817", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.80.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:827", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.81.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:839", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.82.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:849", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.83.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:859", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.84.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:869", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.85.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:879", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.86.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:889", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.87.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:899", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.88.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:911", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.89.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:921", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.90.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:931", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.91.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:941", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.92.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:951", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.93.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:961", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.94.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:971", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.95.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:981", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.96.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:991", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.97.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1001", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.98.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1011", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.99.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1021", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.100.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1031", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.101.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1041", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.102.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1051", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.103.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1061", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.104.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1071", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.105.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1081", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.106.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1091", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.107.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1101", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.108.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1111", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.109.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1121", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.110.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1131", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.111.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1141", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.112.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1151", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.113.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1163", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.114.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1173", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.115.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1183", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.116.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1193", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.117.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1203", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.118.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1213", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.119.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1223", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.120.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1233", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.121.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1243", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.122.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1253", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.123.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1263", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.124.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1273", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.125.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1283", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.126.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1293", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.127.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1303", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.128.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1313", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.129.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1325", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.130.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1335", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.131.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1345", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.132.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1355", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.133.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1365", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.134.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1375", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.135.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1385", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.136.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1395", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.137.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1405", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.138.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1415", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.139.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1425", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.140.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1435", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.141.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1445", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.142.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1455", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.143.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1465", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.144.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1475", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.145.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1487", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.146.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1497", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.147.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1507", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.148.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1517", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.149.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1527", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.150.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1537", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.151.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1547", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.152.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1557", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.153.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1567", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.154.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1579", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.155.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1589", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.156.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1601", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.157.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1611", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.158.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1621", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.159.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1631", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.160.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1641", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.161.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1651", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.162.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1661", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.163.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1671", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.164.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1681", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.165.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1691", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.166.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1701", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.167.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1713", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.168.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1723", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.169.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1735", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.170.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1745", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.171.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1755", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.172.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1765", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.173.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1775", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.174.wasm", "malformed UTF-8 encoding")
	})
	t.Run("assert_malformed:1785", func(t *testing.T) {
		assertMalformedSpec(t, "utf8-custom-section-id.175.wasm", "malformed UTF-8 encoding")
	})
}

func Test_utf8_import_field(t *testing.T) {
	t.Run("assert_malformed:7", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.0.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:22", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.1.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:37", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.2.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:52", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.3.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:67", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.4.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:82", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.5.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:99", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.6.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:114", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.7.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:129", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.8.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:146", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.9.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:161", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.10.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:176", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.11.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:191", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.12.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:206", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.13.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:221", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.14.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:236", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.15.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:251", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.16.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:266", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.17.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:281", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.18.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:296", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.19.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:311", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.20.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:328", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.21.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:343", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.22.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:358", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.23.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:373", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.24.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:388", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.25.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:405", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.26.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:420", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.27.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:435", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.28.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:450", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.29.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:465", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.30.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:480", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.31.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:495", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.32.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:510", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.33.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:525", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.34.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:540", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.35.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:555", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.36.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:570", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.37.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:585", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.38.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:600", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.39.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:615", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.40.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:630", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.41.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:645", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.42.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:660", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.43.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:675", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.44.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:690", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.45.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:705", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.46.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:720", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.47.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:735", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.48.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:750", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.49.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:765", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.50.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:780", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.51.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:795", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.52.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:810", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.53.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:825", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.54.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:840", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.55.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:855", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.56.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:870", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.57.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:887", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.58.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:902", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.59.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:917", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.60.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:932", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.61.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:947", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.62.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:962", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.63.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:977", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.64.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:992", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.65.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1007", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.66.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1022", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.67.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1037", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.68.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1052", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.69.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1067", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.70.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1082", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.71.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1097", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.72.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1112", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.73.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1127", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.74.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1142", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.75.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1157", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.76.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1172", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.77.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1187", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.78.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1202", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.79.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1217", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.80.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1232", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.81.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1249", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.82.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1264", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.83.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1279", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.84.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1294", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.85.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1309", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.86.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1324", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.87.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1339", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.88.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1356", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.89.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1371", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.90.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1386", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.91.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1401", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.92.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1416", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.93.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1431", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.94.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1446", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.95.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1461", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.96.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1476", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.97.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1491", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.98.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1506", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.99.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1521", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.100.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1536", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.101.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1551", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.102.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1566", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.103.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1581", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.104.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1596", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.105.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1611", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.106.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1626", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.107.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1641", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.108.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1656", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.109.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1671", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.110.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1686", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.111.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1701", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.112.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1716", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.113.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1733", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.114.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1748", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.115.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1763", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.116.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1778", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.117.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1793", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.118.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1808", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.119.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1823", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.120.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1838", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.121.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1853", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.122.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1868", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.123.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1883", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.124.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1898", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.125.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1913", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.126.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1928", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.127.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1943", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.128.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1958", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.129.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1975", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.130.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1990", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.131.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2005", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.132.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2020", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.133.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2035", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.134.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2050", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.135.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2065", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.136.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2080", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.137.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2095", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.138.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2110", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.139.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2125", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.140.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2140", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.141.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2155", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.142.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2170", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.143.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2185", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.144.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2200", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.145.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2217", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.146.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2232", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.147.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2247", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.148.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2262", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.149.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2277", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.150.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2292", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.151.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2307", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.152.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2322", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.153.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2337", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.154.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2354", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.155.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2369", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.156.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2386", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.157.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2401", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.158.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2416", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.159.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2431", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.160.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2446", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.161.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2461", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.162.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2476", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.163.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2491", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.164.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2506", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.165.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2521", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.166.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2536", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.167.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2553", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.168.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2568", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.169.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2585", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.170.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2600", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.171.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2615", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.172.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2630", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.173.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2645", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.174.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2660", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-field.175.wasm", "malformed UTF-8 encoding") })
}

func Test_utf8_import_module(t *testing.T) {
	t.Run("assert_malformed:7", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.0.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:22", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.1.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:37", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.2.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:52", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.3.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:67", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.4.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:82", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.5.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:99", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.6.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:114", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.7.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:129", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.8.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:146", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.9.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:161", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.10.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:176", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.11.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:191", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.12.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:206", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.13.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:221", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.14.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:236", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.15.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:251", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.16.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:266", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.17.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:281", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.18.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:296", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.19.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:311", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.20.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:328", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.21.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:343", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.22.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:358", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.23.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:373", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.24.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:388", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.25.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:405", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.26.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:420", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.27.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:435", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.28.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:450", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.29.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:465", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.30.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:480", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.31.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:495", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.32.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:510", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.33.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:525", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.34.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:540", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.35.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:555", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.36.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:570", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.37.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:585", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.38.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:600", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.39.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:615", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.40.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:630", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.41.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:645", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.42.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:660", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.43.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:675", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.44.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:690", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.45.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:705", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.46.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:720", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.47.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:735", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.48.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:750", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.49.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:765", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.50.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:780", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.51.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:795", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.52.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:810", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.53.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:825", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.54.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:840", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.55.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:855", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.56.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:870", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.57.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:887", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.58.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:902", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.59.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:917", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.60.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:932", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.61.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:947", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.62.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:962", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.63.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:977", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.64.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:992", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.65.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1007", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.66.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1022", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.67.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1037", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.68.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1052", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.69.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1067", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.70.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1082", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.71.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1097", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.72.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1112", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.73.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1127", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.74.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1142", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.75.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1157", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.76.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1172", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.77.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1187", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.78.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1202", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.79.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1217", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.80.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1232", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.81.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1249", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.82.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1264", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.83.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1279", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.84.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1294", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.85.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1309", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.86.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1324", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.87.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1339", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.88.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1356", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.89.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1371", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.90.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1386", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.91.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1401", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.92.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1416", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.93.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1431", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.94.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1446", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.95.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1461", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.96.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1476", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.97.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1491", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.98.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1506", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.99.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1521", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.100.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1536", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.101.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1551", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.102.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1566", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.103.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1581", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.104.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1596", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.105.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1611", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.106.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1626", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.107.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1641", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.108.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1656", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.109.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1671", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.110.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1686", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.111.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1701", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.112.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1716", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.113.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1733", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.114.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1748", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.115.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1763", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.116.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1778", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.117.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1793", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.118.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1808", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.119.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1823", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.120.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1838", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.121.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1853", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.122.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1868", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.123.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1883", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.124.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1898", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.125.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1913", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.126.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1928", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.127.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1943", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.128.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1958", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.129.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1975", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.130.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:1990", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.131.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2005", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.132.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2020", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.133.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2035", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.134.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2050", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.135.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2065", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.136.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2080", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.137.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2095", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.138.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2110", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.139.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2125", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.140.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2140", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.141.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2155", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.142.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2170", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.143.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2185", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.144.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2200", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.145.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2217", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.146.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2232", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.147.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2247", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.148.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2262", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.149.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2277", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.150.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2292", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.151.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2307", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.152.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2322", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.153.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2337", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.154.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2354", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.155.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2369", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.156.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2386", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.157.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2401", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.158.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2416", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.159.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2431", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.160.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2446", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.161.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2461", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.162.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2476", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.163.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2491", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.164.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2506", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.165.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2521", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.166.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2536", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.167.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2553", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.168.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2568", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.169.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2585", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.170.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2600", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.171.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2615", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.172.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2630", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.173.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2645", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.174.wasm", "malformed UTF-8 encoding") })
	t.Run("assert_malformed:2660", func(t *testing.T) { assertMalformedSpec(t, "utf8-import-module.175.wasm", "malformed UTF-8 encoding") })
}

func Test_utf8_invalid_encoding(t *testing.T) {
	t.Run("assert_malformed:1", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:2", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:3", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:4", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:5", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:6", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:7", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:8", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:9", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:10", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:11", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:12", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:13", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:14", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:15", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:16", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:17", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:18", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:19", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:20", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:21", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:22", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:23", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:24", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:25", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:26", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:27", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:28", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:29", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:30", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:31", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:32", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:33", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:34", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:35", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:36", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:37", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:38", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:39", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:40", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:41", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:42", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:43", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:44", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:45", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:46", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:47", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:48", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:49", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:50", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:51", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:52", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:53", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:54", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:55", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:56", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:57", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:58", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:59", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:60", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:61", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:62", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:63", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:64", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:65", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:66", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:67", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:68", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:69", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:70", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:71", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:72", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:73", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:74", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:75", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:76", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:77", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:78", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:79", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:80", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:81", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:82", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:83", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:84", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:85", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:86", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:87", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:88", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:89", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:90", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:91", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:92", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:93", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:94", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:95", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:96", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:97", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:98", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:99", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:100", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:101", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:102", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:103", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:104", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:105", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:106", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:107", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:108", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:109", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:110", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:111", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:112", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:113", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:114", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:115", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:116", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:117", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:118", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:119", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:120", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:121", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:122", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:123", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:124", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:125", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:126", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:127", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:128", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:129", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:130", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:131", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:132", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:133", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:134", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:135", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:136", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:137", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:138", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:139", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:140", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:141", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:142", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:143", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:144", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:145", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:146", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:147", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:148", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:149", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:150", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:151", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:152", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:153", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:154", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:155", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:156", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:157", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:158", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:159", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:160", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:161", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:162", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:163", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:164", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:165", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:166", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:167", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:168", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:169", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:170", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:171", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:172", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:173", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:174", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:175", func(t *testing.T) { t.Skip("text format not supported") })
	t.Run("assert_malformed:176", func(t *testing.T) { t.Skip("text format not supported") })
}
