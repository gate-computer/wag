// Copyright (c) 2021 Timo Savola. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package binary

import (
	"bytes"
	"reflect"
	"testing"
)

type spec struct {
	input  []byte
	expect any // nil means error.
}

func test(
	t *testing.T,
	f func(*bytes.Reader) (any, int, error),
	specs []spec,
) {
	t.Helper()

	for i, s := range specs {
		r := bytes.NewReader(append(s.input, []byte{0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80}...))

		inputLen := r.Len()

		result, n, err := f(r)
		if err != nil {
			result = nil
		}

		readLen := inputLen - r.Len()

		if n != readLen {
			t.Errorf("#%d: %#v: actually read %d bytes instead of the indicated %d", i, s.input, readLen, n)
		}

		if s.expect != nil {
			if err != nil {
				t.Errorf("#%d: %#v: expected value %v; got error: %v", i, s.input, s.expect, err)
			} else if !reflect.DeepEqual(result, s.expect) {
				t.Errorf("#%d: %#v: expected value %v; got value %v", i, s.input, s.expect, result)
			}
		} else {
			if err == nil {
				t.Errorf("#%d: %#v: expected error; got value %v", i, s.input, result)
			}
		}
	}
}

func TestVaruint1(t *testing.T) {
	f := func(r *bytes.Reader) (any, int, error) {
		return Varuint1(r)
	}

	test(t, f, []spec{
		{[]byte{0x00}, false},
		{[]byte{0x01}, true},
		{[]byte{0x02}, nil},
		{[]byte{0x03}, nil},
		{[]byte{0x7e}, nil},
		{[]byte{0x7f}, nil},
		{[]byte{0x80}, nil},
		{[]byte{0x81}, nil},
		{[]byte{0xfe}, nil},
		{[]byte{0xff}, nil},
	})
}

func TestVarint7(t *testing.T) {
	f := func(r *bytes.Reader) (any, int, error) {
		return Varint7(r)
	}

	test(t, f, []spec{
		{[]byte{0x00}, int8(0)},
		{[]byte{0x01}, int8(1)},
		{[]byte{0x3e}, int8(62)},
		{[]byte{0x3f}, int8(63)},
		{[]byte{0x40}, int8(-64)},
		{[]byte{0x41}, int8(-63)},
		{[]byte{0x7e}, int8(-2)},
		{[]byte{0x7f}, int8(-1)},
		{[]byte{0x80, 0x00}, nil},
		{[]byte{0x81, 0x00}, nil},
		{[]byte{0xfe, 0x00}, nil},
		{[]byte{0xff, 0x00}, nil},
	})
}

func TestVaruint32(t *testing.T) {
	f := func(r *bytes.Reader) (any, int, error) {
		return Varuint32(r)
	}

	test(t, f, []spec{
		{[]byte{0x00}, uint32(0)},
		{[]byte{0x01}, uint32(1)},
		{[]byte{0x7f}, uint32(127)},
		{[]byte{0x80, 0x01}, uint32(128)},
		{[]byte{0x81, 0x01}, uint32(129)},
		{[]byte{0x80, 0x02}, uint32(256)},
		{[]byte{0x81, 0x02}, uint32(257)},
		{[]byte{0xfe, 0xff, 0xff, 0xff, 0x0f}, uint32(0xfffffffe)},
		{[]byte{0xff, 0xff, 0xff, 0xff, 0x0f}, uint32(0xffffffff)},
		{[]byte{0xf0, 0xf0, 0xf0, 0xf0, 0x10}, nil},
		{[]byte{0xf0, 0xf0, 0xf0, 0xf0, 0xf0}, nil},
	})
}

func TestVarint32(t *testing.T) {
	f := func(r *bytes.Reader) (any, int, error) {
		return Varint32(r)
	}

	test(t, f, []spec{
		{[]byte{0x00}, int32(0)},
		{[]byte{0x01}, int32(1)},
		{[]byte{0x3e}, int32(62)},
		{[]byte{0x3f}, int32(63)},
		{[]byte{0x40}, int32(-64)},
		{[]byte{0x41}, int32(-63)},
		{[]byte{0x7e}, int32(-2)},
		{[]byte{0x7f}, int32(-1)},
		{[]byte{0x80, 0x00}, int32(0)},
		{[]byte{0x80, 0x01}, int32(128)},
		{[]byte{0x80, 0x3e}, int32(0x1f00)},
		{[]byte{0x80, 0x3f}, int32(0x1f80)},
		{[]byte{0x80, 0x40}, int32(-0x2000)},
		{[]byte{0x80, 0x41}, int32(-0x1f80)},
		{[]byte{0x80, 0x7e}, int32(-256)},
		{[]byte{0x80, 0x7f}, int32(-128)},
		{[]byte{0x81, 0x00}, int32(1)},
		{[]byte{0x81, 0x01}, int32(129)},
		{[]byte{0x81, 0x3e}, int32(0x1f01)},
		{[]byte{0x81, 0x3f}, int32(0x1f81)},
		{[]byte{0x81, 0x40}, int32(-0x1fff)},
		{[]byte{0x81, 0x41}, int32(-0x1f7f)},
		{[]byte{0x81, 0x7e}, int32(-255)},
		{[]byte{0x81, 0x7f}, int32(-127)},
		{[]byte{0xc0, 0x00}, int32(64)},
		{[]byte{0xc0, 0x01}, int32(192)},
		{[]byte{0xc0, 0x40}, int32(-0x1fc0)},
		{[]byte{0xc0, 0x41}, int32(-0x1f40)},
		{[]byte{0xc1, 0x00}, int32(65)},
		{[]byte{0xc1, 0x01}, int32(193)},
		{[]byte{0xc1, 0x40}, int32(-0x1fbf)},
		{[]byte{0xc1, 0x41}, int32(-0x1f3f)},
		{[]byte{0xff, 0x00}, int32(127)},
		{[]byte{0x80, 0x80, 0x80, 0x80, 0x06}, int32(0x60000000)},
		{[]byte{0x80, 0x80, 0x80, 0x80, 0x07}, int32(0x70000000)},
		{[]byte{0x80, 0x80, 0x80, 0x80, 0x08}, nil},
		{[]byte{0x80, 0x80, 0x80, 0x80, 0x09}, nil},
		{[]byte{0x80, 0x80, 0x80, 0x80, 0x76}, nil},
		{[]byte{0x80, 0x80, 0x80, 0x80, 0x77}, nil},
		{[]byte{0x80, 0x80, 0x80, 0x80, 0x78}, int32(-0x80000000)},
		{[]byte{0x80, 0x80, 0x80, 0x80, 0x79}, int32(-0x70000000)},
		{[]byte{0x81, 0x80, 0x80, 0x80, 0x06}, int32(0x60000001)},
		{[]byte{0x81, 0x80, 0x80, 0x80, 0x07}, int32(0x70000001)},
		{[]byte{0x81, 0x80, 0x80, 0x80, 0x08}, nil},
		{[]byte{0x81, 0x80, 0x80, 0x80, 0x09}, nil},
		{[]byte{0x81, 0x80, 0x80, 0x80, 0x76}, nil},
		{[]byte{0x81, 0x80, 0x80, 0x80, 0x77}, nil},
		{[]byte{0x81, 0x80, 0x80, 0x80, 0x78}, int32(-0x7fffffff)},
		{[]byte{0x81, 0x80, 0x80, 0x80, 0x79}, int32(-0x6fffffff)},
		{[]byte{0xfe, 0xff, 0xff, 0xff, 0x06}, int32(0x6ffffffe)},
		{[]byte{0xfe, 0xff, 0xff, 0xff, 0x07}, int32(0x7ffffffe)},
		{[]byte{0xfe, 0xff, 0xff, 0xff, 0x08}, nil},
		{[]byte{0xfe, 0xff, 0xff, 0xff, 0x09}, nil},
		{[]byte{0xfe, 0xff, 0xff, 0xff, 0x76}, nil},
		{[]byte{0xfe, 0xff, 0xff, 0xff, 0x77}, nil},
		{[]byte{0xfe, 0xff, 0xff, 0xff, 0x78}, int32(-0x70000002)},
		{[]byte{0xfe, 0xff, 0xff, 0xff, 0x79}, int32(-0x60000002)},
		{[]byte{0xff, 0xff, 0xff, 0xff, 0x06}, int32(0x6fffffff)},
		{[]byte{0xff, 0xff, 0xff, 0xff, 0x07}, int32(0x7fffffff)},
		{[]byte{0xff, 0xff, 0xff, 0xff, 0x08}, nil},
		{[]byte{0xff, 0xff, 0xff, 0xff, 0x09}, nil},
		{[]byte{0xff, 0xff, 0xff, 0xff, 0x76}, nil},
		{[]byte{0xff, 0xff, 0xff, 0xff, 0x77}, nil},
		{[]byte{0xff, 0xff, 0xff, 0xff, 0x78}, int32(-0x70000001)},
		{[]byte{0xff, 0xff, 0xff, 0xff, 0x79}, int32(-0x60000001)},
		{[]byte{0x80, 0x80, 0x80, 0x80, 0x80, 0x00}, nil},
		{[]byte{0xff, 0xff, 0xff, 0xff, 0xff, 0x00}, nil},
	})
}

func TestVarint64(t *testing.T) {
	f := func(r *bytes.Reader) (any, int, error) {
		return Varint64(r)
	}

	test(t, f, []spec{
		{[]byte{0x00}, int64(0)},
		{[]byte{0x01}, int64(1)},
		{[]byte{0x3e}, int64(62)},
		{[]byte{0x3f}, int64(63)},
		{[]byte{0x40}, int64(-64)},
		{[]byte{0x41}, int64(-63)},
		{[]byte{0x7e}, int64(-2)},
		{[]byte{0x7f}, int64(-1)},
		{[]byte{0x80, 0x00}, int64(0)},
		{[]byte{0x80, 0x01}, int64(128)},
		{[]byte{0x80, 0x3e}, int64(0x1f00)},
		{[]byte{0x80, 0x3f}, int64(0x1f80)},
		{[]byte{0x80, 0x40}, int64(-0x2000)},
		{[]byte{0x80, 0x41}, int64(-0x1f80)},
		{[]byte{0x80, 0x7e}, int64(-256)},
		{[]byte{0x80, 0x7f}, int64(-128)},
		{[]byte{0x81, 0x00}, int64(1)},
		{[]byte{0x81, 0x01}, int64(129)},
		{[]byte{0x81, 0x3e}, int64(0x1f01)},
		{[]byte{0x81, 0x3f}, int64(0x1f81)},
		{[]byte{0x81, 0x40}, int64(-0x1fff)},
		{[]byte{0x81, 0x41}, int64(-0x1f7f)},
		{[]byte{0x81, 0x7e}, int64(-255)},
		{[]byte{0x81, 0x7f}, int64(-127)},
		{[]byte{0xc0, 0x00}, int64(64)},
		{[]byte{0xc0, 0x01}, int64(192)},
		{[]byte{0xc0, 0x40}, int64(-0x1fc0)},
		{[]byte{0xc0, 0x41}, int64(-0x1f40)},
		{[]byte{0xc1, 0x00}, int64(65)},
		{[]byte{0xc1, 0x01}, int64(193)},
		{[]byte{0xc1, 0x40}, int64(-0x1fbf)},
		{[]byte{0xc1, 0x41}, int64(-0x1f3f)},
		{[]byte{0xff, 0x00}, int64(127)},
		{[]byte{0x80, 0x80, 0x80, 0x80, 0x06}, int64(0x60000000)},
		{[]byte{0x80, 0x80, 0x80, 0x80, 0x07}, int64(0x70000000)},
		{[]byte{0x80, 0x80, 0x80, 0x80, 0x08}, int64(0x80000000)},
		{[]byte{0x80, 0x80, 0x80, 0x80, 0x09}, int64(0x90000000)},
		{[]byte{0x80, 0x80, 0x80, 0x80, 0x76}, int64(-0xa0000000)},
		{[]byte{0x80, 0x80, 0x80, 0x80, 0x77}, int64(-0x90000000)},
		{[]byte{0x80, 0x80, 0x80, 0x80, 0x78}, int64(-0x80000000)},
		{[]byte{0x80, 0x80, 0x80, 0x80, 0x79}, int64(-0x70000000)},
		{[]byte{0x81, 0x80, 0x80, 0x80, 0x06}, int64(0x60000001)},
		{[]byte{0x81, 0x80, 0x80, 0x80, 0x07}, int64(0x70000001)},
		{[]byte{0x81, 0x80, 0x80, 0x80, 0x08}, int64(0x80000001)},
		{[]byte{0x81, 0x80, 0x80, 0x80, 0x09}, int64(0x90000001)},
		{[]byte{0x81, 0x80, 0x80, 0x80, 0x76}, int64(-0x9fffffff)},
		{[]byte{0x81, 0x80, 0x80, 0x80, 0x77}, int64(-0x8fffffff)},
		{[]byte{0x81, 0x80, 0x80, 0x80, 0x78}, int64(-0x7fffffff)},
		{[]byte{0x81, 0x80, 0x80, 0x80, 0x79}, int64(-0x6fffffff)},
		{[]byte{0xfe, 0xff, 0xff, 0xff, 0x06}, int64(0x6ffffffe)},
		{[]byte{0xfe, 0xff, 0xff, 0xff, 0x07}, int64(0x7ffffffe)},
		{[]byte{0xfe, 0xff, 0xff, 0xff, 0x08}, int64(0x8ffffffe)},
		{[]byte{0xfe, 0xff, 0xff, 0xff, 0x09}, int64(0x9ffffffe)},
		{[]byte{0xfe, 0xff, 0xff, 0xff, 0x76}, int64(-0x90000002)},
		{[]byte{0xfe, 0xff, 0xff, 0xff, 0x77}, int64(-0x80000002)},
		{[]byte{0xfe, 0xff, 0xff, 0xff, 0x78}, int64(-0x70000002)},
		{[]byte{0xfe, 0xff, 0xff, 0xff, 0x79}, int64(-0x60000002)},
		{[]byte{0xff, 0xff, 0xff, 0xff, 0x06}, int64(0x6fffffff)},
		{[]byte{0xff, 0xff, 0xff, 0xff, 0x07}, int64(0x7fffffff)},
		{[]byte{0xff, 0xff, 0xff, 0xff, 0x08}, int64(0x8fffffff)},
		{[]byte{0xff, 0xff, 0xff, 0xff, 0x09}, int64(0x9fffffff)},
		{[]byte{0xff, 0xff, 0xff, 0xff, 0x76}, int64(-0x90000001)},
		{[]byte{0xff, 0xff, 0xff, 0xff, 0x77}, int64(-0x80000001)},
		{[]byte{0xff, 0xff, 0xff, 0xff, 0x78}, int64(-0x70000001)},
		{[]byte{0xff, 0xff, 0xff, 0xff, 0x79}, int64(-0x60000001)},
		{[]byte{0x80, 0x80, 0x80, 0x80, 0x80, 0x00}, int64(0)},
		{[]byte{0xff, 0xff, 0xff, 0xff, 0xff, 0x00}, int64(0x7ffffffff)},
		{[]byte{0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01}, nil},
		{[]byte{0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7e}, nil},
		{[]byte{0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f}, int64(-0x8000000000000000)},
		{[]byte{0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80}, nil},
		{[]byte{0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01}, nil},
		{[]byte{0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7e}, nil},
		{[]byte{0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f}, int64(-0x7fffffffffffffff)},
		{[]byte{0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80}, nil},
		{[]byte{0x82, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01}, nil},
		{[]byte{0x82, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7e}, nil},
		{[]byte{0x82, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f}, int64(-0x7ffffffffffffffe)},
		{[]byte{0x82, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80}, nil},
		{[]byte{0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00}, int64(0x7ffffffffffffffe)},
		{[]byte{0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01}, nil},
		{[]byte{0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f}, nil},
		{[]byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00}, int64(0x7fffffffffffffff)},
		{[]byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01}, nil},
		{[]byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f}, nil},
		{[]byte{0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00}, nil},
		{[]byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00}, nil},
	})
}

func TestVaruint64(t *testing.T) {
	f := func(r *bytes.Reader) (any, int, error) {
		return Varuint64(r)
	}

	test(t, f, []spec{
		{[]byte{0x00}, uint64(0)},
		{[]byte{0x01}, uint64(1)},
		{[]byte{0x7f}, uint64(127)},
		{[]byte{0x80, 0x01}, uint64(128)},
		{[]byte{0x81, 0x01}, uint64(129)},
		{[]byte{0x80, 0x02}, uint64(256)},
		{[]byte{0x81, 0x02}, uint64(257)},
		{[]byte{0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01}, uint64(0xfffffffffffffffe)},
		{[]byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01}, uint64(0xffffffffffffffff)},
		{[]byte{0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x02}, nil},
		{[]byte{0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0}, nil},
	})
}
